// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: container.proto

#include "container.pb.h"
#include "container.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace containers {

static const char* ContainerService_method_names[] = {
  "/containers.ContainerService/Create",
  "/containers.ContainerService/Start",
  "/containers.ContainerService/RemoteStart",
  "/containers.ContainerService/Top",
  "/containers.ContainerService/Stop",
  "/containers.ContainerService/Kill",
  "/containers.ContainerService/Delete",
  "/containers.ContainerService/Pause",
  "/containers.ContainerService/Resume",
  "/containers.ContainerService/Inspect",
  "/containers.ContainerService/List",
  "/containers.ContainerService/Stats",
  "/containers.ContainerService/Wait",
  "/containers.ContainerService/Events",
  "/containers.ContainerService/Exec",
  "/containers.ContainerService/RemoteExec",
  "/containers.ContainerService/Version",
  "/containers.ContainerService/Info",
  "/containers.ContainerService/Update",
  "/containers.ContainerService/Attach",
  "/containers.ContainerService/Restart",
  "/containers.ContainerService/Export",
  "/containers.ContainerService/CopyFromContainer",
  "/containers.ContainerService/CopyToContainer",
  "/containers.ContainerService/Rename",
  "/containers.ContainerService/Logs",
  "/containers.ContainerService/Resize",
};

std::unique_ptr< ContainerService::Stub> ContainerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ContainerService::Stub> stub(new ContainerService::Stub(channel));
  return stub;
}

ContainerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(ContainerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Start_(ContainerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoteStart_(ContainerService_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Top_(ContainerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(ContainerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(ContainerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(ContainerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(ContainerService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Resume_(ContainerService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Inspect_(ContainerService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(ContainerService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stats_(ContainerService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Wait_(ContainerService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Events_(ContainerService_method_names[13], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Exec_(ContainerService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoteExec_(ContainerService_method_names[15], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Version_(ContainerService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Info_(ContainerService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(ContainerService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Attach_(ContainerService_method_names[19], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Restart_(ContainerService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Export_(ContainerService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CopyFromContainer_(ContainerService_method_names[22], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CopyToContainer_(ContainerService_method_names[23], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Rename_(ContainerService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(ContainerService_method_names[25], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Resize_(ContainerService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ContainerService::Stub::Create(::grpc::ClientContext* context, const ::containers::CreateRequest& request, ::containers::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ContainerService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::containers::CreateRequest* request, ::containers::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::containers::CreateRequest* request, ::containers::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::CreateResponse>* ContainerService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::containers::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::CreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::CreateResponse>* ContainerService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::containers::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::CreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status ContainerService::Stub::Start(::grpc::ClientContext* context, const ::containers::StartRequest& request, ::containers::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Start_, context, request, response);
}

void ContainerService::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::containers::StartRequest* request, ::containers::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::containers::StartRequest* request, ::containers::StartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::StartResponse>* ContainerService::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::containers::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StartResponse>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::StartResponse>* ContainerService::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::containers::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StartResponse>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, false);
}

::grpc::ClientReaderWriter< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>* ContainerService::Stub::RemoteStartRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>::Create(channel_.get(), rpcmethod_RemoteStart_, context);
}

void ContainerService::Stub::experimental_async::RemoteStart(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::containers::RemoteStartRequest,::containers::RemoteStartResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::containers::RemoteStartRequest,::containers::RemoteStartResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_RemoteStart_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>* ContainerService::Stub::AsyncRemoteStartRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>::Create(channel_.get(), cq, rpcmethod_RemoteStart_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>* ContainerService::Stub::PrepareAsyncRemoteStartRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>::Create(channel_.get(), cq, rpcmethod_RemoteStart_, context, false, nullptr);
}

::grpc::Status ContainerService::Stub::Top(::grpc::ClientContext* context, const ::containers::TopRequest& request, ::containers::TopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Top_, context, request, response);
}

void ContainerService::Stub::experimental_async::Top(::grpc::ClientContext* context, const ::containers::TopRequest* request, ::containers::TopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Top(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::TopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Top(::grpc::ClientContext* context, const ::containers::TopRequest* request, ::containers::TopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Top(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::TopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Top_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::TopResponse>* ContainerService::Stub::AsyncTopRaw(::grpc::ClientContext* context, const ::containers::TopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::TopResponse>::Create(channel_.get(), cq, rpcmethod_Top_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::TopResponse>* ContainerService::Stub::PrepareAsyncTopRaw(::grpc::ClientContext* context, const ::containers::TopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::TopResponse>::Create(channel_.get(), cq, rpcmethod_Top_, context, request, false);
}

::grpc::Status ContainerService::Stub::Stop(::grpc::ClientContext* context, const ::containers::StopRequest& request, ::containers::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void ContainerService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::containers::StopRequest* request, ::containers::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::containers::StopRequest* request, ::containers::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::StopResponse>* ContainerService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::containers::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::StopResponse>* ContainerService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::containers::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status ContainerService::Stub::Kill(::grpc::ClientContext* context, const ::containers::KillRequest& request, ::containers::KillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Kill_, context, request, response);
}

void ContainerService::Stub::experimental_async::Kill(::grpc::ClientContext* context, const ::containers::KillRequest* request, ::containers::KillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Kill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::KillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Kill(::grpc::ClientContext* context, const ::containers::KillRequest* request, ::containers::KillResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Kill(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::KillResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::KillResponse>* ContainerService::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::containers::KillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::KillResponse>::Create(channel_.get(), cq, rpcmethod_Kill_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::KillResponse>* ContainerService::Stub::PrepareAsyncKillRaw(::grpc::ClientContext* context, const ::containers::KillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::KillResponse>::Create(channel_.get(), cq, rpcmethod_Kill_, context, request, false);
}

::grpc::Status ContainerService::Stub::Delete(::grpc::ClientContext* context, const ::containers::DeleteRequest& request, ::containers::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void ContainerService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::containers::DeleteRequest* request, ::containers::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::containers::DeleteRequest* request, ::containers::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::DeleteResponse>* ContainerService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::containers::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::DeleteResponse>* ContainerService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::containers::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status ContainerService::Stub::Pause(::grpc::ClientContext* context, const ::containers::PauseRequest& request, ::containers::PauseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void ContainerService::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::containers::PauseRequest* request, ::containers::PauseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::PauseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::containers::PauseRequest* request, ::containers::PauseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::PauseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::PauseResponse>* ContainerService::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::containers::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::PauseResponse>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::PauseResponse>* ContainerService::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::containers::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::PauseResponse>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, false);
}

::grpc::Status ContainerService::Stub::Resume(::grpc::ClientContext* context, const ::containers::ResumeRequest& request, ::containers::ResumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Resume_, context, request, response);
}

void ContainerService::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::containers::ResumeRequest* request, ::containers::ResumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ResumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::containers::ResumeRequest* request, ::containers::ResumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ResumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::ResumeResponse>* ContainerService::Stub::AsyncResumeRaw(::grpc::ClientContext* context, const ::containers::ResumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ResumeResponse>::Create(channel_.get(), cq, rpcmethod_Resume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::ResumeResponse>* ContainerService::Stub::PrepareAsyncResumeRaw(::grpc::ClientContext* context, const ::containers::ResumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ResumeResponse>::Create(channel_.get(), cq, rpcmethod_Resume_, context, request, false);
}

::grpc::Status ContainerService::Stub::Inspect(::grpc::ClientContext* context, const ::containers::InspectContainerRequest& request, ::containers::InspectContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Inspect_, context, request, response);
}

void ContainerService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::containers::InspectContainerRequest* request, ::containers::InspectContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::InspectContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::containers::InspectContainerRequest* request, ::containers::InspectContainerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::InspectContainerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::InspectContainerResponse>* ContainerService::Stub::AsyncInspectRaw(::grpc::ClientContext* context, const ::containers::InspectContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::InspectContainerResponse>::Create(channel_.get(), cq, rpcmethod_Inspect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::InspectContainerResponse>* ContainerService::Stub::PrepareAsyncInspectRaw(::grpc::ClientContext* context, const ::containers::InspectContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::InspectContainerResponse>::Create(channel_.get(), cq, rpcmethod_Inspect_, context, request, false);
}

::grpc::Status ContainerService::Stub::List(::grpc::ClientContext* context, const ::containers::ListRequest& request, ::containers::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void ContainerService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::containers::ListRequest* request, ::containers::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::containers::ListRequest* request, ::containers::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::ListResponse>* ContainerService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::containers::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::ListResponse>* ContainerService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::containers::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status ContainerService::Stub::Stats(::grpc::ClientContext* context, const ::containers::StatsRequest& request, ::containers::StatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stats_, context, request, response);
}

void ContainerService::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::containers::StatsRequest* request, ::containers::StatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::containers::StatsRequest* request, ::containers::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::StatsResponse>* ContainerService::Stub::AsyncStatsRaw(::grpc::ClientContext* context, const ::containers::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StatsResponse>::Create(channel_.get(), cq, rpcmethod_Stats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::StatsResponse>* ContainerService::Stub::PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::containers::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::StatsResponse>::Create(channel_.get(), cq, rpcmethod_Stats_, context, request, false);
}

::grpc::Status ContainerService::Stub::Wait(::grpc::ClientContext* context, const ::containers::WaitRequest& request, ::containers::WaitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Wait_, context, request, response);
}

void ContainerService::Stub::experimental_async::Wait(::grpc::ClientContext* context, const ::containers::WaitRequest* request, ::containers::WaitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Wait_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Wait(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::WaitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Wait_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Wait(::grpc::ClientContext* context, const ::containers::WaitRequest* request, ::containers::WaitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Wait_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Wait(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::WaitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Wait_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::WaitResponse>* ContainerService::Stub::AsyncWaitRaw(::grpc::ClientContext* context, const ::containers::WaitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::WaitResponse>::Create(channel_.get(), cq, rpcmethod_Wait_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::WaitResponse>* ContainerService::Stub::PrepareAsyncWaitRaw(::grpc::ClientContext* context, const ::containers::WaitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::WaitResponse>::Create(channel_.get(), cq, rpcmethod_Wait_, context, request, false);
}

::grpc::ClientReader< ::containers::Event>* ContainerService::Stub::EventsRaw(::grpc::ClientContext* context, const ::containers::EventsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::containers::Event>::Create(channel_.get(), rpcmethod_Events_, context, request);
}

void ContainerService::Stub::experimental_async::Events(::grpc::ClientContext* context, ::containers::EventsRequest* request, ::grpc::experimental::ClientReadReactor< ::containers::Event>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::containers::Event>::Create(stub_->channel_.get(), stub_->rpcmethod_Events_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::containers::Event>* ContainerService::Stub::AsyncEventsRaw(::grpc::ClientContext* context, const ::containers::EventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::Event>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::containers::Event>* ContainerService::Stub::PrepareAsyncEventsRaw(::grpc::ClientContext* context, const ::containers::EventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::Event>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, false, nullptr);
}

::grpc::Status ContainerService::Stub::Exec(::grpc::ClientContext* context, const ::containers::ExecRequest& request, ::containers::ExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void ContainerService::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::containers::ExecRequest* request, ::containers::ExecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ExecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::containers::ExecRequest* request, ::containers::ExecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ExecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::ExecResponse>* ContainerService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::containers::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::ExecResponse>* ContainerService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::containers::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, false);
}

::grpc::ClientReaderWriter< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>* ContainerService::Stub::RemoteExecRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>::Create(channel_.get(), rpcmethod_RemoteExec_, context);
}

void ContainerService::Stub::experimental_async::RemoteExec(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::containers::RemoteExecRequest,::containers::RemoteExecResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::containers::RemoteExecRequest,::containers::RemoteExecResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_RemoteExec_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>* ContainerService::Stub::AsyncRemoteExecRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>::Create(channel_.get(), cq, rpcmethod_RemoteExec_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>* ContainerService::Stub::PrepareAsyncRemoteExecRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>::Create(channel_.get(), cq, rpcmethod_RemoteExec_, context, false, nullptr);
}

::grpc::Status ContainerService::Stub::Version(::grpc::ClientContext* context, const ::containers::VersionRequest& request, ::containers::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Version_, context, request, response);
}

void ContainerService::Stub::experimental_async::Version(::grpc::ClientContext* context, const ::containers::VersionRequest* request, ::containers::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Version(::grpc::ClientContext* context, const ::containers::VersionRequest* request, ::containers::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::VersionResponse>* ContainerService::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::containers::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::VersionResponse>::Create(channel_.get(), cq, rpcmethod_Version_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::VersionResponse>* ContainerService::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::containers::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::VersionResponse>::Create(channel_.get(), cq, rpcmethod_Version_, context, request, false);
}

::grpc::Status ContainerService::Stub::Info(::grpc::ClientContext* context, const ::containers::InfoRequest& request, ::containers::InfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Info_, context, request, response);
}

void ContainerService::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::containers::InfoRequest* request, ::containers::InfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::InfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::containers::InfoRequest* request, ::containers::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::InfoResponse>* ContainerService::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::containers::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::InfoResponse>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::InfoResponse>* ContainerService::Stub::PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::containers::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::InfoResponse>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, false);
}

::grpc::Status ContainerService::Stub::Update(::grpc::ClientContext* context, const ::containers::UpdateRequest& request, ::containers::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void ContainerService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::containers::UpdateRequest* request, ::containers::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::containers::UpdateRequest* request, ::containers::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::UpdateResponse>* ContainerService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::containers::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::UpdateResponse>* ContainerService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::containers::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::ClientReaderWriter< ::containers::AttachRequest, ::containers::AttachResponse>* ContainerService::Stub::AttachRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::containers::AttachRequest, ::containers::AttachResponse>::Create(channel_.get(), rpcmethod_Attach_, context);
}

void ContainerService::Stub::experimental_async::Attach(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::containers::AttachRequest,::containers::AttachResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::containers::AttachRequest,::containers::AttachResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Attach_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::containers::AttachRequest, ::containers::AttachResponse>* ContainerService::Stub::AsyncAttachRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::AttachRequest, ::containers::AttachResponse>::Create(channel_.get(), cq, rpcmethod_Attach_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::containers::AttachRequest, ::containers::AttachResponse>* ContainerService::Stub::PrepareAsyncAttachRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::AttachRequest, ::containers::AttachResponse>::Create(channel_.get(), cq, rpcmethod_Attach_, context, false, nullptr);
}

::grpc::Status ContainerService::Stub::Restart(::grpc::ClientContext* context, const ::containers::RestartRequest& request, ::containers::RestartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Restart_, context, request, response);
}

void ContainerService::Stub::experimental_async::Restart(::grpc::ClientContext* context, const ::containers::RestartRequest* request, ::containers::RestartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Restart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::RestartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Restart(::grpc::ClientContext* context, const ::containers::RestartRequest* request, ::containers::RestartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Restart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::RestartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Restart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::RestartResponse>* ContainerService::Stub::AsyncRestartRaw(::grpc::ClientContext* context, const ::containers::RestartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::RestartResponse>::Create(channel_.get(), cq, rpcmethod_Restart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::RestartResponse>* ContainerService::Stub::PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::containers::RestartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::RestartResponse>::Create(channel_.get(), cq, rpcmethod_Restart_, context, request, false);
}

::grpc::Status ContainerService::Stub::Export(::grpc::ClientContext* context, const ::containers::ExportRequest& request, ::containers::ExportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Export_, context, request, response);
}

void ContainerService::Stub::experimental_async::Export(::grpc::ClientContext* context, const ::containers::ExportRequest* request, ::containers::ExportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Export_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Export(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ExportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Export_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Export(::grpc::ClientContext* context, const ::containers::ExportRequest* request, ::containers::ExportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Export_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Export(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ExportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Export_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::ExportResponse>* ContainerService::Stub::AsyncExportRaw(::grpc::ClientContext* context, const ::containers::ExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ExportResponse>::Create(channel_.get(), cq, rpcmethod_Export_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::ExportResponse>* ContainerService::Stub::PrepareAsyncExportRaw(::grpc::ClientContext* context, const ::containers::ExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ExportResponse>::Create(channel_.get(), cq, rpcmethod_Export_, context, request, false);
}

::grpc::ClientReader< ::containers::CopyFromContainerResponse>* ContainerService::Stub::CopyFromContainerRaw(::grpc::ClientContext* context, const ::containers::CopyFromContainerRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::containers::CopyFromContainerResponse>::Create(channel_.get(), rpcmethod_CopyFromContainer_, context, request);
}

void ContainerService::Stub::experimental_async::CopyFromContainer(::grpc::ClientContext* context, ::containers::CopyFromContainerRequest* request, ::grpc::experimental::ClientReadReactor< ::containers::CopyFromContainerResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::containers::CopyFromContainerResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CopyFromContainer_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::containers::CopyFromContainerResponse>* ContainerService::Stub::AsyncCopyFromContainerRaw(::grpc::ClientContext* context, const ::containers::CopyFromContainerRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::CopyFromContainerResponse>::Create(channel_.get(), cq, rpcmethod_CopyFromContainer_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::containers::CopyFromContainerResponse>* ContainerService::Stub::PrepareAsyncCopyFromContainerRaw(::grpc::ClientContext* context, const ::containers::CopyFromContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::CopyFromContainerResponse>::Create(channel_.get(), cq, rpcmethod_CopyFromContainer_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>* ContainerService::Stub::CopyToContainerRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>::Create(channel_.get(), rpcmethod_CopyToContainer_, context);
}

void ContainerService::Stub::experimental_async::CopyToContainer(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::containers::CopyToContainerRequest,::containers::CopyToContainerResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::containers::CopyToContainerRequest,::containers::CopyToContainerResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CopyToContainer_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>* ContainerService::Stub::AsyncCopyToContainerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>::Create(channel_.get(), cq, rpcmethod_CopyToContainer_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>* ContainerService::Stub::PrepareAsyncCopyToContainerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>::Create(channel_.get(), cq, rpcmethod_CopyToContainer_, context, false, nullptr);
}

::grpc::Status ContainerService::Stub::Rename(::grpc::ClientContext* context, const ::containers::RenameRequest& request, ::containers::RenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void ContainerService::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::containers::RenameRequest* request, ::containers::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::containers::RenameRequest* request, ::containers::RenameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Rename(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::RenameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::RenameResponse>* ContainerService::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::containers::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::RenameResponse>::Create(channel_.get(), cq, rpcmethod_Rename_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::RenameResponse>* ContainerService::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::containers::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::RenameResponse>::Create(channel_.get(), cq, rpcmethod_Rename_, context, request, false);
}

::grpc::ClientReader< ::containers::LogsResponse>* ContainerService::Stub::LogsRaw(::grpc::ClientContext* context, const ::containers::LogsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::containers::LogsResponse>::Create(channel_.get(), rpcmethod_Logs_, context, request);
}

void ContainerService::Stub::experimental_async::Logs(::grpc::ClientContext* context, ::containers::LogsRequest* request, ::grpc::experimental::ClientReadReactor< ::containers::LogsResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::containers::LogsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::containers::LogsResponse>* ContainerService::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::containers::LogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::LogsResponse>::Create(channel_.get(), cq, rpcmethod_Logs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::containers::LogsResponse>* ContainerService::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::containers::LogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containers::LogsResponse>::Create(channel_.get(), cq, rpcmethod_Logs_, context, request, false, nullptr);
}

::grpc::Status ContainerService::Stub::Resize(::grpc::ClientContext* context, const ::containers::ResizeRequest& request, ::containers::ResizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Resize_, context, request, response);
}

void ContainerService::Stub::experimental_async::Resize(::grpc::ClientContext* context, const ::containers::ResizeRequest* request, ::containers::ResizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resize_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Resize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ResizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resize_, context, request, response, std::move(f));
}

void ContainerService::Stub::experimental_async::Resize(::grpc::ClientContext* context, const ::containers::ResizeRequest* request, ::containers::ResizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resize_, context, request, response, reactor);
}

void ContainerService::Stub::experimental_async::Resize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::containers::ResizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::containers::ResizeResponse>* ContainerService::Stub::AsyncResizeRaw(::grpc::ClientContext* context, const ::containers::ResizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ResizeResponse>::Create(channel_.get(), cq, rpcmethod_Resize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::containers::ResizeResponse>* ContainerService::Stub::PrepareAsyncResizeRaw(::grpc::ClientContext* context, const ::containers::ResizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::containers::ResizeResponse>::Create(channel_.get(), cq, rpcmethod_Resize_, context, request, false);
}

ContainerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::CreateRequest, ::containers::CreateResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::CreateRequest* req,
             ::containers::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::StartRequest, ::containers::StartResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::StartRequest* req,
             ::containers::StartResponse* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ContainerService::Service, ::containers::RemoteStartRequest, ::containers::RemoteStartResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::containers::RemoteStartResponse,
             ::containers::RemoteStartRequest>* stream) {
               return service->RemoteStart(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::TopRequest, ::containers::TopResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::TopRequest* req,
             ::containers::TopResponse* resp) {
               return service->Top(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::StopRequest, ::containers::StopResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::StopRequest* req,
             ::containers::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::KillRequest, ::containers::KillResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::KillRequest* req,
             ::containers::KillResponse* resp) {
               return service->Kill(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::DeleteRequest, ::containers::DeleteResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::DeleteRequest* req,
             ::containers::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::PauseRequest, ::containers::PauseResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::PauseRequest* req,
             ::containers::PauseResponse* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::ResumeRequest, ::containers::ResumeResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::ResumeRequest* req,
             ::containers::ResumeResponse* resp) {
               return service->Resume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::InspectContainerRequest, ::containers::InspectContainerResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::InspectContainerRequest* req,
             ::containers::InspectContainerResponse* resp) {
               return service->Inspect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::ListRequest, ::containers::ListResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::ListRequest* req,
             ::containers::ListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::StatsRequest, ::containers::StatsResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::StatsRequest* req,
             ::containers::StatsResponse* resp) {
               return service->Stats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::WaitRequest, ::containers::WaitResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::WaitRequest* req,
             ::containers::WaitResponse* resp) {
               return service->Wait(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ContainerService::Service, ::containers::EventsRequest, ::containers::Event>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::EventsRequest* req,
             ::grpc_impl::ServerWriter<::containers::Event>* writer) {
               return service->Events(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::ExecRequest, ::containers::ExecResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::ExecRequest* req,
             ::containers::ExecResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[15],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ContainerService::Service, ::containers::RemoteExecRequest, ::containers::RemoteExecResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::containers::RemoteExecResponse,
             ::containers::RemoteExecRequest>* stream) {
               return service->RemoteExec(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::VersionRequest, ::containers::VersionResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::VersionRequest* req,
             ::containers::VersionResponse* resp) {
               return service->Version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::InfoRequest, ::containers::InfoResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::InfoRequest* req,
             ::containers::InfoResponse* resp) {
               return service->Info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::UpdateRequest, ::containers::UpdateResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::UpdateRequest* req,
             ::containers::UpdateResponse* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[19],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ContainerService::Service, ::containers::AttachRequest, ::containers::AttachResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::containers::AttachResponse,
             ::containers::AttachRequest>* stream) {
               return service->Attach(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::RestartRequest, ::containers::RestartResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::RestartRequest* req,
             ::containers::RestartResponse* resp) {
               return service->Restart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::ExportRequest, ::containers::ExportResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::ExportRequest* req,
             ::containers::ExportResponse* resp) {
               return service->Export(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ContainerService::Service, ::containers::CopyFromContainerRequest, ::containers::CopyFromContainerResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::CopyFromContainerRequest* req,
             ::grpc_impl::ServerWriter<::containers::CopyFromContainerResponse>* writer) {
               return service->CopyFromContainer(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[23],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ContainerService::Service, ::containers::CopyToContainerRequest, ::containers::CopyToContainerResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::containers::CopyToContainerResponse,
             ::containers::CopyToContainerRequest>* stream) {
               return service->CopyToContainer(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::RenameRequest, ::containers::RenameResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::RenameRequest* req,
             ::containers::RenameResponse* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[25],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ContainerService::Service, ::containers::LogsRequest, ::containers::LogsResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::LogsRequest* req,
             ::grpc_impl::ServerWriter<::containers::LogsResponse>* writer) {
               return service->Logs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::containers::ResizeRequest, ::containers::ResizeResponse>(
          [](ContainerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::containers::ResizeRequest* req,
             ::containers::ResizeResponse* resp) {
               return service->Resize(ctx, req, resp);
             }, this)));
}

ContainerService::Service::~Service() {
}

::grpc::Status ContainerService::Service::Create(::grpc::ServerContext* context, const ::containers::CreateRequest* request, ::containers::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Start(::grpc::ServerContext* context, const ::containers::StartRequest* request, ::containers::StartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::RemoteStart(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::containers::RemoteStartResponse, ::containers::RemoteStartRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Top(::grpc::ServerContext* context, const ::containers::TopRequest* request, ::containers::TopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Stop(::grpc::ServerContext* context, const ::containers::StopRequest* request, ::containers::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Kill(::grpc::ServerContext* context, const ::containers::KillRequest* request, ::containers::KillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Delete(::grpc::ServerContext* context, const ::containers::DeleteRequest* request, ::containers::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Pause(::grpc::ServerContext* context, const ::containers::PauseRequest* request, ::containers::PauseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Resume(::grpc::ServerContext* context, const ::containers::ResumeRequest* request, ::containers::ResumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Inspect(::grpc::ServerContext* context, const ::containers::InspectContainerRequest* request, ::containers::InspectContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::List(::grpc::ServerContext* context, const ::containers::ListRequest* request, ::containers::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Stats(::grpc::ServerContext* context, const ::containers::StatsRequest* request, ::containers::StatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Wait(::grpc::ServerContext* context, const ::containers::WaitRequest* request, ::containers::WaitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Events(::grpc::ServerContext* context, const ::containers::EventsRequest* request, ::grpc::ServerWriter< ::containers::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Exec(::grpc::ServerContext* context, const ::containers::ExecRequest* request, ::containers::ExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::RemoteExec(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::containers::RemoteExecResponse, ::containers::RemoteExecRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Version(::grpc::ServerContext* context, const ::containers::VersionRequest* request, ::containers::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Info(::grpc::ServerContext* context, const ::containers::InfoRequest* request, ::containers::InfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Update(::grpc::ServerContext* context, const ::containers::UpdateRequest* request, ::containers::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Attach(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::containers::AttachResponse, ::containers::AttachRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Restart(::grpc::ServerContext* context, const ::containers::RestartRequest* request, ::containers::RestartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Export(::grpc::ServerContext* context, const ::containers::ExportRequest* request, ::containers::ExportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::CopyFromContainer(::grpc::ServerContext* context, const ::containers::CopyFromContainerRequest* request, ::grpc::ServerWriter< ::containers::CopyFromContainerResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::CopyToContainer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::containers::CopyToContainerResponse, ::containers::CopyToContainerRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Rename(::grpc::ServerContext* context, const ::containers::RenameRequest* request, ::containers::RenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Logs(::grpc::ServerContext* context, const ::containers::LogsRequest* request, ::grpc::ServerWriter< ::containers::LogsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::Resize(::grpc::ServerContext* context, const ::containers::ResizeRequest* request, ::containers::ResizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace containers

