// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_container_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_container_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_container_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_container_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[58]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_container_2eproto;
namespace containers {
class AttachRequest;
class AttachRequestDefaultTypeInternal;
extern AttachRequestDefaultTypeInternal _AttachRequest_default_instance_;
class AttachResponse;
class AttachResponseDefaultTypeInternal;
extern AttachResponseDefaultTypeInternal _AttachResponse_default_instance_;
class Container;
class ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class Container_info;
class Container_infoDefaultTypeInternal;
extern Container_infoDefaultTypeInternal _Container_info_default_instance_;
class CopyFromContainerRequest;
class CopyFromContainerRequestDefaultTypeInternal;
extern CopyFromContainerRequestDefaultTypeInternal _CopyFromContainerRequest_default_instance_;
class CopyFromContainerResponse;
class CopyFromContainerResponseDefaultTypeInternal;
extern CopyFromContainerResponseDefaultTypeInternal _CopyFromContainerResponse_default_instance_;
class CopyToContainerRequest;
class CopyToContainerRequestDefaultTypeInternal;
extern CopyToContainerRequestDefaultTypeInternal _CopyToContainerRequest_default_instance_;
class CopyToContainerResponse;
class CopyToContainerResponseDefaultTypeInternal;
extern CopyToContainerResponseDefaultTypeInternal _CopyToContainerResponse_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
class CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_AnnotationsEntry_DoNotUse;
class Event_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Event_AnnotationsEntry_DoNotUseDefaultTypeInternal _Event_AnnotationsEntry_DoNotUse_default_instance_;
class EventsRequest;
class EventsRequestDefaultTypeInternal;
extern EventsRequestDefaultTypeInternal _EventsRequest_default_instance_;
class ExecRequest;
class ExecRequestDefaultTypeInternal;
extern ExecRequestDefaultTypeInternal _ExecRequest_default_instance_;
class ExecResponse;
class ExecResponseDefaultTypeInternal;
extern ExecResponseDefaultTypeInternal _ExecResponse_default_instance_;
class ExportRequest;
class ExportRequestDefaultTypeInternal;
extern ExportRequestDefaultTypeInternal _ExportRequest_default_instance_;
class ExportResponse;
class ExportResponseDefaultTypeInternal;
extern ExportResponseDefaultTypeInternal _ExportResponse_default_instance_;
class InfoRequest;
class InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
class InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class InspectContainerRequest;
class InspectContainerRequestDefaultTypeInternal;
extern InspectContainerRequestDefaultTypeInternal _InspectContainerRequest_default_instance_;
class InspectContainerResponse;
class InspectContainerResponseDefaultTypeInternal;
extern InspectContainerResponseDefaultTypeInternal _InspectContainerResponse_default_instance_;
class KillRequest;
class KillRequestDefaultTypeInternal;
extern KillRequestDefaultTypeInternal _KillRequest_default_instance_;
class KillResponse;
class KillResponseDefaultTypeInternal;
extern KillResponseDefaultTypeInternal _KillResponse_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListRequest_FiltersEntry_DoNotUse;
class ListRequest_FiltersEntry_DoNotUseDefaultTypeInternal;
extern ListRequest_FiltersEntry_DoNotUseDefaultTypeInternal _ListRequest_FiltersEntry_DoNotUse_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class LogsRequest;
class LogsRequestDefaultTypeInternal;
extern LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
class LogsResponse;
class LogsResponseDefaultTypeInternal;
extern LogsResponseDefaultTypeInternal _LogsResponse_default_instance_;
class PauseRequest;
class PauseRequestDefaultTypeInternal;
extern PauseRequestDefaultTypeInternal _PauseRequest_default_instance_;
class PauseResponse;
class PauseResponseDefaultTypeInternal;
extern PauseResponseDefaultTypeInternal _PauseResponse_default_instance_;
class RemoteExecRequest;
class RemoteExecRequestDefaultTypeInternal;
extern RemoteExecRequestDefaultTypeInternal _RemoteExecRequest_default_instance_;
class RemoteExecResponse;
class RemoteExecResponseDefaultTypeInternal;
extern RemoteExecResponseDefaultTypeInternal _RemoteExecResponse_default_instance_;
class RemoteStartRequest;
class RemoteStartRequestDefaultTypeInternal;
extern RemoteStartRequestDefaultTypeInternal _RemoteStartRequest_default_instance_;
class RemoteStartResponse;
class RemoteStartResponseDefaultTypeInternal;
extern RemoteStartResponseDefaultTypeInternal _RemoteStartResponse_default_instance_;
class RenameRequest;
class RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
class RenameResponse;
class RenameResponseDefaultTypeInternal;
extern RenameResponseDefaultTypeInternal _RenameResponse_default_instance_;
class ResizeRequest;
class ResizeRequestDefaultTypeInternal;
extern ResizeRequestDefaultTypeInternal _ResizeRequest_default_instance_;
class ResizeResponse;
class ResizeResponseDefaultTypeInternal;
extern ResizeResponseDefaultTypeInternal _ResizeResponse_default_instance_;
class RestartRequest;
class RestartRequestDefaultTypeInternal;
extern RestartRequestDefaultTypeInternal _RestartRequest_default_instance_;
class RestartResponse;
class RestartResponseDefaultTypeInternal;
extern RestartResponseDefaultTypeInternal _RestartResponse_default_instance_;
class ResumeRequest;
class ResumeRequestDefaultTypeInternal;
extern ResumeRequestDefaultTypeInternal _ResumeRequest_default_instance_;
class ResumeResponse;
class ResumeResponseDefaultTypeInternal;
extern ResumeResponseDefaultTypeInternal _ResumeResponse_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
class StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StatsRequest;
class StatsRequestDefaultTypeInternal;
extern StatsRequestDefaultTypeInternal _StatsRequest_default_instance_;
class StatsResponse;
class StatsResponseDefaultTypeInternal;
extern StatsResponseDefaultTypeInternal _StatsResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class TopRequest;
class TopRequestDefaultTypeInternal;
extern TopRequestDefaultTypeInternal _TopRequest_default_instance_;
class TopResponse;
class TopResponseDefaultTypeInternal;
extern TopResponseDefaultTypeInternal _TopResponse_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
class WaitRequest;
class WaitRequestDefaultTypeInternal;
extern WaitRequestDefaultTypeInternal _WaitRequest_default_instance_;
class WaitResponse;
class WaitResponseDefaultTypeInternal;
extern WaitResponseDefaultTypeInternal _WaitResponse_default_instance_;
}  // namespace containers
PROTOBUF_NAMESPACE_OPEN
template<> ::containers::AttachRequest* Arena::CreateMaybeMessage<::containers::AttachRequest>(Arena*);
template<> ::containers::AttachResponse* Arena::CreateMaybeMessage<::containers::AttachResponse>(Arena*);
template<> ::containers::Container* Arena::CreateMaybeMessage<::containers::Container>(Arena*);
template<> ::containers::Container_info* Arena::CreateMaybeMessage<::containers::Container_info>(Arena*);
template<> ::containers::CopyFromContainerRequest* Arena::CreateMaybeMessage<::containers::CopyFromContainerRequest>(Arena*);
template<> ::containers::CopyFromContainerResponse* Arena::CreateMaybeMessage<::containers::CopyFromContainerResponse>(Arena*);
template<> ::containers::CopyToContainerRequest* Arena::CreateMaybeMessage<::containers::CopyToContainerRequest>(Arena*);
template<> ::containers::CopyToContainerResponse* Arena::CreateMaybeMessage<::containers::CopyToContainerResponse>(Arena*);
template<> ::containers::CreateRequest* Arena::CreateMaybeMessage<::containers::CreateRequest>(Arena*);
template<> ::containers::CreateResponse* Arena::CreateMaybeMessage<::containers::CreateResponse>(Arena*);
template<> ::containers::DeleteRequest* Arena::CreateMaybeMessage<::containers::DeleteRequest>(Arena*);
template<> ::containers::DeleteResponse* Arena::CreateMaybeMessage<::containers::DeleteResponse>(Arena*);
template<> ::containers::Event* Arena::CreateMaybeMessage<::containers::Event>(Arena*);
template<> ::containers::Event_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::containers::Event_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::containers::EventsRequest* Arena::CreateMaybeMessage<::containers::EventsRequest>(Arena*);
template<> ::containers::ExecRequest* Arena::CreateMaybeMessage<::containers::ExecRequest>(Arena*);
template<> ::containers::ExecResponse* Arena::CreateMaybeMessage<::containers::ExecResponse>(Arena*);
template<> ::containers::ExportRequest* Arena::CreateMaybeMessage<::containers::ExportRequest>(Arena*);
template<> ::containers::ExportResponse* Arena::CreateMaybeMessage<::containers::ExportResponse>(Arena*);
template<> ::containers::InfoRequest* Arena::CreateMaybeMessage<::containers::InfoRequest>(Arena*);
template<> ::containers::InfoResponse* Arena::CreateMaybeMessage<::containers::InfoResponse>(Arena*);
template<> ::containers::InspectContainerRequest* Arena::CreateMaybeMessage<::containers::InspectContainerRequest>(Arena*);
template<> ::containers::InspectContainerResponse* Arena::CreateMaybeMessage<::containers::InspectContainerResponse>(Arena*);
template<> ::containers::KillRequest* Arena::CreateMaybeMessage<::containers::KillRequest>(Arena*);
template<> ::containers::KillResponse* Arena::CreateMaybeMessage<::containers::KillResponse>(Arena*);
template<> ::containers::ListRequest* Arena::CreateMaybeMessage<::containers::ListRequest>(Arena*);
template<> ::containers::ListRequest_FiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::containers::ListRequest_FiltersEntry_DoNotUse>(Arena*);
template<> ::containers::ListResponse* Arena::CreateMaybeMessage<::containers::ListResponse>(Arena*);
template<> ::containers::LogsRequest* Arena::CreateMaybeMessage<::containers::LogsRequest>(Arena*);
template<> ::containers::LogsResponse* Arena::CreateMaybeMessage<::containers::LogsResponse>(Arena*);
template<> ::containers::PauseRequest* Arena::CreateMaybeMessage<::containers::PauseRequest>(Arena*);
template<> ::containers::PauseResponse* Arena::CreateMaybeMessage<::containers::PauseResponse>(Arena*);
template<> ::containers::RemoteExecRequest* Arena::CreateMaybeMessage<::containers::RemoteExecRequest>(Arena*);
template<> ::containers::RemoteExecResponse* Arena::CreateMaybeMessage<::containers::RemoteExecResponse>(Arena*);
template<> ::containers::RemoteStartRequest* Arena::CreateMaybeMessage<::containers::RemoteStartRequest>(Arena*);
template<> ::containers::RemoteStartResponse* Arena::CreateMaybeMessage<::containers::RemoteStartResponse>(Arena*);
template<> ::containers::RenameRequest* Arena::CreateMaybeMessage<::containers::RenameRequest>(Arena*);
template<> ::containers::RenameResponse* Arena::CreateMaybeMessage<::containers::RenameResponse>(Arena*);
template<> ::containers::ResizeRequest* Arena::CreateMaybeMessage<::containers::ResizeRequest>(Arena*);
template<> ::containers::ResizeResponse* Arena::CreateMaybeMessage<::containers::ResizeResponse>(Arena*);
template<> ::containers::RestartRequest* Arena::CreateMaybeMessage<::containers::RestartRequest>(Arena*);
template<> ::containers::RestartResponse* Arena::CreateMaybeMessage<::containers::RestartResponse>(Arena*);
template<> ::containers::ResumeRequest* Arena::CreateMaybeMessage<::containers::ResumeRequest>(Arena*);
template<> ::containers::ResumeResponse* Arena::CreateMaybeMessage<::containers::ResumeResponse>(Arena*);
template<> ::containers::StartRequest* Arena::CreateMaybeMessage<::containers::StartRequest>(Arena*);
template<> ::containers::StartResponse* Arena::CreateMaybeMessage<::containers::StartResponse>(Arena*);
template<> ::containers::StatsRequest* Arena::CreateMaybeMessage<::containers::StatsRequest>(Arena*);
template<> ::containers::StatsResponse* Arena::CreateMaybeMessage<::containers::StatsResponse>(Arena*);
template<> ::containers::StopRequest* Arena::CreateMaybeMessage<::containers::StopRequest>(Arena*);
template<> ::containers::StopResponse* Arena::CreateMaybeMessage<::containers::StopResponse>(Arena*);
template<> ::containers::TopRequest* Arena::CreateMaybeMessage<::containers::TopRequest>(Arena*);
template<> ::containers::TopResponse* Arena::CreateMaybeMessage<::containers::TopResponse>(Arena*);
template<> ::containers::UpdateRequest* Arena::CreateMaybeMessage<::containers::UpdateRequest>(Arena*);
template<> ::containers::UpdateResponse* Arena::CreateMaybeMessage<::containers::UpdateResponse>(Arena*);
template<> ::containers::VersionRequest* Arena::CreateMaybeMessage<::containers::VersionRequest>(Arena*);
template<> ::containers::VersionResponse* Arena::CreateMaybeMessage<::containers::VersionResponse>(Arena*);
template<> ::containers::WaitRequest* Arena::CreateMaybeMessage<::containers::WaitRequest>(Arena*);
template<> ::containers::WaitResponse* Arena::CreateMaybeMessage<::containers::WaitResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace containers {

enum ContainerStatus : int {
  UNKNOWN = 0,
  CREATED = 1,
  STARTING = 2,
  RUNNING = 3,
  STOPPED = 4,
  PAUSED = 5,
  RESTARTING = 6,
  ContainerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ContainerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ContainerStatus_IsValid(int value);
constexpr ContainerStatus ContainerStatus_MIN = UNKNOWN;
constexpr ContainerStatus ContainerStatus_MAX = RESTARTING;
constexpr int ContainerStatus_ARRAYSIZE = ContainerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerStatus_descriptor();
template<typename T>
inline const std::string& ContainerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContainerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContainerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContainerStatus_descriptor(), enum_t_value);
}
inline bool ContainerStatus_Parse(
    const std::string& name, ContainerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContainerStatus>(
    ContainerStatus_descriptor(), name, value);
}
enum EventType : int {
  EXIT = 0,
  STOPPED1 = 1,
  STARTING1 = 2,
  RUNNING1 = 3,
  STOPPING = 4,
  ABORTING = 5,
  FREEZING = 6,
  FROZEN = 7,
  THAWED = 8,
  OOM = 9,
  CREATE = 10,
  START = 11,
  EXEC_ADDED = 12,
  PAUSED1 = 13,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = EXIT;
constexpr EventType EventType_MAX = PAUSED1;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    const std::string& name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Container PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.Container) */ {
 public:
  inline Container() : Container(nullptr) {};
  virtual ~Container();

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Container& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Container* New() const final {
    return CreateMaybeMessage<Container>(nullptr);
  }

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInterfaceFieldNumber = 4,
    kIpv4FieldNumber = 5,
    kIpv6FieldNumber = 6,
    kImageFieldNumber = 7,
    kCommandFieldNumber = 8,
    kStartatFieldNumber = 13,
    kFinishatFieldNumber = 14,
    kRuntimeFieldNumber = 15,
    kNameFieldNumber = 16,
    kHealthStateFieldNumber = 17,
    kPidFieldNumber = 2,
    kStatusFieldNumber = 3,
    kRamFieldNumber = 9,
    kSwapFieldNumber = 10,
    kRestartcountFieldNumber = 12,
    kCreatedFieldNumber = 18,
    kExitCodeFieldNumber = 11,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string interface = 4;
  void clear_interface();
  const std::string& interface() const;
  void set_interface(const std::string& value);
  void set_interface(std::string&& value);
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  std::string* mutable_interface();
  std::string* release_interface();
  void set_allocated_interface(std::string* interface);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface(
      std::string* interface);
  private:
  const std::string& _internal_interface() const;
  void _internal_set_interface(const std::string& value);
  std::string* _internal_mutable_interface();
  public:

  // string ipv4 = 5;
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const char* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv4(
      std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // string ipv6 = 6;
  void clear_ipv6();
  const std::string& ipv6() const;
  void set_ipv6(const std::string& value);
  void set_ipv6(std::string&& value);
  void set_ipv6(const char* value);
  void set_ipv6(const char* value, size_t size);
  std::string* mutable_ipv6();
  std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv6(
      std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // string image = 7;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string command = 8;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string startat = 13;
  void clear_startat();
  const std::string& startat() const;
  void set_startat(const std::string& value);
  void set_startat(std::string&& value);
  void set_startat(const char* value);
  void set_startat(const char* value, size_t size);
  std::string* mutable_startat();
  std::string* release_startat();
  void set_allocated_startat(std::string* startat);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startat();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startat(
      std::string* startat);
  private:
  const std::string& _internal_startat() const;
  void _internal_set_startat(const std::string& value);
  std::string* _internal_mutable_startat();
  public:

  // string finishat = 14;
  void clear_finishat();
  const std::string& finishat() const;
  void set_finishat(const std::string& value);
  void set_finishat(std::string&& value);
  void set_finishat(const char* value);
  void set_finishat(const char* value, size_t size);
  std::string* mutable_finishat();
  std::string* release_finishat();
  void set_allocated_finishat(std::string* finishat);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_finishat();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_finishat(
      std::string* finishat);
  private:
  const std::string& _internal_finishat() const;
  void _internal_set_finishat(const std::string& value);
  std::string* _internal_mutable_finishat();
  public:

  // string runtime = 15;
  void clear_runtime();
  const std::string& runtime() const;
  void set_runtime(const std::string& value);
  void set_runtime(std::string&& value);
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  std::string* mutable_runtime();
  std::string* release_runtime();
  void set_allocated_runtime(std::string* runtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime(
      std::string* runtime);
  private:
  const std::string& _internal_runtime() const;
  void _internal_set_runtime(const std::string& value);
  std::string* _internal_mutable_runtime();
  public:

  // string name = 16;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string health_state = 17;
  void clear_health_state();
  const std::string& health_state() const;
  void set_health_state(const std::string& value);
  void set_health_state(std::string&& value);
  void set_health_state(const char* value);
  void set_health_state(const char* value, size_t size);
  std::string* mutable_health_state();
  std::string* release_health_state();
  void set_allocated_health_state(std::string* health_state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health_state(
      std::string* health_state);
  private:
  const std::string& _internal_health_state() const;
  void _internal_set_health_state(const std::string& value);
  std::string* _internal_mutable_health_state();
  public:

  // int32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .containers.ContainerStatus status = 3;
  void clear_status();
  ::containers::ContainerStatus status() const;
  void set_status(::containers::ContainerStatus value);
  private:
  ::containers::ContainerStatus _internal_status() const;
  void _internal_set_status(::containers::ContainerStatus value);
  public:

  // double ram = 9;
  void clear_ram();
  double ram() const;
  void set_ram(double value);
  private:
  double _internal_ram() const;
  void _internal_set_ram(double value);
  public:

  // double swap = 10;
  void clear_swap();
  double swap() const;
  void set_swap(double value);
  private:
  double _internal_swap() const;
  void _internal_set_swap(double value);
  public:

  // uint64 restartcount = 12;
  void clear_restartcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 restartcount() const;
  void set_restartcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_restartcount() const;
  void _internal_set_restartcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 created = 18;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created() const;
  void _internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 exit_code = 11;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finishat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int status_;
  double ram_;
  double swap_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restartcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class Container_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.Container_info) */ {
 public:
  inline Container_info() : Container_info(nullptr) {};
  virtual ~Container_info();

  Container_info(const Container_info& from);
  Container_info(Container_info&& from) noexcept
    : Container_info() {
    *this = ::std::move(from);
  }

  inline Container_info& operator=(const Container_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container_info& operator=(Container_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Container_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Container_info* internal_default_instance() {
    return reinterpret_cast<const Container_info*>(
               &_Container_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Container_info& a, Container_info& b) {
    a.Swap(&b);
  }
  inline void Swap(Container_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Container_info* New() const final {
    return CreateMaybeMessage<Container_info>(nullptr);
  }

  Container_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Container_info>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.Container_info";
  }
  protected:
  explicit Container_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 14,
    kStatusFieldNumber = 15,
    kPidsCurrentFieldNumber = 2,
    kCpuUseNanosFieldNumber = 3,
    kCpuUseUserFieldNumber = 4,
    kCpuUseKernelFieldNumber = 5,
    kCpuSystemUseFieldNumber = 6,
    kBlkioReadFieldNumber = 8,
    kBlkioWriteFieldNumber = 9,
    kMemUsedFieldNumber = 10,
    kMemLimitFieldNumber = 11,
    kKmemUsedFieldNumber = 12,
    kKmemLimitFieldNumber = 13,
    kCacheFieldNumber = 16,
    kCacheTotalFieldNumber = 17,
    kInactiveFileTotalFieldNumber = 18,
    kOnlineCpusFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 14;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 15;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 pids_current = 2;
  void clear_pids_current();
  ::PROTOBUF_NAMESPACE_ID::uint64 pids_current() const;
  void set_pids_current(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pids_current() const;
  void _internal_set_pids_current(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_use_nanos = 3;
  void clear_cpu_use_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_nanos() const;
  void set_cpu_use_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_use_nanos() const;
  void _internal_set_cpu_use_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_use_user = 4;
  void clear_cpu_use_user();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_user() const;
  void set_cpu_use_user(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_use_user() const;
  void _internal_set_cpu_use_user(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_use_kernel = 5;
  void clear_cpu_use_kernel();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_kernel() const;
  void set_cpu_use_kernel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_use_kernel() const;
  void _internal_set_cpu_use_kernel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_system_use = 6;
  void clear_cpu_system_use();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_system_use() const;
  void set_cpu_system_use(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_system_use() const;
  void _internal_set_cpu_system_use(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blkio_read = 8;
  void clear_blkio_read();
  ::PROTOBUF_NAMESPACE_ID::uint64 blkio_read() const;
  void set_blkio_read(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blkio_read() const;
  void _internal_set_blkio_read(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blkio_write = 9;
  void clear_blkio_write();
  ::PROTOBUF_NAMESPACE_ID::uint64 blkio_write() const;
  void set_blkio_write(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blkio_write() const;
  void _internal_set_blkio_write(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mem_used = 10;
  void clear_mem_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 mem_used() const;
  void set_mem_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mem_used() const;
  void _internal_set_mem_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mem_limit = 11;
  void clear_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 mem_limit() const;
  void set_mem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mem_limit() const;
  void _internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 kmem_used = 12;
  void clear_kmem_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 kmem_used() const;
  void set_kmem_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_kmem_used() const;
  void _internal_set_kmem_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 kmem_limit = 13;
  void clear_kmem_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 kmem_limit() const;
  void set_kmem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_kmem_limit() const;
  void _internal_set_kmem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cache = 16;
  void clear_cache();
  ::PROTOBUF_NAMESPACE_ID::uint64 cache() const;
  void set_cache(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cache() const;
  void _internal_set_cache(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cache_total = 17;
  void clear_cache_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 cache_total() const;
  void set_cache_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cache_total() const;
  void _internal_set_cache_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 inactive_file_total = 18;
  void clear_inactive_file_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 inactive_file_total() const;
  void set_inactive_file_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inactive_file_total() const;
  void _internal_set_inactive_file_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 online_cpus = 7;
  void clear_online_cpus();
  ::PROTOBUF_NAMESPACE_ID::uint32 online_cpus() const;
  void set_online_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_online_cpus() const;
  void _internal_set_online_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.Container_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pids_current_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_nanos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_user_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_use_kernel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_system_use_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blkio_read_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blkio_write_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mem_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mem_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kmem_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kmem_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cache_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cache_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inactive_file_total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 online_cpus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class Event_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Event_AnnotationsEntry_DoNotUse();
  Event_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Event_AnnotationsEntry_DoNotUse& other);
  static const Event_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_AnnotationsEntry_DoNotUse*>(&_Event_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containers.Event.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containers.Event.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 4,
    kOptFieldNumber = 2,
    kIdFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // map<string, string> annotations = 4;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string opt = 2;
  void clear_opt();
  const std::string& opt() const;
  void set_opt(const std::string& value);
  void set_opt(std::string&& value);
  void set_opt(const char* value);
  void set_opt(const char* value, size_t size);
  std::string* mutable_opt();
  std::string* release_opt();
  void set_allocated_opt(std::string* opt);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_opt();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_opt(
      std::string* opt);
  private:
  const std::string& _internal_opt() const;
  void _internal_set_opt(const std::string& value);
  std::string* _internal_mutable_opt();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:containers.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Event_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {};
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRootfsFieldNumber = 2,
    kImageFieldNumber = 3,
    kRuntimeFieldNumber = 4,
    kHostconfigFieldNumber = 5,
    kCustomconfigFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string rootfs = 2;
  void clear_rootfs();
  const std::string& rootfs() const;
  void set_rootfs(const std::string& value);
  void set_rootfs(std::string&& value);
  void set_rootfs(const char* value);
  void set_rootfs(const char* value, size_t size);
  std::string* mutable_rootfs();
  std::string* release_rootfs();
  void set_allocated_rootfs(std::string* rootfs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rootfs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rootfs(
      std::string* rootfs);
  private:
  const std::string& _internal_rootfs() const;
  void _internal_set_rootfs(const std::string& value);
  std::string* _internal_mutable_rootfs();
  public:

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string runtime = 4;
  void clear_runtime();
  const std::string& runtime() const;
  void set_runtime(const std::string& value);
  void set_runtime(std::string&& value);
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  std::string* mutable_runtime();
  std::string* release_runtime();
  void set_allocated_runtime(std::string* runtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime(
      std::string* runtime);
  private:
  const std::string& _internal_runtime() const;
  void _internal_set_runtime(const std::string& value);
  std::string* _internal_mutable_runtime();
  public:

  // string hostconfig = 5;
  void clear_hostconfig();
  const std::string& hostconfig() const;
  void set_hostconfig(const std::string& value);
  void set_hostconfig(std::string&& value);
  void set_hostconfig(const char* value);
  void set_hostconfig(const char* value, size_t size);
  std::string* mutable_hostconfig();
  std::string* release_hostconfig();
  void set_allocated_hostconfig(std::string* hostconfig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostconfig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostconfig(
      std::string* hostconfig);
  private:
  const std::string& _internal_hostconfig() const;
  void _internal_set_hostconfig(const std::string& value);
  std::string* _internal_mutable_hostconfig();
  public:

  // string customconfig = 6;
  void clear_customconfig();
  const std::string& customconfig() const;
  void set_customconfig(const std::string& value);
  void set_customconfig(std::string&& value);
  void set_customconfig(const char* value);
  void set_customconfig(const char* value, size_t size);
  std::string* mutable_customconfig();
  std::string* release_customconfig();
  void set_allocated_customconfig(std::string* customconfig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_customconfig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_customconfig(
      std::string* customconfig);
  private:
  const std::string& _internal_customconfig() const;
  void _internal_set_customconfig(const std::string& value);
  std::string* _internal_mutable_customconfig();
  public:

  // @@protoc_insertion_point(class_scope:containers.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rootfs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostconfig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {};
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const final {
    return CreateMaybeMessage<CreateResponse>(nullptr);
  }

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 4,
    kPidFieldNumber = 2,
    kCcFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 4;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 cc = 3;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {};
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(nullptr);
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStdinFieldNumber = 2,
    kStdoutFieldNumber = 4,
    kStderrFieldNumber = 6,
    kAttachStdinFieldNumber = 3,
    kAttachStdoutFieldNumber = 5,
    kAttachStderrFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string stdin = 2;
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const char* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // string stdout = 4;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string stderr = 6;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // bool attach_stdin = 3;
  void clear_attach_stdin();
  bool attach_stdin() const;
  void set_attach_stdin(bool value);
  private:
  bool _internal_attach_stdin() const;
  void _internal_set_attach_stdin(bool value);
  public:

  // bool attach_stdout = 5;
  void clear_attach_stdout();
  bool attach_stdout() const;
  void set_attach_stdout(bool value);
  private:
  bool _internal_attach_stdout() const;
  void _internal_set_attach_stdout(bool value);
  public:

  // bool attach_stderr = 7;
  void clear_attach_stderr();
  bool attach_stderr() const;
  void set_attach_stderr(bool value);
  private:
  bool _internal_attach_stderr() const;
  void _internal_set_attach_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  bool attach_stdin_;
  bool attach_stdout_;
  bool attach_stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {};
  virtual ~StartResponse();

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResponse* New() const final {
    return CreateMaybeMessage<StartResponse>(nullptr);
  }

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RemoteStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RemoteStartRequest) */ {
 public:
  inline RemoteStartRequest() : RemoteStartRequest(nullptr) {};
  virtual ~RemoteStartRequest();

  RemoteStartRequest(const RemoteStartRequest& from);
  RemoteStartRequest(RemoteStartRequest&& from) noexcept
    : RemoteStartRequest() {
    *this = ::std::move(from);
  }

  inline RemoteStartRequest& operator=(const RemoteStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStartRequest& operator=(RemoteStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteStartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteStartRequest* internal_default_instance() {
    return reinterpret_cast<const RemoteStartRequest*>(
               &_RemoteStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoteStartRequest& a, RemoteStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteStartRequest* New() const final {
    return CreateMaybeMessage<RemoteStartRequest>(nullptr);
  }

  RemoteStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteStartRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RemoteStartRequest";
  }
  protected:
  explicit RemoteStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdinFieldNumber = 1,
    kFinishFieldNumber = 2,
  };
  // bytes stdin = 1;
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const void* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // bool finish = 2;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RemoteStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RemoteStartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RemoteStartResponse) */ {
 public:
  inline RemoteStartResponse() : RemoteStartResponse(nullptr) {};
  virtual ~RemoteStartResponse();

  RemoteStartResponse(const RemoteStartResponse& from);
  RemoteStartResponse(RemoteStartResponse&& from) noexcept
    : RemoteStartResponse() {
    *this = ::std::move(from);
  }

  inline RemoteStartResponse& operator=(const RemoteStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStartResponse& operator=(RemoteStartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteStartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteStartResponse* internal_default_instance() {
    return reinterpret_cast<const RemoteStartResponse*>(
               &_RemoteStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoteStartResponse& a, RemoteStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteStartResponse* New() const final {
    return CreateMaybeMessage<RemoteStartResponse>(nullptr);
  }

  RemoteStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteStartResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RemoteStartResponse";
  }
  protected:
  explicit RemoteStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kFinishFieldNumber = 3,
  };
  // bytes stdout = 1;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const void* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // bytes stderr = 2;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const void* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // bool finish = 3;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RemoteStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class TopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.TopRequest) */ {
 public:
  inline TopRequest() : TopRequest(nullptr) {};
  virtual ~TopRequest();

  TopRequest(const TopRequest& from);
  TopRequest(TopRequest&& from) noexcept
    : TopRequest() {
    *this = ::std::move(from);
  }

  inline TopRequest& operator=(const TopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopRequest& operator=(TopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopRequest* internal_default_instance() {
    return reinterpret_cast<const TopRequest*>(
               &_TopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TopRequest& a, TopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopRequest* New() const final {
    return CreateMaybeMessage<TopRequest>(nullptr);
  }

  TopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.TopRequest";
  }
  protected:
  explicit TopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:containers.TopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class TopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.TopResponse) */ {
 public:
  inline TopResponse() : TopResponse(nullptr) {};
  virtual ~TopResponse();

  TopResponse(const TopResponse& from);
  TopResponse(TopResponse&& from) noexcept
    : TopResponse() {
    *this = ::std::move(from);
  }

  inline TopResponse& operator=(const TopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopResponse& operator=(TopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopResponse* internal_default_instance() {
    return reinterpret_cast<const TopResponse*>(
               &_TopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TopResponse& a, TopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopResponse* New() const final {
    return CreateMaybeMessage<TopResponse>(nullptr);
  }

  TopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.TopResponse";
  }
  protected:
  explicit TopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 2,
    kTitlesFieldNumber = 1,
    kErrmsgFieldNumber = 4,
    kCcFieldNumber = 3,
  };
  // repeated bytes processes = 2;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  const std::string& processes(int index) const;
  std::string* mutable_processes(int index);
  void set_processes(int index, const std::string& value);
  void set_processes(int index, std::string&& value);
  void set_processes(int index, const char* value);
  void set_processes(int index, const void* value, size_t size);
  std::string* add_processes();
  void add_processes(const std::string& value);
  void add_processes(std::string&& value);
  void add_processes(const char* value);
  void add_processes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processes();
  private:
  const std::string& _internal_processes(int index) const;
  std::string* _internal_add_processes();
  public:

  // bytes titles = 1;
  void clear_titles();
  const std::string& titles() const;
  void set_titles(const std::string& value);
  void set_titles(std::string&& value);
  void set_titles(const char* value);
  void set_titles(const void* value, size_t size);
  std::string* mutable_titles();
  std::string* release_titles();
  void set_allocated_titles(std::string* titles);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_titles();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_titles(
      std::string* titles);
  private:
  const std::string& _internal_titles() const;
  void _internal_set_titles(const std::string& value);
  std::string* _internal_mutable_titles();
  public:

  // string errmsg = 4;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 3;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.TopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr titles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {};
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kForceFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool force_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {};
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RestartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RestartRequest) */ {
 public:
  inline RestartRequest() : RestartRequest(nullptr) {};
  virtual ~RestartRequest();

  RestartRequest(const RestartRequest& from);
  RestartRequest(RestartRequest&& from) noexcept
    : RestartRequest() {
    *this = ::std::move(from);
  }

  inline RestartRequest& operator=(const RestartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartRequest& operator=(RestartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartRequest* internal_default_instance() {
    return reinterpret_cast<const RestartRequest*>(
               &_RestartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RestartRequest& a, RestartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartRequest* New() const final {
    return CreateMaybeMessage<RestartRequest>(nullptr);
  }

  RestartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RestartRequest";
  }
  protected:
  explicit RestartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 timeout = 2;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RestartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RestartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RestartResponse) */ {
 public:
  inline RestartResponse() : RestartResponse(nullptr) {};
  virtual ~RestartResponse();

  RestartResponse(const RestartResponse& from);
  RestartResponse(RestartResponse&& from) noexcept
    : RestartResponse() {
    *this = ::std::move(from);
  }

  inline RestartResponse& operator=(const RestartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartResponse& operator=(RestartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestartResponse* internal_default_instance() {
    return reinterpret_cast<const RestartResponse*>(
               &_RestartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RestartResponse& a, RestartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestartResponse* New() const final {
    return CreateMaybeMessage<RestartResponse>(nullptr);
  }

  RestartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestartResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RestartResponse";
  }
  protected:
  explicit RestartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RestartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class KillRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.KillRequest) */ {
 public:
  inline KillRequest() : KillRequest(nullptr) {};
  virtual ~KillRequest();

  KillRequest(const KillRequest& from);
  KillRequest(KillRequest&& from) noexcept
    : KillRequest() {
    *this = ::std::move(from);
  }

  inline KillRequest& operator=(const KillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillRequest& operator=(KillRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KillRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KillRequest* internal_default_instance() {
    return reinterpret_cast<const KillRequest*>(
               &_KillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(KillRequest& a, KillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KillRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillRequest* New() const final {
    return CreateMaybeMessage<KillRequest>(nullptr);
  }

  KillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.KillRequest";
  }
  protected:
  explicit KillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignalFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 signal = 2;
  void clear_signal();
  ::PROTOBUF_NAMESPACE_ID::uint32 signal() const;
  void set_signal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signal() const;
  void _internal_set_signal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.KillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class KillResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.KillResponse) */ {
 public:
  inline KillResponse() : KillResponse(nullptr) {};
  virtual ~KillResponse();

  KillResponse(const KillResponse& from);
  KillResponse(KillResponse&& from) noexcept
    : KillResponse() {
    *this = ::std::move(from);
  }

  inline KillResponse& operator=(const KillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillResponse& operator=(KillResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KillResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KillResponse* internal_default_instance() {
    return reinterpret_cast<const KillResponse*>(
               &_KillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(KillResponse& a, KillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KillResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillResponse* New() const final {
    return CreateMaybeMessage<KillResponse>(nullptr);
  }

  KillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.KillResponse";
  }
  protected:
  explicit KillResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.KillResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {};
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kForceFieldNumber = 2,
    kVolumesFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // bool volumes = 3;
  void clear_volumes();
  bool volumes() const;
  void set_volumes(bool value);
  private:
  bool _internal_volumes() const;
  void _internal_set_volumes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool force_;
  bool volumes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.DeleteResponse) */ {
 public:
  inline DeleteResponse() : DeleteResponse(nullptr) {};
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(nullptr);
  }

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.DeleteResponse";
  }
  protected:
  explicit DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 4,
    kExitStatusFieldNumber = 2,
    kCcFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 4;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 exit_status = 2;
  void clear_exit_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status() const;
  void set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_status() const;
  void _internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cc = 3;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.DeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class PauseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.PauseRequest) */ {
 public:
  inline PauseRequest() : PauseRequest(nullptr) {};
  virtual ~PauseRequest();

  PauseRequest(const PauseRequest& from);
  PauseRequest(PauseRequest&& from) noexcept
    : PauseRequest() {
    *this = ::std::move(from);
  }

  inline PauseRequest& operator=(const PauseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseRequest& operator=(PauseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseRequest* internal_default_instance() {
    return reinterpret_cast<const PauseRequest*>(
               &_PauseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PauseRequest& a, PauseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseRequest* New() const final {
    return CreateMaybeMessage<PauseRequest>(nullptr);
  }

  PauseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.PauseRequest";
  }
  protected:
  explicit PauseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:containers.PauseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class PauseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.PauseResponse) */ {
 public:
  inline PauseResponse() : PauseResponse(nullptr) {};
  virtual ~PauseResponse();

  PauseResponse(const PauseResponse& from);
  PauseResponse(PauseResponse&& from) noexcept
    : PauseResponse() {
    *this = ::std::move(from);
  }

  inline PauseResponse& operator=(const PauseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseResponse& operator=(PauseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseResponse* internal_default_instance() {
    return reinterpret_cast<const PauseResponse*>(
               &_PauseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PauseResponse& a, PauseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseResponse* New() const final {
    return CreateMaybeMessage<PauseResponse>(nullptr);
  }

  PauseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.PauseResponse";
  }
  protected:
  explicit PauseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.PauseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ResumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ResumeRequest) */ {
 public:
  inline ResumeRequest() : ResumeRequest(nullptr) {};
  virtual ~ResumeRequest();

  ResumeRequest(const ResumeRequest& from);
  ResumeRequest(ResumeRequest&& from) noexcept
    : ResumeRequest() {
    *this = ::std::move(from);
  }

  inline ResumeRequest& operator=(const ResumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeRequest& operator=(ResumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeRequest*>(
               &_ResumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResumeRequest& a, ResumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeRequest* New() const final {
    return CreateMaybeMessage<ResumeRequest>(nullptr);
  }

  ResumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ResumeRequest";
  }
  protected:
  explicit ResumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:containers.ResumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ResumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ResumeResponse) */ {
 public:
  inline ResumeResponse() : ResumeResponse(nullptr) {};
  virtual ~ResumeResponse();

  ResumeResponse(const ResumeResponse& from);
  ResumeResponse(ResumeResponse&& from) noexcept
    : ResumeResponse() {
    *this = ::std::move(from);
  }

  inline ResumeResponse& operator=(const ResumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeResponse& operator=(ResumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeResponse* internal_default_instance() {
    return reinterpret_cast<const ResumeResponse*>(
               &_ResumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ResumeResponse& a, ResumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeResponse* New() const final {
    return CreateMaybeMessage<ResumeResponse>(nullptr);
  }

  ResumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ResumeResponse";
  }
  protected:
  explicit ResumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ResumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class InspectContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.InspectContainerRequest) */ {
 public:
  inline InspectContainerRequest() : InspectContainerRequest(nullptr) {};
  virtual ~InspectContainerRequest();

  InspectContainerRequest(const InspectContainerRequest& from);
  InspectContainerRequest(InspectContainerRequest&& from) noexcept
    : InspectContainerRequest() {
    *this = ::std::move(from);
  }

  inline InspectContainerRequest& operator=(const InspectContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectContainerRequest& operator=(InspectContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContainerRequest* internal_default_instance() {
    return reinterpret_cast<const InspectContainerRequest*>(
               &_InspectContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(InspectContainerRequest& a, InspectContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectContainerRequest* New() const final {
    return CreateMaybeMessage<InspectContainerRequest>(nullptr);
  }

  InspectContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectContainerRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.InspectContainerRequest";
  }
  protected:
  explicit InspectContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBformatFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool bformat = 2;
  void clear_bformat();
  bool bformat() const;
  void set_bformat(bool value);
  private:
  bool _internal_bformat() const;
  void _internal_set_bformat(bool value);
  public:

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.InspectContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool bformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class InspectContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.InspectContainerResponse) */ {
 public:
  inline InspectContainerResponse() : InspectContainerResponse(nullptr) {};
  virtual ~InspectContainerResponse();

  InspectContainerResponse(const InspectContainerResponse& from);
  InspectContainerResponse(InspectContainerResponse&& from) noexcept
    : InspectContainerResponse() {
    *this = ::std::move(from);
  }

  inline InspectContainerResponse& operator=(const InspectContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectContainerResponse& operator=(InspectContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContainerResponse* internal_default_instance() {
    return reinterpret_cast<const InspectContainerResponse*>(
               &_InspectContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(InspectContainerResponse& a, InspectContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectContainerResponse* New() const final {
    return CreateMaybeMessage<InspectContainerResponse>(nullptr);
  }

  InspectContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectContainerResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.InspectContainerResponse";
  }
  protected:
  explicit InspectContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerJSONFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string ContainerJSON = 1;
  void clear_containerjson();
  const std::string& containerjson() const;
  void set_containerjson(const std::string& value);
  void set_containerjson(std::string&& value);
  void set_containerjson(const char* value);
  void set_containerjson(const char* value, size_t size);
  std::string* mutable_containerjson();
  std::string* release_containerjson();
  void set_allocated_containerjson(std::string* containerjson);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerjson();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerjson(
      std::string* containerjson);
  private:
  const std::string& _internal_containerjson() const;
  void _internal_set_containerjson(const std::string& value);
  std::string* _internal_mutable_containerjson();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.InspectContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerjson_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ListRequest_FiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ListRequest_FiltersEntry_DoNotUse();
  ListRequest_FiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListRequest_FiltersEntry_DoNotUse& other);
  static const ListRequest_FiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListRequest_FiltersEntry_DoNotUse*>(&_ListRequest_FiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containers.ListRequest.FiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "containers.ListRequest.FiltersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class ListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {};
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // map<string, string> filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_filters();

  // bool all = 2;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListRequest_FiltersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > filters_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {};
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(nullptr);
  }

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // repeated .containers.Container containers = 1;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::containers::Container* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container >*
      mutable_containers();
  private:
  const ::containers::Container& _internal_containers(int index) const;
  ::containers::Container* _internal_add_containers();
  public:
  const ::containers::Container& containers(int index) const;
  ::containers::Container* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container >&
      containers() const;

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container > containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StatsRequest) */ {
 public:
  inline StatsRequest() : StatsRequest(nullptr) {};
  virtual ~StatsRequest();

  StatsRequest(const StatsRequest& from);
  StatsRequest(StatsRequest&& from) noexcept
    : StatsRequest() {
    *this = ::std::move(from);
  }

  inline StatsRequest& operator=(const StatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsRequest& operator=(StatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsRequest* internal_default_instance() {
    return reinterpret_cast<const StatsRequest*>(
               &_StatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StatsRequest& a, StatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsRequest* New() const final {
    return CreateMaybeMessage<StatsRequest>(nullptr);
  }

  StatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StatsRequest";
  }
  protected:
  explicit StatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 2,
    kAllFieldNumber = 3,
  };
  // repeated string containers = 2;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  const std::string& containers(int index) const;
  std::string* mutable_containers(int index);
  void set_containers(int index, const std::string& value);
  void set_containers(int index, std::string&& value);
  void set_containers(int index, const char* value);
  void set_containers(int index, const char* value, size_t size);
  std::string* add_containers();
  void add_containers(const std::string& value);
  void add_containers(std::string&& value);
  void add_containers(const char* value);
  void add_containers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& containers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_containers();
  private:
  const std::string& _internal_containers(int index) const;
  std::string* _internal_add_containers();
  public:

  // bool all = 3;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> containers_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class StatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.StatsResponse) */ {
 public:
  inline StatsResponse() : StatsResponse(nullptr) {};
  virtual ~StatsResponse();

  StatsResponse(const StatsResponse& from);
  StatsResponse(StatsResponse&& from) noexcept
    : StatsResponse() {
    *this = ::std::move(from);
  }

  inline StatsResponse& operator=(const StatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsResponse& operator=(StatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsResponse* internal_default_instance() {
    return reinterpret_cast<const StatsResponse*>(
               &_StatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StatsResponse& a, StatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsResponse* New() const final {
    return CreateMaybeMessage<StatsResponse>(nullptr);
  }

  StatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.StatsResponse";
  }
  protected:
  explicit StatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // repeated .containers.Container_info containers = 1;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::containers::Container_info* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container_info >*
      mutable_containers();
  private:
  const ::containers::Container_info& _internal_containers(int index) const;
  ::containers::Container_info* _internal_add_containers();
  public:
  const ::containers::Container_info& containers(int index) const;
  ::containers::Container_info* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container_info >&
      containers() const;

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.StatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container_info > containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class WaitRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.WaitRequest) */ {
 public:
  inline WaitRequest() : WaitRequest(nullptr) {};
  virtual ~WaitRequest();

  WaitRequest(const WaitRequest& from);
  WaitRequest(WaitRequest&& from) noexcept
    : WaitRequest() {
    *this = ::std::move(from);
  }

  inline WaitRequest& operator=(const WaitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitRequest& operator=(WaitRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitRequest* internal_default_instance() {
    return reinterpret_cast<const WaitRequest*>(
               &_WaitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(WaitRequest& a, WaitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitRequest* New() const final {
    return CreateMaybeMessage<WaitRequest>(nullptr);
  }

  WaitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.WaitRequest";
  }
  protected:
  explicit WaitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConditionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 condition = 2;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::uint32 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_condition() const;
  void _internal_set_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.WaitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class WaitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.WaitResponse) */ {
 public:
  inline WaitResponse() : WaitResponse(nullptr) {};
  virtual ~WaitResponse();

  WaitResponse(const WaitResponse& from);
  WaitResponse(WaitResponse&& from) noexcept
    : WaitResponse() {
    *this = ::std::move(from);
  }

  inline WaitResponse& operator=(const WaitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitResponse& operator=(WaitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitResponse* internal_default_instance() {
    return reinterpret_cast<const WaitResponse*>(
               &_WaitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(WaitResponse& a, WaitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitResponse* New() const final {
    return CreateMaybeMessage<WaitResponse>(nullptr);
  }

  WaitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.WaitResponse";
  }
  protected:
  explicit WaitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 1,
    kExitCodeFieldNumber = 2,
  };
  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exit_code = 2;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.WaitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class EventsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.EventsRequest) */ {
 public:
  inline EventsRequest() : EventsRequest(nullptr) {};
  virtual ~EventsRequest();

  EventsRequest(const EventsRequest& from);
  EventsRequest(EventsRequest&& from) noexcept
    : EventsRequest() {
    *this = ::std::move(from);
  }

  inline EventsRequest& operator=(const EventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsRequest& operator=(EventsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventsRequest* internal_default_instance() {
    return reinterpret_cast<const EventsRequest*>(
               &_EventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(EventsRequest& a, EventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventsRequest* New() const final {
    return CreateMaybeMessage<EventsRequest>(nullptr);
  }

  EventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventsRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.EventsRequest";
  }
  protected:
  explicit EventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 4,
    kSinceFieldNumber = 1,
    kUntilFieldNumber = 2,
    kStoreOnlyFieldNumber = 3,
  };
  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp since = 1;
  bool has_since() const;
  private:
  bool _internal_has_since() const;
  public:
  void clear_since();
  const PROTOBUF_NAMESPACE_ID::Timestamp& since() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_since();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_since();
  void set_allocated_since(PROTOBUF_NAMESPACE_ID::Timestamp* since);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_since() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_since();
  public:
  void unsafe_arena_set_allocated_since(
      PROTOBUF_NAMESPACE_ID::Timestamp* since);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_since();

  // .google.protobuf.Timestamp until = 2;
  bool has_until() const;
  private:
  bool _internal_has_until() const;
  public:
  void clear_until();
  const PROTOBUF_NAMESPACE_ID::Timestamp& until() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_until();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_until();
  void set_allocated_until(PROTOBUF_NAMESPACE_ID::Timestamp* until);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_until() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_until();
  public:
  void unsafe_arena_set_allocated_until(
      PROTOBUF_NAMESPACE_ID::Timestamp* until);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_until();

  // bool storeOnly = 3;
  void clear_storeonly();
  bool storeonly() const;
  void set_storeonly(bool value);
  private:
  bool _internal_storeonly() const;
  void _internal_set_storeonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.EventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* since_;
  PROTOBUF_NAMESPACE_ID::Timestamp* until_;
  bool storeonly_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ExecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ExecRequest) */ {
 public:
  inline ExecRequest() : ExecRequest(nullptr) {};
  virtual ~ExecRequest();

  ExecRequest(const ExecRequest& from);
  ExecRequest(ExecRequest&& from) noexcept
    : ExecRequest() {
    *this = ::std::move(from);
  }

  inline ExecRequest& operator=(const ExecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecRequest& operator=(ExecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecRequest* internal_default_instance() {
    return reinterpret_cast<const ExecRequest*>(
               &_ExecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ExecRequest& a, ExecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecRequest* New() const final {
    return CreateMaybeMessage<ExecRequest>(nullptr);
  }

  ExecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ExecRequest";
  }
  protected:
  explicit ExecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgvFieldNumber = 10,
    kEnvFieldNumber = 11,
    kContainerIdFieldNumber = 1,
    kStdinFieldNumber = 7,
    kStdoutFieldNumber = 8,
    kStderrFieldNumber = 9,
    kUserFieldNumber = 12,
    kSuffixFieldNumber = 13,
    kWorkdirFieldNumber = 14,
    kTtyFieldNumber = 2,
    kOpenStdinFieldNumber = 3,
    kAttachStdinFieldNumber = 4,
    kAttachStdoutFieldNumber = 5,
    kAttachStderrFieldNumber = 6,
  };
  // repeated string argv = 10;
  int argv_size() const;
  private:
  int _internal_argv_size() const;
  public:
  void clear_argv();
  const std::string& argv(int index) const;
  std::string* mutable_argv(int index);
  void set_argv(int index, const std::string& value);
  void set_argv(int index, std::string&& value);
  void set_argv(int index, const char* value);
  void set_argv(int index, const char* value, size_t size);
  std::string* add_argv();
  void add_argv(const std::string& value);
  void add_argv(std::string&& value);
  void add_argv(const char* value);
  void add_argv(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argv();
  private:
  const std::string& _internal_argv(int index) const;
  std::string* _internal_add_argv();
  public:

  // repeated string env = 11;
  int env_size() const;
  private:
  int _internal_env_size() const;
  public:
  void clear_env();
  const std::string& env(int index) const;
  std::string* mutable_env(int index);
  void set_env(int index, const std::string& value);
  void set_env(int index, std::string&& value);
  void set_env(int index, const char* value);
  void set_env(int index, const char* value, size_t size);
  std::string* add_env();
  void add_env(const std::string& value);
  void add_env(std::string&& value);
  void add_env(const char* value);
  void add_env(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& env() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_env();
  private:
  const std::string& _internal_env(int index) const;
  std::string* _internal_add_env();
  public:

  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string stdin = 7;
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const char* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // string stdout = 8;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string stderr = 9;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // string user = 12;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string suffix = 13;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suffix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suffix(
      std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // string workdir = 14;
  void clear_workdir();
  const std::string& workdir() const;
  void set_workdir(const std::string& value);
  void set_workdir(std::string&& value);
  void set_workdir(const char* value);
  void set_workdir(const char* value, size_t size);
  std::string* mutable_workdir();
  std::string* release_workdir();
  void set_allocated_workdir(std::string* workdir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workdir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workdir(
      std::string* workdir);
  private:
  const std::string& _internal_workdir() const;
  void _internal_set_workdir(const std::string& value);
  std::string* _internal_mutable_workdir();
  public:

  // bool tty = 2;
  void clear_tty();
  bool tty() const;
  void set_tty(bool value);
  private:
  bool _internal_tty() const;
  void _internal_set_tty(bool value);
  public:

  // bool open_stdin = 3;
  void clear_open_stdin();
  bool open_stdin() const;
  void set_open_stdin(bool value);
  private:
  bool _internal_open_stdin() const;
  void _internal_set_open_stdin(bool value);
  public:

  // bool attach_stdin = 4;
  void clear_attach_stdin();
  bool attach_stdin() const;
  void set_attach_stdin(bool value);
  private:
  bool _internal_attach_stdin() const;
  void _internal_set_attach_stdin(bool value);
  public:

  // bool attach_stdout = 5;
  void clear_attach_stdout();
  bool attach_stdout() const;
  void set_attach_stdout(bool value);
  private:
  bool _internal_attach_stdout() const;
  void _internal_set_attach_stdout(bool value);
  public:

  // bool attach_stderr = 6;
  void clear_attach_stderr();
  bool attach_stderr() const;
  void set_attach_stderr(bool value);
  private:
  bool _internal_attach_stderr() const;
  void _internal_set_attach_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ExecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> env_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workdir_;
  bool tty_;
  bool open_stdin_;
  bool attach_stdin_;
  bool attach_stdout_;
  bool attach_stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ExecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ExecResponse) */ {
 public:
  inline ExecResponse() : ExecResponse(nullptr) {};
  virtual ~ExecResponse();

  ExecResponse(const ExecResponse& from);
  ExecResponse(ExecResponse&& from) noexcept
    : ExecResponse() {
    *this = ::std::move(from);
  }

  inline ExecResponse& operator=(const ExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecResponse& operator=(ExecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecResponse* internal_default_instance() {
    return reinterpret_cast<const ExecResponse*>(
               &_ExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ExecResponse& a, ExecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecResponse* New() const final {
    return CreateMaybeMessage<ExecResponse>(nullptr);
  }

  ExecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ExecResponse";
  }
  protected:
  explicit ExecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 4,
    kPidFieldNumber = 1,
    kExitCodeFieldNumber = 2,
    kCcFieldNumber = 3,
  };
  // string errmsg = 4;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 exit_code = 2;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cc = 3;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ExecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RemoteExecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RemoteExecRequest) */ {
 public:
  inline RemoteExecRequest() : RemoteExecRequest(nullptr) {};
  virtual ~RemoteExecRequest();

  RemoteExecRequest(const RemoteExecRequest& from);
  RemoteExecRequest(RemoteExecRequest&& from) noexcept
    : RemoteExecRequest() {
    *this = ::std::move(from);
  }

  inline RemoteExecRequest& operator=(const RemoteExecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteExecRequest& operator=(RemoteExecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteExecRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteExecRequest* internal_default_instance() {
    return reinterpret_cast<const RemoteExecRequest*>(
               &_RemoteExecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RemoteExecRequest& a, RemoteExecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteExecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteExecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteExecRequest* New() const final {
    return CreateMaybeMessage<RemoteExecRequest>(nullptr);
  }

  RemoteExecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteExecRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteExecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RemoteExecRequest";
  }
  protected:
  explicit RemoteExecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kFinishFieldNumber = 2,
  };
  // repeated bytes cmd = 1;
  int cmd_size() const;
  private:
  int _internal_cmd_size() const;
  public:
  void clear_cmd();
  const std::string& cmd(int index) const;
  std::string* mutable_cmd(int index);
  void set_cmd(int index, const std::string& value);
  void set_cmd(int index, std::string&& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const void* value, size_t size);
  std::string* add_cmd();
  void add_cmd(const std::string& value);
  void add_cmd(std::string&& value);
  void add_cmd(const char* value);
  void add_cmd(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmd();
  private:
  const std::string& _internal_cmd(int index) const;
  std::string* _internal_add_cmd();
  public:

  // bool finish = 2;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RemoteExecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmd_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RemoteExecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RemoteExecResponse) */ {
 public:
  inline RemoteExecResponse() : RemoteExecResponse(nullptr) {};
  virtual ~RemoteExecResponse();

  RemoteExecResponse(const RemoteExecResponse& from);
  RemoteExecResponse(RemoteExecResponse&& from) noexcept
    : RemoteExecResponse() {
    *this = ::std::move(from);
  }

  inline RemoteExecResponse& operator=(const RemoteExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteExecResponse& operator=(RemoteExecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteExecResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteExecResponse* internal_default_instance() {
    return reinterpret_cast<const RemoteExecResponse*>(
               &_RemoteExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RemoteExecResponse& a, RemoteExecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteExecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteExecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteExecResponse* New() const final {
    return CreateMaybeMessage<RemoteExecResponse>(nullptr);
  }

  RemoteExecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteExecResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteExecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RemoteExecResponse";
  }
  protected:
  explicit RemoteExecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kFinishFieldNumber = 3,
  };
  // bytes stdout = 1;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const void* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // bytes stderr = 2;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const void* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // bool finish = 3;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RemoteExecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class AttachRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.AttachRequest) */ {
 public:
  inline AttachRequest() : AttachRequest(nullptr) {};
  virtual ~AttachRequest();

  AttachRequest(const AttachRequest& from);
  AttachRequest(AttachRequest&& from) noexcept
    : AttachRequest() {
    *this = ::std::move(from);
  }

  inline AttachRequest& operator=(const AttachRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachRequest& operator=(AttachRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttachRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachRequest* internal_default_instance() {
    return reinterpret_cast<const AttachRequest*>(
               &_AttachRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AttachRequest& a, AttachRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttachRequest* New() const final {
    return CreateMaybeMessage<AttachRequest>(nullptr);
  }

  AttachRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttachRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.AttachRequest";
  }
  protected:
  explicit AttachRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdinFieldNumber = 1,
    kFinishFieldNumber = 2,
  };
  // bytes stdin = 1;
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const void* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // bool finish = 2;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.AttachRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class AttachResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.AttachResponse) */ {
 public:
  inline AttachResponse() : AttachResponse(nullptr) {};
  virtual ~AttachResponse();

  AttachResponse(const AttachResponse& from);
  AttachResponse(AttachResponse&& from) noexcept
    : AttachResponse() {
    *this = ::std::move(from);
  }

  inline AttachResponse& operator=(const AttachResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachResponse& operator=(AttachResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttachResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachResponse* internal_default_instance() {
    return reinterpret_cast<const AttachResponse*>(
               &_AttachResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AttachResponse& a, AttachResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttachResponse* New() const final {
    return CreateMaybeMessage<AttachResponse>(nullptr);
  }

  AttachResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttachResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.AttachResponse";
  }
  protected:
  explicit AttachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kFinishFieldNumber = 3,
  };
  // bytes stdout = 1;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const void* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // bytes stderr = 2;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const void* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // bool finish = 3;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.AttachResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class VersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.VersionRequest) */ {
 public:
  inline VersionRequest() : VersionRequest(nullptr) {};
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(nullptr);
  }

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.VersionRequest";
  }
  protected:
  explicit VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:containers.VersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {};
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(nullptr);
  }

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.VersionResponse";
  }
  protected:
  explicit VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kGitCommitFieldNumber = 2,
    kBuildTimeFieldNumber = 3,
    kRootPathFieldNumber = 4,
    kErrmsgFieldNumber = 6,
    kCcFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string git_commit = 2;
  void clear_git_commit();
  const std::string& git_commit() const;
  void set_git_commit(const std::string& value);
  void set_git_commit(std::string&& value);
  void set_git_commit(const char* value);
  void set_git_commit(const char* value, size_t size);
  std::string* mutable_git_commit();
  std::string* release_git_commit();
  void set_allocated_git_commit(std::string* git_commit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_git_commit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_git_commit(
      std::string* git_commit);
  private:
  const std::string& _internal_git_commit() const;
  void _internal_set_git_commit(const std::string& value);
  std::string* _internal_mutable_git_commit();
  public:

  // string build_time = 3;
  void clear_build_time();
  const std::string& build_time() const;
  void set_build_time(const std::string& value);
  void set_build_time(std::string&& value);
  void set_build_time(const char* value);
  void set_build_time(const char* value, size_t size);
  std::string* mutable_build_time();
  std::string* release_build_time();
  void set_allocated_build_time(std::string* build_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_build_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_build_time(
      std::string* build_time);
  private:
  const std::string& _internal_build_time() const;
  void _internal_set_build_time(const std::string& value);
  std::string* _internal_mutable_build_time();
  public:

  // string root_path = 4;
  void clear_root_path();
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root_path(
      std::string* root_path);
  private:
  const std::string& _internal_root_path() const;
  void _internal_set_root_path(const std::string& value);
  std::string* _internal_mutable_root_path();
  public:

  // string errmsg = 6;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 5;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.VersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_commit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class InfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.InfoRequest) */ {
 public:
  inline InfoRequest() : InfoRequest(nullptr) {};
  virtual ~InfoRequest();

  InfoRequest(const InfoRequest& from);
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoRequest* New() const final {
    return CreateMaybeMessage<InfoRequest>(nullptr);
  }

  InfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.InfoRequest";
  }
  protected:
  explicit InfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:containers.InfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class InfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.InfoResponse) */ {
 public:
  inline InfoResponse() : InfoResponse(nullptr) {};
  virtual ~InfoResponse();

  InfoResponse(const InfoResponse& from);
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoResponse* New() const final {
    return CreateMaybeMessage<InfoResponse>(nullptr);
  }

  InfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.InfoResponse";
  }
  protected:
  explicit InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kVersionFieldNumber = 3,
    kKversionFieldNumber = 9,
    kOsTypeFieldNumber = 10,
    kArchitectureFieldNumber = 11,
    kNodenameFieldNumber = 12,
    kOperatingSystemFieldNumber = 14,
    kCgroupDriverFieldNumber = 15,
    kLoggingDriverFieldNumber = 16,
    kHugePageSizeFieldNumber = 17,
    kIsuladRootDirFieldNumber = 18,
    kHttpProxyFieldNumber = 20,
    kHttpsProxyFieldNumber = 21,
    kNoProxyFieldNumber = 22,
    kDriverNameFieldNumber = 23,
    kDriverStatusFieldNumber = 24,
    kCcFieldNumber = 1,
    kContainersNumFieldNumber = 4,
    kCRunningFieldNumber = 5,
    kCPausedFieldNumber = 6,
    kCStoppedFieldNumber = 7,
    kImagesNumFieldNumber = 8,
    kCpusFieldNumber = 13,
    kTotalMemFieldNumber = 19,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string kversion = 9;
  void clear_kversion();
  const std::string& kversion() const;
  void set_kversion(const std::string& value);
  void set_kversion(std::string&& value);
  void set_kversion(const char* value);
  void set_kversion(const char* value, size_t size);
  std::string* mutable_kversion();
  std::string* release_kversion();
  void set_allocated_kversion(std::string* kversion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kversion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kversion(
      std::string* kversion);
  private:
  const std::string& _internal_kversion() const;
  void _internal_set_kversion(const std::string& value);
  std::string* _internal_mutable_kversion();
  public:

  // string os_type = 10;
  void clear_os_type();
  const std::string& os_type() const;
  void set_os_type(const std::string& value);
  void set_os_type(std::string&& value);
  void set_os_type(const char* value);
  void set_os_type(const char* value, size_t size);
  std::string* mutable_os_type();
  std::string* release_os_type();
  void set_allocated_os_type(std::string* os_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os_type(
      std::string* os_type);
  private:
  const std::string& _internal_os_type() const;
  void _internal_set_os_type(const std::string& value);
  std::string* _internal_mutable_os_type();
  public:

  // string architecture = 11;
  void clear_architecture();
  const std::string& architecture() const;
  void set_architecture(const std::string& value);
  void set_architecture(std::string&& value);
  void set_architecture(const char* value);
  void set_architecture(const char* value, size_t size);
  std::string* mutable_architecture();
  std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_architecture();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_architecture(
      std::string* architecture);
  private:
  const std::string& _internal_architecture() const;
  void _internal_set_architecture(const std::string& value);
  std::string* _internal_mutable_architecture();
  public:

  // string nodename = 12;
  void clear_nodename();
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nodename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nodename(
      std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // string operating_system = 14;
  void clear_operating_system();
  const std::string& operating_system() const;
  void set_operating_system(const std::string& value);
  void set_operating_system(std::string&& value);
  void set_operating_system(const char* value);
  void set_operating_system(const char* value, size_t size);
  std::string* mutable_operating_system();
  std::string* release_operating_system();
  void set_allocated_operating_system(std::string* operating_system);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operating_system();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operating_system(
      std::string* operating_system);
  private:
  const std::string& _internal_operating_system() const;
  void _internal_set_operating_system(const std::string& value);
  std::string* _internal_mutable_operating_system();
  public:

  // string cgroup_driver = 15;
  void clear_cgroup_driver();
  const std::string& cgroup_driver() const;
  void set_cgroup_driver(const std::string& value);
  void set_cgroup_driver(std::string&& value);
  void set_cgroup_driver(const char* value);
  void set_cgroup_driver(const char* value, size_t size);
  std::string* mutable_cgroup_driver();
  std::string* release_cgroup_driver();
  void set_allocated_cgroup_driver(std::string* cgroup_driver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cgroup_driver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cgroup_driver(
      std::string* cgroup_driver);
  private:
  const std::string& _internal_cgroup_driver() const;
  void _internal_set_cgroup_driver(const std::string& value);
  std::string* _internal_mutable_cgroup_driver();
  public:

  // string logging_driver = 16;
  void clear_logging_driver();
  const std::string& logging_driver() const;
  void set_logging_driver(const std::string& value);
  void set_logging_driver(std::string&& value);
  void set_logging_driver(const char* value);
  void set_logging_driver(const char* value, size_t size);
  std::string* mutable_logging_driver();
  std::string* release_logging_driver();
  void set_allocated_logging_driver(std::string* logging_driver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_logging_driver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_logging_driver(
      std::string* logging_driver);
  private:
  const std::string& _internal_logging_driver() const;
  void _internal_set_logging_driver(const std::string& value);
  std::string* _internal_mutable_logging_driver();
  public:

  // string huge_page_size = 17;
  void clear_huge_page_size();
  const std::string& huge_page_size() const;
  void set_huge_page_size(const std::string& value);
  void set_huge_page_size(std::string&& value);
  void set_huge_page_size(const char* value);
  void set_huge_page_size(const char* value, size_t size);
  std::string* mutable_huge_page_size();
  std::string* release_huge_page_size();
  void set_allocated_huge_page_size(std::string* huge_page_size);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_huge_page_size();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_huge_page_size(
      std::string* huge_page_size);
  private:
  const std::string& _internal_huge_page_size() const;
  void _internal_set_huge_page_size(const std::string& value);
  std::string* _internal_mutable_huge_page_size();
  public:

  // string isulad_root_dir = 18;
  void clear_isulad_root_dir();
  const std::string& isulad_root_dir() const;
  void set_isulad_root_dir(const std::string& value);
  void set_isulad_root_dir(std::string&& value);
  void set_isulad_root_dir(const char* value);
  void set_isulad_root_dir(const char* value, size_t size);
  std::string* mutable_isulad_root_dir();
  std::string* release_isulad_root_dir();
  void set_allocated_isulad_root_dir(std::string* isulad_root_dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isulad_root_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isulad_root_dir(
      std::string* isulad_root_dir);
  private:
  const std::string& _internal_isulad_root_dir() const;
  void _internal_set_isulad_root_dir(const std::string& value);
  std::string* _internal_mutable_isulad_root_dir();
  public:

  // string http_proxy = 20;
  void clear_http_proxy();
  const std::string& http_proxy() const;
  void set_http_proxy(const std::string& value);
  void set_http_proxy(std::string&& value);
  void set_http_proxy(const char* value);
  void set_http_proxy(const char* value, size_t size);
  std::string* mutable_http_proxy();
  std::string* release_http_proxy();
  void set_allocated_http_proxy(std::string* http_proxy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_http_proxy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_http_proxy(
      std::string* http_proxy);
  private:
  const std::string& _internal_http_proxy() const;
  void _internal_set_http_proxy(const std::string& value);
  std::string* _internal_mutable_http_proxy();
  public:

  // string https_proxy = 21;
  void clear_https_proxy();
  const std::string& https_proxy() const;
  void set_https_proxy(const std::string& value);
  void set_https_proxy(std::string&& value);
  void set_https_proxy(const char* value);
  void set_https_proxy(const char* value, size_t size);
  std::string* mutable_https_proxy();
  std::string* release_https_proxy();
  void set_allocated_https_proxy(std::string* https_proxy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_https_proxy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_https_proxy(
      std::string* https_proxy);
  private:
  const std::string& _internal_https_proxy() const;
  void _internal_set_https_proxy(const std::string& value);
  std::string* _internal_mutable_https_proxy();
  public:

  // string no_proxy = 22;
  void clear_no_proxy();
  const std::string& no_proxy() const;
  void set_no_proxy(const std::string& value);
  void set_no_proxy(std::string&& value);
  void set_no_proxy(const char* value);
  void set_no_proxy(const char* value, size_t size);
  std::string* mutable_no_proxy();
  std::string* release_no_proxy();
  void set_allocated_no_proxy(std::string* no_proxy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_no_proxy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_no_proxy(
      std::string* no_proxy);
  private:
  const std::string& _internal_no_proxy() const;
  void _internal_set_no_proxy(const std::string& value);
  std::string* _internal_mutable_no_proxy();
  public:

  // string driver_name = 23;
  void clear_driver_name();
  const std::string& driver_name() const;
  void set_driver_name(const std::string& value);
  void set_driver_name(std::string&& value);
  void set_driver_name(const char* value);
  void set_driver_name(const char* value, size_t size);
  std::string* mutable_driver_name();
  std::string* release_driver_name();
  void set_allocated_driver_name(std::string* driver_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_driver_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_driver_name(
      std::string* driver_name);
  private:
  const std::string& _internal_driver_name() const;
  void _internal_set_driver_name(const std::string& value);
  std::string* _internal_mutable_driver_name();
  public:

  // string driver_status = 24;
  void clear_driver_status();
  const std::string& driver_status() const;
  void set_driver_status(const std::string& value);
  void set_driver_status(std::string&& value);
  void set_driver_status(const char* value);
  void set_driver_status(const char* value, size_t size);
  std::string* mutable_driver_status();
  std::string* release_driver_status();
  void set_allocated_driver_status(std::string* driver_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_driver_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_driver_status(
      std::string* driver_status);
  private:
  const std::string& _internal_driver_status() const;
  void _internal_set_driver_status(const std::string& value);
  std::string* _internal_mutable_driver_status();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 containers_num = 4;
  void clear_containers_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 containers_num() const;
  void set_containers_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_containers_num() const;
  void _internal_set_containers_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c_running = 5;
  void clear_c_running();
  ::PROTOBUF_NAMESPACE_ID::uint32 c_running() const;
  void set_c_running(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c_running() const;
  void _internal_set_c_running(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c_paused = 6;
  void clear_c_paused();
  ::PROTOBUF_NAMESPACE_ID::uint32 c_paused() const;
  void set_c_paused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c_paused() const;
  void _internal_set_c_paused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 c_stopped = 7;
  void clear_c_stopped();
  ::PROTOBUF_NAMESPACE_ID::uint32 c_stopped() const;
  void set_c_stopped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c_stopped() const;
  void _internal_set_c_stopped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 images_num = 8;
  void clear_images_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 images_num() const;
  void set_images_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_images_num() const;
  void _internal_set_images_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cpus = 13;
  void clear_cpus();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpus() const;
  void set_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cpus() const;
  void _internal_set_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_mem = 19;
  void clear_total_mem();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_mem() const;
  void set_total_mem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_mem() const;
  void _internal_set_total_mem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.InfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operating_system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgroup_driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logging_driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr huge_page_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isulad_root_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_proxy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr https_proxy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr no_proxy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 containers_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c_running_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c_paused_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c_stopped_;
  ::PROTOBUF_NAMESPACE_ID::uint32 images_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {};
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHostconfigFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string hostconfig = 2;
  void clear_hostconfig();
  const std::string& hostconfig() const;
  void set_hostconfig(const std::string& value);
  void set_hostconfig(std::string&& value);
  void set_hostconfig(const char* value);
  void set_hostconfig(const char* value, size_t size);
  std::string* mutable_hostconfig();
  std::string* release_hostconfig();
  void set_allocated_hostconfig(std::string* hostconfig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostconfig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostconfig(
      std::string* hostconfig);
  private:
  const std::string& _internal_hostconfig() const;
  void _internal_set_hostconfig(const std::string& value);
  std::string* _internal_mutable_hostconfig();
  public:

  // @@protoc_insertion_point(class_scope:containers.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {};
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ExportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ExportRequest) */ {
 public:
  inline ExportRequest() : ExportRequest(nullptr) {};
  virtual ~ExportRequest();

  ExportRequest(const ExportRequest& from);
  ExportRequest(ExportRequest&& from) noexcept
    : ExportRequest() {
    *this = ::std::move(from);
  }

  inline ExportRequest& operator=(const ExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportRequest& operator=(ExportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportRequest*>(
               &_ExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ExportRequest& a, ExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportRequest* New() const final {
    return CreateMaybeMessage<ExportRequest>(nullptr);
  }

  ExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ExportRequest";
  }
  protected:
  explicit ExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFileFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string file = 2;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:containers.ExportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ExportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ExportResponse) */ {
 public:
  inline ExportResponse() : ExportResponse(nullptr) {};
  virtual ~ExportResponse();

  ExportResponse(const ExportResponse& from);
  ExportResponse(ExportResponse&& from) noexcept
    : ExportResponse() {
    *this = ::std::move(from);
  }

  inline ExportResponse& operator=(const ExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportResponse& operator=(ExportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportResponse*>(
               &_ExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ExportResponse& a, ExportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportResponse* New() const final {
    return CreateMaybeMessage<ExportResponse>(nullptr);
  }

  ExportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ExportResponse";
  }
  protected:
  explicit ExportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ExportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CopyFromContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CopyFromContainerRequest) */ {
 public:
  inline CopyFromContainerRequest() : CopyFromContainerRequest(nullptr) {};
  virtual ~CopyFromContainerRequest();

  CopyFromContainerRequest(const CopyFromContainerRequest& from);
  CopyFromContainerRequest(CopyFromContainerRequest&& from) noexcept
    : CopyFromContainerRequest() {
    *this = ::std::move(from);
  }

  inline CopyFromContainerRequest& operator=(const CopyFromContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFromContainerRequest& operator=(CopyFromContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyFromContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyFromContainerRequest* internal_default_instance() {
    return reinterpret_cast<const CopyFromContainerRequest*>(
               &_CopyFromContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CopyFromContainerRequest& a, CopyFromContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFromContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFromContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyFromContainerRequest* New() const final {
    return CreateMaybeMessage<CopyFromContainerRequest>(nullptr);
  }

  CopyFromContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyFromContainerRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyFromContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CopyFromContainerRequest";
  }
  protected:
  explicit CopyFromContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRuntimeFieldNumber = 2,
    kSrcpathFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string runtime = 2;
  void clear_runtime();
  const std::string& runtime() const;
  void set_runtime(const std::string& value);
  void set_runtime(std::string&& value);
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  std::string* mutable_runtime();
  std::string* release_runtime();
  void set_allocated_runtime(std::string* runtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime(
      std::string* runtime);
  private:
  const std::string& _internal_runtime() const;
  void _internal_set_runtime(const std::string& value);
  std::string* _internal_mutable_runtime();
  public:

  // string srcpath = 3;
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_srcpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_srcpath(
      std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // @@protoc_insertion_point(class_scope:containers.CopyFromContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CopyFromContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CopyFromContainerResponse) */ {
 public:
  inline CopyFromContainerResponse() : CopyFromContainerResponse(nullptr) {};
  virtual ~CopyFromContainerResponse();

  CopyFromContainerResponse(const CopyFromContainerResponse& from);
  CopyFromContainerResponse(CopyFromContainerResponse&& from) noexcept
    : CopyFromContainerResponse() {
    *this = ::std::move(from);
  }

  inline CopyFromContainerResponse& operator=(const CopyFromContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFromContainerResponse& operator=(CopyFromContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyFromContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyFromContainerResponse* internal_default_instance() {
    return reinterpret_cast<const CopyFromContainerResponse*>(
               &_CopyFromContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CopyFromContainerResponse& a, CopyFromContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFromContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFromContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyFromContainerResponse* New() const final {
    return CreateMaybeMessage<CopyFromContainerResponse>(nullptr);
  }

  CopyFromContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyFromContainerResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyFromContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CopyFromContainerResponse";
  }
  protected:
  explicit CopyFromContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:containers.CopyFromContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CopyToContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CopyToContainerRequest) */ {
 public:
  inline CopyToContainerRequest() : CopyToContainerRequest(nullptr) {};
  virtual ~CopyToContainerRequest();

  CopyToContainerRequest(const CopyToContainerRequest& from);
  CopyToContainerRequest(CopyToContainerRequest&& from) noexcept
    : CopyToContainerRequest() {
    *this = ::std::move(from);
  }

  inline CopyToContainerRequest& operator=(const CopyToContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyToContainerRequest& operator=(CopyToContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyToContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyToContainerRequest* internal_default_instance() {
    return reinterpret_cast<const CopyToContainerRequest*>(
               &_CopyToContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CopyToContainerRequest& a, CopyToContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyToContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyToContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyToContainerRequest* New() const final {
    return CreateMaybeMessage<CopyToContainerRequest>(nullptr);
  }

  CopyToContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyToContainerRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyToContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CopyToContainerRequest";
  }
  protected:
  explicit CopyToContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:containers.CopyToContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class CopyToContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.CopyToContainerResponse) */ {
 public:
  inline CopyToContainerResponse() : CopyToContainerResponse(nullptr) {};
  virtual ~CopyToContainerResponse();

  CopyToContainerResponse(const CopyToContainerResponse& from);
  CopyToContainerResponse(CopyToContainerResponse&& from) noexcept
    : CopyToContainerResponse() {
    *this = ::std::move(from);
  }

  inline CopyToContainerResponse& operator=(const CopyToContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyToContainerResponse& operator=(CopyToContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopyToContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopyToContainerResponse* internal_default_instance() {
    return reinterpret_cast<const CopyToContainerResponse*>(
               &_CopyToContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CopyToContainerResponse& a, CopyToContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyToContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyToContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopyToContainerResponse* New() const final {
    return CreateMaybeMessage<CopyToContainerResponse>(nullptr);
  }

  CopyToContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopyToContainerResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopyToContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.CopyToContainerResponse";
  }
  protected:
  explicit CopyToContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinishFieldNumber = 1,
  };
  // bool finish = 1;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.CopyToContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RenameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RenameRequest) */ {
 public:
  inline RenameRequest() : RenameRequest(nullptr) {};
  virtual ~RenameRequest();

  RenameRequest(const RenameRequest& from);
  RenameRequest(RenameRequest&& from) noexcept
    : RenameRequest() {
    *this = ::std::move(from);
  }

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameRequest& operator=(RenameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RenameRequest& a, RenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const final {
    return CreateMaybeMessage<RenameRequest>(nullptr);
  }

  RenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RenameRequest";
  }
  protected:
  explicit RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldnameFieldNumber = 1,
    kNewnameFieldNumber = 2,
  };
  // string oldname = 1;
  void clear_oldname();
  const std::string& oldname() const;
  void set_oldname(const std::string& value);
  void set_oldname(std::string&& value);
  void set_oldname(const char* value);
  void set_oldname(const char* value, size_t size);
  std::string* mutable_oldname();
  std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oldname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oldname(
      std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // string newname = 2;
  void clear_newname();
  const std::string& newname() const;
  void set_newname(const std::string& value);
  void set_newname(std::string&& value);
  void set_newname(const char* value);
  void set_newname(const char* value, size_t size);
  std::string* mutable_newname();
  std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newname(
      std::string* newname);
  private:
  const std::string& _internal_newname() const;
  void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // @@protoc_insertion_point(class_scope:containers.RenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class RenameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.RenameResponse) */ {
 public:
  inline RenameResponse() : RenameResponse(nullptr) {};
  virtual ~RenameResponse();

  RenameResponse(const RenameResponse& from);
  RenameResponse(RenameResponse&& from) noexcept
    : RenameResponse() {
    *this = ::std::move(from);
  }

  inline RenameResponse& operator=(const RenameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameResponse& operator=(RenameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameResponse* internal_default_instance() {
    return reinterpret_cast<const RenameResponse*>(
               &_RenameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(RenameResponse& a, RenameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameResponse* New() const final {
    return CreateMaybeMessage<RenameResponse>(nullptr);
  }

  RenameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.RenameResponse";
  }
  protected:
  explicit RenameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.RenameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class LogsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.LogsRequest) */ {
 public:
  inline LogsRequest() : LogsRequest(nullptr) {};
  virtual ~LogsRequest();

  LogsRequest(const LogsRequest& from);
  LogsRequest(LogsRequest&& from) noexcept
    : LogsRequest() {
    *this = ::std::move(from);
  }

  inline LogsRequest& operator=(const LogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsRequest& operator=(LogsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogsRequest* internal_default_instance() {
    return reinterpret_cast<const LogsRequest*>(
               &_LogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(LogsRequest& a, LogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogsRequest* New() const final {
    return CreateMaybeMessage<LogsRequest>(nullptr);
  }

  LogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogsRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.LogsRequest";
  }
  protected:
  explicit LogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRuntimeFieldNumber = 2,
    kSinceFieldNumber = 3,
    kUntilFieldNumber = 4,
    kTailFieldNumber = 7,
    kTimestampsFieldNumber = 5,
    kFollowFieldNumber = 6,
    kDetailsFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string runtime = 2;
  void clear_runtime();
  const std::string& runtime() const;
  void set_runtime(const std::string& value);
  void set_runtime(std::string&& value);
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  std::string* mutable_runtime();
  std::string* release_runtime();
  void set_allocated_runtime(std::string* runtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime(
      std::string* runtime);
  private:
  const std::string& _internal_runtime() const;
  void _internal_set_runtime(const std::string& value);
  std::string* _internal_mutable_runtime();
  public:

  // string since = 3;
  void clear_since();
  const std::string& since() const;
  void set_since(const std::string& value);
  void set_since(std::string&& value);
  void set_since(const char* value);
  void set_since(const char* value, size_t size);
  std::string* mutable_since();
  std::string* release_since();
  void set_allocated_since(std::string* since);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_since();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_since(
      std::string* since);
  private:
  const std::string& _internal_since() const;
  void _internal_set_since(const std::string& value);
  std::string* _internal_mutable_since();
  public:

  // string until = 4;
  void clear_until();
  const std::string& until() const;
  void set_until(const std::string& value);
  void set_until(std::string&& value);
  void set_until(const char* value);
  void set_until(const char* value, size_t size);
  std::string* mutable_until();
  std::string* release_until();
  void set_allocated_until(std::string* until);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_until();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_until(
      std::string* until);
  private:
  const std::string& _internal_until() const;
  void _internal_set_until(const std::string& value);
  std::string* _internal_mutable_until();
  public:

  // int64 tail = 7;
  void clear_tail();
  ::PROTOBUF_NAMESPACE_ID::int64 tail() const;
  void set_tail(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tail() const;
  void _internal_set_tail(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool timestamps = 5;
  void clear_timestamps();
  bool timestamps() const;
  void set_timestamps(bool value);
  private:
  bool _internal_timestamps() const;
  void _internal_set_timestamps(bool value);
  public:

  // bool follow = 6;
  void clear_follow();
  bool follow() const;
  void set_follow(bool value);
  private:
  bool _internal_follow() const;
  void _internal_set_follow(bool value);
  public:

  // bool details = 8;
  void clear_details();
  bool details() const;
  void set_details(bool value);
  private:
  bool _internal_details() const;
  void _internal_set_details(bool value);
  public:

  // @@protoc_insertion_point(class_scope:containers.LogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr since_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr until_;
  ::PROTOBUF_NAMESPACE_ID::int64 tail_;
  bool timestamps_;
  bool follow_;
  bool details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class LogsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.LogsResponse) */ {
 public:
  inline LogsResponse() : LogsResponse(nullptr) {};
  virtual ~LogsResponse();

  LogsResponse(const LogsResponse& from);
  LogsResponse(LogsResponse&& from) noexcept
    : LogsResponse() {
    *this = ::std::move(from);
  }

  inline LogsResponse& operator=(const LogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsResponse& operator=(LogsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogsResponse* internal_default_instance() {
    return reinterpret_cast<const LogsResponse*>(
               &_LogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(LogsResponse& a, LogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogsResponse* New() const final {
    return CreateMaybeMessage<LogsResponse>(nullptr);
  }

  LogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogsResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.LogsResponse";
  }
  protected:
  explicit LogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kStreamFieldNumber = 2,
    kTimeFieldNumber = 3,
    kAttrsFieldNumber = 4,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string stream = 2;
  void clear_stream();
  const std::string& stream() const;
  void set_stream(const std::string& value);
  void set_stream(std::string&& value);
  void set_stream(const char* value);
  void set_stream(const char* value, size_t size);
  std::string* mutable_stream();
  std::string* release_stream();
  void set_allocated_stream(std::string* stream);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stream();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stream(
      std::string* stream);
  private:
  const std::string& _internal_stream() const;
  void _internal_set_stream(const std::string& value);
  std::string* _internal_mutable_stream();
  public:

  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // bytes attrs = 4;
  void clear_attrs();
  const std::string& attrs() const;
  void set_attrs(const std::string& value);
  void set_attrs(std::string&& value);
  void set_attrs(const char* value);
  void set_attrs(const void* value, size_t size);
  std::string* mutable_attrs();
  std::string* release_attrs();
  void set_allocated_attrs(std::string* attrs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attrs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attrs(
      std::string* attrs);
  private:
  const std::string& _internal_attrs() const;
  void _internal_set_attrs(const std::string& value);
  std::string* _internal_mutable_attrs();
  public:

  // @@protoc_insertion_point(class_scope:containers.LogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ResizeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ResizeRequest) */ {
 public:
  inline ResizeRequest() : ResizeRequest(nullptr) {};
  virtual ~ResizeRequest();

  ResizeRequest(const ResizeRequest& from);
  ResizeRequest(ResizeRequest&& from) noexcept
    : ResizeRequest() {
    *this = ::std::move(from);
  }

  inline ResizeRequest& operator=(const ResizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeRequest& operator=(ResizeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeRequest* internal_default_instance() {
    return reinterpret_cast<const ResizeRequest*>(
               &_ResizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ResizeRequest& a, ResizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizeRequest* New() const final {
    return CreateMaybeMessage<ResizeRequest>(nullptr);
  }

  ResizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ResizeRequest";
  }
  protected:
  explicit ResizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSuffixFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string suffix = 2;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suffix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suffix(
      std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ResizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// -------------------------------------------------------------------

class ResizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:containers.ResizeResponse) */ {
 public:
  inline ResizeResponse() : ResizeResponse(nullptr) {};
  virtual ~ResizeResponse();

  ResizeResponse(const ResizeResponse& from);
  ResizeResponse(ResizeResponse&& from) noexcept
    : ResizeResponse() {
    *this = ::std::move(from);
  }

  inline ResizeResponse& operator=(const ResizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeResponse& operator=(ResizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeResponse* internal_default_instance() {
    return reinterpret_cast<const ResizeResponse*>(
               &_ResizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ResizeResponse& a, ResizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizeResponse* New() const final {
    return CreateMaybeMessage<ResizeResponse>(nullptr);
  }

  ResizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "containers.ResizeResponse";
  }
  protected:
  explicit ResizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_container_2eproto);
    return ::descriptor_table_container_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:containers.ResizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_container_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Container

// string id = 1;
inline void Container::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::id() const {
  // @@protoc_insertion_point(field_get:containers.Container.id)
  return _internal_id();
}
inline void Container::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.Container.id)
}
inline std::string* Container::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.Container.id)
  return _internal_mutable_id();
}
inline const std::string& Container::_internal_id() const {
  return id_.Get();
}
inline void Container::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.id)
}
inline void Container::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.id)
}
inline void Container::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.id)
}
inline std::string* Container::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_id() {
  // @@protoc_insertion_point(field_release:containers.Container.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.id)
}
inline std::string* Container::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.id)
}

// int32 pid = 2;
inline void Container::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Container::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Container::pid() const {
  // @@protoc_insertion_point(field_get:containers.Container.pid)
  return _internal_pid();
}
inline void Container::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Container::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containers.Container.pid)
}

// .containers.ContainerStatus status = 3;
inline void Container::clear_status() {
  status_ = 0;
}
inline ::containers::ContainerStatus Container::_internal_status() const {
  return static_cast< ::containers::ContainerStatus >(status_);
}
inline ::containers::ContainerStatus Container::status() const {
  // @@protoc_insertion_point(field_get:containers.Container.status)
  return _internal_status();
}
inline void Container::_internal_set_status(::containers::ContainerStatus value) {
  
  status_ = value;
}
inline void Container::set_status(::containers::ContainerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:containers.Container.status)
}

// string interface = 4;
inline void Container::clear_interface() {
  interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::interface() const {
  // @@protoc_insertion_point(field_get:containers.Container.interface)
  return _internal_interface();
}
inline void Container::set_interface(const std::string& value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:containers.Container.interface)
}
inline std::string* Container::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:containers.Container.interface)
  return _internal_mutable_interface();
}
inline const std::string& Container::_internal_interface() const {
  return interface_.Get();
}
inline void Container::_internal_set_interface(const std::string& value) {
  
  interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_interface(std::string&& value) {
  
  interface_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.interface)
}
inline void Container::set_interface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.interface)
}
inline void Container::set_interface(const char* value,
    size_t size) {
  
  interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.interface)
}
inline std::string* Container::_internal_mutable_interface() {
  
  return interface_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_interface() {
  // @@protoc_insertion_point(field_release:containers.Container.interface)
  return interface_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_interface(std::string* interface) {
  if (interface != nullptr) {
    
  } else {
    
  }
  interface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.interface)
}
inline std::string* Container::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.interface)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_interface(
    std::string* interface) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface != nullptr) {
    
  } else {
    
  }
  interface_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.interface)
}

// string ipv4 = 5;
inline void Container::clear_ipv4() {
  ipv4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::ipv4() const {
  // @@protoc_insertion_point(field_get:containers.Container.ipv4)
  return _internal_ipv4();
}
inline void Container::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:containers.Container.ipv4)
}
inline std::string* Container::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:containers.Container.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& Container::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void Container::_internal_set_ipv4(const std::string& value) {
  
  ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_ipv4(std::string&& value) {
  
  ipv4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.ipv4)
}
inline void Container::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.ipv4)
}
inline void Container::set_ipv4(const char* value,
    size_t size) {
  
  ipv4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.ipv4)
}
inline std::string* Container::_internal_mutable_ipv4() {
  
  return ipv4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_ipv4() {
  // @@protoc_insertion_point(field_release:containers.Container.ipv4)
  return ipv4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.ipv4)
}
inline std::string* Container::unsafe_arena_release_ipv4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.ipv4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_ipv4(
    std::string* ipv4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.ipv4)
}

// string ipv6 = 6;
inline void Container::clear_ipv6() {
  ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::ipv6() const {
  // @@protoc_insertion_point(field_get:containers.Container.ipv6)
  return _internal_ipv6();
}
inline void Container::set_ipv6(const std::string& value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:containers.Container.ipv6)
}
inline std::string* Container::mutable_ipv6() {
  // @@protoc_insertion_point(field_mutable:containers.Container.ipv6)
  return _internal_mutable_ipv6();
}
inline const std::string& Container::_internal_ipv6() const {
  return ipv6_.Get();
}
inline void Container::_internal_set_ipv6(const std::string& value) {
  
  ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_ipv6(std::string&& value) {
  
  ipv6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.ipv6)
}
inline void Container::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.ipv6)
}
inline void Container::set_ipv6(const char* value,
    size_t size) {
  
  ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.ipv6)
}
inline std::string* Container::_internal_mutable_ipv6() {
  
  return ipv6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_ipv6() {
  // @@protoc_insertion_point(field_release:containers.Container.ipv6)
  return ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.ipv6)
}
inline std::string* Container::unsafe_arena_release_ipv6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.ipv6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ipv6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_ipv6(
    std::string* ipv6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.ipv6)
}

// string image = 7;
inline void Container::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::image() const {
  // @@protoc_insertion_point(field_get:containers.Container.image)
  return _internal_image();
}
inline void Container::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:containers.Container.image)
}
inline std::string* Container::mutable_image() {
  // @@protoc_insertion_point(field_mutable:containers.Container.image)
  return _internal_mutable_image();
}
inline const std::string& Container::_internal_image() const {
  return image_.Get();
}
inline void Container::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.image)
}
inline void Container::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.image)
}
inline void Container::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.image)
}
inline std::string* Container::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_image() {
  // @@protoc_insertion_point(field_release:containers.Container.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.image)
}
inline std::string* Container::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.image)
}

// string command = 8;
inline void Container::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::command() const {
  // @@protoc_insertion_point(field_get:containers.Container.command)
  return _internal_command();
}
inline void Container::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:containers.Container.command)
}
inline std::string* Container::mutable_command() {
  // @@protoc_insertion_point(field_mutable:containers.Container.command)
  return _internal_mutable_command();
}
inline const std::string& Container::_internal_command() const {
  return command_.Get();
}
inline void Container::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.command)
}
inline void Container::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.command)
}
inline void Container::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.command)
}
inline std::string* Container::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_command() {
  // @@protoc_insertion_point(field_release:containers.Container.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.command)
}
inline std::string* Container::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.command)
}

// double ram = 9;
inline void Container::clear_ram() {
  ram_ = 0;
}
inline double Container::_internal_ram() const {
  return ram_;
}
inline double Container::ram() const {
  // @@protoc_insertion_point(field_get:containers.Container.ram)
  return _internal_ram();
}
inline void Container::_internal_set_ram(double value) {
  
  ram_ = value;
}
inline void Container::set_ram(double value) {
  _internal_set_ram(value);
  // @@protoc_insertion_point(field_set:containers.Container.ram)
}

// double swap = 10;
inline void Container::clear_swap() {
  swap_ = 0;
}
inline double Container::_internal_swap() const {
  return swap_;
}
inline double Container::swap() const {
  // @@protoc_insertion_point(field_get:containers.Container.swap)
  return _internal_swap();
}
inline void Container::_internal_set_swap(double value) {
  
  swap_ = value;
}
inline void Container::set_swap(double value) {
  _internal_set_swap(value);
  // @@protoc_insertion_point(field_set:containers.Container.swap)
}

// uint32 exit_code = 11;
inline void Container::clear_exit_code() {
  exit_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container::exit_code() const {
  // @@protoc_insertion_point(field_get:containers.Container.exit_code)
  return _internal_exit_code();
}
inline void Container::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_code_ = value;
}
inline void Container::set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:containers.Container.exit_code)
}

// uint64 restartcount = 12;
inline void Container::clear_restartcount() {
  restartcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container::_internal_restartcount() const {
  return restartcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container::restartcount() const {
  // @@protoc_insertion_point(field_get:containers.Container.restartcount)
  return _internal_restartcount();
}
inline void Container::_internal_set_restartcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  restartcount_ = value;
}
inline void Container::set_restartcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_restartcount(value);
  // @@protoc_insertion_point(field_set:containers.Container.restartcount)
}

// string startat = 13;
inline void Container::clear_startat() {
  startat_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::startat() const {
  // @@protoc_insertion_point(field_get:containers.Container.startat)
  return _internal_startat();
}
inline void Container::set_startat(const std::string& value) {
  _internal_set_startat(value);
  // @@protoc_insertion_point(field_set:containers.Container.startat)
}
inline std::string* Container::mutable_startat() {
  // @@protoc_insertion_point(field_mutable:containers.Container.startat)
  return _internal_mutable_startat();
}
inline const std::string& Container::_internal_startat() const {
  return startat_.Get();
}
inline void Container::_internal_set_startat(const std::string& value) {
  
  startat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_startat(std::string&& value) {
  
  startat_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.startat)
}
inline void Container::set_startat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.startat)
}
inline void Container::set_startat(const char* value,
    size_t size) {
  
  startat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.startat)
}
inline std::string* Container::_internal_mutable_startat() {
  
  return startat_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_startat() {
  // @@protoc_insertion_point(field_release:containers.Container.startat)
  return startat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_startat(std::string* startat) {
  if (startat != nullptr) {
    
  } else {
    
  }
  startat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.startat)
}
inline std::string* Container::unsafe_arena_release_startat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.startat)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return startat_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_startat(
    std::string* startat) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startat != nullptr) {
    
  } else {
    
  }
  startat_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startat, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.startat)
}

// string finishat = 14;
inline void Container::clear_finishat() {
  finishat_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::finishat() const {
  // @@protoc_insertion_point(field_get:containers.Container.finishat)
  return _internal_finishat();
}
inline void Container::set_finishat(const std::string& value) {
  _internal_set_finishat(value);
  // @@protoc_insertion_point(field_set:containers.Container.finishat)
}
inline std::string* Container::mutable_finishat() {
  // @@protoc_insertion_point(field_mutable:containers.Container.finishat)
  return _internal_mutable_finishat();
}
inline const std::string& Container::_internal_finishat() const {
  return finishat_.Get();
}
inline void Container::_internal_set_finishat(const std::string& value) {
  
  finishat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_finishat(std::string&& value) {
  
  finishat_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.finishat)
}
inline void Container::set_finishat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  finishat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.finishat)
}
inline void Container::set_finishat(const char* value,
    size_t size) {
  
  finishat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.finishat)
}
inline std::string* Container::_internal_mutable_finishat() {
  
  return finishat_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_finishat() {
  // @@protoc_insertion_point(field_release:containers.Container.finishat)
  return finishat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_finishat(std::string* finishat) {
  if (finishat != nullptr) {
    
  } else {
    
  }
  finishat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finishat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.finishat)
}
inline std::string* Container::unsafe_arena_release_finishat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.finishat)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return finishat_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_finishat(
    std::string* finishat) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (finishat != nullptr) {
    
  } else {
    
  }
  finishat_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      finishat, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.finishat)
}

// string runtime = 15;
inline void Container::clear_runtime() {
  runtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::runtime() const {
  // @@protoc_insertion_point(field_get:containers.Container.runtime)
  return _internal_runtime();
}
inline void Container::set_runtime(const std::string& value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:containers.Container.runtime)
}
inline std::string* Container::mutable_runtime() {
  // @@protoc_insertion_point(field_mutable:containers.Container.runtime)
  return _internal_mutable_runtime();
}
inline const std::string& Container::_internal_runtime() const {
  return runtime_.Get();
}
inline void Container::_internal_set_runtime(const std::string& value) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_runtime(std::string&& value) {
  
  runtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.runtime)
}
inline void Container::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.runtime)
}
inline void Container::set_runtime(const char* value,
    size_t size) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.runtime)
}
inline std::string* Container::_internal_mutable_runtime() {
  
  return runtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_runtime() {
  // @@protoc_insertion_point(field_release:containers.Container.runtime)
  return runtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_runtime(std::string* runtime) {
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.runtime)
}
inline std::string* Container::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.runtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_runtime(
    std::string* runtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.runtime)
}

// string name = 16;
inline void Container::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::name() const {
  // @@protoc_insertion_point(field_get:containers.Container.name)
  return _internal_name();
}
inline void Container::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:containers.Container.name)
}
inline std::string* Container::mutable_name() {
  // @@protoc_insertion_point(field_mutable:containers.Container.name)
  return _internal_mutable_name();
}
inline const std::string& Container::_internal_name() const {
  return name_.Get();
}
inline void Container::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.name)
}
inline void Container::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.name)
}
inline void Container::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.name)
}
inline std::string* Container::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_name() {
  // @@protoc_insertion_point(field_release:containers.Container.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.name)
}
inline std::string* Container::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.name)
}

// string health_state = 17;
inline void Container::clear_health_state() {
  health_state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::health_state() const {
  // @@protoc_insertion_point(field_get:containers.Container.health_state)
  return _internal_health_state();
}
inline void Container::set_health_state(const std::string& value) {
  _internal_set_health_state(value);
  // @@protoc_insertion_point(field_set:containers.Container.health_state)
}
inline std::string* Container::mutable_health_state() {
  // @@protoc_insertion_point(field_mutable:containers.Container.health_state)
  return _internal_mutable_health_state();
}
inline const std::string& Container::_internal_health_state() const {
  return health_state_.Get();
}
inline void Container::_internal_set_health_state(const std::string& value) {
  
  health_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_health_state(std::string&& value) {
  
  health_state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container.health_state)
}
inline void Container::set_health_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container.health_state)
}
inline void Container::set_health_state(const char* value,
    size_t size) {
  
  health_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container.health_state)
}
inline std::string* Container::_internal_mutable_health_state() {
  
  return health_state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_health_state() {
  // @@protoc_insertion_point(field_release:containers.Container.health_state)
  return health_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_health_state(std::string* health_state) {
  if (health_state != nullptr) {
    
  } else {
    
  }
  health_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container.health_state)
}
inline std::string* Container::unsafe_arena_release_health_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container.health_state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_health_state(
    std::string* health_state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health_state != nullptr) {
    
  } else {
    
  }
  health_state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health_state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container.health_state)
}

// int64 created = 18;
inline void Container::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Container::_internal_created() const {
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Container::created() const {
  // @@protoc_insertion_point(field_get:containers.Container.created)
  return _internal_created();
}
inline void Container::_internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ = value;
}
inline void Container::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:containers.Container.created)
}

// -------------------------------------------------------------------

// Container_info

// string id = 1;
inline void Container_info::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container_info::id() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.id)
  return _internal_id();
}
inline void Container_info::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.id)
}
inline std::string* Container_info::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.Container_info.id)
  return _internal_mutable_id();
}
inline const std::string& Container_info::_internal_id() const {
  return id_.Get();
}
inline void Container_info::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container_info::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container_info.id)
}
inline void Container_info::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container_info.id)
}
inline void Container_info::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container_info.id)
}
inline std::string* Container_info::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container_info::release_id() {
  // @@protoc_insertion_point(field_release:containers.Container_info.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container_info::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container_info.id)
}
inline std::string* Container_info::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container_info.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container_info::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container_info.id)
}

// uint64 pids_current = 2;
inline void Container_info::clear_pids_current() {
  pids_current_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_pids_current() const {
  return pids_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::pids_current() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.pids_current)
  return _internal_pids_current();
}
inline void Container_info::_internal_set_pids_current(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pids_current_ = value;
}
inline void Container_info::set_pids_current(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pids_current(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.pids_current)
}

// uint64 cpu_use_nanos = 3;
inline void Container_info::clear_cpu_use_nanos() {
  cpu_use_nanos_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cpu_use_nanos() const {
  return cpu_use_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cpu_use_nanos() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cpu_use_nanos)
  return _internal_cpu_use_nanos();
}
inline void Container_info::_internal_set_cpu_use_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_use_nanos_ = value;
}
inline void Container_info::set_cpu_use_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_use_nanos(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cpu_use_nanos)
}

// uint64 cpu_use_user = 4;
inline void Container_info::clear_cpu_use_user() {
  cpu_use_user_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cpu_use_user() const {
  return cpu_use_user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cpu_use_user() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cpu_use_user)
  return _internal_cpu_use_user();
}
inline void Container_info::_internal_set_cpu_use_user(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_use_user_ = value;
}
inline void Container_info::set_cpu_use_user(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_use_user(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cpu_use_user)
}

// uint64 cpu_use_kernel = 5;
inline void Container_info::clear_cpu_use_kernel() {
  cpu_use_kernel_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cpu_use_kernel() const {
  return cpu_use_kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cpu_use_kernel() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cpu_use_kernel)
  return _internal_cpu_use_kernel();
}
inline void Container_info::_internal_set_cpu_use_kernel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_use_kernel_ = value;
}
inline void Container_info::set_cpu_use_kernel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_use_kernel(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cpu_use_kernel)
}

// uint64 cpu_system_use = 6;
inline void Container_info::clear_cpu_system_use() {
  cpu_system_use_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cpu_system_use() const {
  return cpu_system_use_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cpu_system_use() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cpu_system_use)
  return _internal_cpu_system_use();
}
inline void Container_info::_internal_set_cpu_system_use(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_system_use_ = value;
}
inline void Container_info::set_cpu_system_use(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_system_use(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cpu_system_use)
}

// uint32 online_cpus = 7;
inline void Container_info::clear_online_cpus() {
  online_cpus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container_info::_internal_online_cpus() const {
  return online_cpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Container_info::online_cpus() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.online_cpus)
  return _internal_online_cpus();
}
inline void Container_info::_internal_set_online_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  online_cpus_ = value;
}
inline void Container_info::set_online_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_online_cpus(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.online_cpus)
}

// uint64 blkio_read = 8;
inline void Container_info::clear_blkio_read() {
  blkio_read_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_blkio_read() const {
  return blkio_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::blkio_read() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.blkio_read)
  return _internal_blkio_read();
}
inline void Container_info::_internal_set_blkio_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blkio_read_ = value;
}
inline void Container_info::set_blkio_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blkio_read(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.blkio_read)
}

// uint64 blkio_write = 9;
inline void Container_info::clear_blkio_write() {
  blkio_write_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_blkio_write() const {
  return blkio_write_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::blkio_write() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.blkio_write)
  return _internal_blkio_write();
}
inline void Container_info::_internal_set_blkio_write(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blkio_write_ = value;
}
inline void Container_info::set_blkio_write(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blkio_write(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.blkio_write)
}

// uint64 mem_used = 10;
inline void Container_info::clear_mem_used() {
  mem_used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_mem_used() const {
  return mem_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::mem_used() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.mem_used)
  return _internal_mem_used();
}
inline void Container_info::_internal_set_mem_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mem_used_ = value;
}
inline void Container_info::set_mem_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mem_used(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.mem_used)
}

// uint64 mem_limit = 11;
inline void Container_info::clear_mem_limit() {
  mem_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_mem_limit() const {
  return mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::mem_limit() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.mem_limit)
  return _internal_mem_limit();
}
inline void Container_info::_internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mem_limit_ = value;
}
inline void Container_info::set_mem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mem_limit(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.mem_limit)
}

// uint64 kmem_used = 12;
inline void Container_info::clear_kmem_used() {
  kmem_used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_kmem_used() const {
  return kmem_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::kmem_used() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.kmem_used)
  return _internal_kmem_used();
}
inline void Container_info::_internal_set_kmem_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  kmem_used_ = value;
}
inline void Container_info::set_kmem_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_kmem_used(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.kmem_used)
}

// uint64 kmem_limit = 13;
inline void Container_info::clear_kmem_limit() {
  kmem_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_kmem_limit() const {
  return kmem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::kmem_limit() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.kmem_limit)
  return _internal_kmem_limit();
}
inline void Container_info::_internal_set_kmem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  kmem_limit_ = value;
}
inline void Container_info::set_kmem_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_kmem_limit(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.kmem_limit)
}

// string name = 14;
inline void Container_info::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container_info::name() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.name)
  return _internal_name();
}
inline void Container_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.name)
}
inline std::string* Container_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:containers.Container_info.name)
  return _internal_mutable_name();
}
inline const std::string& Container_info::_internal_name() const {
  return name_.Get();
}
inline void Container_info::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container_info::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container_info.name)
}
inline void Container_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container_info.name)
}
inline void Container_info::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container_info.name)
}
inline std::string* Container_info::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container_info::release_name() {
  // @@protoc_insertion_point(field_release:containers.Container_info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container_info.name)
}
inline std::string* Container_info::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container_info.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container_info::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container_info.name)
}

// string status = 15;
inline void Container_info::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container_info::status() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.status)
  return _internal_status();
}
inline void Container_info::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.status)
}
inline std::string* Container_info::mutable_status() {
  // @@protoc_insertion_point(field_mutable:containers.Container_info.status)
  return _internal_mutable_status();
}
inline const std::string& Container_info::_internal_status() const {
  return status_.Get();
}
inline void Container_info::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container_info::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Container_info.status)
}
inline void Container_info::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Container_info.status)
}
inline void Container_info::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Container_info.status)
}
inline std::string* Container_info::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container_info::release_status() {
  // @@protoc_insertion_point(field_release:containers.Container_info.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container_info::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Container_info.status)
}
inline std::string* Container_info::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Container_info.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container_info::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Container_info.status)
}

// uint64 cache = 16;
inline void Container_info::clear_cache() {
  cache_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cache() const {
  return cache_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cache() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cache)
  return _internal_cache();
}
inline void Container_info::_internal_set_cache(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cache_ = value;
}
inline void Container_info::set_cache(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cache)
}

// uint64 cache_total = 17;
inline void Container_info::clear_cache_total() {
  cache_total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_cache_total() const {
  return cache_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::cache_total() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.cache_total)
  return _internal_cache_total();
}
inline void Container_info::_internal_set_cache_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cache_total_ = value;
}
inline void Container_info::set_cache_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cache_total(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.cache_total)
}

// uint64 inactive_file_total = 18;
inline void Container_info::clear_inactive_file_total() {
  inactive_file_total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::_internal_inactive_file_total() const {
  return inactive_file_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Container_info::inactive_file_total() const {
  // @@protoc_insertion_point(field_get:containers.Container_info.inactive_file_total)
  return _internal_inactive_file_total();
}
inline void Container_info::_internal_set_inactive_file_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inactive_file_total_ = value;
}
inline void Container_info::set_inactive_file_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inactive_file_total(value);
  // @@protoc_insertion_point(field_set:containers.Container_info.inactive_file_total)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event

// .google.protobuf.Timestamp timestamp = 1;
inline bool Event::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Event::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:containers.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Event.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:containers.Event.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:containers.Event.timestamp)
  return _internal_mutable_timestamp();
}
inline void Event::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:containers.Event.timestamp)
}

// string opt = 2;
inline void Event::clear_opt() {
  opt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::opt() const {
  // @@protoc_insertion_point(field_get:containers.Event.opt)
  return _internal_opt();
}
inline void Event::set_opt(const std::string& value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:containers.Event.opt)
}
inline std::string* Event::mutable_opt() {
  // @@protoc_insertion_point(field_mutable:containers.Event.opt)
  return _internal_mutable_opt();
}
inline const std::string& Event::_internal_opt() const {
  return opt_.Get();
}
inline void Event::_internal_set_opt(const std::string& value) {
  
  opt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_opt(std::string&& value) {
  
  opt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Event.opt)
}
inline void Event::set_opt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Event.opt)
}
inline void Event::set_opt(const char* value,
    size_t size) {
  
  opt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Event.opt)
}
inline std::string* Event::_internal_mutable_opt() {
  
  return opt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_opt() {
  // @@protoc_insertion_point(field_release:containers.Event.opt)
  return opt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_opt(std::string* opt) {
  if (opt != nullptr) {
    
  } else {
    
  }
  opt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Event.opt)
}
inline std::string* Event::unsafe_arena_release_opt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Event.opt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return opt_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_opt(
    std::string* opt) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (opt != nullptr) {
    
  } else {
    
  }
  opt_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      opt, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Event.opt)
}

// string id = 3;
inline void Event::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::id() const {
  // @@protoc_insertion_point(field_get:containers.Event.id)
  return _internal_id();
}
inline void Event::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.Event.id)
}
inline std::string* Event::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.Event.id)
  return _internal_mutable_id();
}
inline const std::string& Event::_internal_id() const {
  return id_.Get();
}
inline void Event::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.Event.id)
}
inline void Event::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.Event.id)
}
inline void Event::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.Event.id)
}
inline std::string* Event::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_id() {
  // @@protoc_insertion_point(field_release:containers.Event.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.Event.id)
}
inline std::string* Event::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.Event.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.Event.id)
}

// map<string, string> annotations = 4;
inline int Event::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Event::annotations_size() const {
  return _internal_annotations_size();
}
inline void Event::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::annotations() const {
  // @@protoc_insertion_point(field_map:containers.Event.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:containers.Event.annotations)
  return _internal_mutable_annotations();
}

// -------------------------------------------------------------------

// CreateRequest

// string id = 1;
inline void CreateRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.id)
  return _internal_id();
}
inline void CreateRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.id)
}
inline std::string* CreateRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CreateRequest::_internal_id() const {
  return id_.Get();
}
inline void CreateRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.id)
}
inline void CreateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.id)
}
inline void CreateRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.id)
}
inline std::string* CreateRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.id)
}
inline std::string* CreateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.id)
}

// string rootfs = 2;
inline void CreateRequest::clear_rootfs() {
  rootfs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::rootfs() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.rootfs)
  return _internal_rootfs();
}
inline void CreateRequest::set_rootfs(const std::string& value) {
  _internal_set_rootfs(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.rootfs)
}
inline std::string* CreateRequest::mutable_rootfs() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.rootfs)
  return _internal_mutable_rootfs();
}
inline const std::string& CreateRequest::_internal_rootfs() const {
  return rootfs_.Get();
}
inline void CreateRequest::_internal_set_rootfs(const std::string& value) {
  
  rootfs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_rootfs(std::string&& value) {
  
  rootfs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.rootfs)
}
inline void CreateRequest::set_rootfs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rootfs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.rootfs)
}
inline void CreateRequest::set_rootfs(const char* value,
    size_t size) {
  
  rootfs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.rootfs)
}
inline std::string* CreateRequest::_internal_mutable_rootfs() {
  
  return rootfs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_rootfs() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.rootfs)
  return rootfs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_rootfs(std::string* rootfs) {
  if (rootfs != nullptr) {
    
  } else {
    
  }
  rootfs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rootfs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.rootfs)
}
inline std::string* CreateRequest::unsafe_arena_release_rootfs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.rootfs)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rootfs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_rootfs(
    std::string* rootfs) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rootfs != nullptr) {
    
  } else {
    
  }
  rootfs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rootfs, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.rootfs)
}

// string image = 3;
inline void CreateRequest::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::image() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.image)
  return _internal_image();
}
inline void CreateRequest::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.image)
}
inline std::string* CreateRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.image)
  return _internal_mutable_image();
}
inline const std::string& CreateRequest::_internal_image() const {
  return image_.Get();
}
inline void CreateRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.image)
}
inline void CreateRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.image)
}
inline void CreateRequest::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.image)
}
inline std::string* CreateRequest::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_image() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.image)
}
inline std::string* CreateRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.image)
}

// string runtime = 4;
inline void CreateRequest::clear_runtime() {
  runtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::runtime() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.runtime)
  return _internal_runtime();
}
inline void CreateRequest::set_runtime(const std::string& value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.runtime)
}
inline std::string* CreateRequest::mutable_runtime() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.runtime)
  return _internal_mutable_runtime();
}
inline const std::string& CreateRequest::_internal_runtime() const {
  return runtime_.Get();
}
inline void CreateRequest::_internal_set_runtime(const std::string& value) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_runtime(std::string&& value) {
  
  runtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.runtime)
}
inline void CreateRequest::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.runtime)
}
inline void CreateRequest::set_runtime(const char* value,
    size_t size) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.runtime)
}
inline std::string* CreateRequest::_internal_mutable_runtime() {
  
  return runtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_runtime() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.runtime)
  return runtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_runtime(std::string* runtime) {
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.runtime)
}
inline std::string* CreateRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.runtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_runtime(
    std::string* runtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.runtime)
}

// string hostconfig = 5;
inline void CreateRequest::clear_hostconfig() {
  hostconfig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::hostconfig() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.hostconfig)
  return _internal_hostconfig();
}
inline void CreateRequest::set_hostconfig(const std::string& value) {
  _internal_set_hostconfig(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.hostconfig)
}
inline std::string* CreateRequest::mutable_hostconfig() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.hostconfig)
  return _internal_mutable_hostconfig();
}
inline const std::string& CreateRequest::_internal_hostconfig() const {
  return hostconfig_.Get();
}
inline void CreateRequest::_internal_set_hostconfig(const std::string& value) {
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_hostconfig(std::string&& value) {
  
  hostconfig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.hostconfig)
}
inline void CreateRequest::set_hostconfig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.hostconfig)
}
inline void CreateRequest::set_hostconfig(const char* value,
    size_t size) {
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.hostconfig)
}
inline std::string* CreateRequest::_internal_mutable_hostconfig() {
  
  return hostconfig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_hostconfig() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.hostconfig)
  return hostconfig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_hostconfig(std::string* hostconfig) {
  if (hostconfig != nullptr) {
    
  } else {
    
  }
  hostconfig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostconfig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.hostconfig)
}
inline std::string* CreateRequest::unsafe_arena_release_hostconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.hostconfig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostconfig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_hostconfig(
    std::string* hostconfig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostconfig != nullptr) {
    
  } else {
    
  }
  hostconfig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostconfig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.hostconfig)
}

// string customconfig = 6;
inline void CreateRequest::clear_customconfig() {
  customconfig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRequest::customconfig() const {
  // @@protoc_insertion_point(field_get:containers.CreateRequest.customconfig)
  return _internal_customconfig();
}
inline void CreateRequest::set_customconfig(const std::string& value) {
  _internal_set_customconfig(value);
  // @@protoc_insertion_point(field_set:containers.CreateRequest.customconfig)
}
inline std::string* CreateRequest::mutable_customconfig() {
  // @@protoc_insertion_point(field_mutable:containers.CreateRequest.customconfig)
  return _internal_mutable_customconfig();
}
inline const std::string& CreateRequest::_internal_customconfig() const {
  return customconfig_.Get();
}
inline void CreateRequest::_internal_set_customconfig(const std::string& value) {
  
  customconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRequest::set_customconfig(std::string&& value) {
  
  customconfig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateRequest.customconfig)
}
inline void CreateRequest::set_customconfig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateRequest.customconfig)
}
inline void CreateRequest::set_customconfig(const char* value,
    size_t size) {
  
  customconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateRequest.customconfig)
}
inline std::string* CreateRequest::_internal_mutable_customconfig() {
  
  return customconfig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRequest::release_customconfig() {
  // @@protoc_insertion_point(field_release:containers.CreateRequest.customconfig)
  return customconfig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRequest::set_allocated_customconfig(std::string* customconfig) {
  if (customconfig != nullptr) {
    
  } else {
    
  }
  customconfig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customconfig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateRequest.customconfig)
}
inline std::string* CreateRequest::unsafe_arena_release_customconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateRequest.customconfig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return customconfig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRequest::unsafe_arena_set_allocated_customconfig(
    std::string* customconfig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (customconfig != nullptr) {
    
  } else {
    
  }
  customconfig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      customconfig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateRequest.customconfig)
}

// -------------------------------------------------------------------

// CreateResponse

// string id = 1;
inline void CreateResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.CreateResponse.id)
  return _internal_id();
}
inline void CreateResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.CreateResponse.id)
}
inline std::string* CreateResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.CreateResponse.id)
  return _internal_mutable_id();
}
inline const std::string& CreateResponse::_internal_id() const {
  return id_.Get();
}
inline void CreateResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateResponse.id)
}
inline void CreateResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateResponse.id)
}
inline void CreateResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateResponse.id)
}
inline std::string* CreateResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.CreateResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateResponse.id)
}
inline std::string* CreateResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateResponse.id)
}

// int32 pid = 2;
inline void CreateResponse::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResponse::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateResponse::pid() const {
  // @@protoc_insertion_point(field_get:containers.CreateResponse.pid)
  return _internal_pid();
}
inline void CreateResponse::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void CreateResponse::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containers.CreateResponse.pid)
}

// uint32 cc = 3;
inline void CreateResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.CreateResponse.cc)
  return _internal_cc();
}
inline void CreateResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void CreateResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.CreateResponse.cc)
}

// string errmsg = 4;
inline void CreateResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.CreateResponse.errmsg)
  return _internal_errmsg();
}
inline void CreateResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.CreateResponse.errmsg)
}
inline std::string* CreateResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.CreateResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& CreateResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void CreateResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CreateResponse.errmsg)
}
inline void CreateResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CreateResponse.errmsg)
}
inline void CreateResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CreateResponse.errmsg)
}
inline std::string* CreateResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.CreateResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CreateResponse.errmsg)
}
inline std::string* CreateResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CreateResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CreateResponse.errmsg)
}

// -------------------------------------------------------------------

// StartRequest

// string id = 1;
inline void StartRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.id)
  return _internal_id();
}
inline void StartRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.id)
}
inline std::string* StartRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.StartRequest.id)
  return _internal_mutable_id();
}
inline const std::string& StartRequest::_internal_id() const {
  return id_.Get();
}
inline void StartRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartRequest.id)
}
inline void StartRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartRequest.id)
}
inline void StartRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartRequest.id)
}
inline std::string* StartRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.StartRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartRequest.id)
}
inline std::string* StartRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartRequest.id)
}

// string stdin = 2;
inline void StartRequest::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartRequest::stdin() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.stdin)
  return _internal_stdin();
}
inline void StartRequest::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.stdin)
}
inline std::string* StartRequest::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:containers.StartRequest.stdin)
  return _internal_mutable_stdin();
}
inline const std::string& StartRequest::_internal_stdin() const {
  return stdin_.Get();
}
inline void StartRequest::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartRequest::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartRequest.stdin)
}
inline void StartRequest::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartRequest.stdin)
}
inline void StartRequest::set_stdin(const char* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartRequest.stdin)
}
inline std::string* StartRequest::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartRequest::release_stdin() {
  // @@protoc_insertion_point(field_release:containers.StartRequest.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartRequest::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartRequest.stdin)
}
inline std::string* StartRequest::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartRequest.stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartRequest::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartRequest.stdin)
}

// bool attach_stdin = 3;
inline void StartRequest::clear_attach_stdin() {
  attach_stdin_ = false;
}
inline bool StartRequest::_internal_attach_stdin() const {
  return attach_stdin_;
}
inline bool StartRequest::attach_stdin() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.attach_stdin)
  return _internal_attach_stdin();
}
inline void StartRequest::_internal_set_attach_stdin(bool value) {
  
  attach_stdin_ = value;
}
inline void StartRequest::set_attach_stdin(bool value) {
  _internal_set_attach_stdin(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.attach_stdin)
}

// string stdout = 4;
inline void StartRequest::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartRequest::stdout() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.stdout)
  return _internal_stdout();
}
inline void StartRequest::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.stdout)
}
inline std::string* StartRequest::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:containers.StartRequest.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& StartRequest::_internal_stdout() const {
  return stdout_.Get();
}
inline void StartRequest::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartRequest::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartRequest.stdout)
}
inline void StartRequest::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartRequest.stdout)
}
inline void StartRequest::set_stdout(const char* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartRequest.stdout)
}
inline std::string* StartRequest::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartRequest::release_stdout() {
  // @@protoc_insertion_point(field_release:containers.StartRequest.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartRequest::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartRequest.stdout)
}
inline std::string* StartRequest::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartRequest.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartRequest::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartRequest.stdout)
}

// bool attach_stdout = 5;
inline void StartRequest::clear_attach_stdout() {
  attach_stdout_ = false;
}
inline bool StartRequest::_internal_attach_stdout() const {
  return attach_stdout_;
}
inline bool StartRequest::attach_stdout() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.attach_stdout)
  return _internal_attach_stdout();
}
inline void StartRequest::_internal_set_attach_stdout(bool value) {
  
  attach_stdout_ = value;
}
inline void StartRequest::set_attach_stdout(bool value) {
  _internal_set_attach_stdout(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.attach_stdout)
}

// string stderr = 6;
inline void StartRequest::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartRequest::stderr() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.stderr)
  return _internal_stderr();
}
inline void StartRequest::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.stderr)
}
inline std::string* StartRequest::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:containers.StartRequest.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& StartRequest::_internal_stderr() const {
  return stderr_.Get();
}
inline void StartRequest::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartRequest::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartRequest.stderr)
}
inline void StartRequest::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartRequest.stderr)
}
inline void StartRequest::set_stderr(const char* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartRequest.stderr)
}
inline std::string* StartRequest::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartRequest::release_stderr() {
  // @@protoc_insertion_point(field_release:containers.StartRequest.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartRequest::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartRequest.stderr)
}
inline std::string* StartRequest::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartRequest.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartRequest::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartRequest.stderr)
}

// bool attach_stderr = 7;
inline void StartRequest::clear_attach_stderr() {
  attach_stderr_ = false;
}
inline bool StartRequest::_internal_attach_stderr() const {
  return attach_stderr_;
}
inline bool StartRequest::attach_stderr() const {
  // @@protoc_insertion_point(field_get:containers.StartRequest.attach_stderr)
  return _internal_attach_stderr();
}
inline void StartRequest::_internal_set_attach_stderr(bool value) {
  
  attach_stderr_ = value;
}
inline void StartRequest::set_attach_stderr(bool value) {
  _internal_set_attach_stderr(value);
  // @@protoc_insertion_point(field_set:containers.StartRequest.attach_stderr)
}

// -------------------------------------------------------------------

// StartResponse

// string id = 1;
inline void StartResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.StartResponse.id)
  return _internal_id();
}
inline void StartResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.StartResponse.id)
}
inline std::string* StartResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.StartResponse.id)
  return _internal_mutable_id();
}
inline const std::string& StartResponse::_internal_id() const {
  return id_.Get();
}
inline void StartResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartResponse.id)
}
inline void StartResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartResponse.id)
}
inline void StartResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartResponse.id)
}
inline std::string* StartResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.StartResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartResponse.id)
}
inline std::string* StartResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartResponse.id)
}

// uint32 cc = 2;
inline void StartResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.StartResponse.cc)
  return _internal_cc();
}
inline void StartResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void StartResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.StartResponse.cc)
}

// string errmsg = 3;
inline void StartResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.StartResponse.errmsg)
  return _internal_errmsg();
}
inline void StartResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.StartResponse.errmsg)
}
inline std::string* StartResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.StartResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& StartResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void StartResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StartResponse.errmsg)
}
inline void StartResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StartResponse.errmsg)
}
inline void StartResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StartResponse.errmsg)
}
inline std::string* StartResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.StartResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StartResponse.errmsg)
}
inline std::string* StartResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StartResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StartResponse.errmsg)
}

// -------------------------------------------------------------------

// RemoteStartRequest

// bytes stdin = 1;
inline void RemoteStartRequest::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteStartRequest::stdin() const {
  // @@protoc_insertion_point(field_get:containers.RemoteStartRequest.stdin)
  return _internal_stdin();
}
inline void RemoteStartRequest::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:containers.RemoteStartRequest.stdin)
}
inline std::string* RemoteStartRequest::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:containers.RemoteStartRequest.stdin)
  return _internal_mutable_stdin();
}
inline const std::string& RemoteStartRequest::_internal_stdin() const {
  return stdin_.Get();
}
inline void RemoteStartRequest::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteStartRequest::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RemoteStartRequest.stdin)
}
inline void RemoteStartRequest::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RemoteStartRequest.stdin)
}
inline void RemoteStartRequest::set_stdin(const void* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteStartRequest.stdin)
}
inline std::string* RemoteStartRequest::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteStartRequest::release_stdin() {
  // @@protoc_insertion_point(field_release:containers.RemoteStartRequest.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteStartRequest::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RemoteStartRequest.stdin)
}
inline std::string* RemoteStartRequest::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RemoteStartRequest.stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteStartRequest::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RemoteStartRequest.stdin)
}

// bool finish = 2;
inline void RemoteStartRequest::clear_finish() {
  finish_ = false;
}
inline bool RemoteStartRequest::_internal_finish() const {
  return finish_;
}
inline bool RemoteStartRequest::finish() const {
  // @@protoc_insertion_point(field_get:containers.RemoteStartRequest.finish)
  return _internal_finish();
}
inline void RemoteStartRequest::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void RemoteStartRequest::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.RemoteStartRequest.finish)
}

// -------------------------------------------------------------------

// RemoteStartResponse

// bytes stdout = 1;
inline void RemoteStartResponse::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteStartResponse::stdout() const {
  // @@protoc_insertion_point(field_get:containers.RemoteStartResponse.stdout)
  return _internal_stdout();
}
inline void RemoteStartResponse::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:containers.RemoteStartResponse.stdout)
}
inline std::string* RemoteStartResponse::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:containers.RemoteStartResponse.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& RemoteStartResponse::_internal_stdout() const {
  return stdout_.Get();
}
inline void RemoteStartResponse::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteStartResponse::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RemoteStartResponse.stdout)
}
inline void RemoteStartResponse::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RemoteStartResponse.stdout)
}
inline void RemoteStartResponse::set_stdout(const void* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteStartResponse.stdout)
}
inline std::string* RemoteStartResponse::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteStartResponse::release_stdout() {
  // @@protoc_insertion_point(field_release:containers.RemoteStartResponse.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteStartResponse::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RemoteStartResponse.stdout)
}
inline std::string* RemoteStartResponse::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RemoteStartResponse.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteStartResponse::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RemoteStartResponse.stdout)
}

// bytes stderr = 2;
inline void RemoteStartResponse::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteStartResponse::stderr() const {
  // @@protoc_insertion_point(field_get:containers.RemoteStartResponse.stderr)
  return _internal_stderr();
}
inline void RemoteStartResponse::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:containers.RemoteStartResponse.stderr)
}
inline std::string* RemoteStartResponse::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:containers.RemoteStartResponse.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& RemoteStartResponse::_internal_stderr() const {
  return stderr_.Get();
}
inline void RemoteStartResponse::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteStartResponse::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RemoteStartResponse.stderr)
}
inline void RemoteStartResponse::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RemoteStartResponse.stderr)
}
inline void RemoteStartResponse::set_stderr(const void* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteStartResponse.stderr)
}
inline std::string* RemoteStartResponse::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteStartResponse::release_stderr() {
  // @@protoc_insertion_point(field_release:containers.RemoteStartResponse.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteStartResponse::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RemoteStartResponse.stderr)
}
inline std::string* RemoteStartResponse::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RemoteStartResponse.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteStartResponse::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RemoteStartResponse.stderr)
}

// bool finish = 3;
inline void RemoteStartResponse::clear_finish() {
  finish_ = false;
}
inline bool RemoteStartResponse::_internal_finish() const {
  return finish_;
}
inline bool RemoteStartResponse::finish() const {
  // @@protoc_insertion_point(field_get:containers.RemoteStartResponse.finish)
  return _internal_finish();
}
inline void RemoteStartResponse::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void RemoteStartResponse::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.RemoteStartResponse.finish)
}

// -------------------------------------------------------------------

// TopRequest

// string id = 1;
inline void TopRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.TopRequest.id)
  return _internal_id();
}
inline void TopRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.TopRequest.id)
}
inline std::string* TopRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.TopRequest.id)
  return _internal_mutable_id();
}
inline const std::string& TopRequest::_internal_id() const {
  return id_.Get();
}
inline void TopRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.TopRequest.id)
}
inline void TopRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.TopRequest.id)
}
inline void TopRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.TopRequest.id)
}
inline std::string* TopRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.TopRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.TopRequest.id)
}
inline std::string* TopRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.TopRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.TopRequest.id)
}

// repeated string args = 2;
inline int TopRequest::_internal_args_size() const {
  return args_.size();
}
inline int TopRequest::args_size() const {
  return _internal_args_size();
}
inline void TopRequest::clear_args() {
  args_.Clear();
}
inline std::string* TopRequest::add_args() {
  // @@protoc_insertion_point(field_add_mutable:containers.TopRequest.args)
  return _internal_add_args();
}
inline const std::string& TopRequest::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& TopRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:containers.TopRequest.args)
  return _internal_args(index);
}
inline std::string* TopRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:containers.TopRequest.args)
  return args_.Mutable(index);
}
inline void TopRequest::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.TopRequest.args)
  args_.Mutable(index)->assign(value);
}
inline void TopRequest::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.TopRequest.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void TopRequest::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.TopRequest.args)
}
inline void TopRequest::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.TopRequest.args)
}
inline std::string* TopRequest::_internal_add_args() {
  return args_.Add();
}
inline void TopRequest::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.TopRequest.args)
}
inline void TopRequest::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.TopRequest.args)
}
inline void TopRequest::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.TopRequest.args)
}
inline void TopRequest::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.TopRequest.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopRequest::args() const {
  // @@protoc_insertion_point(field_list:containers.TopRequest.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:containers.TopRequest.args)
  return &args_;
}

// -------------------------------------------------------------------

// TopResponse

// bytes titles = 1;
inline void TopResponse::clear_titles() {
  titles_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopResponse::titles() const {
  // @@protoc_insertion_point(field_get:containers.TopResponse.titles)
  return _internal_titles();
}
inline void TopResponse::set_titles(const std::string& value) {
  _internal_set_titles(value);
  // @@protoc_insertion_point(field_set:containers.TopResponse.titles)
}
inline std::string* TopResponse::mutable_titles() {
  // @@protoc_insertion_point(field_mutable:containers.TopResponse.titles)
  return _internal_mutable_titles();
}
inline const std::string& TopResponse::_internal_titles() const {
  return titles_.Get();
}
inline void TopResponse::_internal_set_titles(const std::string& value) {
  
  titles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopResponse::set_titles(std::string&& value) {
  
  titles_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.TopResponse.titles)
}
inline void TopResponse::set_titles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  titles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.TopResponse.titles)
}
inline void TopResponse::set_titles(const void* value,
    size_t size) {
  
  titles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.TopResponse.titles)
}
inline std::string* TopResponse::_internal_mutable_titles() {
  
  return titles_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopResponse::release_titles() {
  // @@protoc_insertion_point(field_release:containers.TopResponse.titles)
  return titles_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopResponse::set_allocated_titles(std::string* titles) {
  if (titles != nullptr) {
    
  } else {
    
  }
  titles_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), titles,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.TopResponse.titles)
}
inline std::string* TopResponse::unsafe_arena_release_titles() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.TopResponse.titles)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return titles_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopResponse::unsafe_arena_set_allocated_titles(
    std::string* titles) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (titles != nullptr) {
    
  } else {
    
  }
  titles_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      titles, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.TopResponse.titles)
}

// repeated bytes processes = 2;
inline int TopResponse::_internal_processes_size() const {
  return processes_.size();
}
inline int TopResponse::processes_size() const {
  return _internal_processes_size();
}
inline void TopResponse::clear_processes() {
  processes_.Clear();
}
inline std::string* TopResponse::add_processes() {
  // @@protoc_insertion_point(field_add_mutable:containers.TopResponse.processes)
  return _internal_add_processes();
}
inline const std::string& TopResponse::_internal_processes(int index) const {
  return processes_.Get(index);
}
inline const std::string& TopResponse::processes(int index) const {
  // @@protoc_insertion_point(field_get:containers.TopResponse.processes)
  return _internal_processes(index);
}
inline std::string* TopResponse::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:containers.TopResponse.processes)
  return processes_.Mutable(index);
}
inline void TopResponse::set_processes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.TopResponse.processes)
  processes_.Mutable(index)->assign(value);
}
inline void TopResponse::set_processes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.TopResponse.processes)
  processes_.Mutable(index)->assign(std::move(value));
}
inline void TopResponse::set_processes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.TopResponse.processes)
}
inline void TopResponse::set_processes(int index, const void* value, size_t size) {
  processes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.TopResponse.processes)
}
inline std::string* TopResponse::_internal_add_processes() {
  return processes_.Add();
}
inline void TopResponse::add_processes(const std::string& value) {
  processes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.TopResponse.processes)
}
inline void TopResponse::add_processes(std::string&& value) {
  processes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.TopResponse.processes)
}
inline void TopResponse::add_processes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.TopResponse.processes)
}
inline void TopResponse::add_processes(const void* value, size_t size) {
  processes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.TopResponse.processes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopResponse::processes() const {
  // @@protoc_insertion_point(field_list:containers.TopResponse.processes)
  return processes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopResponse::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:containers.TopResponse.processes)
  return &processes_;
}

// uint32 cc = 3;
inline void TopResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.TopResponse.cc)
  return _internal_cc();
}
inline void TopResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void TopResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.TopResponse.cc)
}

// string errmsg = 4;
inline void TopResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.TopResponse.errmsg)
  return _internal_errmsg();
}
inline void TopResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.TopResponse.errmsg)
}
inline std::string* TopResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.TopResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& TopResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void TopResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.TopResponse.errmsg)
}
inline void TopResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.TopResponse.errmsg)
}
inline void TopResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.TopResponse.errmsg)
}
inline std::string* TopResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.TopResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.TopResponse.errmsg)
}
inline std::string* TopResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.TopResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.TopResponse.errmsg)
}

// -------------------------------------------------------------------

// StopRequest

// string id = 1;
inline void StopRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.StopRequest.id)
  return _internal_id();
}
inline void StopRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.StopRequest.id)
}
inline std::string* StopRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.StopRequest.id)
  return _internal_mutable_id();
}
inline const std::string& StopRequest::_internal_id() const {
  return id_.Get();
}
inline void StopRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StopRequest.id)
}
inline void StopRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StopRequest.id)
}
inline void StopRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StopRequest.id)
}
inline std::string* StopRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.StopRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StopRequest.id)
}
inline std::string* StopRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StopRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StopRequest.id)
}

// bool force = 2;
inline void StopRequest::clear_force() {
  force_ = false;
}
inline bool StopRequest::_internal_force() const {
  return force_;
}
inline bool StopRequest::force() const {
  // @@protoc_insertion_point(field_get:containers.StopRequest.force)
  return _internal_force();
}
inline void StopRequest::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void StopRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:containers.StopRequest.force)
}

// int32 timeout = 3;
inline void StopRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopRequest::timeout() const {
  // @@protoc_insertion_point(field_get:containers.StopRequest.timeout)
  return _internal_timeout();
}
inline void StopRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void StopRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:containers.StopRequest.timeout)
}

// -------------------------------------------------------------------

// StopResponse

// string id = 1;
inline void StopResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.StopResponse.id)
  return _internal_id();
}
inline void StopResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.StopResponse.id)
}
inline std::string* StopResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.StopResponse.id)
  return _internal_mutable_id();
}
inline const std::string& StopResponse::_internal_id() const {
  return id_.Get();
}
inline void StopResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StopResponse.id)
}
inline void StopResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StopResponse.id)
}
inline void StopResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StopResponse.id)
}
inline std::string* StopResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.StopResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StopResponse.id)
}
inline std::string* StopResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StopResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StopResponse.id)
}

// uint32 cc = 2;
inline void StopResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.StopResponse.cc)
  return _internal_cc();
}
inline void StopResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void StopResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.StopResponse.cc)
}

// string errmsg = 3;
inline void StopResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.StopResponse.errmsg)
  return _internal_errmsg();
}
inline void StopResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.StopResponse.errmsg)
}
inline std::string* StopResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.StopResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& StopResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void StopResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StopResponse.errmsg)
}
inline void StopResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StopResponse.errmsg)
}
inline void StopResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StopResponse.errmsg)
}
inline std::string* StopResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.StopResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StopResponse.errmsg)
}
inline std::string* StopResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StopResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StopResponse.errmsg)
}

// -------------------------------------------------------------------

// RestartRequest

// string id = 1;
inline void RestartRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestartRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.RestartRequest.id)
  return _internal_id();
}
inline void RestartRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.RestartRequest.id)
}
inline std::string* RestartRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.RestartRequest.id)
  return _internal_mutable_id();
}
inline const std::string& RestartRequest::_internal_id() const {
  return id_.Get();
}
inline void RestartRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestartRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RestartRequest.id)
}
inline void RestartRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RestartRequest.id)
}
inline void RestartRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RestartRequest.id)
}
inline std::string* RestartRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestartRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.RestartRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestartRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RestartRequest.id)
}
inline std::string* RestartRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RestartRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestartRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RestartRequest.id)
}

// int32 timeout = 2;
inline void RestartRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestartRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestartRequest::timeout() const {
  // @@protoc_insertion_point(field_get:containers.RestartRequest.timeout)
  return _internal_timeout();
}
inline void RestartRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void RestartRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:containers.RestartRequest.timeout)
}

// -------------------------------------------------------------------

// RestartResponse

// string id = 1;
inline void RestartResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestartResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.RestartResponse.id)
  return _internal_id();
}
inline void RestartResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.RestartResponse.id)
}
inline std::string* RestartResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.RestartResponse.id)
  return _internal_mutable_id();
}
inline const std::string& RestartResponse::_internal_id() const {
  return id_.Get();
}
inline void RestartResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestartResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RestartResponse.id)
}
inline void RestartResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RestartResponse.id)
}
inline void RestartResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RestartResponse.id)
}
inline std::string* RestartResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestartResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.RestartResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestartResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RestartResponse.id)
}
inline std::string* RestartResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RestartResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestartResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RestartResponse.id)
}

// uint32 cc = 2;
inline void RestartResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestartResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestartResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.RestartResponse.cc)
  return _internal_cc();
}
inline void RestartResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void RestartResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.RestartResponse.cc)
}

// string errmsg = 3;
inline void RestartResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestartResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.RestartResponse.errmsg)
  return _internal_errmsg();
}
inline void RestartResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.RestartResponse.errmsg)
}
inline std::string* RestartResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.RestartResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& RestartResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void RestartResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestartResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RestartResponse.errmsg)
}
inline void RestartResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RestartResponse.errmsg)
}
inline void RestartResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RestartResponse.errmsg)
}
inline std::string* RestartResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestartResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.RestartResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestartResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RestartResponse.errmsg)
}
inline std::string* RestartResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RestartResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestartResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RestartResponse.errmsg)
}

// -------------------------------------------------------------------

// KillRequest

// string id = 1;
inline void KillRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KillRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.KillRequest.id)
  return _internal_id();
}
inline void KillRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.KillRequest.id)
}
inline std::string* KillRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.KillRequest.id)
  return _internal_mutable_id();
}
inline const std::string& KillRequest::_internal_id() const {
  return id_.Get();
}
inline void KillRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KillRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.KillRequest.id)
}
inline void KillRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.KillRequest.id)
}
inline void KillRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.KillRequest.id)
}
inline std::string* KillRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KillRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.KillRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KillRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.KillRequest.id)
}
inline std::string* KillRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.KillRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KillRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.KillRequest.id)
}

// uint32 signal = 2;
inline void KillRequest::clear_signal() {
  signal_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KillRequest::_internal_signal() const {
  return signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KillRequest::signal() const {
  // @@protoc_insertion_point(field_get:containers.KillRequest.signal)
  return _internal_signal();
}
inline void KillRequest::_internal_set_signal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signal_ = value;
}
inline void KillRequest::set_signal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:containers.KillRequest.signal)
}

// -------------------------------------------------------------------

// KillResponse

// string id = 1;
inline void KillResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KillResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.KillResponse.id)
  return _internal_id();
}
inline void KillResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.KillResponse.id)
}
inline std::string* KillResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.KillResponse.id)
  return _internal_mutable_id();
}
inline const std::string& KillResponse::_internal_id() const {
  return id_.Get();
}
inline void KillResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KillResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.KillResponse.id)
}
inline void KillResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.KillResponse.id)
}
inline void KillResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.KillResponse.id)
}
inline std::string* KillResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KillResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.KillResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KillResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.KillResponse.id)
}
inline std::string* KillResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.KillResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KillResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.KillResponse.id)
}

// uint32 cc = 2;
inline void KillResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KillResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KillResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.KillResponse.cc)
  return _internal_cc();
}
inline void KillResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void KillResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.KillResponse.cc)
}

// string errmsg = 3;
inline void KillResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KillResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.KillResponse.errmsg)
  return _internal_errmsg();
}
inline void KillResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.KillResponse.errmsg)
}
inline std::string* KillResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.KillResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& KillResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void KillResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KillResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.KillResponse.errmsg)
}
inline void KillResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.KillResponse.errmsg)
}
inline void KillResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.KillResponse.errmsg)
}
inline std::string* KillResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KillResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.KillResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KillResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.KillResponse.errmsg)
}
inline std::string* KillResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.KillResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KillResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.KillResponse.errmsg)
}

// -------------------------------------------------------------------

// DeleteRequest

// string id = 1;
inline void DeleteRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.DeleteRequest.id)
  return _internal_id();
}
inline void DeleteRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.DeleteRequest.id)
}
inline std::string* DeleteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.DeleteRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.DeleteRequest.id)
}
inline void DeleteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.DeleteRequest.id)
}
inline void DeleteRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.DeleteRequest.id)
}
inline std::string* DeleteRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.DeleteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.DeleteRequest.id)
}
inline std::string* DeleteRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.DeleteRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.DeleteRequest.id)
}

// bool force = 2;
inline void DeleteRequest::clear_force() {
  force_ = false;
}
inline bool DeleteRequest::_internal_force() const {
  return force_;
}
inline bool DeleteRequest::force() const {
  // @@protoc_insertion_point(field_get:containers.DeleteRequest.force)
  return _internal_force();
}
inline void DeleteRequest::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void DeleteRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:containers.DeleteRequest.force)
}

// bool volumes = 3;
inline void DeleteRequest::clear_volumes() {
  volumes_ = false;
}
inline bool DeleteRequest::_internal_volumes() const {
  return volumes_;
}
inline bool DeleteRequest::volumes() const {
  // @@protoc_insertion_point(field_get:containers.DeleteRequest.volumes)
  return _internal_volumes();
}
inline void DeleteRequest::_internal_set_volumes(bool value) {
  
  volumes_ = value;
}
inline void DeleteRequest::set_volumes(bool value) {
  _internal_set_volumes(value);
  // @@protoc_insertion_point(field_set:containers.DeleteRequest.volumes)
}

// -------------------------------------------------------------------

// DeleteResponse

// string id = 1;
inline void DeleteResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.DeleteResponse.id)
  return _internal_id();
}
inline void DeleteResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.DeleteResponse.id)
}
inline std::string* DeleteResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.DeleteResponse.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteResponse::_internal_id() const {
  return id_.Get();
}
inline void DeleteResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.DeleteResponse.id)
}
inline void DeleteResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.DeleteResponse.id)
}
inline void DeleteResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.DeleteResponse.id)
}
inline std::string* DeleteResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.DeleteResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.DeleteResponse.id)
}
inline std::string* DeleteResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.DeleteResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.DeleteResponse.id)
}

// uint32 exit_status = 2;
inline void DeleteResponse::clear_exit_status() {
  exit_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResponse::_internal_exit_status() const {
  return exit_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResponse::exit_status() const {
  // @@protoc_insertion_point(field_get:containers.DeleteResponse.exit_status)
  return _internal_exit_status();
}
inline void DeleteResponse::_internal_set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_status_ = value;
}
inline void DeleteResponse::set_exit_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_status(value);
  // @@protoc_insertion_point(field_set:containers.DeleteResponse.exit_status)
}

// uint32 cc = 3;
inline void DeleteResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.DeleteResponse.cc)
  return _internal_cc();
}
inline void DeleteResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void DeleteResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.DeleteResponse.cc)
}

// string errmsg = 4;
inline void DeleteResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.DeleteResponse.errmsg)
  return _internal_errmsg();
}
inline void DeleteResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.DeleteResponse.errmsg)
}
inline std::string* DeleteResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.DeleteResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& DeleteResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void DeleteResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.DeleteResponse.errmsg)
}
inline void DeleteResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.DeleteResponse.errmsg)
}
inline void DeleteResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.DeleteResponse.errmsg)
}
inline std::string* DeleteResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.DeleteResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.DeleteResponse.errmsg)
}
inline std::string* DeleteResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.DeleteResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.DeleteResponse.errmsg)
}

// -------------------------------------------------------------------

// PauseRequest

// string id = 1;
inline void PauseRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.PauseRequest.id)
  return _internal_id();
}
inline void PauseRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.PauseRequest.id)
}
inline std::string* PauseRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.PauseRequest.id)
  return _internal_mutable_id();
}
inline const std::string& PauseRequest::_internal_id() const {
  return id_.Get();
}
inline void PauseRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.PauseRequest.id)
}
inline void PauseRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.PauseRequest.id)
}
inline void PauseRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.PauseRequest.id)
}
inline std::string* PauseRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.PauseRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.PauseRequest.id)
}
inline std::string* PauseRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.PauseRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.PauseRequest.id)
}

// -------------------------------------------------------------------

// PauseResponse

// string id = 1;
inline void PauseResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.PauseResponse.id)
  return _internal_id();
}
inline void PauseResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.PauseResponse.id)
}
inline std::string* PauseResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.PauseResponse.id)
  return _internal_mutable_id();
}
inline const std::string& PauseResponse::_internal_id() const {
  return id_.Get();
}
inline void PauseResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.PauseResponse.id)
}
inline void PauseResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.PauseResponse.id)
}
inline void PauseResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.PauseResponse.id)
}
inline std::string* PauseResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.PauseResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.PauseResponse.id)
}
inline std::string* PauseResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.PauseResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.PauseResponse.id)
}

// uint32 cc = 2;
inline void PauseResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.PauseResponse.cc)
  return _internal_cc();
}
inline void PauseResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void PauseResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.PauseResponse.cc)
}

// string errmsg = 3;
inline void PauseResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.PauseResponse.errmsg)
  return _internal_errmsg();
}
inline void PauseResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.PauseResponse.errmsg)
}
inline std::string* PauseResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.PauseResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PauseResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PauseResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.PauseResponse.errmsg)
}
inline void PauseResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.PauseResponse.errmsg)
}
inline void PauseResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.PauseResponse.errmsg)
}
inline std::string* PauseResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.PauseResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.PauseResponse.errmsg)
}
inline std::string* PauseResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.PauseResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.PauseResponse.errmsg)
}

// -------------------------------------------------------------------

// ResumeRequest

// string id = 1;
inline void ResumeRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResumeRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.ResumeRequest.id)
  return _internal_id();
}
inline void ResumeRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ResumeRequest.id)
}
inline std::string* ResumeRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ResumeRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ResumeRequest::_internal_id() const {
  return id_.Get();
}
inline void ResumeRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResumeRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResumeRequest.id)
}
inline void ResumeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResumeRequest.id)
}
inline void ResumeRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResumeRequest.id)
}
inline std::string* ResumeRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResumeRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.ResumeRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResumeRequest.id)
}
inline std::string* ResumeRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResumeRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResumeRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResumeRequest.id)
}

// -------------------------------------------------------------------

// ResumeResponse

// string id = 1;
inline void ResumeResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResumeResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.ResumeResponse.id)
  return _internal_id();
}
inline void ResumeResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ResumeResponse.id)
}
inline std::string* ResumeResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ResumeResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ResumeResponse::_internal_id() const {
  return id_.Get();
}
inline void ResumeResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResumeResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResumeResponse.id)
}
inline void ResumeResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResumeResponse.id)
}
inline void ResumeResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResumeResponse.id)
}
inline std::string* ResumeResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResumeResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.ResumeResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResumeResponse.id)
}
inline std::string* ResumeResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResumeResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResumeResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResumeResponse.id)
}

// uint32 cc = 2;
inline void ResumeResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResumeResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResumeResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.ResumeResponse.cc)
  return _internal_cc();
}
inline void ResumeResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ResumeResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.ResumeResponse.cc)
}

// string errmsg = 3;
inline void ResumeResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResumeResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.ResumeResponse.errmsg)
  return _internal_errmsg();
}
inline void ResumeResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.ResumeResponse.errmsg)
}
inline std::string* ResumeResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.ResumeResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResumeResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResumeResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResumeResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResumeResponse.errmsg)
}
inline void ResumeResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResumeResponse.errmsg)
}
inline void ResumeResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResumeResponse.errmsg)
}
inline std::string* ResumeResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResumeResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.ResumeResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResumeResponse.errmsg)
}
inline std::string* ResumeResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResumeResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResumeResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResumeResponse.errmsg)
}

// -------------------------------------------------------------------

// InspectContainerRequest

// string id = 1;
inline void InspectContainerRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectContainerRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerRequest.id)
  return _internal_id();
}
inline void InspectContainerRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerRequest.id)
}
inline std::string* InspectContainerRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.InspectContainerRequest.id)
  return _internal_mutable_id();
}
inline const std::string& InspectContainerRequest::_internal_id() const {
  return id_.Get();
}
inline void InspectContainerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectContainerRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InspectContainerRequest.id)
}
inline void InspectContainerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InspectContainerRequest.id)
}
inline void InspectContainerRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InspectContainerRequest.id)
}
inline std::string* InspectContainerRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectContainerRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.InspectContainerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectContainerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InspectContainerRequest.id)
}
inline std::string* InspectContainerRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InspectContainerRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectContainerRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InspectContainerRequest.id)
}

// bool bformat = 2;
inline void InspectContainerRequest::clear_bformat() {
  bformat_ = false;
}
inline bool InspectContainerRequest::_internal_bformat() const {
  return bformat_;
}
inline bool InspectContainerRequest::bformat() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerRequest.bformat)
  return _internal_bformat();
}
inline void InspectContainerRequest::_internal_set_bformat(bool value) {
  
  bformat_ = value;
}
inline void InspectContainerRequest::set_bformat(bool value) {
  _internal_set_bformat(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerRequest.bformat)
}

// int32 timeout = 3;
inline void InspectContainerRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InspectContainerRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InspectContainerRequest::timeout() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerRequest.timeout)
  return _internal_timeout();
}
inline void InspectContainerRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void InspectContainerRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerRequest.timeout)
}

// -------------------------------------------------------------------

// InspectContainerResponse

// string ContainerJSON = 1;
inline void InspectContainerResponse::clear_containerjson() {
  containerjson_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectContainerResponse::containerjson() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerResponse.ContainerJSON)
  return _internal_containerjson();
}
inline void InspectContainerResponse::set_containerjson(const std::string& value) {
  _internal_set_containerjson(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerResponse.ContainerJSON)
}
inline std::string* InspectContainerResponse::mutable_containerjson() {
  // @@protoc_insertion_point(field_mutable:containers.InspectContainerResponse.ContainerJSON)
  return _internal_mutable_containerjson();
}
inline const std::string& InspectContainerResponse::_internal_containerjson() const {
  return containerjson_.Get();
}
inline void InspectContainerResponse::_internal_set_containerjson(const std::string& value) {
  
  containerjson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectContainerResponse::set_containerjson(std::string&& value) {
  
  containerjson_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InspectContainerResponse.ContainerJSON)
}
inline void InspectContainerResponse::set_containerjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerjson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InspectContainerResponse.ContainerJSON)
}
inline void InspectContainerResponse::set_containerjson(const char* value,
    size_t size) {
  
  containerjson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InspectContainerResponse.ContainerJSON)
}
inline std::string* InspectContainerResponse::_internal_mutable_containerjson() {
  
  return containerjson_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectContainerResponse::release_containerjson() {
  // @@protoc_insertion_point(field_release:containers.InspectContainerResponse.ContainerJSON)
  return containerjson_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectContainerResponse::set_allocated_containerjson(std::string* containerjson) {
  if (containerjson != nullptr) {
    
  } else {
    
  }
  containerjson_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerjson,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InspectContainerResponse.ContainerJSON)
}
inline std::string* InspectContainerResponse::unsafe_arena_release_containerjson() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InspectContainerResponse.ContainerJSON)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerjson_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectContainerResponse::unsafe_arena_set_allocated_containerjson(
    std::string* containerjson) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerjson != nullptr) {
    
  } else {
    
  }
  containerjson_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerjson, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InspectContainerResponse.ContainerJSON)
}

// uint32 cc = 2;
inline void InspectContainerResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectContainerResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectContainerResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerResponse.cc)
  return _internal_cc();
}
inline void InspectContainerResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void InspectContainerResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerResponse.cc)
}

// string errmsg = 3;
inline void InspectContainerResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectContainerResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.InspectContainerResponse.errmsg)
  return _internal_errmsg();
}
inline void InspectContainerResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.InspectContainerResponse.errmsg)
}
inline std::string* InspectContainerResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.InspectContainerResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& InspectContainerResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void InspectContainerResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectContainerResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InspectContainerResponse.errmsg)
}
inline void InspectContainerResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InspectContainerResponse.errmsg)
}
inline void InspectContainerResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InspectContainerResponse.errmsg)
}
inline std::string* InspectContainerResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectContainerResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.InspectContainerResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectContainerResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InspectContainerResponse.errmsg)
}
inline std::string* InspectContainerResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InspectContainerResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectContainerResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InspectContainerResponse.errmsg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListRequest

// map<string, string> filters = 1;
inline int ListRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int ListRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ListRequest::clear_filters() {
  filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListRequest::_internal_filters() const {
  return filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListRequest::filters() const {
  // @@protoc_insertion_point(field_map:containers.ListRequest.filters)
  return _internal_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListRequest::_internal_mutable_filters() {
  return filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:containers.ListRequest.filters)
  return _internal_mutable_filters();
}

// bool all = 2;
inline void ListRequest::clear_all() {
  all_ = false;
}
inline bool ListRequest::_internal_all() const {
  return all_;
}
inline bool ListRequest::all() const {
  // @@protoc_insertion_point(field_get:containers.ListRequest.all)
  return _internal_all();
}
inline void ListRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void ListRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:containers.ListRequest.all)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .containers.Container containers = 1;
inline int ListResponse::_internal_containers_size() const {
  return containers_.size();
}
inline int ListResponse::containers_size() const {
  return _internal_containers_size();
}
inline void ListResponse::clear_containers() {
  containers_.Clear();
}
inline ::containers::Container* ListResponse::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:containers.ListResponse.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container >*
ListResponse::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:containers.ListResponse.containers)
  return &containers_;
}
inline const ::containers::Container& ListResponse::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::containers::Container& ListResponse::containers(int index) const {
  // @@protoc_insertion_point(field_get:containers.ListResponse.containers)
  return _internal_containers(index);
}
inline ::containers::Container* ListResponse::_internal_add_containers() {
  return containers_.Add();
}
inline ::containers::Container* ListResponse::add_containers() {
  // @@protoc_insertion_point(field_add:containers.ListResponse.containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container >&
ListResponse::containers() const {
  // @@protoc_insertion_point(field_list:containers.ListResponse.containers)
  return containers_;
}

// uint32 cc = 2;
inline void ListResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.ListResponse.cc)
  return _internal_cc();
}
inline void ListResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ListResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.ListResponse.cc)
}

// string errmsg = 3;
inline void ListResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.ListResponse.errmsg)
  return _internal_errmsg();
}
inline void ListResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.ListResponse.errmsg)
}
inline std::string* ListResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.ListResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ListResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ListResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ListResponse.errmsg)
}
inline void ListResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ListResponse.errmsg)
}
inline void ListResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ListResponse.errmsg)
}
inline std::string* ListResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.ListResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ListResponse.errmsg)
}
inline std::string* ListResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ListResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ListResponse.errmsg)
}

// -------------------------------------------------------------------

// StatsRequest

// repeated string containers = 2;
inline int StatsRequest::_internal_containers_size() const {
  return containers_.size();
}
inline int StatsRequest::containers_size() const {
  return _internal_containers_size();
}
inline void StatsRequest::clear_containers() {
  containers_.Clear();
}
inline std::string* StatsRequest::add_containers() {
  // @@protoc_insertion_point(field_add_mutable:containers.StatsRequest.containers)
  return _internal_add_containers();
}
inline const std::string& StatsRequest::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const std::string& StatsRequest::containers(int index) const {
  // @@protoc_insertion_point(field_get:containers.StatsRequest.containers)
  return _internal_containers(index);
}
inline std::string* StatsRequest::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:containers.StatsRequest.containers)
  return containers_.Mutable(index);
}
inline void StatsRequest::set_containers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.StatsRequest.containers)
  containers_.Mutable(index)->assign(value);
}
inline void StatsRequest::set_containers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.StatsRequest.containers)
  containers_.Mutable(index)->assign(std::move(value));
}
inline void StatsRequest::set_containers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.StatsRequest.containers)
}
inline void StatsRequest::set_containers(int index, const char* value, size_t size) {
  containers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.StatsRequest.containers)
}
inline std::string* StatsRequest::_internal_add_containers() {
  return containers_.Add();
}
inline void StatsRequest::add_containers(const std::string& value) {
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.StatsRequest.containers)
}
inline void StatsRequest::add_containers(std::string&& value) {
  containers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.StatsRequest.containers)
}
inline void StatsRequest::add_containers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.StatsRequest.containers)
}
inline void StatsRequest::add_containers(const char* value, size_t size) {
  containers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.StatsRequest.containers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatsRequest::containers() const {
  // @@protoc_insertion_point(field_list:containers.StatsRequest.containers)
  return containers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatsRequest::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:containers.StatsRequest.containers)
  return &containers_;
}

// bool all = 3;
inline void StatsRequest::clear_all() {
  all_ = false;
}
inline bool StatsRequest::_internal_all() const {
  return all_;
}
inline bool StatsRequest::all() const {
  // @@protoc_insertion_point(field_get:containers.StatsRequest.all)
  return _internal_all();
}
inline void StatsRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void StatsRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:containers.StatsRequest.all)
}

// -------------------------------------------------------------------

// StatsResponse

// repeated .containers.Container_info containers = 1;
inline int StatsResponse::_internal_containers_size() const {
  return containers_.size();
}
inline int StatsResponse::containers_size() const {
  return _internal_containers_size();
}
inline void StatsResponse::clear_containers() {
  containers_.Clear();
}
inline ::containers::Container_info* StatsResponse::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:containers.StatsResponse.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container_info >*
StatsResponse::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:containers.StatsResponse.containers)
  return &containers_;
}
inline const ::containers::Container_info& StatsResponse::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::containers::Container_info& StatsResponse::containers(int index) const {
  // @@protoc_insertion_point(field_get:containers.StatsResponse.containers)
  return _internal_containers(index);
}
inline ::containers::Container_info* StatsResponse::_internal_add_containers() {
  return containers_.Add();
}
inline ::containers::Container_info* StatsResponse::add_containers() {
  // @@protoc_insertion_point(field_add:containers.StatsResponse.containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::containers::Container_info >&
StatsResponse::containers() const {
  // @@protoc_insertion_point(field_list:containers.StatsResponse.containers)
  return containers_;
}

// uint32 cc = 2;
inline void StatsResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.StatsResponse.cc)
  return _internal_cc();
}
inline void StatsResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void StatsResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.StatsResponse.cc)
}

// string errmsg = 3;
inline void StatsResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatsResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.StatsResponse.errmsg)
  return _internal_errmsg();
}
inline void StatsResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.StatsResponse.errmsg)
}
inline std::string* StatsResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.StatsResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& StatsResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void StatsResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatsResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.StatsResponse.errmsg)
}
inline void StatsResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.StatsResponse.errmsg)
}
inline void StatsResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.StatsResponse.errmsg)
}
inline std::string* StatsResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatsResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.StatsResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatsResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.StatsResponse.errmsg)
}
inline std::string* StatsResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.StatsResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatsResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.StatsResponse.errmsg)
}

// -------------------------------------------------------------------

// WaitRequest

// string id = 1;
inline void WaitRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WaitRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.WaitRequest.id)
  return _internal_id();
}
inline void WaitRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.WaitRequest.id)
}
inline std::string* WaitRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.WaitRequest.id)
  return _internal_mutable_id();
}
inline const std::string& WaitRequest::_internal_id() const {
  return id_.Get();
}
inline void WaitRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WaitRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.WaitRequest.id)
}
inline void WaitRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.WaitRequest.id)
}
inline void WaitRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.WaitRequest.id)
}
inline std::string* WaitRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WaitRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.WaitRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WaitRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.WaitRequest.id)
}
inline std::string* WaitRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.WaitRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WaitRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.WaitRequest.id)
}

// uint32 condition = 2;
inline void WaitRequest::clear_condition() {
  condition_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitRequest::_internal_condition() const {
  return condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitRequest::condition() const {
  // @@protoc_insertion_point(field_get:containers.WaitRequest.condition)
  return _internal_condition();
}
inline void WaitRequest::_internal_set_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  condition_ = value;
}
inline void WaitRequest::set_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:containers.WaitRequest.condition)
}

// -------------------------------------------------------------------

// WaitResponse

// uint32 cc = 1;
inline void WaitResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.WaitResponse.cc)
  return _internal_cc();
}
inline void WaitResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void WaitResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.WaitResponse.cc)
}

// uint32 exit_code = 2;
inline void WaitResponse::clear_exit_code() {
  exit_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitResponse::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WaitResponse::exit_code() const {
  // @@protoc_insertion_point(field_get:containers.WaitResponse.exit_code)
  return _internal_exit_code();
}
inline void WaitResponse::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_code_ = value;
}
inline void WaitResponse::set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:containers.WaitResponse.exit_code)
}

// string errmsg = 3;
inline void WaitResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WaitResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.WaitResponse.errmsg)
  return _internal_errmsg();
}
inline void WaitResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.WaitResponse.errmsg)
}
inline std::string* WaitResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.WaitResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& WaitResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void WaitResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WaitResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.WaitResponse.errmsg)
}
inline void WaitResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.WaitResponse.errmsg)
}
inline void WaitResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.WaitResponse.errmsg)
}
inline std::string* WaitResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WaitResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.WaitResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WaitResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.WaitResponse.errmsg)
}
inline std::string* WaitResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.WaitResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WaitResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.WaitResponse.errmsg)
}

// -------------------------------------------------------------------

// EventsRequest

// .google.protobuf.Timestamp since = 1;
inline bool EventsRequest::_internal_has_since() const {
  return this != internal_default_instance() && since_ != nullptr;
}
inline bool EventsRequest::has_since() const {
  return _internal_has_since();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsRequest::_internal_since() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = since_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsRequest::since() const {
  // @@protoc_insertion_point(field_get:containers.EventsRequest.since)
  return _internal_since();
}
inline void EventsRequest::unsafe_arena_set_allocated_since(
    PROTOBUF_NAMESPACE_ID::Timestamp* since) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(since_);
  }
  since_ = since;
  if (since) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.EventsRequest.since)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::release_since() {
  auto temp = unsafe_arena_release_since();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::unsafe_arena_release_since() {
  // @@protoc_insertion_point(field_release:containers.EventsRequest.since)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = since_;
  since_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::_internal_mutable_since() {
  
  if (since_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    since_ = p;
  }
  return since_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::mutable_since() {
  // @@protoc_insertion_point(field_mutable:containers.EventsRequest.since)
  return _internal_mutable_since();
}
inline void EventsRequest::set_allocated_since(PROTOBUF_NAMESPACE_ID::Timestamp* since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(since_);
  }
  if (since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(since)->GetArena();
    if (message_arena != submessage_arena) {
      since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, since, submessage_arena);
    }
    
  } else {
    
  }
  since_ = since;
  // @@protoc_insertion_point(field_set_allocated:containers.EventsRequest.since)
}

// .google.protobuf.Timestamp until = 2;
inline bool EventsRequest::_internal_has_until() const {
  return this != internal_default_instance() && until_ != nullptr;
}
inline bool EventsRequest::has_until() const {
  return _internal_has_until();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsRequest::_internal_until() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = until_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsRequest::until() const {
  // @@protoc_insertion_point(field_get:containers.EventsRequest.until)
  return _internal_until();
}
inline void EventsRequest::unsafe_arena_set_allocated_until(
    PROTOBUF_NAMESPACE_ID::Timestamp* until) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_);
  }
  until_ = until;
  if (until) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.EventsRequest.until)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::release_until() {
  auto temp = unsafe_arena_release_until();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::unsafe_arena_release_until() {
  // @@protoc_insertion_point(field_release:containers.EventsRequest.until)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = until_;
  until_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::_internal_mutable_until() {
  
  if (until_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    until_ = p;
  }
  return until_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsRequest::mutable_until() {
  // @@protoc_insertion_point(field_mutable:containers.EventsRequest.until)
  return _internal_mutable_until();
}
inline void EventsRequest::set_allocated_until(PROTOBUF_NAMESPACE_ID::Timestamp* until) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_);
  }
  if (until) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until)->GetArena();
    if (message_arena != submessage_arena) {
      until = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, until, submessage_arena);
    }
    
  } else {
    
  }
  until_ = until;
  // @@protoc_insertion_point(field_set_allocated:containers.EventsRequest.until)
}

// bool storeOnly = 3;
inline void EventsRequest::clear_storeonly() {
  storeonly_ = false;
}
inline bool EventsRequest::_internal_storeonly() const {
  return storeonly_;
}
inline bool EventsRequest::storeonly() const {
  // @@protoc_insertion_point(field_get:containers.EventsRequest.storeOnly)
  return _internal_storeonly();
}
inline void EventsRequest::_internal_set_storeonly(bool value) {
  
  storeonly_ = value;
}
inline void EventsRequest::set_storeonly(bool value) {
  _internal_set_storeonly(value);
  // @@protoc_insertion_point(field_set:containers.EventsRequest.storeOnly)
}

// string id = 4;
inline void EventsRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EventsRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.EventsRequest.id)
  return _internal_id();
}
inline void EventsRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.EventsRequest.id)
}
inline std::string* EventsRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.EventsRequest.id)
  return _internal_mutable_id();
}
inline const std::string& EventsRequest::_internal_id() const {
  return id_.Get();
}
inline void EventsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventsRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.EventsRequest.id)
}
inline void EventsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.EventsRequest.id)
}
inline void EventsRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.EventsRequest.id)
}
inline std::string* EventsRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventsRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.EventsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.EventsRequest.id)
}
inline std::string* EventsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.EventsRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EventsRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.EventsRequest.id)
}

// -------------------------------------------------------------------

// ExecRequest

// string container_id = 1;
inline void ExecRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::container_id() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.container_id)
  return _internal_container_id();
}
inline void ExecRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.container_id)
}
inline std::string* ExecRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ExecRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ExecRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.container_id)
}
inline void ExecRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.container_id)
}
inline void ExecRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.container_id)
}
inline std::string* ExecRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.container_id)
}
inline std::string* ExecRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.container_id)
}

// bool tty = 2;
inline void ExecRequest::clear_tty() {
  tty_ = false;
}
inline bool ExecRequest::_internal_tty() const {
  return tty_;
}
inline bool ExecRequest::tty() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.tty)
  return _internal_tty();
}
inline void ExecRequest::_internal_set_tty(bool value) {
  
  tty_ = value;
}
inline void ExecRequest::set_tty(bool value) {
  _internal_set_tty(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.tty)
}

// bool open_stdin = 3;
inline void ExecRequest::clear_open_stdin() {
  open_stdin_ = false;
}
inline bool ExecRequest::_internal_open_stdin() const {
  return open_stdin_;
}
inline bool ExecRequest::open_stdin() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.open_stdin)
  return _internal_open_stdin();
}
inline void ExecRequest::_internal_set_open_stdin(bool value) {
  
  open_stdin_ = value;
}
inline void ExecRequest::set_open_stdin(bool value) {
  _internal_set_open_stdin(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.open_stdin)
}

// bool attach_stdin = 4;
inline void ExecRequest::clear_attach_stdin() {
  attach_stdin_ = false;
}
inline bool ExecRequest::_internal_attach_stdin() const {
  return attach_stdin_;
}
inline bool ExecRequest::attach_stdin() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.attach_stdin)
  return _internal_attach_stdin();
}
inline void ExecRequest::_internal_set_attach_stdin(bool value) {
  
  attach_stdin_ = value;
}
inline void ExecRequest::set_attach_stdin(bool value) {
  _internal_set_attach_stdin(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.attach_stdin)
}

// bool attach_stdout = 5;
inline void ExecRequest::clear_attach_stdout() {
  attach_stdout_ = false;
}
inline bool ExecRequest::_internal_attach_stdout() const {
  return attach_stdout_;
}
inline bool ExecRequest::attach_stdout() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.attach_stdout)
  return _internal_attach_stdout();
}
inline void ExecRequest::_internal_set_attach_stdout(bool value) {
  
  attach_stdout_ = value;
}
inline void ExecRequest::set_attach_stdout(bool value) {
  _internal_set_attach_stdout(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.attach_stdout)
}

// bool attach_stderr = 6;
inline void ExecRequest::clear_attach_stderr() {
  attach_stderr_ = false;
}
inline bool ExecRequest::_internal_attach_stderr() const {
  return attach_stderr_;
}
inline bool ExecRequest::attach_stderr() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.attach_stderr)
  return _internal_attach_stderr();
}
inline void ExecRequest::_internal_set_attach_stderr(bool value) {
  
  attach_stderr_ = value;
}
inline void ExecRequest::set_attach_stderr(bool value) {
  _internal_set_attach_stderr(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.attach_stderr)
}

// string stdin = 7;
inline void ExecRequest::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::stdin() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.stdin)
  return _internal_stdin();
}
inline void ExecRequest::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.stdin)
}
inline std::string* ExecRequest::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.stdin)
  return _internal_mutable_stdin();
}
inline const std::string& ExecRequest::_internal_stdin() const {
  return stdin_.Get();
}
inline void ExecRequest::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.stdin)
}
inline void ExecRequest::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.stdin)
}
inline void ExecRequest::set_stdin(const char* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.stdin)
}
inline std::string* ExecRequest::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_stdin() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.stdin)
}
inline std::string* ExecRequest::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.stdin)
}

// string stdout = 8;
inline void ExecRequest::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::stdout() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.stdout)
  return _internal_stdout();
}
inline void ExecRequest::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.stdout)
}
inline std::string* ExecRequest::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& ExecRequest::_internal_stdout() const {
  return stdout_.Get();
}
inline void ExecRequest::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.stdout)
}
inline void ExecRequest::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.stdout)
}
inline void ExecRequest::set_stdout(const char* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.stdout)
}
inline std::string* ExecRequest::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_stdout() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.stdout)
}
inline std::string* ExecRequest::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.stdout)
}

// string stderr = 9;
inline void ExecRequest::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::stderr() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.stderr)
  return _internal_stderr();
}
inline void ExecRequest::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.stderr)
}
inline std::string* ExecRequest::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& ExecRequest::_internal_stderr() const {
  return stderr_.Get();
}
inline void ExecRequest::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.stderr)
}
inline void ExecRequest::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.stderr)
}
inline void ExecRequest::set_stderr(const char* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.stderr)
}
inline std::string* ExecRequest::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_stderr() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.stderr)
}
inline std::string* ExecRequest::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.stderr)
}

// repeated string argv = 10;
inline int ExecRequest::_internal_argv_size() const {
  return argv_.size();
}
inline int ExecRequest::argv_size() const {
  return _internal_argv_size();
}
inline void ExecRequest::clear_argv() {
  argv_.Clear();
}
inline std::string* ExecRequest::add_argv() {
  // @@protoc_insertion_point(field_add_mutable:containers.ExecRequest.argv)
  return _internal_add_argv();
}
inline const std::string& ExecRequest::_internal_argv(int index) const {
  return argv_.Get(index);
}
inline const std::string& ExecRequest::argv(int index) const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.argv)
  return _internal_argv(index);
}
inline std::string* ExecRequest::mutable_argv(int index) {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.argv)
  return argv_.Mutable(index);
}
inline void ExecRequest::set_argv(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.ExecRequest.argv)
  argv_.Mutable(index)->assign(value);
}
inline void ExecRequest::set_argv(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.ExecRequest.argv)
  argv_.Mutable(index)->assign(std::move(value));
}
inline void ExecRequest::set_argv(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.argv)
}
inline void ExecRequest::set_argv(int index, const char* value, size_t size) {
  argv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.argv)
}
inline std::string* ExecRequest::_internal_add_argv() {
  return argv_.Add();
}
inline void ExecRequest::add_argv(const std::string& value) {
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.ExecRequest.argv)
}
inline void ExecRequest::add_argv(std::string&& value) {
  argv_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.ExecRequest.argv)
}
inline void ExecRequest::add_argv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.ExecRequest.argv)
}
inline void ExecRequest::add_argv(const char* value, size_t size) {
  argv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.ExecRequest.argv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecRequest::argv() const {
  // @@protoc_insertion_point(field_list:containers.ExecRequest.argv)
  return argv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecRequest::mutable_argv() {
  // @@protoc_insertion_point(field_mutable_list:containers.ExecRequest.argv)
  return &argv_;
}

// repeated string env = 11;
inline int ExecRequest::_internal_env_size() const {
  return env_.size();
}
inline int ExecRequest::env_size() const {
  return _internal_env_size();
}
inline void ExecRequest::clear_env() {
  env_.Clear();
}
inline std::string* ExecRequest::add_env() {
  // @@protoc_insertion_point(field_add_mutable:containers.ExecRequest.env)
  return _internal_add_env();
}
inline const std::string& ExecRequest::_internal_env(int index) const {
  return env_.Get(index);
}
inline const std::string& ExecRequest::env(int index) const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.env)
  return _internal_env(index);
}
inline std::string* ExecRequest::mutable_env(int index) {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.env)
  return env_.Mutable(index);
}
inline void ExecRequest::set_env(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.ExecRequest.env)
  env_.Mutable(index)->assign(value);
}
inline void ExecRequest::set_env(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.ExecRequest.env)
  env_.Mutable(index)->assign(std::move(value));
}
inline void ExecRequest::set_env(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.env)
}
inline void ExecRequest::set_env(int index, const char* value, size_t size) {
  env_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.env)
}
inline std::string* ExecRequest::_internal_add_env() {
  return env_.Add();
}
inline void ExecRequest::add_env(const std::string& value) {
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.ExecRequest.env)
}
inline void ExecRequest::add_env(std::string&& value) {
  env_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.ExecRequest.env)
}
inline void ExecRequest::add_env(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.ExecRequest.env)
}
inline void ExecRequest::add_env(const char* value, size_t size) {
  env_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.ExecRequest.env)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecRequest::env() const {
  // @@protoc_insertion_point(field_list:containers.ExecRequest.env)
  return env_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable_list:containers.ExecRequest.env)
  return &env_;
}

// string user = 12;
inline void ExecRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::user() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.user)
  return _internal_user();
}
inline void ExecRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.user)
}
inline std::string* ExecRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.user)
  return _internal_mutable_user();
}
inline const std::string& ExecRequest::_internal_user() const {
  return user_.Get();
}
inline void ExecRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.user)
}
inline void ExecRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.user)
}
inline void ExecRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.user)
}
inline std::string* ExecRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_user() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.user)
}
inline std::string* ExecRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.user)
}

// string suffix = 13;
inline void ExecRequest::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::suffix() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.suffix)
  return _internal_suffix();
}
inline void ExecRequest::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.suffix)
}
inline std::string* ExecRequest::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& ExecRequest::_internal_suffix() const {
  return suffix_.Get();
}
inline void ExecRequest::_internal_set_suffix(const std::string& value) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_suffix(std::string&& value) {
  
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.suffix)
}
inline void ExecRequest::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.suffix)
}
inline void ExecRequest::set_suffix(const char* value,
    size_t size) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.suffix)
}
inline std::string* ExecRequest::_internal_mutable_suffix() {
  
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_suffix() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.suffix)
  return suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.suffix)
}
inline std::string* ExecRequest::unsafe_arena_release_suffix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.suffix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suffix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_suffix(
    std::string* suffix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suffix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.suffix)
}

// string workdir = 14;
inline void ExecRequest::clear_workdir() {
  workdir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::workdir() const {
  // @@protoc_insertion_point(field_get:containers.ExecRequest.workdir)
  return _internal_workdir();
}
inline void ExecRequest::set_workdir(const std::string& value) {
  _internal_set_workdir(value);
  // @@protoc_insertion_point(field_set:containers.ExecRequest.workdir)
}
inline std::string* ExecRequest::mutable_workdir() {
  // @@protoc_insertion_point(field_mutable:containers.ExecRequest.workdir)
  return _internal_mutable_workdir();
}
inline const std::string& ExecRequest::_internal_workdir() const {
  return workdir_.Get();
}
inline void ExecRequest::_internal_set_workdir(const std::string& value) {
  
  workdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_workdir(std::string&& value) {
  
  workdir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecRequest.workdir)
}
inline void ExecRequest::set_workdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecRequest.workdir)
}
inline void ExecRequest::set_workdir(const char* value,
    size_t size) {
  
  workdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecRequest.workdir)
}
inline std::string* ExecRequest::_internal_mutable_workdir() {
  
  return workdir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_workdir() {
  // @@protoc_insertion_point(field_release:containers.ExecRequest.workdir)
  return workdir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_workdir(std::string* workdir) {
  if (workdir != nullptr) {
    
  } else {
    
  }
  workdir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workdir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecRequest.workdir)
}
inline std::string* ExecRequest::unsafe_arena_release_workdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecRequest.workdir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workdir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_workdir(
    std::string* workdir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workdir != nullptr) {
    
  } else {
    
  }
  workdir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workdir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecRequest.workdir)
}

// -------------------------------------------------------------------

// ExecResponse

// int32 pid = 1;
inline void ExecResponse::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecResponse::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecResponse::pid() const {
  // @@protoc_insertion_point(field_get:containers.ExecResponse.pid)
  return _internal_pid();
}
inline void ExecResponse::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ExecResponse::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:containers.ExecResponse.pid)
}

// uint32 exit_code = 2;
inline void ExecResponse::clear_exit_code() {
  exit_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecResponse::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecResponse::exit_code() const {
  // @@protoc_insertion_point(field_get:containers.ExecResponse.exit_code)
  return _internal_exit_code();
}
inline void ExecResponse::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_code_ = value;
}
inline void ExecResponse::set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:containers.ExecResponse.exit_code)
}

// uint32 cc = 3;
inline void ExecResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.ExecResponse.cc)
  return _internal_cc();
}
inline void ExecResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ExecResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.ExecResponse.cc)
}

// string errmsg = 4;
inline void ExecResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.ExecResponse.errmsg)
  return _internal_errmsg();
}
inline void ExecResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.ExecResponse.errmsg)
}
inline std::string* ExecResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.ExecResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ExecResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ExecResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExecResponse.errmsg)
}
inline void ExecResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExecResponse.errmsg)
}
inline void ExecResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExecResponse.errmsg)
}
inline std::string* ExecResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.ExecResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExecResponse.errmsg)
}
inline std::string* ExecResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExecResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExecResponse.errmsg)
}

// -------------------------------------------------------------------

// RemoteExecRequest

// repeated bytes cmd = 1;
inline int RemoteExecRequest::_internal_cmd_size() const {
  return cmd_.size();
}
inline int RemoteExecRequest::cmd_size() const {
  return _internal_cmd_size();
}
inline void RemoteExecRequest::clear_cmd() {
  cmd_.Clear();
}
inline std::string* RemoteExecRequest::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:containers.RemoteExecRequest.cmd)
  return _internal_add_cmd();
}
inline const std::string& RemoteExecRequest::_internal_cmd(int index) const {
  return cmd_.Get(index);
}
inline const std::string& RemoteExecRequest::cmd(int index) const {
  // @@protoc_insertion_point(field_get:containers.RemoteExecRequest.cmd)
  return _internal_cmd(index);
}
inline std::string* RemoteExecRequest::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:containers.RemoteExecRequest.cmd)
  return cmd_.Mutable(index);
}
inline void RemoteExecRequest::set_cmd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:containers.RemoteExecRequest.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void RemoteExecRequest::set_cmd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:containers.RemoteExecRequest.cmd)
  cmd_.Mutable(index)->assign(std::move(value));
}
inline void RemoteExecRequest::set_cmd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:containers.RemoteExecRequest.cmd)
}
inline void RemoteExecRequest::set_cmd(int index, const void* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteExecRequest.cmd)
}
inline std::string* RemoteExecRequest::_internal_add_cmd() {
  return cmd_.Add();
}
inline void RemoteExecRequest::add_cmd(const std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:containers.RemoteExecRequest.cmd)
}
inline void RemoteExecRequest::add_cmd(std::string&& value) {
  cmd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:containers.RemoteExecRequest.cmd)
}
inline void RemoteExecRequest::add_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:containers.RemoteExecRequest.cmd)
}
inline void RemoteExecRequest::add_cmd(const void* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:containers.RemoteExecRequest.cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoteExecRequest::cmd() const {
  // @@protoc_insertion_point(field_list:containers.RemoteExecRequest.cmd)
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoteExecRequest::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:containers.RemoteExecRequest.cmd)
  return &cmd_;
}

// bool finish = 2;
inline void RemoteExecRequest::clear_finish() {
  finish_ = false;
}
inline bool RemoteExecRequest::_internal_finish() const {
  return finish_;
}
inline bool RemoteExecRequest::finish() const {
  // @@protoc_insertion_point(field_get:containers.RemoteExecRequest.finish)
  return _internal_finish();
}
inline void RemoteExecRequest::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void RemoteExecRequest::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.RemoteExecRequest.finish)
}

// -------------------------------------------------------------------

// RemoteExecResponse

// bytes stdout = 1;
inline void RemoteExecResponse::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteExecResponse::stdout() const {
  // @@protoc_insertion_point(field_get:containers.RemoteExecResponse.stdout)
  return _internal_stdout();
}
inline void RemoteExecResponse::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:containers.RemoteExecResponse.stdout)
}
inline std::string* RemoteExecResponse::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:containers.RemoteExecResponse.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& RemoteExecResponse::_internal_stdout() const {
  return stdout_.Get();
}
inline void RemoteExecResponse::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteExecResponse::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RemoteExecResponse.stdout)
}
inline void RemoteExecResponse::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RemoteExecResponse.stdout)
}
inline void RemoteExecResponse::set_stdout(const void* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteExecResponse.stdout)
}
inline std::string* RemoteExecResponse::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteExecResponse::release_stdout() {
  // @@protoc_insertion_point(field_release:containers.RemoteExecResponse.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteExecResponse::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RemoteExecResponse.stdout)
}
inline std::string* RemoteExecResponse::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RemoteExecResponse.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteExecResponse::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RemoteExecResponse.stdout)
}

// bytes stderr = 2;
inline void RemoteExecResponse::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteExecResponse::stderr() const {
  // @@protoc_insertion_point(field_get:containers.RemoteExecResponse.stderr)
  return _internal_stderr();
}
inline void RemoteExecResponse::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:containers.RemoteExecResponse.stderr)
}
inline std::string* RemoteExecResponse::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:containers.RemoteExecResponse.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& RemoteExecResponse::_internal_stderr() const {
  return stderr_.Get();
}
inline void RemoteExecResponse::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteExecResponse::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RemoteExecResponse.stderr)
}
inline void RemoteExecResponse::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RemoteExecResponse.stderr)
}
inline void RemoteExecResponse::set_stderr(const void* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RemoteExecResponse.stderr)
}
inline std::string* RemoteExecResponse::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteExecResponse::release_stderr() {
  // @@protoc_insertion_point(field_release:containers.RemoteExecResponse.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteExecResponse::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RemoteExecResponse.stderr)
}
inline std::string* RemoteExecResponse::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RemoteExecResponse.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteExecResponse::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RemoteExecResponse.stderr)
}

// bool finish = 3;
inline void RemoteExecResponse::clear_finish() {
  finish_ = false;
}
inline bool RemoteExecResponse::_internal_finish() const {
  return finish_;
}
inline bool RemoteExecResponse::finish() const {
  // @@protoc_insertion_point(field_get:containers.RemoteExecResponse.finish)
  return _internal_finish();
}
inline void RemoteExecResponse::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void RemoteExecResponse::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.RemoteExecResponse.finish)
}

// -------------------------------------------------------------------

// AttachRequest

// bytes stdin = 1;
inline void AttachRequest::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttachRequest::stdin() const {
  // @@protoc_insertion_point(field_get:containers.AttachRequest.stdin)
  return _internal_stdin();
}
inline void AttachRequest::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:containers.AttachRequest.stdin)
}
inline std::string* AttachRequest::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:containers.AttachRequest.stdin)
  return _internal_mutable_stdin();
}
inline const std::string& AttachRequest::_internal_stdin() const {
  return stdin_.Get();
}
inline void AttachRequest::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttachRequest::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.AttachRequest.stdin)
}
inline void AttachRequest::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.AttachRequest.stdin)
}
inline void AttachRequest::set_stdin(const void* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.AttachRequest.stdin)
}
inline std::string* AttachRequest::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttachRequest::release_stdin() {
  // @@protoc_insertion_point(field_release:containers.AttachRequest.stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttachRequest::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.AttachRequest.stdin)
}
inline std::string* AttachRequest::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.AttachRequest.stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AttachRequest::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.AttachRequest.stdin)
}

// bool finish = 2;
inline void AttachRequest::clear_finish() {
  finish_ = false;
}
inline bool AttachRequest::_internal_finish() const {
  return finish_;
}
inline bool AttachRequest::finish() const {
  // @@protoc_insertion_point(field_get:containers.AttachRequest.finish)
  return _internal_finish();
}
inline void AttachRequest::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void AttachRequest::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.AttachRequest.finish)
}

// -------------------------------------------------------------------

// AttachResponse

// bytes stdout = 1;
inline void AttachResponse::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttachResponse::stdout() const {
  // @@protoc_insertion_point(field_get:containers.AttachResponse.stdout)
  return _internal_stdout();
}
inline void AttachResponse::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:containers.AttachResponse.stdout)
}
inline std::string* AttachResponse::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:containers.AttachResponse.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& AttachResponse::_internal_stdout() const {
  return stdout_.Get();
}
inline void AttachResponse::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttachResponse::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.AttachResponse.stdout)
}
inline void AttachResponse::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.AttachResponse.stdout)
}
inline void AttachResponse::set_stdout(const void* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.AttachResponse.stdout)
}
inline std::string* AttachResponse::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttachResponse::release_stdout() {
  // @@protoc_insertion_point(field_release:containers.AttachResponse.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttachResponse::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.AttachResponse.stdout)
}
inline std::string* AttachResponse::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.AttachResponse.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AttachResponse::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.AttachResponse.stdout)
}

// bytes stderr = 2;
inline void AttachResponse::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttachResponse::stderr() const {
  // @@protoc_insertion_point(field_get:containers.AttachResponse.stderr)
  return _internal_stderr();
}
inline void AttachResponse::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:containers.AttachResponse.stderr)
}
inline std::string* AttachResponse::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:containers.AttachResponse.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& AttachResponse::_internal_stderr() const {
  return stderr_.Get();
}
inline void AttachResponse::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttachResponse::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.AttachResponse.stderr)
}
inline void AttachResponse::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.AttachResponse.stderr)
}
inline void AttachResponse::set_stderr(const void* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.AttachResponse.stderr)
}
inline std::string* AttachResponse::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttachResponse::release_stderr() {
  // @@protoc_insertion_point(field_release:containers.AttachResponse.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttachResponse::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.AttachResponse.stderr)
}
inline std::string* AttachResponse::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.AttachResponse.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AttachResponse::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.AttachResponse.stderr)
}

// bool finish = 3;
inline void AttachResponse::clear_finish() {
  finish_ = false;
}
inline bool AttachResponse::_internal_finish() const {
  return finish_;
}
inline bool AttachResponse::finish() const {
  // @@protoc_insertion_point(field_get:containers.AttachResponse.finish)
  return _internal_finish();
}
inline void AttachResponse::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void AttachResponse::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.AttachResponse.finish)
}

// -------------------------------------------------------------------

// VersionRequest

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.version)
  return _internal_version();
}
inline void VersionResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.version)
}
inline std::string* VersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:containers.VersionResponse.version)
  return _internal_mutable_version();
}
inline const std::string& VersionResponse::_internal_version() const {
  return version_.Get();
}
inline void VersionResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.VersionResponse.version)
}
inline std::string* VersionResponse::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:containers.VersionResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.VersionResponse.version)
}
inline std::string* VersionResponse::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.VersionResponse.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.VersionResponse.version)
}

// string git_commit = 2;
inline void VersionResponse::clear_git_commit() {
  git_commit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::git_commit() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.git_commit)
  return _internal_git_commit();
}
inline void VersionResponse::set_git_commit(const std::string& value) {
  _internal_set_git_commit(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.git_commit)
}
inline std::string* VersionResponse::mutable_git_commit() {
  // @@protoc_insertion_point(field_mutable:containers.VersionResponse.git_commit)
  return _internal_mutable_git_commit();
}
inline const std::string& VersionResponse::_internal_git_commit() const {
  return git_commit_.Get();
}
inline void VersionResponse::_internal_set_git_commit(const std::string& value) {
  
  git_commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_git_commit(std::string&& value) {
  
  git_commit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.VersionResponse.git_commit)
}
inline void VersionResponse::set_git_commit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.VersionResponse.git_commit)
}
inline void VersionResponse::set_git_commit(const char* value,
    size_t size) {
  
  git_commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.VersionResponse.git_commit)
}
inline std::string* VersionResponse::_internal_mutable_git_commit() {
  
  return git_commit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_git_commit() {
  // @@protoc_insertion_point(field_release:containers.VersionResponse.git_commit)
  return git_commit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_git_commit(std::string* git_commit) {
  if (git_commit != nullptr) {
    
  } else {
    
  }
  git_commit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_commit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.VersionResponse.git_commit)
}
inline std::string* VersionResponse::unsafe_arena_release_git_commit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.VersionResponse.git_commit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return git_commit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_git_commit(
    std::string* git_commit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (git_commit != nullptr) {
    
  } else {
    
  }
  git_commit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      git_commit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.VersionResponse.git_commit)
}

// string build_time = 3;
inline void VersionResponse::clear_build_time() {
  build_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::build_time() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.build_time)
  return _internal_build_time();
}
inline void VersionResponse::set_build_time(const std::string& value) {
  _internal_set_build_time(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.build_time)
}
inline std::string* VersionResponse::mutable_build_time() {
  // @@protoc_insertion_point(field_mutable:containers.VersionResponse.build_time)
  return _internal_mutable_build_time();
}
inline const std::string& VersionResponse::_internal_build_time() const {
  return build_time_.Get();
}
inline void VersionResponse::_internal_set_build_time(const std::string& value) {
  
  build_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_build_time(std::string&& value) {
  
  build_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.VersionResponse.build_time)
}
inline void VersionResponse::set_build_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.VersionResponse.build_time)
}
inline void VersionResponse::set_build_time(const char* value,
    size_t size) {
  
  build_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.VersionResponse.build_time)
}
inline std::string* VersionResponse::_internal_mutable_build_time() {
  
  return build_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_build_time() {
  // @@protoc_insertion_point(field_release:containers.VersionResponse.build_time)
  return build_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_build_time(std::string* build_time) {
  if (build_time != nullptr) {
    
  } else {
    
  }
  build_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.VersionResponse.build_time)
}
inline std::string* VersionResponse::unsafe_arena_release_build_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.VersionResponse.build_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return build_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_build_time(
    std::string* build_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (build_time != nullptr) {
    
  } else {
    
  }
  build_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      build_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.VersionResponse.build_time)
}

// string root_path = 4;
inline void VersionResponse::clear_root_path() {
  root_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::root_path() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.root_path)
  return _internal_root_path();
}
inline void VersionResponse::set_root_path(const std::string& value) {
  _internal_set_root_path(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.root_path)
}
inline std::string* VersionResponse::mutable_root_path() {
  // @@protoc_insertion_point(field_mutable:containers.VersionResponse.root_path)
  return _internal_mutable_root_path();
}
inline const std::string& VersionResponse::_internal_root_path() const {
  return root_path_.Get();
}
inline void VersionResponse::_internal_set_root_path(const std::string& value) {
  
  root_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_root_path(std::string&& value) {
  
  root_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.VersionResponse.root_path)
}
inline void VersionResponse::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.VersionResponse.root_path)
}
inline void VersionResponse::set_root_path(const char* value,
    size_t size) {
  
  root_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.VersionResponse.root_path)
}
inline std::string* VersionResponse::_internal_mutable_root_path() {
  
  return root_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_root_path() {
  // @@protoc_insertion_point(field_release:containers.VersionResponse.root_path)
  return root_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.VersionResponse.root_path)
}
inline std::string* VersionResponse::unsafe_arena_release_root_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.VersionResponse.root_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_root_path(
    std::string* root_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.VersionResponse.root_path)
}

// uint32 cc = 5;
inline void VersionResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.cc)
  return _internal_cc();
}
inline void VersionResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void VersionResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.cc)
}

// string errmsg = 6;
inline void VersionResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.VersionResponse.errmsg)
  return _internal_errmsg();
}
inline void VersionResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.VersionResponse.errmsg)
}
inline std::string* VersionResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.VersionResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& VersionResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void VersionResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.VersionResponse.errmsg)
}
inline void VersionResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.VersionResponse.errmsg)
}
inline void VersionResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.VersionResponse.errmsg)
}
inline std::string* VersionResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.VersionResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.VersionResponse.errmsg)
}
inline std::string* VersionResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.VersionResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.VersionResponse.errmsg)
}

// -------------------------------------------------------------------

// InfoRequest

// -------------------------------------------------------------------

// InfoResponse

// uint32 cc = 1;
inline void InfoResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.cc)
  return _internal_cc();
}
inline void InfoResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void InfoResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.cc)
}

// string errmsg = 2;
inline void InfoResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.errmsg)
  return _internal_errmsg();
}
inline void InfoResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.errmsg)
}
inline std::string* InfoResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& InfoResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void InfoResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.errmsg)
}
inline void InfoResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.errmsg)
}
inline void InfoResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.errmsg)
}
inline std::string* InfoResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.errmsg)
}
inline std::string* InfoResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.errmsg)
}

// string version = 3;
inline void InfoResponse::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::version() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.version)
  return _internal_version();
}
inline void InfoResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.version)
}
inline std::string* InfoResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.version)
  return _internal_mutable_version();
}
inline const std::string& InfoResponse::_internal_version() const {
  return version_.Get();
}
inline void InfoResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.version)
}
inline void InfoResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.version)
}
inline void InfoResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.version)
}
inline std::string* InfoResponse::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_version() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.version)
}
inline std::string* InfoResponse::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.version)
}

// uint32 containers_num = 4;
inline void InfoResponse::clear_containers_num() {
  containers_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_containers_num() const {
  return containers_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::containers_num() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.containers_num)
  return _internal_containers_num();
}
inline void InfoResponse::_internal_set_containers_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  containers_num_ = value;
}
inline void InfoResponse::set_containers_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_containers_num(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.containers_num)
}

// uint32 c_running = 5;
inline void InfoResponse::clear_c_running() {
  c_running_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_c_running() const {
  return c_running_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::c_running() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.c_running)
  return _internal_c_running();
}
inline void InfoResponse::_internal_set_c_running(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c_running_ = value;
}
inline void InfoResponse::set_c_running(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c_running(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.c_running)
}

// uint32 c_paused = 6;
inline void InfoResponse::clear_c_paused() {
  c_paused_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_c_paused() const {
  return c_paused_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::c_paused() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.c_paused)
  return _internal_c_paused();
}
inline void InfoResponse::_internal_set_c_paused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c_paused_ = value;
}
inline void InfoResponse::set_c_paused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c_paused(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.c_paused)
}

// uint32 c_stopped = 7;
inline void InfoResponse::clear_c_stopped() {
  c_stopped_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_c_stopped() const {
  return c_stopped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::c_stopped() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.c_stopped)
  return _internal_c_stopped();
}
inline void InfoResponse::_internal_set_c_stopped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c_stopped_ = value;
}
inline void InfoResponse::set_c_stopped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c_stopped(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.c_stopped)
}

// uint32 images_num = 8;
inline void InfoResponse::clear_images_num() {
  images_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_images_num() const {
  return images_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::images_num() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.images_num)
  return _internal_images_num();
}
inline void InfoResponse::_internal_set_images_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  images_num_ = value;
}
inline void InfoResponse::set_images_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_images_num(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.images_num)
}

// string kversion = 9;
inline void InfoResponse::clear_kversion() {
  kversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::kversion() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.kversion)
  return _internal_kversion();
}
inline void InfoResponse::set_kversion(const std::string& value) {
  _internal_set_kversion(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.kversion)
}
inline std::string* InfoResponse::mutable_kversion() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.kversion)
  return _internal_mutable_kversion();
}
inline const std::string& InfoResponse::_internal_kversion() const {
  return kversion_.Get();
}
inline void InfoResponse::_internal_set_kversion(const std::string& value) {
  
  kversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_kversion(std::string&& value) {
  
  kversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.kversion)
}
inline void InfoResponse::set_kversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.kversion)
}
inline void InfoResponse::set_kversion(const char* value,
    size_t size) {
  
  kversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.kversion)
}
inline std::string* InfoResponse::_internal_mutable_kversion() {
  
  return kversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_kversion() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.kversion)
  return kversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_kversion(std::string* kversion) {
  if (kversion != nullptr) {
    
  } else {
    
  }
  kversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.kversion)
}
inline std::string* InfoResponse::unsafe_arena_release_kversion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.kversion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kversion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_kversion(
    std::string* kversion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kversion != nullptr) {
    
  } else {
    
  }
  kversion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kversion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.kversion)
}

// string os_type = 10;
inline void InfoResponse::clear_os_type() {
  os_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::os_type() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.os_type)
  return _internal_os_type();
}
inline void InfoResponse::set_os_type(const std::string& value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.os_type)
}
inline std::string* InfoResponse::mutable_os_type() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.os_type)
  return _internal_mutable_os_type();
}
inline const std::string& InfoResponse::_internal_os_type() const {
  return os_type_.Get();
}
inline void InfoResponse::_internal_set_os_type(const std::string& value) {
  
  os_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_os_type(std::string&& value) {
  
  os_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.os_type)
}
inline void InfoResponse::set_os_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.os_type)
}
inline void InfoResponse::set_os_type(const char* value,
    size_t size) {
  
  os_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.os_type)
}
inline std::string* InfoResponse::_internal_mutable_os_type() {
  
  return os_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_os_type() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.os_type)
  return os_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_os_type(std::string* os_type) {
  if (os_type != nullptr) {
    
  } else {
    
  }
  os_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.os_type)
}
inline std::string* InfoResponse::unsafe_arena_release_os_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.os_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_os_type(
    std::string* os_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os_type != nullptr) {
    
  } else {
    
  }
  os_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.os_type)
}

// string architecture = 11;
inline void InfoResponse::clear_architecture() {
  architecture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::architecture() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.architecture)
  return _internal_architecture();
}
inline void InfoResponse::set_architecture(const std::string& value) {
  _internal_set_architecture(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.architecture)
}
inline std::string* InfoResponse::mutable_architecture() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.architecture)
  return _internal_mutable_architecture();
}
inline const std::string& InfoResponse::_internal_architecture() const {
  return architecture_.Get();
}
inline void InfoResponse::_internal_set_architecture(const std::string& value) {
  
  architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_architecture(std::string&& value) {
  
  architecture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.architecture)
}
inline void InfoResponse::set_architecture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.architecture)
}
inline void InfoResponse::set_architecture(const char* value,
    size_t size) {
  
  architecture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.architecture)
}
inline std::string* InfoResponse::_internal_mutable_architecture() {
  
  return architecture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_architecture() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.architecture)
  return architecture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    
  } else {
    
  }
  architecture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), architecture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.architecture)
}
inline std::string* InfoResponse::unsafe_arena_release_architecture() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.architecture)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return architecture_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_architecture(
    std::string* architecture) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (architecture != nullptr) {
    
  } else {
    
  }
  architecture_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      architecture, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.architecture)
}

// string nodename = 12;
inline void InfoResponse::clear_nodename() {
  nodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::nodename() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.nodename)
  return _internal_nodename();
}
inline void InfoResponse::set_nodename(const std::string& value) {
  _internal_set_nodename(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.nodename)
}
inline std::string* InfoResponse::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.nodename)
  return _internal_mutable_nodename();
}
inline const std::string& InfoResponse::_internal_nodename() const {
  return nodename_.Get();
}
inline void InfoResponse::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_nodename(std::string&& value) {
  
  nodename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.nodename)
}
inline void InfoResponse::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.nodename)
}
inline void InfoResponse::set_nodename(const char* value,
    size_t size) {
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.nodename)
}
inline std::string* InfoResponse::_internal_mutable_nodename() {
  
  return nodename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_nodename() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.nodename)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.nodename)
}
inline std::string* InfoResponse::unsafe_arena_release_nodename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.nodename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nodename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_nodename(
    std::string* nodename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nodename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.nodename)
}

// uint32 cpus = 13;
inline void InfoResponse::clear_cpus() {
  cpus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_cpus() const {
  return cpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::cpus() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.cpus)
  return _internal_cpus();
}
inline void InfoResponse::_internal_set_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cpus_ = value;
}
inline void InfoResponse::set_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cpus(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.cpus)
}

// string operating_system = 14;
inline void InfoResponse::clear_operating_system() {
  operating_system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::operating_system() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.operating_system)
  return _internal_operating_system();
}
inline void InfoResponse::set_operating_system(const std::string& value) {
  _internal_set_operating_system(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.operating_system)
}
inline std::string* InfoResponse::mutable_operating_system() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.operating_system)
  return _internal_mutable_operating_system();
}
inline const std::string& InfoResponse::_internal_operating_system() const {
  return operating_system_.Get();
}
inline void InfoResponse::_internal_set_operating_system(const std::string& value) {
  
  operating_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_operating_system(std::string&& value) {
  
  operating_system_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.operating_system)
}
inline void InfoResponse::set_operating_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operating_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.operating_system)
}
inline void InfoResponse::set_operating_system(const char* value,
    size_t size) {
  
  operating_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.operating_system)
}
inline std::string* InfoResponse::_internal_mutable_operating_system() {
  
  return operating_system_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_operating_system() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.operating_system)
  return operating_system_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_operating_system(std::string* operating_system) {
  if (operating_system != nullptr) {
    
  } else {
    
  }
  operating_system_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operating_system,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.operating_system)
}
inline std::string* InfoResponse::unsafe_arena_release_operating_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.operating_system)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operating_system_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_operating_system(
    std::string* operating_system) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operating_system != nullptr) {
    
  } else {
    
  }
  operating_system_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operating_system, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.operating_system)
}

// string cgroup_driver = 15;
inline void InfoResponse::clear_cgroup_driver() {
  cgroup_driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::cgroup_driver() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.cgroup_driver)
  return _internal_cgroup_driver();
}
inline void InfoResponse::set_cgroup_driver(const std::string& value) {
  _internal_set_cgroup_driver(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.cgroup_driver)
}
inline std::string* InfoResponse::mutable_cgroup_driver() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.cgroup_driver)
  return _internal_mutable_cgroup_driver();
}
inline const std::string& InfoResponse::_internal_cgroup_driver() const {
  return cgroup_driver_.Get();
}
inline void InfoResponse::_internal_set_cgroup_driver(const std::string& value) {
  
  cgroup_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_cgroup_driver(std::string&& value) {
  
  cgroup_driver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.cgroup_driver)
}
inline void InfoResponse::set_cgroup_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgroup_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.cgroup_driver)
}
inline void InfoResponse::set_cgroup_driver(const char* value,
    size_t size) {
  
  cgroup_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.cgroup_driver)
}
inline std::string* InfoResponse::_internal_mutable_cgroup_driver() {
  
  return cgroup_driver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_cgroup_driver() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.cgroup_driver)
  return cgroup_driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_cgroup_driver(std::string* cgroup_driver) {
  if (cgroup_driver != nullptr) {
    
  } else {
    
  }
  cgroup_driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgroup_driver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.cgroup_driver)
}
inline std::string* InfoResponse::unsafe_arena_release_cgroup_driver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.cgroup_driver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cgroup_driver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_cgroup_driver(
    std::string* cgroup_driver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cgroup_driver != nullptr) {
    
  } else {
    
  }
  cgroup_driver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cgroup_driver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.cgroup_driver)
}

// string logging_driver = 16;
inline void InfoResponse::clear_logging_driver() {
  logging_driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::logging_driver() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.logging_driver)
  return _internal_logging_driver();
}
inline void InfoResponse::set_logging_driver(const std::string& value) {
  _internal_set_logging_driver(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.logging_driver)
}
inline std::string* InfoResponse::mutable_logging_driver() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.logging_driver)
  return _internal_mutable_logging_driver();
}
inline const std::string& InfoResponse::_internal_logging_driver() const {
  return logging_driver_.Get();
}
inline void InfoResponse::_internal_set_logging_driver(const std::string& value) {
  
  logging_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_logging_driver(std::string&& value) {
  
  logging_driver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.logging_driver)
}
inline void InfoResponse::set_logging_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logging_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.logging_driver)
}
inline void InfoResponse::set_logging_driver(const char* value,
    size_t size) {
  
  logging_driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.logging_driver)
}
inline std::string* InfoResponse::_internal_mutable_logging_driver() {
  
  return logging_driver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_logging_driver() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.logging_driver)
  return logging_driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_logging_driver(std::string* logging_driver) {
  if (logging_driver != nullptr) {
    
  } else {
    
  }
  logging_driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logging_driver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.logging_driver)
}
inline std::string* InfoResponse::unsafe_arena_release_logging_driver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.logging_driver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return logging_driver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_logging_driver(
    std::string* logging_driver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (logging_driver != nullptr) {
    
  } else {
    
  }
  logging_driver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      logging_driver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.logging_driver)
}

// string huge_page_size = 17;
inline void InfoResponse::clear_huge_page_size() {
  huge_page_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::huge_page_size() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.huge_page_size)
  return _internal_huge_page_size();
}
inline void InfoResponse::set_huge_page_size(const std::string& value) {
  _internal_set_huge_page_size(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.huge_page_size)
}
inline std::string* InfoResponse::mutable_huge_page_size() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.huge_page_size)
  return _internal_mutable_huge_page_size();
}
inline const std::string& InfoResponse::_internal_huge_page_size() const {
  return huge_page_size_.Get();
}
inline void InfoResponse::_internal_set_huge_page_size(const std::string& value) {
  
  huge_page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_huge_page_size(std::string&& value) {
  
  huge_page_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.huge_page_size)
}
inline void InfoResponse::set_huge_page_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  huge_page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.huge_page_size)
}
inline void InfoResponse::set_huge_page_size(const char* value,
    size_t size) {
  
  huge_page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.huge_page_size)
}
inline std::string* InfoResponse::_internal_mutable_huge_page_size() {
  
  return huge_page_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_huge_page_size() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.huge_page_size)
  return huge_page_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_huge_page_size(std::string* huge_page_size) {
  if (huge_page_size != nullptr) {
    
  } else {
    
  }
  huge_page_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), huge_page_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.huge_page_size)
}
inline std::string* InfoResponse::unsafe_arena_release_huge_page_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.huge_page_size)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return huge_page_size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_huge_page_size(
    std::string* huge_page_size) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (huge_page_size != nullptr) {
    
  } else {
    
  }
  huge_page_size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      huge_page_size, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.huge_page_size)
}

// string isulad_root_dir = 18;
inline void InfoResponse::clear_isulad_root_dir() {
  isulad_root_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::isulad_root_dir() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.isulad_root_dir)
  return _internal_isulad_root_dir();
}
inline void InfoResponse::set_isulad_root_dir(const std::string& value) {
  _internal_set_isulad_root_dir(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.isulad_root_dir)
}
inline std::string* InfoResponse::mutable_isulad_root_dir() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.isulad_root_dir)
  return _internal_mutable_isulad_root_dir();
}
inline const std::string& InfoResponse::_internal_isulad_root_dir() const {
  return isulad_root_dir_.Get();
}
inline void InfoResponse::_internal_set_isulad_root_dir(const std::string& value) {
  
  isulad_root_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_isulad_root_dir(std::string&& value) {
  
  isulad_root_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.isulad_root_dir)
}
inline void InfoResponse::set_isulad_root_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isulad_root_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.isulad_root_dir)
}
inline void InfoResponse::set_isulad_root_dir(const char* value,
    size_t size) {
  
  isulad_root_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.isulad_root_dir)
}
inline std::string* InfoResponse::_internal_mutable_isulad_root_dir() {
  
  return isulad_root_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_isulad_root_dir() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.isulad_root_dir)
  return isulad_root_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_isulad_root_dir(std::string* isulad_root_dir) {
  if (isulad_root_dir != nullptr) {
    
  } else {
    
  }
  isulad_root_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isulad_root_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.isulad_root_dir)
}
inline std::string* InfoResponse::unsafe_arena_release_isulad_root_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.isulad_root_dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return isulad_root_dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_isulad_root_dir(
    std::string* isulad_root_dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isulad_root_dir != nullptr) {
    
  } else {
    
  }
  isulad_root_dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isulad_root_dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.isulad_root_dir)
}

// uint32 total_mem = 19;
inline void InfoResponse::clear_total_mem() {
  total_mem_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::_internal_total_mem() const {
  return total_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoResponse::total_mem() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.total_mem)
  return _internal_total_mem();
}
inline void InfoResponse::_internal_set_total_mem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_mem_ = value;
}
inline void InfoResponse::set_total_mem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_mem(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.total_mem)
}

// string http_proxy = 20;
inline void InfoResponse::clear_http_proxy() {
  http_proxy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::http_proxy() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.http_proxy)
  return _internal_http_proxy();
}
inline void InfoResponse::set_http_proxy(const std::string& value) {
  _internal_set_http_proxy(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.http_proxy)
}
inline std::string* InfoResponse::mutable_http_proxy() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.http_proxy)
  return _internal_mutable_http_proxy();
}
inline const std::string& InfoResponse::_internal_http_proxy() const {
  return http_proxy_.Get();
}
inline void InfoResponse::_internal_set_http_proxy(const std::string& value) {
  
  http_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_http_proxy(std::string&& value) {
  
  http_proxy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.http_proxy)
}
inline void InfoResponse::set_http_proxy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  http_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.http_proxy)
}
inline void InfoResponse::set_http_proxy(const char* value,
    size_t size) {
  
  http_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.http_proxy)
}
inline std::string* InfoResponse::_internal_mutable_http_proxy() {
  
  return http_proxy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_http_proxy() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.http_proxy)
  return http_proxy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_http_proxy(std::string* http_proxy) {
  if (http_proxy != nullptr) {
    
  } else {
    
  }
  http_proxy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_proxy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.http_proxy)
}
inline std::string* InfoResponse::unsafe_arena_release_http_proxy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.http_proxy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return http_proxy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_http_proxy(
    std::string* http_proxy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (http_proxy != nullptr) {
    
  } else {
    
  }
  http_proxy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      http_proxy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.http_proxy)
}

// string https_proxy = 21;
inline void InfoResponse::clear_https_proxy() {
  https_proxy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::https_proxy() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.https_proxy)
  return _internal_https_proxy();
}
inline void InfoResponse::set_https_proxy(const std::string& value) {
  _internal_set_https_proxy(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.https_proxy)
}
inline std::string* InfoResponse::mutable_https_proxy() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.https_proxy)
  return _internal_mutable_https_proxy();
}
inline const std::string& InfoResponse::_internal_https_proxy() const {
  return https_proxy_.Get();
}
inline void InfoResponse::_internal_set_https_proxy(const std::string& value) {
  
  https_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_https_proxy(std::string&& value) {
  
  https_proxy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.https_proxy)
}
inline void InfoResponse::set_https_proxy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  https_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.https_proxy)
}
inline void InfoResponse::set_https_proxy(const char* value,
    size_t size) {
  
  https_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.https_proxy)
}
inline std::string* InfoResponse::_internal_mutable_https_proxy() {
  
  return https_proxy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_https_proxy() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.https_proxy)
  return https_proxy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_https_proxy(std::string* https_proxy) {
  if (https_proxy != nullptr) {
    
  } else {
    
  }
  https_proxy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), https_proxy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.https_proxy)
}
inline std::string* InfoResponse::unsafe_arena_release_https_proxy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.https_proxy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return https_proxy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_https_proxy(
    std::string* https_proxy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (https_proxy != nullptr) {
    
  } else {
    
  }
  https_proxy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      https_proxy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.https_proxy)
}

// string no_proxy = 22;
inline void InfoResponse::clear_no_proxy() {
  no_proxy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::no_proxy() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.no_proxy)
  return _internal_no_proxy();
}
inline void InfoResponse::set_no_proxy(const std::string& value) {
  _internal_set_no_proxy(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.no_proxy)
}
inline std::string* InfoResponse::mutable_no_proxy() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.no_proxy)
  return _internal_mutable_no_proxy();
}
inline const std::string& InfoResponse::_internal_no_proxy() const {
  return no_proxy_.Get();
}
inline void InfoResponse::_internal_set_no_proxy(const std::string& value) {
  
  no_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_no_proxy(std::string&& value) {
  
  no_proxy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.no_proxy)
}
inline void InfoResponse::set_no_proxy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  no_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.no_proxy)
}
inline void InfoResponse::set_no_proxy(const char* value,
    size_t size) {
  
  no_proxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.no_proxy)
}
inline std::string* InfoResponse::_internal_mutable_no_proxy() {
  
  return no_proxy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_no_proxy() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.no_proxy)
  return no_proxy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_no_proxy(std::string* no_proxy) {
  if (no_proxy != nullptr) {
    
  } else {
    
  }
  no_proxy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), no_proxy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.no_proxy)
}
inline std::string* InfoResponse::unsafe_arena_release_no_proxy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.no_proxy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return no_proxy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_no_proxy(
    std::string* no_proxy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (no_proxy != nullptr) {
    
  } else {
    
  }
  no_proxy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      no_proxy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.no_proxy)
}

// string driver_name = 23;
inline void InfoResponse::clear_driver_name() {
  driver_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::driver_name() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.driver_name)
  return _internal_driver_name();
}
inline void InfoResponse::set_driver_name(const std::string& value) {
  _internal_set_driver_name(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.driver_name)
}
inline std::string* InfoResponse::mutable_driver_name() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.driver_name)
  return _internal_mutable_driver_name();
}
inline const std::string& InfoResponse::_internal_driver_name() const {
  return driver_name_.Get();
}
inline void InfoResponse::_internal_set_driver_name(const std::string& value) {
  
  driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_driver_name(std::string&& value) {
  
  driver_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.driver_name)
}
inline void InfoResponse::set_driver_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.driver_name)
}
inline void InfoResponse::set_driver_name(const char* value,
    size_t size) {
  
  driver_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.driver_name)
}
inline std::string* InfoResponse::_internal_mutable_driver_name() {
  
  return driver_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_driver_name() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.driver_name)
  return driver_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_driver_name(std::string* driver_name) {
  if (driver_name != nullptr) {
    
  } else {
    
  }
  driver_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.driver_name)
}
inline std::string* InfoResponse::unsafe_arena_release_driver_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.driver_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return driver_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_driver_name(
    std::string* driver_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (driver_name != nullptr) {
    
  } else {
    
  }
  driver_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      driver_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.driver_name)
}

// string driver_status = 24;
inline void InfoResponse::clear_driver_status() {
  driver_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoResponse::driver_status() const {
  // @@protoc_insertion_point(field_get:containers.InfoResponse.driver_status)
  return _internal_driver_status();
}
inline void InfoResponse::set_driver_status(const std::string& value) {
  _internal_set_driver_status(value);
  // @@protoc_insertion_point(field_set:containers.InfoResponse.driver_status)
}
inline std::string* InfoResponse::mutable_driver_status() {
  // @@protoc_insertion_point(field_mutable:containers.InfoResponse.driver_status)
  return _internal_mutable_driver_status();
}
inline const std::string& InfoResponse::_internal_driver_status() const {
  return driver_status_.Get();
}
inline void InfoResponse::_internal_set_driver_status(const std::string& value) {
  
  driver_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoResponse::set_driver_status(std::string&& value) {
  
  driver_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.InfoResponse.driver_status)
}
inline void InfoResponse::set_driver_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.InfoResponse.driver_status)
}
inline void InfoResponse::set_driver_status(const char* value,
    size_t size) {
  
  driver_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.InfoResponse.driver_status)
}
inline std::string* InfoResponse::_internal_mutable_driver_status() {
  
  return driver_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoResponse::release_driver_status() {
  // @@protoc_insertion_point(field_release:containers.InfoResponse.driver_status)
  return driver_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoResponse::set_allocated_driver_status(std::string* driver_status) {
  if (driver_status != nullptr) {
    
  } else {
    
  }
  driver_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.InfoResponse.driver_status)
}
inline std::string* InfoResponse::unsafe_arena_release_driver_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.InfoResponse.driver_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return driver_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoResponse::unsafe_arena_set_allocated_driver_status(
    std::string* driver_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (driver_status != nullptr) {
    
  } else {
    
  }
  driver_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      driver_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.InfoResponse.driver_status)
}

// -------------------------------------------------------------------

// UpdateRequest

// string id = 1;
inline void UpdateRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.UpdateRequest.id)
  return _internal_id();
}
inline void UpdateRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.UpdateRequest.id)
}
inline std::string* UpdateRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.UpdateRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.UpdateRequest.id)
}
inline void UpdateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.UpdateRequest.id)
}
inline void UpdateRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.UpdateRequest.id)
}
inline std::string* UpdateRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.UpdateRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.UpdateRequest.id)
}
inline std::string* UpdateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.UpdateRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.UpdateRequest.id)
}

// string hostconfig = 2;
inline void UpdateRequest::clear_hostconfig() {
  hostconfig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::hostconfig() const {
  // @@protoc_insertion_point(field_get:containers.UpdateRequest.hostconfig)
  return _internal_hostconfig();
}
inline void UpdateRequest::set_hostconfig(const std::string& value) {
  _internal_set_hostconfig(value);
  // @@protoc_insertion_point(field_set:containers.UpdateRequest.hostconfig)
}
inline std::string* UpdateRequest::mutable_hostconfig() {
  // @@protoc_insertion_point(field_mutable:containers.UpdateRequest.hostconfig)
  return _internal_mutable_hostconfig();
}
inline const std::string& UpdateRequest::_internal_hostconfig() const {
  return hostconfig_.Get();
}
inline void UpdateRequest::_internal_set_hostconfig(const std::string& value) {
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_hostconfig(std::string&& value) {
  
  hostconfig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.UpdateRequest.hostconfig)
}
inline void UpdateRequest::set_hostconfig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.UpdateRequest.hostconfig)
}
inline void UpdateRequest::set_hostconfig(const char* value,
    size_t size) {
  
  hostconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.UpdateRequest.hostconfig)
}
inline std::string* UpdateRequest::_internal_mutable_hostconfig() {
  
  return hostconfig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_hostconfig() {
  // @@protoc_insertion_point(field_release:containers.UpdateRequest.hostconfig)
  return hostconfig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_hostconfig(std::string* hostconfig) {
  if (hostconfig != nullptr) {
    
  } else {
    
  }
  hostconfig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostconfig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.UpdateRequest.hostconfig)
}
inline std::string* UpdateRequest::unsafe_arena_release_hostconfig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.UpdateRequest.hostconfig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostconfig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_hostconfig(
    std::string* hostconfig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostconfig != nullptr) {
    
  } else {
    
  }
  hostconfig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostconfig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.UpdateRequest.hostconfig)
}

// -------------------------------------------------------------------

// UpdateResponse

// string id = 1;
inline void UpdateResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.UpdateResponse.id)
  return _internal_id();
}
inline void UpdateResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.UpdateResponse.id)
}
inline std::string* UpdateResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.UpdateResponse.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateResponse::_internal_id() const {
  return id_.Get();
}
inline void UpdateResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.UpdateResponse.id)
}
inline void UpdateResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.UpdateResponse.id)
}
inline void UpdateResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.UpdateResponse.id)
}
inline std::string* UpdateResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.UpdateResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.UpdateResponse.id)
}
inline std::string* UpdateResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.UpdateResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.UpdateResponse.id)
}

// uint32 cc = 2;
inline void UpdateResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.UpdateResponse.cc)
  return _internal_cc();
}
inline void UpdateResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void UpdateResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.UpdateResponse.cc)
}

// string errmsg = 3;
inline void UpdateResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.UpdateResponse.errmsg)
  return _internal_errmsg();
}
inline void UpdateResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.UpdateResponse.errmsg)
}
inline std::string* UpdateResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.UpdateResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& UpdateResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void UpdateResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.UpdateResponse.errmsg)
}
inline void UpdateResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.UpdateResponse.errmsg)
}
inline void UpdateResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.UpdateResponse.errmsg)
}
inline std::string* UpdateResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.UpdateResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.UpdateResponse.errmsg)
}
inline std::string* UpdateResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.UpdateResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.UpdateResponse.errmsg)
}

// -------------------------------------------------------------------

// ExportRequest

// string id = 1;
inline void ExportRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.ExportRequest.id)
  return _internal_id();
}
inline void ExportRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ExportRequest.id)
}
inline std::string* ExportRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ExportRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ExportRequest::_internal_id() const {
  return id_.Get();
}
inline void ExportRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExportRequest.id)
}
inline void ExportRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExportRequest.id)
}
inline void ExportRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExportRequest.id)
}
inline std::string* ExportRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.ExportRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExportRequest.id)
}
inline std::string* ExportRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExportRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExportRequest.id)
}

// string file = 2;
inline void ExportRequest::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportRequest::file() const {
  // @@protoc_insertion_point(field_get:containers.ExportRequest.file)
  return _internal_file();
}
inline void ExportRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:containers.ExportRequest.file)
}
inline std::string* ExportRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:containers.ExportRequest.file)
  return _internal_mutable_file();
}
inline const std::string& ExportRequest::_internal_file() const {
  return file_.Get();
}
inline void ExportRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportRequest::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExportRequest.file)
}
inline void ExportRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExportRequest.file)
}
inline void ExportRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExportRequest.file)
}
inline std::string* ExportRequest::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportRequest::release_file() {
  // @@protoc_insertion_point(field_release:containers.ExportRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExportRequest.file)
}
inline std::string* ExportRequest::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExportRequest.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportRequest::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExportRequest.file)
}

// -------------------------------------------------------------------

// ExportResponse

// string id = 1;
inline void ExportResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.ExportResponse.id)
  return _internal_id();
}
inline void ExportResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ExportResponse.id)
}
inline std::string* ExportResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ExportResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ExportResponse::_internal_id() const {
  return id_.Get();
}
inline void ExportResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExportResponse.id)
}
inline void ExportResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExportResponse.id)
}
inline void ExportResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExportResponse.id)
}
inline std::string* ExportResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.ExportResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExportResponse.id)
}
inline std::string* ExportResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExportResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExportResponse.id)
}

// uint32 cc = 2;
inline void ExportResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExportResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExportResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.ExportResponse.cc)
  return _internal_cc();
}
inline void ExportResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ExportResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.ExportResponse.cc)
}

// string errmsg = 3;
inline void ExportResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.ExportResponse.errmsg)
  return _internal_errmsg();
}
inline void ExportResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.ExportResponse.errmsg)
}
inline std::string* ExportResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.ExportResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ExportResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ExportResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ExportResponse.errmsg)
}
inline void ExportResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ExportResponse.errmsg)
}
inline void ExportResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ExportResponse.errmsg)
}
inline std::string* ExportResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.ExportResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ExportResponse.errmsg)
}
inline std::string* ExportResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ExportResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ExportResponse.errmsg)
}

// -------------------------------------------------------------------

// CopyFromContainerRequest

// string id = 1;
inline void CopyFromContainerRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CopyFromContainerRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.CopyFromContainerRequest.id)
  return _internal_id();
}
inline void CopyFromContainerRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.CopyFromContainerRequest.id)
}
inline std::string* CopyFromContainerRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.CopyFromContainerRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CopyFromContainerRequest::_internal_id() const {
  return id_.Get();
}
inline void CopyFromContainerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CopyFromContainerRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CopyFromContainerRequest.id)
}
inline void CopyFromContainerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CopyFromContainerRequest.id)
}
inline void CopyFromContainerRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CopyFromContainerRequest.id)
}
inline std::string* CopyFromContainerRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CopyFromContainerRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.CopyFromContainerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CopyFromContainerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CopyFromContainerRequest.id)
}
inline std::string* CopyFromContainerRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CopyFromContainerRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CopyFromContainerRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CopyFromContainerRequest.id)
}

// string runtime = 2;
inline void CopyFromContainerRequest::clear_runtime() {
  runtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CopyFromContainerRequest::runtime() const {
  // @@protoc_insertion_point(field_get:containers.CopyFromContainerRequest.runtime)
  return _internal_runtime();
}
inline void CopyFromContainerRequest::set_runtime(const std::string& value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:containers.CopyFromContainerRequest.runtime)
}
inline std::string* CopyFromContainerRequest::mutable_runtime() {
  // @@protoc_insertion_point(field_mutable:containers.CopyFromContainerRequest.runtime)
  return _internal_mutable_runtime();
}
inline const std::string& CopyFromContainerRequest::_internal_runtime() const {
  return runtime_.Get();
}
inline void CopyFromContainerRequest::_internal_set_runtime(const std::string& value) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CopyFromContainerRequest::set_runtime(std::string&& value) {
  
  runtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CopyFromContainerRequest.runtime)
}
inline void CopyFromContainerRequest::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CopyFromContainerRequest.runtime)
}
inline void CopyFromContainerRequest::set_runtime(const char* value,
    size_t size) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CopyFromContainerRequest.runtime)
}
inline std::string* CopyFromContainerRequest::_internal_mutable_runtime() {
  
  return runtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CopyFromContainerRequest::release_runtime() {
  // @@protoc_insertion_point(field_release:containers.CopyFromContainerRequest.runtime)
  return runtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CopyFromContainerRequest::set_allocated_runtime(std::string* runtime) {
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CopyFromContainerRequest.runtime)
}
inline std::string* CopyFromContainerRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CopyFromContainerRequest.runtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CopyFromContainerRequest::unsafe_arena_set_allocated_runtime(
    std::string* runtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CopyFromContainerRequest.runtime)
}

// string srcpath = 3;
inline void CopyFromContainerRequest::clear_srcpath() {
  srcpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CopyFromContainerRequest::srcpath() const {
  // @@protoc_insertion_point(field_get:containers.CopyFromContainerRequest.srcpath)
  return _internal_srcpath();
}
inline void CopyFromContainerRequest::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:containers.CopyFromContainerRequest.srcpath)
}
inline std::string* CopyFromContainerRequest::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:containers.CopyFromContainerRequest.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& CopyFromContainerRequest::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void CopyFromContainerRequest::_internal_set_srcpath(const std::string& value) {
  
  srcpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CopyFromContainerRequest::set_srcpath(std::string&& value) {
  
  srcpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CopyFromContainerRequest.srcpath)
}
inline void CopyFromContainerRequest::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CopyFromContainerRequest.srcpath)
}
inline void CopyFromContainerRequest::set_srcpath(const char* value,
    size_t size) {
  
  srcpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CopyFromContainerRequest.srcpath)
}
inline std::string* CopyFromContainerRequest::_internal_mutable_srcpath() {
  
  return srcpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CopyFromContainerRequest::release_srcpath() {
  // @@protoc_insertion_point(field_release:containers.CopyFromContainerRequest.srcpath)
  return srcpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CopyFromContainerRequest::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    
  } else {
    
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CopyFromContainerRequest.srcpath)
}
inline std::string* CopyFromContainerRequest::unsafe_arena_release_srcpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CopyFromContainerRequest.srcpath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return srcpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CopyFromContainerRequest::unsafe_arena_set_allocated_srcpath(
    std::string* srcpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (srcpath != nullptr) {
    
  } else {
    
  }
  srcpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      srcpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CopyFromContainerRequest.srcpath)
}

// -------------------------------------------------------------------

// CopyFromContainerResponse

// bytes data = 1;
inline void CopyFromContainerResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CopyFromContainerResponse::data() const {
  // @@protoc_insertion_point(field_get:containers.CopyFromContainerResponse.data)
  return _internal_data();
}
inline void CopyFromContainerResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:containers.CopyFromContainerResponse.data)
}
inline std::string* CopyFromContainerResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:containers.CopyFromContainerResponse.data)
  return _internal_mutable_data();
}
inline const std::string& CopyFromContainerResponse::_internal_data() const {
  return data_.Get();
}
inline void CopyFromContainerResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CopyFromContainerResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CopyFromContainerResponse.data)
}
inline void CopyFromContainerResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CopyFromContainerResponse.data)
}
inline void CopyFromContainerResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CopyFromContainerResponse.data)
}
inline std::string* CopyFromContainerResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CopyFromContainerResponse::release_data() {
  // @@protoc_insertion_point(field_release:containers.CopyFromContainerResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CopyFromContainerResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CopyFromContainerResponse.data)
}
inline std::string* CopyFromContainerResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CopyFromContainerResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CopyFromContainerResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CopyFromContainerResponse.data)
}

// -------------------------------------------------------------------

// CopyToContainerRequest

// bytes data = 1;
inline void CopyToContainerRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CopyToContainerRequest::data() const {
  // @@protoc_insertion_point(field_get:containers.CopyToContainerRequest.data)
  return _internal_data();
}
inline void CopyToContainerRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:containers.CopyToContainerRequest.data)
}
inline std::string* CopyToContainerRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:containers.CopyToContainerRequest.data)
  return _internal_mutable_data();
}
inline const std::string& CopyToContainerRequest::_internal_data() const {
  return data_.Get();
}
inline void CopyToContainerRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CopyToContainerRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.CopyToContainerRequest.data)
}
inline void CopyToContainerRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.CopyToContainerRequest.data)
}
inline void CopyToContainerRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.CopyToContainerRequest.data)
}
inline std::string* CopyToContainerRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CopyToContainerRequest::release_data() {
  // @@protoc_insertion_point(field_release:containers.CopyToContainerRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CopyToContainerRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.CopyToContainerRequest.data)
}
inline std::string* CopyToContainerRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.CopyToContainerRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CopyToContainerRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.CopyToContainerRequest.data)
}

// -------------------------------------------------------------------

// CopyToContainerResponse

// bool finish = 1;
inline void CopyToContainerResponse::clear_finish() {
  finish_ = false;
}
inline bool CopyToContainerResponse::_internal_finish() const {
  return finish_;
}
inline bool CopyToContainerResponse::finish() const {
  // @@protoc_insertion_point(field_get:containers.CopyToContainerResponse.finish)
  return _internal_finish();
}
inline void CopyToContainerResponse::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void CopyToContainerResponse::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:containers.CopyToContainerResponse.finish)
}

// -------------------------------------------------------------------

// RenameRequest

// string oldname = 1;
inline void RenameRequest::clear_oldname() {
  oldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameRequest::oldname() const {
  // @@protoc_insertion_point(field_get:containers.RenameRequest.oldname)
  return _internal_oldname();
}
inline void RenameRequest::set_oldname(const std::string& value) {
  _internal_set_oldname(value);
  // @@protoc_insertion_point(field_set:containers.RenameRequest.oldname)
}
inline std::string* RenameRequest::mutable_oldname() {
  // @@protoc_insertion_point(field_mutable:containers.RenameRequest.oldname)
  return _internal_mutable_oldname();
}
inline const std::string& RenameRequest::_internal_oldname() const {
  return oldname_.Get();
}
inline void RenameRequest::_internal_set_oldname(const std::string& value) {
  
  oldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameRequest::set_oldname(std::string&& value) {
  
  oldname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RenameRequest.oldname)
}
inline void RenameRequest::set_oldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RenameRequest.oldname)
}
inline void RenameRequest::set_oldname(const char* value,
    size_t size) {
  
  oldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RenameRequest.oldname)
}
inline std::string* RenameRequest::_internal_mutable_oldname() {
  
  return oldname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameRequest::release_oldname() {
  // @@protoc_insertion_point(field_release:containers.RenameRequest.oldname)
  return oldname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameRequest::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    
  } else {
    
  }
  oldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RenameRequest.oldname)
}
inline std::string* RenameRequest::unsafe_arena_release_oldname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RenameRequest.oldname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return oldname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameRequest::unsafe_arena_set_allocated_oldname(
    std::string* oldname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oldname != nullptr) {
    
  } else {
    
  }
  oldname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oldname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RenameRequest.oldname)
}

// string newname = 2;
inline void RenameRequest::clear_newname() {
  newname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameRequest::newname() const {
  // @@protoc_insertion_point(field_get:containers.RenameRequest.newname)
  return _internal_newname();
}
inline void RenameRequest::set_newname(const std::string& value) {
  _internal_set_newname(value);
  // @@protoc_insertion_point(field_set:containers.RenameRequest.newname)
}
inline std::string* RenameRequest::mutable_newname() {
  // @@protoc_insertion_point(field_mutable:containers.RenameRequest.newname)
  return _internal_mutable_newname();
}
inline const std::string& RenameRequest::_internal_newname() const {
  return newname_.Get();
}
inline void RenameRequest::_internal_set_newname(const std::string& value) {
  
  newname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameRequest::set_newname(std::string&& value) {
  
  newname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RenameRequest.newname)
}
inline void RenameRequest::set_newname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RenameRequest.newname)
}
inline void RenameRequest::set_newname(const char* value,
    size_t size) {
  
  newname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RenameRequest.newname)
}
inline std::string* RenameRequest::_internal_mutable_newname() {
  
  return newname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameRequest::release_newname() {
  // @@protoc_insertion_point(field_release:containers.RenameRequest.newname)
  return newname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameRequest::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    
  } else {
    
  }
  newname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RenameRequest.newname)
}
inline std::string* RenameRequest::unsafe_arena_release_newname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RenameRequest.newname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameRequest::unsafe_arena_set_allocated_newname(
    std::string* newname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newname != nullptr) {
    
  } else {
    
  }
  newname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RenameRequest.newname)
}

// -------------------------------------------------------------------

// RenameResponse

// string id = 1;
inline void RenameResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.RenameResponse.id)
  return _internal_id();
}
inline void RenameResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.RenameResponse.id)
}
inline std::string* RenameResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.RenameResponse.id)
  return _internal_mutable_id();
}
inline const std::string& RenameResponse::_internal_id() const {
  return id_.Get();
}
inline void RenameResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RenameResponse.id)
}
inline void RenameResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RenameResponse.id)
}
inline void RenameResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RenameResponse.id)
}
inline std::string* RenameResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.RenameResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RenameResponse.id)
}
inline std::string* RenameResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RenameResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RenameResponse.id)
}

// uint32 cc = 2;
inline void RenameResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenameResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenameResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.RenameResponse.cc)
  return _internal_cc();
}
inline void RenameResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void RenameResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.RenameResponse.cc)
}

// string errmsg = 3;
inline void RenameResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RenameResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.RenameResponse.errmsg)
  return _internal_errmsg();
}
inline void RenameResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.RenameResponse.errmsg)
}
inline std::string* RenameResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.RenameResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& RenameResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void RenameResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RenameResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.RenameResponse.errmsg)
}
inline void RenameResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.RenameResponse.errmsg)
}
inline void RenameResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.RenameResponse.errmsg)
}
inline std::string* RenameResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RenameResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.RenameResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenameResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.RenameResponse.errmsg)
}
inline std::string* RenameResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.RenameResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RenameResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.RenameResponse.errmsg)
}

// -------------------------------------------------------------------

// LogsRequest

// string id = 1;
inline void LogsRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.id)
  return _internal_id();
}
inline void LogsRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.id)
}
inline std::string* LogsRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.LogsRequest.id)
  return _internal_mutable_id();
}
inline const std::string& LogsRequest::_internal_id() const {
  return id_.Get();
}
inline void LogsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsRequest.id)
}
inline void LogsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsRequest.id)
}
inline void LogsRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsRequest.id)
}
inline std::string* LogsRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.LogsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsRequest.id)
}
inline std::string* LogsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsRequest.id)
}

// string runtime = 2;
inline void LogsRequest::clear_runtime() {
  runtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsRequest::runtime() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.runtime)
  return _internal_runtime();
}
inline void LogsRequest::set_runtime(const std::string& value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.runtime)
}
inline std::string* LogsRequest::mutable_runtime() {
  // @@protoc_insertion_point(field_mutable:containers.LogsRequest.runtime)
  return _internal_mutable_runtime();
}
inline const std::string& LogsRequest::_internal_runtime() const {
  return runtime_.Get();
}
inline void LogsRequest::_internal_set_runtime(const std::string& value) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsRequest::set_runtime(std::string&& value) {
  
  runtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsRequest.runtime)
}
inline void LogsRequest::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsRequest.runtime)
}
inline void LogsRequest::set_runtime(const char* value,
    size_t size) {
  
  runtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsRequest.runtime)
}
inline std::string* LogsRequest::_internal_mutable_runtime() {
  
  return runtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsRequest::release_runtime() {
  // @@protoc_insertion_point(field_release:containers.LogsRequest.runtime)
  return runtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsRequest::set_allocated_runtime(std::string* runtime) {
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsRequest.runtime)
}
inline std::string* LogsRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsRequest.runtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsRequest::unsafe_arena_set_allocated_runtime(
    std::string* runtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsRequest.runtime)
}

// string since = 3;
inline void LogsRequest::clear_since() {
  since_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsRequest::since() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.since)
  return _internal_since();
}
inline void LogsRequest::set_since(const std::string& value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.since)
}
inline std::string* LogsRequest::mutable_since() {
  // @@protoc_insertion_point(field_mutable:containers.LogsRequest.since)
  return _internal_mutable_since();
}
inline const std::string& LogsRequest::_internal_since() const {
  return since_.Get();
}
inline void LogsRequest::_internal_set_since(const std::string& value) {
  
  since_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsRequest::set_since(std::string&& value) {
  
  since_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsRequest.since)
}
inline void LogsRequest::set_since(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  since_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsRequest.since)
}
inline void LogsRequest::set_since(const char* value,
    size_t size) {
  
  since_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsRequest.since)
}
inline std::string* LogsRequest::_internal_mutable_since() {
  
  return since_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsRequest::release_since() {
  // @@protoc_insertion_point(field_release:containers.LogsRequest.since)
  return since_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsRequest::set_allocated_since(std::string* since) {
  if (since != nullptr) {
    
  } else {
    
  }
  since_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), since,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsRequest.since)
}
inline std::string* LogsRequest::unsafe_arena_release_since() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsRequest.since)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return since_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsRequest::unsafe_arena_set_allocated_since(
    std::string* since) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (since != nullptr) {
    
  } else {
    
  }
  since_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      since, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsRequest.since)
}

// string until = 4;
inline void LogsRequest::clear_until() {
  until_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsRequest::until() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.until)
  return _internal_until();
}
inline void LogsRequest::set_until(const std::string& value) {
  _internal_set_until(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.until)
}
inline std::string* LogsRequest::mutable_until() {
  // @@protoc_insertion_point(field_mutable:containers.LogsRequest.until)
  return _internal_mutable_until();
}
inline const std::string& LogsRequest::_internal_until() const {
  return until_.Get();
}
inline void LogsRequest::_internal_set_until(const std::string& value) {
  
  until_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsRequest::set_until(std::string&& value) {
  
  until_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsRequest.until)
}
inline void LogsRequest::set_until(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  until_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsRequest.until)
}
inline void LogsRequest::set_until(const char* value,
    size_t size) {
  
  until_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsRequest.until)
}
inline std::string* LogsRequest::_internal_mutable_until() {
  
  return until_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsRequest::release_until() {
  // @@protoc_insertion_point(field_release:containers.LogsRequest.until)
  return until_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsRequest::set_allocated_until(std::string* until) {
  if (until != nullptr) {
    
  } else {
    
  }
  until_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), until,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsRequest.until)
}
inline std::string* LogsRequest::unsafe_arena_release_until() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsRequest.until)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return until_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsRequest::unsafe_arena_set_allocated_until(
    std::string* until) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (until != nullptr) {
    
  } else {
    
  }
  until_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      until, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsRequest.until)
}

// bool timestamps = 5;
inline void LogsRequest::clear_timestamps() {
  timestamps_ = false;
}
inline bool LogsRequest::_internal_timestamps() const {
  return timestamps_;
}
inline bool LogsRequest::timestamps() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.timestamps)
  return _internal_timestamps();
}
inline void LogsRequest::_internal_set_timestamps(bool value) {
  
  timestamps_ = value;
}
inline void LogsRequest::set_timestamps(bool value) {
  _internal_set_timestamps(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.timestamps)
}

// bool follow = 6;
inline void LogsRequest::clear_follow() {
  follow_ = false;
}
inline bool LogsRequest::_internal_follow() const {
  return follow_;
}
inline bool LogsRequest::follow() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.follow)
  return _internal_follow();
}
inline void LogsRequest::_internal_set_follow(bool value) {
  
  follow_ = value;
}
inline void LogsRequest::set_follow(bool value) {
  _internal_set_follow(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.follow)
}

// int64 tail = 7;
inline void LogsRequest::clear_tail() {
  tail_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogsRequest::_internal_tail() const {
  return tail_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogsRequest::tail() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.tail)
  return _internal_tail();
}
inline void LogsRequest::_internal_set_tail(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tail_ = value;
}
inline void LogsRequest::set_tail(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.tail)
}

// bool details = 8;
inline void LogsRequest::clear_details() {
  details_ = false;
}
inline bool LogsRequest::_internal_details() const {
  return details_;
}
inline bool LogsRequest::details() const {
  // @@protoc_insertion_point(field_get:containers.LogsRequest.details)
  return _internal_details();
}
inline void LogsRequest::_internal_set_details(bool value) {
  
  details_ = value;
}
inline void LogsRequest::set_details(bool value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:containers.LogsRequest.details)
}

// -------------------------------------------------------------------

// LogsResponse

// bytes data = 1;
inline void LogsResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsResponse::data() const {
  // @@protoc_insertion_point(field_get:containers.LogsResponse.data)
  return _internal_data();
}
inline void LogsResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:containers.LogsResponse.data)
}
inline std::string* LogsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:containers.LogsResponse.data)
  return _internal_mutable_data();
}
inline const std::string& LogsResponse::_internal_data() const {
  return data_.Get();
}
inline void LogsResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsResponse.data)
}
inline void LogsResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsResponse.data)
}
inline void LogsResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsResponse.data)
}
inline std::string* LogsResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsResponse::release_data() {
  // @@protoc_insertion_point(field_release:containers.LogsResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsResponse.data)
}
inline std::string* LogsResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsResponse.data)
}

// string stream = 2;
inline void LogsResponse::clear_stream() {
  stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsResponse::stream() const {
  // @@protoc_insertion_point(field_get:containers.LogsResponse.stream)
  return _internal_stream();
}
inline void LogsResponse::set_stream(const std::string& value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:containers.LogsResponse.stream)
}
inline std::string* LogsResponse::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:containers.LogsResponse.stream)
  return _internal_mutable_stream();
}
inline const std::string& LogsResponse::_internal_stream() const {
  return stream_.Get();
}
inline void LogsResponse::_internal_set_stream(const std::string& value) {
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsResponse::set_stream(std::string&& value) {
  
  stream_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsResponse.stream)
}
inline void LogsResponse::set_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsResponse.stream)
}
inline void LogsResponse::set_stream(const char* value,
    size_t size) {
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsResponse.stream)
}
inline std::string* LogsResponse::_internal_mutable_stream() {
  
  return stream_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsResponse::release_stream() {
  // @@protoc_insertion_point(field_release:containers.LogsResponse.stream)
  return stream_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsResponse::set_allocated_stream(std::string* stream) {
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsResponse.stream)
}
inline std::string* LogsResponse::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsResponse.stream)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stream_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsResponse::unsafe_arena_set_allocated_stream(
    std::string* stream) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stream, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsResponse.stream)
}

// string time = 3;
inline void LogsResponse::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsResponse::time() const {
  // @@protoc_insertion_point(field_get:containers.LogsResponse.time)
  return _internal_time();
}
inline void LogsResponse::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:containers.LogsResponse.time)
}
inline std::string* LogsResponse::mutable_time() {
  // @@protoc_insertion_point(field_mutable:containers.LogsResponse.time)
  return _internal_mutable_time();
}
inline const std::string& LogsResponse::_internal_time() const {
  return time_.Get();
}
inline void LogsResponse::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsResponse::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsResponse.time)
}
inline void LogsResponse::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsResponse.time)
}
inline void LogsResponse::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsResponse.time)
}
inline std::string* LogsResponse::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsResponse::release_time() {
  // @@protoc_insertion_point(field_release:containers.LogsResponse.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsResponse::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsResponse.time)
}
inline std::string* LogsResponse::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsResponse.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsResponse::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsResponse.time)
}

// bytes attrs = 4;
inline void LogsResponse::clear_attrs() {
  attrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogsResponse::attrs() const {
  // @@protoc_insertion_point(field_get:containers.LogsResponse.attrs)
  return _internal_attrs();
}
inline void LogsResponse::set_attrs(const std::string& value) {
  _internal_set_attrs(value);
  // @@protoc_insertion_point(field_set:containers.LogsResponse.attrs)
}
inline std::string* LogsResponse::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable:containers.LogsResponse.attrs)
  return _internal_mutable_attrs();
}
inline const std::string& LogsResponse::_internal_attrs() const {
  return attrs_.Get();
}
inline void LogsResponse::_internal_set_attrs(const std::string& value) {
  
  attrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogsResponse::set_attrs(std::string&& value) {
  
  attrs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.LogsResponse.attrs)
}
inline void LogsResponse::set_attrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.LogsResponse.attrs)
}
inline void LogsResponse::set_attrs(const void* value,
    size_t size) {
  
  attrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.LogsResponse.attrs)
}
inline std::string* LogsResponse::_internal_mutable_attrs() {
  
  return attrs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogsResponse::release_attrs() {
  // @@protoc_insertion_point(field_release:containers.LogsResponse.attrs)
  return attrs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogsResponse::set_allocated_attrs(std::string* attrs) {
  if (attrs != nullptr) {
    
  } else {
    
  }
  attrs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.LogsResponse.attrs)
}
inline std::string* LogsResponse::unsafe_arena_release_attrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.LogsResponse.attrs)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return attrs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogsResponse::unsafe_arena_set_allocated_attrs(
    std::string* attrs) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (attrs != nullptr) {
    
  } else {
    
  }
  attrs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attrs, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.LogsResponse.attrs)
}

// -------------------------------------------------------------------

// ResizeRequest

// string id = 1;
inline void ResizeRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeRequest::id() const {
  // @@protoc_insertion_point(field_get:containers.ResizeRequest.id)
  return _internal_id();
}
inline void ResizeRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ResizeRequest.id)
}
inline std::string* ResizeRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ResizeRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ResizeRequest::_internal_id() const {
  return id_.Get();
}
inline void ResizeRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResizeRequest.id)
}
inline void ResizeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResizeRequest.id)
}
inline void ResizeRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResizeRequest.id)
}
inline std::string* ResizeRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeRequest::release_id() {
  // @@protoc_insertion_point(field_release:containers.ResizeRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResizeRequest.id)
}
inline std::string* ResizeRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResizeRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResizeRequest.id)
}

// string suffix = 2;
inline void ResizeRequest::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeRequest::suffix() const {
  // @@protoc_insertion_point(field_get:containers.ResizeRequest.suffix)
  return _internal_suffix();
}
inline void ResizeRequest::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:containers.ResizeRequest.suffix)
}
inline std::string* ResizeRequest::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:containers.ResizeRequest.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& ResizeRequest::_internal_suffix() const {
  return suffix_.Get();
}
inline void ResizeRequest::_internal_set_suffix(const std::string& value) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeRequest::set_suffix(std::string&& value) {
  
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResizeRequest.suffix)
}
inline void ResizeRequest::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResizeRequest.suffix)
}
inline void ResizeRequest::set_suffix(const char* value,
    size_t size) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResizeRequest.suffix)
}
inline std::string* ResizeRequest::_internal_mutable_suffix() {
  
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeRequest::release_suffix() {
  // @@protoc_insertion_point(field_release:containers.ResizeRequest.suffix)
  return suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeRequest::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResizeRequest.suffix)
}
inline std::string* ResizeRequest::unsafe_arena_release_suffix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResizeRequest.suffix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suffix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeRequest::unsafe_arena_set_allocated_suffix(
    std::string* suffix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suffix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResizeRequest.suffix)
}

// uint32 height = 3;
inline void ResizeRequest::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeRequest::height() const {
  // @@protoc_insertion_point(field_get:containers.ResizeRequest.height)
  return _internal_height();
}
inline void ResizeRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void ResizeRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:containers.ResizeRequest.height)
}

// uint32 width = 4;
inline void ResizeRequest::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeRequest::width() const {
  // @@protoc_insertion_point(field_get:containers.ResizeRequest.width)
  return _internal_width();
}
inline void ResizeRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void ResizeRequest::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:containers.ResizeRequest.width)
}

// -------------------------------------------------------------------

// ResizeResponse

// string id = 1;
inline void ResizeResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeResponse::id() const {
  // @@protoc_insertion_point(field_get:containers.ResizeResponse.id)
  return _internal_id();
}
inline void ResizeResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:containers.ResizeResponse.id)
}
inline std::string* ResizeResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:containers.ResizeResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ResizeResponse::_internal_id() const {
  return id_.Get();
}
inline void ResizeResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResizeResponse.id)
}
inline void ResizeResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResizeResponse.id)
}
inline void ResizeResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResizeResponse.id)
}
inline std::string* ResizeResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeResponse::release_id() {
  // @@protoc_insertion_point(field_release:containers.ResizeResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResizeResponse.id)
}
inline std::string* ResizeResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResizeResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResizeResponse.id)
}

// uint32 cc = 2;
inline void ResizeResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeResponse::cc() const {
  // @@protoc_insertion_point(field_get:containers.ResizeResponse.cc)
  return _internal_cc();
}
inline void ResizeResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ResizeResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:containers.ResizeResponse.cc)
}

// string errmsg = 3;
inline void ResizeResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:containers.ResizeResponse.errmsg)
  return _internal_errmsg();
}
inline void ResizeResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:containers.ResizeResponse.errmsg)
}
inline std::string* ResizeResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:containers.ResizeResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResizeResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResizeResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:containers.ResizeResponse.errmsg)
}
inline void ResizeResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:containers.ResizeResponse.errmsg)
}
inline void ResizeResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:containers.ResizeResponse.errmsg)
}
inline std::string* ResizeResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:containers.ResizeResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:containers.ResizeResponse.errmsg)
}
inline std::string* ResizeResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:containers.ResizeResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:containers.ResizeResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace containers

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::containers::ContainerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::containers::ContainerStatus>() {
  return ::containers::ContainerStatus_descriptor();
}
template <> struct is_proto_enum< ::containers::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::containers::EventType>() {
  return ::containers::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_container_2eproto
