// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: checkpoints.proto

#include "checkpoints.pb.h"
#include "checkpoints.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace checkpoint {

static const char* CheckpointService_method_names[] = {
  "/checkpoint.CheckpointService/List",
  "/checkpoint.CheckpointService/Remove",
  "/checkpoint.CheckpointService/Create",
};

std::unique_ptr< CheckpointService::Stub> CheckpointService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CheckpointService::Stub> stub(new CheckpointService::Stub(channel));
  return stub;
}

CheckpointService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(CheckpointService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(CheckpointService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(CheckpointService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CheckpointService::Stub::List(::grpc::ClientContext* context, const ::checkpoint::ListCheckpointRequest& request, ::checkpoint::ListCheckpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void CheckpointService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::checkpoint::ListCheckpointRequest* request, ::checkpoint::ListCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::ListCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::checkpoint::ListCheckpointRequest* request, ::checkpoint::ListCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void CheckpointService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::ListCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::ListCheckpointResponse>* CheckpointService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::checkpoint::ListCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::ListCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::ListCheckpointResponse>* CheckpointService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::checkpoint::ListCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::ListCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status CheckpointService::Stub::Remove(::grpc::ClientContext* context, const ::checkpoint::RemoveCheckpointRequest& request, ::checkpoint::RemoveCheckpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void CheckpointService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::checkpoint::RemoveCheckpointRequest* request, ::checkpoint::RemoveCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::RemoveCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::checkpoint::RemoveCheckpointRequest* request, ::checkpoint::RemoveCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void CheckpointService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::RemoveCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::RemoveCheckpointResponse>* CheckpointService::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::checkpoint::RemoveCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::RemoveCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::RemoveCheckpointResponse>* CheckpointService::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::checkpoint::RemoveCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::RemoveCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

::grpc::Status CheckpointService::Stub::Create(::grpc::ClientContext* context, const ::checkpoint::CreateCheckpointRequest& request, ::checkpoint::CreateCheckpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void CheckpointService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::checkpoint::CreateCheckpointRequest* request, ::checkpoint::CreateCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::CreateCheckpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void CheckpointService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::checkpoint::CreateCheckpointRequest* request, ::checkpoint::CreateCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void CheckpointService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::checkpoint::CreateCheckpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::CreateCheckpointResponse>* CheckpointService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::checkpoint::CreateCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::CreateCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::checkpoint::CreateCheckpointResponse>* CheckpointService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::checkpoint::CreateCheckpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::checkpoint::CreateCheckpointResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

CheckpointService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckpointService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckpointService::Service, ::checkpoint::ListCheckpointRequest, ::checkpoint::ListCheckpointResponse>(
          [](CheckpointService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::checkpoint::ListCheckpointRequest* req,
             ::checkpoint::ListCheckpointResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckpointService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckpointService::Service, ::checkpoint::RemoveCheckpointRequest, ::checkpoint::RemoveCheckpointResponse>(
          [](CheckpointService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::checkpoint::RemoveCheckpointRequest* req,
             ::checkpoint::RemoveCheckpointResponse* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckpointService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckpointService::Service, ::checkpoint::CreateCheckpointRequest, ::checkpoint::CreateCheckpointResponse>(
          [](CheckpointService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::checkpoint::CreateCheckpointRequest* req,
             ::checkpoint::CreateCheckpointResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
}

CheckpointService::Service::~Service() {
}

::grpc::Status CheckpointService::Service::List(::grpc::ServerContext* context, const ::checkpoint::ListCheckpointRequest* request, ::checkpoint::ListCheckpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckpointService::Service::Remove(::grpc::ServerContext* context, const ::checkpoint::RemoveCheckpointRequest* request, ::checkpoint::RemoveCheckpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckpointService::Service::Create(::grpc::ServerContext* context, const ::checkpoint::CreateCheckpointRequest* request, ::checkpoint::CreateCheckpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace checkpoint

