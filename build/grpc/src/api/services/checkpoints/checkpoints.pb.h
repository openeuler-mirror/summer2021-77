// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: checkpoints.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_checkpoints_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_checkpoints_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_checkpoints_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_checkpoints_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_checkpoints_2eproto;
namespace checkpoint {
class CreateCheckpointRequest;
class CreateCheckpointRequestDefaultTypeInternal;
extern CreateCheckpointRequestDefaultTypeInternal _CreateCheckpointRequest_default_instance_;
class CreateCheckpointResponse;
class CreateCheckpointResponseDefaultTypeInternal;
extern CreateCheckpointResponseDefaultTypeInternal _CreateCheckpointResponse_default_instance_;
}  // namespace checkpoint
PROTOBUF_NAMESPACE_OPEN
template<> ::checkpoint::CreateCheckpointRequest* Arena::CreateMaybeMessage<::checkpoint::CreateCheckpointRequest>(Arena*);
template<> ::checkpoint::CreateCheckpointResponse* Arena::CreateMaybeMessage<::checkpoint::CreateCheckpointResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace checkpoint {

// ===================================================================

class CreateCheckpointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:checkpoint.CreateCheckpointRequest) */ {
 public:
  inline CreateCheckpointRequest() : CreateCheckpointRequest(nullptr) {};
  virtual ~CreateCheckpointRequest();

  CreateCheckpointRequest(const CreateCheckpointRequest& from);
  CreateCheckpointRequest(CreateCheckpointRequest&& from) noexcept
    : CreateCheckpointRequest() {
    *this = ::std::move(from);
  }

  inline CreateCheckpointRequest& operator=(const CreateCheckpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCheckpointRequest& operator=(CreateCheckpointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCheckpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCheckpointRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCheckpointRequest*>(
               &_CreateCheckpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateCheckpointRequest& a, CreateCheckpointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCheckpointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCheckpointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCheckpointRequest* New() const final {
    return CreateMaybeMessage<CreateCheckpointRequest>(nullptr);
  }

  CreateCheckpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCheckpointRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCheckpointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkpoint.CreateCheckpointRequest";
  }
  protected:
  explicit CreateCheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_checkpoints_2eproto);
    return ::descriptor_table_checkpoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerFieldNumber = 1,
    kCheckpointFieldNumber = 2,
    kDirFieldNumber = 3,
  };
  // string container = 1;
  void clear_container();
  const std::string& container() const;
  void set_container(const std::string& value);
  void set_container(std::string&& value);
  void set_container(const char* value);
  void set_container(const char* value, size_t size);
  std::string* mutable_container();
  std::string* release_container();
  void set_allocated_container(std::string* container);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container(
      std::string* container);
  private:
  const std::string& _internal_container() const;
  void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // string checkpoint = 2;
  void clear_checkpoint();
  const std::string& checkpoint() const;
  void set_checkpoint(const std::string& value);
  void set_checkpoint(std::string&& value);
  void set_checkpoint(const char* value);
  void set_checkpoint(const char* value, size_t size);
  std::string* mutable_checkpoint();
  std::string* release_checkpoint();
  void set_allocated_checkpoint(std::string* checkpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpoint(
      std::string* checkpoint);
  private:
  const std::string& _internal_checkpoint() const;
  void _internal_set_checkpoint(const std::string& value);
  std::string* _internal_mutable_checkpoint();
  public:

  // string dir = 3;
  void clear_dir();
  const std::string& dir() const;
  void set_dir(const std::string& value);
  void set_dir(std::string&& value);
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  std::string* mutable_dir();
  std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dir(
      std::string* dir);
  private:
  const std::string& _internal_dir() const;
  void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // @@protoc_insertion_point(class_scope:checkpoint.CreateCheckpointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_checkpoints_2eproto;
};
// -------------------------------------------------------------------

class CreateCheckpointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:checkpoint.CreateCheckpointResponse) */ {
 public:
  inline CreateCheckpointResponse() : CreateCheckpointResponse(nullptr) {};
  virtual ~CreateCheckpointResponse();

  CreateCheckpointResponse(const CreateCheckpointResponse& from);
  CreateCheckpointResponse(CreateCheckpointResponse&& from) noexcept
    : CreateCheckpointResponse() {
    *this = ::std::move(from);
  }

  inline CreateCheckpointResponse& operator=(const CreateCheckpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCheckpointResponse& operator=(CreateCheckpointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCheckpointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCheckpointResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCheckpointResponse*>(
               &_CreateCheckpointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateCheckpointResponse& a, CreateCheckpointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCheckpointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCheckpointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCheckpointResponse* New() const final {
    return CreateMaybeMessage<CreateCheckpointResponse>(nullptr);
  }

  CreateCheckpointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCheckpointResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCheckpointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "checkpoint.CreateCheckpointResponse";
  }
  protected:
  explicit CreateCheckpointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_checkpoints_2eproto);
    return ::descriptor_table_checkpoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:checkpoint.CreateCheckpointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_checkpoints_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateCheckpointRequest

// string container = 1;
inline void CreateCheckpointRequest::clear_container() {
  container_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCheckpointRequest::container() const {
  // @@protoc_insertion_point(field_get:checkpoint.CreateCheckpointRequest.container)
  return _internal_container();
}
inline void CreateCheckpointRequest::set_container(const std::string& value) {
  _internal_set_container(value);
  // @@protoc_insertion_point(field_set:checkpoint.CreateCheckpointRequest.container)
}
inline std::string* CreateCheckpointRequest::mutable_container() {
  // @@protoc_insertion_point(field_mutable:checkpoint.CreateCheckpointRequest.container)
  return _internal_mutable_container();
}
inline const std::string& CreateCheckpointRequest::_internal_container() const {
  return container_.Get();
}
inline void CreateCheckpointRequest::_internal_set_container(const std::string& value) {
  
  container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCheckpointRequest::set_container(std::string&& value) {
  
  container_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkpoint.CreateCheckpointRequest.container)
}
inline void CreateCheckpointRequest::set_container(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:checkpoint.CreateCheckpointRequest.container)
}
inline void CreateCheckpointRequest::set_container(const char* value,
    size_t size) {
  
  container_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkpoint.CreateCheckpointRequest.container)
}
inline std::string* CreateCheckpointRequest::_internal_mutable_container() {
  
  return container_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCheckpointRequest::release_container() {
  // @@protoc_insertion_point(field_release:checkpoint.CreateCheckpointRequest.container)
  return container_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCheckpointRequest::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  container_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkpoint.CreateCheckpointRequest.container)
}
inline std::string* CreateCheckpointRequest::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_unsafe_arena_release:checkpoint.CreateCheckpointRequest.container)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCheckpointRequest::unsafe_arena_set_allocated_container(
    std::string* container) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container != nullptr) {
    
  } else {
    
  }
  container_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkpoint.CreateCheckpointRequest.container)
}

// string checkpoint = 2;
inline void CreateCheckpointRequest::clear_checkpoint() {
  checkpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCheckpointRequest::checkpoint() const {
  // @@protoc_insertion_point(field_get:checkpoint.CreateCheckpointRequest.checkpoint)
  return _internal_checkpoint();
}
inline void CreateCheckpointRequest::set_checkpoint(const std::string& value) {
  _internal_set_checkpoint(value);
  // @@protoc_insertion_point(field_set:checkpoint.CreateCheckpointRequest.checkpoint)
}
inline std::string* CreateCheckpointRequest::mutable_checkpoint() {
  // @@protoc_insertion_point(field_mutable:checkpoint.CreateCheckpointRequest.checkpoint)
  return _internal_mutable_checkpoint();
}
inline const std::string& CreateCheckpointRequest::_internal_checkpoint() const {
  return checkpoint_.Get();
}
inline void CreateCheckpointRequest::_internal_set_checkpoint(const std::string& value) {
  
  checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCheckpointRequest::set_checkpoint(std::string&& value) {
  
  checkpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkpoint.CreateCheckpointRequest.checkpoint)
}
inline void CreateCheckpointRequest::set_checkpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:checkpoint.CreateCheckpointRequest.checkpoint)
}
inline void CreateCheckpointRequest::set_checkpoint(const char* value,
    size_t size) {
  
  checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkpoint.CreateCheckpointRequest.checkpoint)
}
inline std::string* CreateCheckpointRequest::_internal_mutable_checkpoint() {
  
  return checkpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCheckpointRequest::release_checkpoint() {
  // @@protoc_insertion_point(field_release:checkpoint.CreateCheckpointRequest.checkpoint)
  return checkpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCheckpointRequest::set_allocated_checkpoint(std::string* checkpoint) {
  if (checkpoint != nullptr) {
    
  } else {
    
  }
  checkpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkpoint.CreateCheckpointRequest.checkpoint)
}
inline std::string* CreateCheckpointRequest::unsafe_arena_release_checkpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:checkpoint.CreateCheckpointRequest.checkpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCheckpointRequest::unsafe_arena_set_allocated_checkpoint(
    std::string* checkpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpoint != nullptr) {
    
  } else {
    
  }
  checkpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkpoint.CreateCheckpointRequest.checkpoint)
}

// string dir = 3;
inline void CreateCheckpointRequest::clear_dir() {
  dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCheckpointRequest::dir() const {
  // @@protoc_insertion_point(field_get:checkpoint.CreateCheckpointRequest.dir)
  return _internal_dir();
}
inline void CreateCheckpointRequest::set_dir(const std::string& value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:checkpoint.CreateCheckpointRequest.dir)
}
inline std::string* CreateCheckpointRequest::mutable_dir() {
  // @@protoc_insertion_point(field_mutable:checkpoint.CreateCheckpointRequest.dir)
  return _internal_mutable_dir();
}
inline const std::string& CreateCheckpointRequest::_internal_dir() const {
  return dir_.Get();
}
inline void CreateCheckpointRequest::_internal_set_dir(const std::string& value) {
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCheckpointRequest::set_dir(std::string&& value) {
  
  dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkpoint.CreateCheckpointRequest.dir)
}
inline void CreateCheckpointRequest::set_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:checkpoint.CreateCheckpointRequest.dir)
}
inline void CreateCheckpointRequest::set_dir(const char* value,
    size_t size) {
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkpoint.CreateCheckpointRequest.dir)
}
inline std::string* CreateCheckpointRequest::_internal_mutable_dir() {
  
  return dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCheckpointRequest::release_dir() {
  // @@protoc_insertion_point(field_release:checkpoint.CreateCheckpointRequest.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCheckpointRequest::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkpoint.CreateCheckpointRequest.dir)
}
inline std::string* CreateCheckpointRequest::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:checkpoint.CreateCheckpointRequest.dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCheckpointRequest::unsafe_arena_set_allocated_dir(
    std::string* dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkpoint.CreateCheckpointRequest.dir)
}

// -------------------------------------------------------------------

// CreateCheckpointResponse

// uint32 cc = 1;
inline void CreateCheckpointResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCheckpointResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCheckpointResponse::cc() const {
  // @@protoc_insertion_point(field_get:checkpoint.CreateCheckpointResponse.cc)
  return _internal_cc();
}
inline void CreateCheckpointResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void CreateCheckpointResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:checkpoint.CreateCheckpointResponse.cc)
}

// string errmsg = 2;
inline void CreateCheckpointResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCheckpointResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:checkpoint.CreateCheckpointResponse.errmsg)
  return _internal_errmsg();
}
inline void CreateCheckpointResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:checkpoint.CreateCheckpointResponse.errmsg)
}
inline std::string* CreateCheckpointResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:checkpoint.CreateCheckpointResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& CreateCheckpointResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void CreateCheckpointResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCheckpointResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:checkpoint.CreateCheckpointResponse.errmsg)
}
inline void CreateCheckpointResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:checkpoint.CreateCheckpointResponse.errmsg)
}
inline void CreateCheckpointResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:checkpoint.CreateCheckpointResponse.errmsg)
}
inline std::string* CreateCheckpointResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCheckpointResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:checkpoint.CreateCheckpointResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCheckpointResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:checkpoint.CreateCheckpointResponse.errmsg)
}
inline std::string* CreateCheckpointResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:checkpoint.CreateCheckpointResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCheckpointResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:checkpoint.CreateCheckpointResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace checkpoint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_checkpoints_2eproto
