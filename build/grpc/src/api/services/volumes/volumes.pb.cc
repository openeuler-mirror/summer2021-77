// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: volumes.proto

#include "volumes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_volumes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Volume_volumes_2eproto;
namespace volume {
class VolumeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Volume> _instance;
} _Volume_default_instance_;
class ListVolumeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVolumeRequest> _instance;
} _ListVolumeRequest_default_instance_;
class ListVolumeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVolumeResponse> _instance;
} _ListVolumeResponse_default_instance_;
class RemoveVolumeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveVolumeRequest> _instance;
} _RemoveVolumeRequest_default_instance_;
class RemoveVolumeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveVolumeResponse> _instance;
} _RemoveVolumeResponse_default_instance_;
class PruneVolumeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PruneVolumeRequest> _instance;
} _PruneVolumeRequest_default_instance_;
class PruneVolumeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PruneVolumeResponse> _instance;
} _PruneVolumeResponse_default_instance_;
}  // namespace volume
static void InitDefaultsscc_info_ListVolumeRequest_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_ListVolumeRequest_default_instance_;
    new (ptr) ::volume::ListVolumeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::ListVolumeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVolumeRequest_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListVolumeRequest_volumes_2eproto}, {}};

static void InitDefaultsscc_info_ListVolumeResponse_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_ListVolumeResponse_default_instance_;
    new (ptr) ::volume::ListVolumeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::ListVolumeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVolumeResponse_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVolumeResponse_volumes_2eproto}, {
      &scc_info_Volume_volumes_2eproto.base,}};

static void InitDefaultsscc_info_PruneVolumeRequest_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_PruneVolumeRequest_default_instance_;
    new (ptr) ::volume::PruneVolumeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::PruneVolumeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PruneVolumeRequest_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PruneVolumeRequest_volumes_2eproto}, {}};

static void InitDefaultsscc_info_PruneVolumeResponse_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_PruneVolumeResponse_default_instance_;
    new (ptr) ::volume::PruneVolumeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::PruneVolumeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PruneVolumeResponse_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PruneVolumeResponse_volumes_2eproto}, {}};

static void InitDefaultsscc_info_RemoveVolumeRequest_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_RemoveVolumeRequest_default_instance_;
    new (ptr) ::volume::RemoveVolumeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::RemoveVolumeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveVolumeRequest_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveVolumeRequest_volumes_2eproto}, {}};

static void InitDefaultsscc_info_RemoveVolumeResponse_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_RemoveVolumeResponse_default_instance_;
    new (ptr) ::volume::RemoveVolumeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::RemoveVolumeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveVolumeResponse_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveVolumeResponse_volumes_2eproto}, {}};

static void InitDefaultsscc_info_Volume_volumes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::volume::_Volume_default_instance_;
    new (ptr) ::volume::Volume();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::volume::Volume::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Volume_volumes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Volume_volumes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_volumes_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_volumes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_volumes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_volumes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::Volume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::volume::Volume, driver_),
  PROTOBUF_FIELD_OFFSET(::volume::Volume, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::ListVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::ListVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::volume::ListVolumeResponse, volumes_),
  PROTOBUF_FIELD_OFFSET(::volume::ListVolumeResponse, cc_),
  PROTOBUF_FIELD_OFFSET(::volume::ListVolumeResponse, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::RemoveVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::volume::RemoveVolumeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::RemoveVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::volume::RemoveVolumeResponse, cc_),
  PROTOBUF_FIELD_OFFSET(::volume::RemoveVolumeResponse, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::PruneVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::volume::PruneVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::volume::PruneVolumeResponse, volumes_),
  PROTOBUF_FIELD_OFFSET(::volume::PruneVolumeResponse, cc_),
  PROTOBUF_FIELD_OFFSET(::volume::PruneVolumeResponse, errmsg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::volume::Volume)},
  { 7, -1, sizeof(::volume::ListVolumeRequest)},
  { 12, -1, sizeof(::volume::ListVolumeResponse)},
  { 20, -1, sizeof(::volume::RemoveVolumeRequest)},
  { 26, -1, sizeof(::volume::RemoveVolumeResponse)},
  { 33, -1, sizeof(::volume::PruneVolumeRequest)},
  { 38, -1, sizeof(::volume::PruneVolumeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_Volume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_ListVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_ListVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_RemoveVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_RemoveVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_PruneVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::volume::_PruneVolumeResponse_default_instance_),
};

const char descriptor_table_protodef_volumes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvolumes.proto\022\006volume\"&\n\006Volume\022\016\n\006dri"
  "ver\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\023\n\021ListVolumeReq"
  "uest\"Q\n\022ListVolumeResponse\022\037\n\007volumes\030\001 "
  "\003(\0132\016.volume.Volume\022\n\n\002cc\030\002 \001(\r\022\016\n\006errms"
  "g\030\003 \001(\t\"#\n\023RemoveVolumeRequest\022\014\n\004name\030\001"
  " \001(\t\"2\n\024RemoveVolumeResponse\022\n\n\002cc\030\001 \001(\r"
  "\022\016\n\006errmsg\030\002 \001(\t\"\024\n\022PruneVolumeRequest\"B"
  "\n\023PruneVolumeResponse\022\017\n\007volumes\030\002 \003(\t\022\n"
  "\n\002cc\030\003 \001(\r\022\016\n\006errmsg\030\004 \001(\t2\325\001\n\rVolumeSer"
  "vice\022=\n\004List\022\031.volume.ListVolumeRequest\032"
  "\032.volume.ListVolumeResponse\022C\n\006Remove\022\033."
  "volume.RemoveVolumeRequest\032\034.volume.Remo"
  "veVolumeResponse\022@\n\005Prune\022\032.volume.Prune"
  "VolumeRequest\032\033.volume.PruneVolumeRespon"
  "seB\002H\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_volumes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_volumes_2eproto_sccs[7] = {
  &scc_info_ListVolumeRequest_volumes_2eproto.base,
  &scc_info_ListVolumeResponse_volumes_2eproto.base,
  &scc_info_PruneVolumeRequest_volumes_2eproto.base,
  &scc_info_PruneVolumeResponse_volumes_2eproto.base,
  &scc_info_RemoveVolumeRequest_volumes_2eproto.base,
  &scc_info_RemoveVolumeResponse_volumes_2eproto.base,
  &scc_info_Volume_volumes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_volumes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_volumes_2eproto = {
  false, false, descriptor_table_protodef_volumes_2eproto, "volumes.proto", 574,
  &descriptor_table_volumes_2eproto_once, descriptor_table_volumes_2eproto_sccs, descriptor_table_volumes_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_volumes_2eproto::offsets,
  file_level_metadata_volumes_2eproto, 7, file_level_enum_descriptors_volumes_2eproto, file_level_service_descriptors_volumes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_volumes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_volumes_2eproto)), true);
namespace volume {

// ===================================================================

void Volume::InitAsDefaultInstance() {
}
class Volume::_Internal {
 public:
};

Volume::Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.Volume)
}
Volume::Volume(const Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driver().empty()) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_driver(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:volume.Volume)
}

void Volume::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Volume_volumes_2eproto.base);
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:volume.Volume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Volume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Volume::ArenaDtor(void* object) {
  Volume* _this = reinterpret_cast< Volume* >(object);
  (void)_this;
}
void Volume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Volume& Volume::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Volume_volumes_2eproto.base);
  return *internal_default_instance();
}


void Volume::InternalSwap(Volume* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Volume::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVolumeRequest::InitAsDefaultInstance() {
}
class ListVolumeRequest::_Internal {
 public:
};

ListVolumeRequest::ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.ListVolumeRequest)
}
ListVolumeRequest::ListVolumeRequest(const ListVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:volume.ListVolumeRequest)
}

void ListVolumeRequest::SharedCtor() {
}

ListVolumeRequest::~ListVolumeRequest() {
  // @@protoc_insertion_point(destructor:volume.ListVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListVolumeRequest::ArenaDtor(void* object) {
  ListVolumeRequest* _this = reinterpret_cast< ListVolumeRequest* >(object);
  (void)_this;
}
void ListVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVolumeRequest& ListVolumeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVolumeRequest_volumes_2eproto.base);
  return *internal_default_instance();
}


void ListVolumeRequest::InternalSwap(ListVolumeRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVolumeResponse::InitAsDefaultInstance() {
}
class ListVolumeResponse::_Internal {
 public:
};

ListVolumeResponse::ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volumes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.ListVolumeResponse)
}
ListVolumeResponse::ListVolumeResponse(const ListVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errmsg(),
      GetArena());
  }
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:volume.ListVolumeResponse)
}

void ListVolumeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVolumeResponse_volumes_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cc_ = 0u;
}

ListVolumeResponse::~ListVolumeResponse() {
  // @@protoc_insertion_point(destructor:volume.ListVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVolumeResponse::ArenaDtor(void* object) {
  ListVolumeResponse* _this = reinterpret_cast< ListVolumeResponse* >(object);
  (void)_this;
}
void ListVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVolumeResponse& ListVolumeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVolumeResponse_volumes_2eproto.base);
  return *internal_default_instance();
}


void ListVolumeResponse::InternalSwap(ListVolumeResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveVolumeRequest::InitAsDefaultInstance() {
}
class RemoveVolumeRequest::_Internal {
 public:
};

RemoveVolumeRequest::RemoveVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.RemoveVolumeRequest)
}
RemoveVolumeRequest::RemoveVolumeRequest(const RemoveVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:volume.RemoveVolumeRequest)
}

void RemoveVolumeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveVolumeRequest_volumes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveVolumeRequest::~RemoveVolumeRequest() {
  // @@protoc_insertion_point(destructor:volume.RemoveVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveVolumeRequest::ArenaDtor(void* object) {
  RemoveVolumeRequest* _this = reinterpret_cast< RemoveVolumeRequest* >(object);
  (void)_this;
}
void RemoveVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveVolumeRequest& RemoveVolumeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveVolumeRequest_volumes_2eproto.base);
  return *internal_default_instance();
}


void RemoveVolumeRequest::InternalSwap(RemoveVolumeRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveVolumeResponse::InitAsDefaultInstance() {
}
class RemoveVolumeResponse::_Internal {
 public:
};

RemoveVolumeResponse::RemoveVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.RemoveVolumeResponse)
}
RemoveVolumeResponse::RemoveVolumeResponse(const RemoveVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errmsg(),
      GetArena());
  }
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:volume.RemoveVolumeResponse)
}

void RemoveVolumeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveVolumeResponse_volumes_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cc_ = 0u;
}

RemoveVolumeResponse::~RemoveVolumeResponse() {
  // @@protoc_insertion_point(destructor:volume.RemoveVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveVolumeResponse::ArenaDtor(void* object) {
  RemoveVolumeResponse* _this = reinterpret_cast< RemoveVolumeResponse* >(object);
  (void)_this;
}
void RemoveVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveVolumeResponse& RemoveVolumeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveVolumeResponse_volumes_2eproto.base);
  return *internal_default_instance();
}


void RemoveVolumeResponse::InternalSwap(RemoveVolumeResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PruneVolumeRequest::InitAsDefaultInstance() {
}
class PruneVolumeRequest::_Internal {
 public:
};

PruneVolumeRequest::PruneVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.PruneVolumeRequest)
}
PruneVolumeRequest::PruneVolumeRequest(const PruneVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:volume.PruneVolumeRequest)
}

void PruneVolumeRequest::SharedCtor() {
}

PruneVolumeRequest::~PruneVolumeRequest() {
  // @@protoc_insertion_point(destructor:volume.PruneVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PruneVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PruneVolumeRequest::ArenaDtor(void* object) {
  PruneVolumeRequest* _this = reinterpret_cast< PruneVolumeRequest* >(object);
  (void)_this;
}
void PruneVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruneVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PruneVolumeRequest& PruneVolumeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PruneVolumeRequest_volumes_2eproto.base);
  return *internal_default_instance();
}


void PruneVolumeRequest::InternalSwap(PruneVolumeRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PruneVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PruneVolumeResponse::InitAsDefaultInstance() {
}
class PruneVolumeResponse::_Internal {
 public:
};

PruneVolumeResponse::PruneVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volumes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:volume.PruneVolumeResponse)
}
PruneVolumeResponse::PruneVolumeResponse(const PruneVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errmsg(),
      GetArena());
  }
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:volume.PruneVolumeResponse)
}

void PruneVolumeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PruneVolumeResponse_volumes_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cc_ = 0u;
}

PruneVolumeResponse::~PruneVolumeResponse() {
  // @@protoc_insertion_point(destructor:volume.PruneVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PruneVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PruneVolumeResponse::ArenaDtor(void* object) {
  PruneVolumeResponse* _this = reinterpret_cast< PruneVolumeResponse* >(object);
  (void)_this;
}
void PruneVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruneVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PruneVolumeResponse& PruneVolumeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PruneVolumeResponse_volumes_2eproto.base);
  return *internal_default_instance();
}


void PruneVolumeResponse::InternalSwap(PruneVolumeResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PruneVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace volume
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::volume::Volume* Arena::CreateMaybeMessage< ::volume::Volume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::ListVolumeRequest* Arena::CreateMaybeMessage< ::volume::ListVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::ListVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::ListVolumeResponse* Arena::CreateMaybeMessage< ::volume::ListVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::ListVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::RemoveVolumeRequest* Arena::CreateMaybeMessage< ::volume::RemoveVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::RemoveVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::RemoveVolumeResponse* Arena::CreateMaybeMessage< ::volume::RemoveVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::RemoveVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::PruneVolumeRequest* Arena::CreateMaybeMessage< ::volume::PruneVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::PruneVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::volume::PruneVolumeResponse* Arena::CreateMaybeMessage< ::volume::PruneVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::volume::PruneVolumeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
