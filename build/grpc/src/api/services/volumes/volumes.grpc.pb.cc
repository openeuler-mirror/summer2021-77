// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: volumes.proto

#include "volumes.pb.h"
#include "volumes.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace volume {

static const char* VolumeService_method_names[] = {
  "/volume.VolumeService/List",
  "/volume.VolumeService/Remove",
  "/volume.VolumeService/Prune",
};

std::unique_ptr< VolumeService::Stub> VolumeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VolumeService::Stub> stub(new VolumeService::Stub(channel));
  return stub;
}

VolumeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(VolumeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(VolumeService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Prune_(VolumeService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VolumeService::Stub::List(::grpc::ClientContext* context, const ::volume::ListVolumeRequest& request, ::volume::ListVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void VolumeService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::volume::ListVolumeRequest* request, ::volume::ListVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::ListVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::volume::ListVolumeRequest* request, ::volume::ListVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void VolumeService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::ListVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::volume::ListVolumeResponse>* VolumeService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::volume::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::ListVolumeResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::volume::ListVolumeResponse>* VolumeService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::volume::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::ListVolumeResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status VolumeService::Stub::Remove(::grpc::ClientContext* context, const ::volume::RemoveVolumeRequest& request, ::volume::RemoveVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void VolumeService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::volume::RemoveVolumeRequest* request, ::volume::RemoveVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::RemoveVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::volume::RemoveVolumeRequest* request, ::volume::RemoveVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

void VolumeService::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::RemoveVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::volume::RemoveVolumeResponse>* VolumeService::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::volume::RemoveVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::RemoveVolumeResponse>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::volume::RemoveVolumeResponse>* VolumeService::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::volume::RemoveVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::RemoveVolumeResponse>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

::grpc::Status VolumeService::Stub::Prune(::grpc::ClientContext* context, const ::volume::PruneVolumeRequest& request, ::volume::PruneVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Prune_, context, request, response);
}

void VolumeService::Stub::experimental_async::Prune(::grpc::ClientContext* context, const ::volume::PruneVolumeRequest* request, ::volume::PruneVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prune_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::Prune(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::PruneVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prune_, context, request, response, std::move(f));
}

void VolumeService::Stub::experimental_async::Prune(::grpc::ClientContext* context, const ::volume::PruneVolumeRequest* request, ::volume::PruneVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Prune_, context, request, response, reactor);
}

void VolumeService::Stub::experimental_async::Prune(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::volume::PruneVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Prune_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::volume::PruneVolumeResponse>* VolumeService::Stub::AsyncPruneRaw(::grpc::ClientContext* context, const ::volume::PruneVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::PruneVolumeResponse>::Create(channel_.get(), cq, rpcmethod_Prune_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::volume::PruneVolumeResponse>* VolumeService::Stub::PrepareAsyncPruneRaw(::grpc::ClientContext* context, const ::volume::PruneVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::volume::PruneVolumeResponse>::Create(channel_.get(), cq, rpcmethod_Prune_, context, request, false);
}

VolumeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::volume::ListVolumeRequest, ::volume::ListVolumeResponse>(
          [](VolumeService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::volume::ListVolumeRequest* req,
             ::volume::ListVolumeResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::volume::RemoveVolumeRequest, ::volume::RemoveVolumeResponse>(
          [](VolumeService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::volume::RemoveVolumeRequest* req,
             ::volume::RemoveVolumeResponse* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::volume::PruneVolumeRequest, ::volume::PruneVolumeResponse>(
          [](VolumeService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::volume::PruneVolumeRequest* req,
             ::volume::PruneVolumeResponse* resp) {
               return service->Prune(ctx, req, resp);
             }, this)));
}

VolumeService::Service::~Service() {
}

::grpc::Status VolumeService::Service::List(::grpc::ServerContext* context, const ::volume::ListVolumeRequest* request, ::volume::ListVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::Remove(::grpc::ServerContext* context, const ::volume::RemoveVolumeRequest* request, ::volume::RemoveVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::Prune(::grpc::ServerContext* context, const ::volume::PruneVolumeRequest* request, ::volume::PruneVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace volume

