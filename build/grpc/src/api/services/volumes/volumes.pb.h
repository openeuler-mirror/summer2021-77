// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: volumes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_volumes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_volumes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_volumes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_volumes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_volumes_2eproto;
namespace volume {
class ListVolumeRequest;
class ListVolumeRequestDefaultTypeInternal;
extern ListVolumeRequestDefaultTypeInternal _ListVolumeRequest_default_instance_;
class ListVolumeResponse;
class ListVolumeResponseDefaultTypeInternal;
extern ListVolumeResponseDefaultTypeInternal _ListVolumeResponse_default_instance_;
class PruneVolumeRequest;
class PruneVolumeRequestDefaultTypeInternal;
extern PruneVolumeRequestDefaultTypeInternal _PruneVolumeRequest_default_instance_;
class PruneVolumeResponse;
class PruneVolumeResponseDefaultTypeInternal;
extern PruneVolumeResponseDefaultTypeInternal _PruneVolumeResponse_default_instance_;
class RemoveVolumeRequest;
class RemoveVolumeRequestDefaultTypeInternal;
extern RemoveVolumeRequestDefaultTypeInternal _RemoveVolumeRequest_default_instance_;
class RemoveVolumeResponse;
class RemoveVolumeResponseDefaultTypeInternal;
extern RemoveVolumeResponseDefaultTypeInternal _RemoveVolumeResponse_default_instance_;
class Volume;
class VolumeDefaultTypeInternal;
extern VolumeDefaultTypeInternal _Volume_default_instance_;
}  // namespace volume
PROTOBUF_NAMESPACE_OPEN
template<> ::volume::ListVolumeRequest* Arena::CreateMaybeMessage<::volume::ListVolumeRequest>(Arena*);
template<> ::volume::ListVolumeResponse* Arena::CreateMaybeMessage<::volume::ListVolumeResponse>(Arena*);
template<> ::volume::PruneVolumeRequest* Arena::CreateMaybeMessage<::volume::PruneVolumeRequest>(Arena*);
template<> ::volume::PruneVolumeResponse* Arena::CreateMaybeMessage<::volume::PruneVolumeResponse>(Arena*);
template<> ::volume::RemoveVolumeRequest* Arena::CreateMaybeMessage<::volume::RemoveVolumeRequest>(Arena*);
template<> ::volume::RemoveVolumeResponse* Arena::CreateMaybeMessage<::volume::RemoveVolumeResponse>(Arena*);
template<> ::volume::Volume* Arena::CreateMaybeMessage<::volume::Volume>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace volume {

// ===================================================================

class Volume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.Volume) */ {
 public:
  inline Volume() : Volume(nullptr) {};
  virtual ~Volume();

  Volume(const Volume& from);
  Volume(Volume&& from) noexcept
    : Volume() {
    *this = ::std::move(from);
  }

  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline Volume& operator=(Volume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Volume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Volume* internal_default_instance() {
    return reinterpret_cast<const Volume*>(
               &_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Volume& a, Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(Volume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Volume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Volume* New() const final {
    return CreateMaybeMessage<Volume>(nullptr);
  }

  Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Volume>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.Volume";
  }
  protected:
  explicit Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string driver = 1;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_driver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_driver(
      std::string* driver);
  private:
  const std::string& _internal_driver() const;
  void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:volume.Volume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.ListVolumeRequest) */ {
 public:
  inline ListVolumeRequest() : ListVolumeRequest(nullptr) {};
  virtual ~ListVolumeRequest();

  ListVolumeRequest(const ListVolumeRequest& from);
  ListVolumeRequest(ListVolumeRequest&& from) noexcept
    : ListVolumeRequest() {
    *this = ::std::move(from);
  }

  inline ListVolumeRequest& operator=(const ListVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeRequest& operator=(ListVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const ListVolumeRequest*>(
               &_ListVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListVolumeRequest& a, ListVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeRequest* New() const final {
    return CreateMaybeMessage<ListVolumeRequest>(nullptr);
  }

  ListVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.ListVolumeRequest";
  }
  protected:
  explicit ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:volume.ListVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.ListVolumeResponse) */ {
 public:
  inline ListVolumeResponse() : ListVolumeResponse(nullptr) {};
  virtual ~ListVolumeResponse();

  ListVolumeResponse(const ListVolumeResponse& from);
  ListVolumeResponse(ListVolumeResponse&& from) noexcept
    : ListVolumeResponse() {
    *this = ::std::move(from);
  }

  inline ListVolumeResponse& operator=(const ListVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeResponse& operator=(ListVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const ListVolumeResponse*>(
               &_ListVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListVolumeResponse& a, ListVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeResponse* New() const final {
    return CreateMaybeMessage<ListVolumeResponse>(nullptr);
  }

  ListVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.ListVolumeResponse";
  }
  protected:
  explicit ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // repeated .volume.Volume volumes = 1;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  ::volume::Volume* mutable_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::volume::Volume >*
      mutable_volumes();
  private:
  const ::volume::Volume& _internal_volumes(int index) const;
  ::volume::Volume* _internal_add_volumes();
  public:
  const ::volume::Volume& volumes(int index) const;
  ::volume::Volume* add_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::volume::Volume >&
      volumes() const;

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:volume.ListVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::volume::Volume > volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class RemoveVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.RemoveVolumeRequest) */ {
 public:
  inline RemoveVolumeRequest() : RemoveVolumeRequest(nullptr) {};
  virtual ~RemoveVolumeRequest();

  RemoveVolumeRequest(const RemoveVolumeRequest& from);
  RemoveVolumeRequest(RemoveVolumeRequest&& from) noexcept
    : RemoveVolumeRequest() {
    *this = ::std::move(from);
  }

  inline RemoveVolumeRequest& operator=(const RemoveVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveVolumeRequest& operator=(RemoveVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveVolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveVolumeRequest*>(
               &_RemoveVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveVolumeRequest& a, RemoveVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveVolumeRequest* New() const final {
    return CreateMaybeMessage<RemoveVolumeRequest>(nullptr);
  }

  RemoveVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveVolumeRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.RemoveVolumeRequest";
  }
  protected:
  explicit RemoveVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:volume.RemoveVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class RemoveVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.RemoveVolumeResponse) */ {
 public:
  inline RemoveVolumeResponse() : RemoveVolumeResponse(nullptr) {};
  virtual ~RemoveVolumeResponse();

  RemoveVolumeResponse(const RemoveVolumeResponse& from);
  RemoveVolumeResponse(RemoveVolumeResponse&& from) noexcept
    : RemoveVolumeResponse() {
    *this = ::std::move(from);
  }

  inline RemoveVolumeResponse& operator=(const RemoveVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveVolumeResponse& operator=(RemoveVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveVolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveVolumeResponse*>(
               &_RemoveVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveVolumeResponse& a, RemoveVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveVolumeResponse* New() const final {
    return CreateMaybeMessage<RemoveVolumeResponse>(nullptr);
  }

  RemoveVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveVolumeResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.RemoveVolumeResponse";
  }
  protected:
  explicit RemoveVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:volume.RemoveVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class PruneVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.PruneVolumeRequest) */ {
 public:
  inline PruneVolumeRequest() : PruneVolumeRequest(nullptr) {};
  virtual ~PruneVolumeRequest();

  PruneVolumeRequest(const PruneVolumeRequest& from);
  PruneVolumeRequest(PruneVolumeRequest&& from) noexcept
    : PruneVolumeRequest() {
    *this = ::std::move(from);
  }

  inline PruneVolumeRequest& operator=(const PruneVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruneVolumeRequest& operator=(PruneVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PruneVolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PruneVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const PruneVolumeRequest*>(
               &_PruneVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PruneVolumeRequest& a, PruneVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PruneVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruneVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PruneVolumeRequest* New() const final {
    return CreateMaybeMessage<PruneVolumeRequest>(nullptr);
  }

  PruneVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PruneVolumeRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruneVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.PruneVolumeRequest";
  }
  protected:
  explicit PruneVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:volume.PruneVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// -------------------------------------------------------------------

class PruneVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volume.PruneVolumeResponse) */ {
 public:
  inline PruneVolumeResponse() : PruneVolumeResponse(nullptr) {};
  virtual ~PruneVolumeResponse();

  PruneVolumeResponse(const PruneVolumeResponse& from);
  PruneVolumeResponse(PruneVolumeResponse&& from) noexcept
    : PruneVolumeResponse() {
    *this = ::std::move(from);
  }

  inline PruneVolumeResponse& operator=(const PruneVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruneVolumeResponse& operator=(PruneVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PruneVolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PruneVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const PruneVolumeResponse*>(
               &_PruneVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PruneVolumeResponse& a, PruneVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PruneVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruneVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PruneVolumeResponse* New() const final {
    return CreateMaybeMessage<PruneVolumeResponse>(nullptr);
  }

  PruneVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PruneVolumeResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruneVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volume.PruneVolumeResponse";
  }
  protected:
  explicit PruneVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_volumes_2eproto);
    return ::descriptor_table_volumes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 2,
    kErrmsgFieldNumber = 4,
    kCcFieldNumber = 3,
  };
  // repeated string volumes = 2;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  const std::string& volumes(int index) const;
  std::string* mutable_volumes(int index);
  void set_volumes(int index, const std::string& value);
  void set_volumes(int index, std::string&& value);
  void set_volumes(int index, const char* value);
  void set_volumes(int index, const char* value, size_t size);
  std::string* add_volumes();
  void add_volumes(const std::string& value);
  void add_volumes(std::string&& value);
  void add_volumes(const char* value);
  void add_volumes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_volumes();
  private:
  const std::string& _internal_volumes(int index) const;
  std::string* _internal_add_volumes();
  public:

  // string errmsg = 4;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 3;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:volume.PruneVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_volumes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Volume

// string driver = 1;
inline void Volume::clear_driver() {
  driver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Volume::driver() const {
  // @@protoc_insertion_point(field_get:volume.Volume.driver)
  return _internal_driver();
}
inline void Volume::set_driver(const std::string& value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:volume.Volume.driver)
}
inline std::string* Volume::mutable_driver() {
  // @@protoc_insertion_point(field_mutable:volume.Volume.driver)
  return _internal_mutable_driver();
}
inline const std::string& Volume::_internal_driver() const {
  return driver_.Get();
}
inline void Volume::_internal_set_driver(const std::string& value) {
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Volume::set_driver(std::string&& value) {
  
  driver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.Volume.driver)
}
inline void Volume::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.Volume.driver)
}
inline void Volume::set_driver(const char* value,
    size_t size) {
  
  driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.Volume.driver)
}
inline std::string* Volume::_internal_mutable_driver() {
  
  return driver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Volume::release_driver() {
  // @@protoc_insertion_point(field_release:volume.Volume.driver)
  return driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.Volume.driver)
}
inline std::string* Volume::unsafe_arena_release_driver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.Volume.driver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return driver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Volume::unsafe_arena_set_allocated_driver(
    std::string* driver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      driver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.Volume.driver)
}

// string name = 2;
inline void Volume::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Volume::name() const {
  // @@protoc_insertion_point(field_get:volume.Volume.name)
  return _internal_name();
}
inline void Volume::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:volume.Volume.name)
}
inline std::string* Volume::mutable_name() {
  // @@protoc_insertion_point(field_mutable:volume.Volume.name)
  return _internal_mutable_name();
}
inline const std::string& Volume::_internal_name() const {
  return name_.Get();
}
inline void Volume::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Volume::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.Volume.name)
}
inline void Volume::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.Volume.name)
}
inline void Volume::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.Volume.name)
}
inline std::string* Volume::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Volume::release_name() {
  // @@protoc_insertion_point(field_release:volume.Volume.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.Volume.name)
}
inline std::string* Volume::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.Volume.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Volume::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.Volume.name)
}

// -------------------------------------------------------------------

// ListVolumeRequest

// -------------------------------------------------------------------

// ListVolumeResponse

// repeated .volume.Volume volumes = 1;
inline int ListVolumeResponse::_internal_volumes_size() const {
  return volumes_.size();
}
inline int ListVolumeResponse::volumes_size() const {
  return _internal_volumes_size();
}
inline void ListVolumeResponse::clear_volumes() {
  volumes_.Clear();
}
inline ::volume::Volume* ListVolumeResponse::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:volume.ListVolumeResponse.volumes)
  return volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::volume::Volume >*
ListVolumeResponse::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:volume.ListVolumeResponse.volumes)
  return &volumes_;
}
inline const ::volume::Volume& ListVolumeResponse::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const ::volume::Volume& ListVolumeResponse::volumes(int index) const {
  // @@protoc_insertion_point(field_get:volume.ListVolumeResponse.volumes)
  return _internal_volumes(index);
}
inline ::volume::Volume* ListVolumeResponse::_internal_add_volumes() {
  return volumes_.Add();
}
inline ::volume::Volume* ListVolumeResponse::add_volumes() {
  // @@protoc_insertion_point(field_add:volume.ListVolumeResponse.volumes)
  return _internal_add_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::volume::Volume >&
ListVolumeResponse::volumes() const {
  // @@protoc_insertion_point(field_list:volume.ListVolumeResponse.volumes)
  return volumes_;
}

// uint32 cc = 2;
inline void ListVolumeResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVolumeResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVolumeResponse::cc() const {
  // @@protoc_insertion_point(field_get:volume.ListVolumeResponse.cc)
  return _internal_cc();
}
inline void ListVolumeResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ListVolumeResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:volume.ListVolumeResponse.cc)
}

// string errmsg = 3;
inline void ListVolumeResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListVolumeResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:volume.ListVolumeResponse.errmsg)
  return _internal_errmsg();
}
inline void ListVolumeResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:volume.ListVolumeResponse.errmsg)
}
inline std::string* ListVolumeResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:volume.ListVolumeResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ListVolumeResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ListVolumeResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListVolumeResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.ListVolumeResponse.errmsg)
}
inline void ListVolumeResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.ListVolumeResponse.errmsg)
}
inline void ListVolumeResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.ListVolumeResponse.errmsg)
}
inline std::string* ListVolumeResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListVolumeResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:volume.ListVolumeResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.ListVolumeResponse.errmsg)
}
inline std::string* ListVolumeResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.ListVolumeResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListVolumeResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.ListVolumeResponse.errmsg)
}

// -------------------------------------------------------------------

// RemoveVolumeRequest

// string name = 1;
inline void RemoveVolumeRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:volume.RemoveVolumeRequest.name)
  return _internal_name();
}
inline void RemoveVolumeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:volume.RemoveVolumeRequest.name)
}
inline std::string* RemoveVolumeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:volume.RemoveVolumeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RemoveVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void RemoveVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveVolumeRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.RemoveVolumeRequest.name)
}
inline void RemoveVolumeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.RemoveVolumeRequest.name)
}
inline void RemoveVolumeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.RemoveVolumeRequest.name)
}
inline std::string* RemoveVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:volume.RemoveVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.RemoveVolumeRequest.name)
}
inline std::string* RemoveVolumeRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.RemoveVolumeRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveVolumeRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.RemoveVolumeRequest.name)
}

// -------------------------------------------------------------------

// RemoveVolumeResponse

// uint32 cc = 1;
inline void RemoveVolumeResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveVolumeResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveVolumeResponse::cc() const {
  // @@protoc_insertion_point(field_get:volume.RemoveVolumeResponse.cc)
  return _internal_cc();
}
inline void RemoveVolumeResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void RemoveVolumeResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:volume.RemoveVolumeResponse.cc)
}

// string errmsg = 2;
inline void RemoveVolumeResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveVolumeResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:volume.RemoveVolumeResponse.errmsg)
  return _internal_errmsg();
}
inline void RemoveVolumeResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:volume.RemoveVolumeResponse.errmsg)
}
inline std::string* RemoveVolumeResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:volume.RemoveVolumeResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& RemoveVolumeResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void RemoveVolumeResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveVolumeResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.RemoveVolumeResponse.errmsg)
}
inline void RemoveVolumeResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.RemoveVolumeResponse.errmsg)
}
inline void RemoveVolumeResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.RemoveVolumeResponse.errmsg)
}
inline std::string* RemoveVolumeResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveVolumeResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:volume.RemoveVolumeResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveVolumeResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.RemoveVolumeResponse.errmsg)
}
inline std::string* RemoveVolumeResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.RemoveVolumeResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveVolumeResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.RemoveVolumeResponse.errmsg)
}

// -------------------------------------------------------------------

// PruneVolumeRequest

// -------------------------------------------------------------------

// PruneVolumeResponse

// repeated string volumes = 2;
inline int PruneVolumeResponse::_internal_volumes_size() const {
  return volumes_.size();
}
inline int PruneVolumeResponse::volumes_size() const {
  return _internal_volumes_size();
}
inline void PruneVolumeResponse::clear_volumes() {
  volumes_.Clear();
}
inline std::string* PruneVolumeResponse::add_volumes() {
  // @@protoc_insertion_point(field_add_mutable:volume.PruneVolumeResponse.volumes)
  return _internal_add_volumes();
}
inline const std::string& PruneVolumeResponse::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const std::string& PruneVolumeResponse::volumes(int index) const {
  // @@protoc_insertion_point(field_get:volume.PruneVolumeResponse.volumes)
  return _internal_volumes(index);
}
inline std::string* PruneVolumeResponse::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:volume.PruneVolumeResponse.volumes)
  return volumes_.Mutable(index);
}
inline void PruneVolumeResponse::set_volumes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:volume.PruneVolumeResponse.volumes)
  volumes_.Mutable(index)->assign(value);
}
inline void PruneVolumeResponse::set_volumes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:volume.PruneVolumeResponse.volumes)
  volumes_.Mutable(index)->assign(std::move(value));
}
inline void PruneVolumeResponse::set_volumes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:volume.PruneVolumeResponse.volumes)
}
inline void PruneVolumeResponse::set_volumes(int index, const char* value, size_t size) {
  volumes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:volume.PruneVolumeResponse.volumes)
}
inline std::string* PruneVolumeResponse::_internal_add_volumes() {
  return volumes_.Add();
}
inline void PruneVolumeResponse::add_volumes(const std::string& value) {
  volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:volume.PruneVolumeResponse.volumes)
}
inline void PruneVolumeResponse::add_volumes(std::string&& value) {
  volumes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:volume.PruneVolumeResponse.volumes)
}
inline void PruneVolumeResponse::add_volumes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:volume.PruneVolumeResponse.volumes)
}
inline void PruneVolumeResponse::add_volumes(const char* value, size_t size) {
  volumes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:volume.PruneVolumeResponse.volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PruneVolumeResponse::volumes() const {
  // @@protoc_insertion_point(field_list:volume.PruneVolumeResponse.volumes)
  return volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PruneVolumeResponse::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:volume.PruneVolumeResponse.volumes)
  return &volumes_;
}

// uint32 cc = 3;
inline void PruneVolumeResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PruneVolumeResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PruneVolumeResponse::cc() const {
  // @@protoc_insertion_point(field_get:volume.PruneVolumeResponse.cc)
  return _internal_cc();
}
inline void PruneVolumeResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void PruneVolumeResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:volume.PruneVolumeResponse.cc)
}

// string errmsg = 4;
inline void PruneVolumeResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PruneVolumeResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:volume.PruneVolumeResponse.errmsg)
  return _internal_errmsg();
}
inline void PruneVolumeResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:volume.PruneVolumeResponse.errmsg)
}
inline std::string* PruneVolumeResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:volume.PruneVolumeResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PruneVolumeResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PruneVolumeResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PruneVolumeResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volume.PruneVolumeResponse.errmsg)
}
inline void PruneVolumeResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volume.PruneVolumeResponse.errmsg)
}
inline void PruneVolumeResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volume.PruneVolumeResponse.errmsg)
}
inline std::string* PruneVolumeResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PruneVolumeResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:volume.PruneVolumeResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PruneVolumeResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volume.PruneVolumeResponse.errmsg)
}
inline std::string* PruneVolumeResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:volume.PruneVolumeResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PruneVolumeResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volume.PruneVolumeResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace volume

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_volumes_2eproto
