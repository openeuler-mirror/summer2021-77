// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[127]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace runtime {
namespace v1alpha2 {
class AttachRequest;
class AttachRequestDefaultTypeInternal;
extern AttachRequestDefaultTypeInternal _AttachRequest_default_instance_;
class AttachResponse;
class AttachResponseDefaultTypeInternal;
extern AttachResponseDefaultTypeInternal _AttachResponse_default_instance_;
class AuthConfig;
class AuthConfigDefaultTypeInternal;
extern AuthConfigDefaultTypeInternal _AuthConfig_default_instance_;
class Capability;
class CapabilityDefaultTypeInternal;
extern CapabilityDefaultTypeInternal _Capability_default_instance_;
class Container;
class ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class ContainerAttributes;
class ContainerAttributesDefaultTypeInternal;
extern ContainerAttributesDefaultTypeInternal _ContainerAttributes_default_instance_;
class ContainerAttributes_AnnotationsEntry_DoNotUse;
class ContainerAttributes_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern ContainerAttributes_AnnotationsEntry_DoNotUseDefaultTypeInternal _ContainerAttributes_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerAttributes_LabelsEntry_DoNotUse;
class ContainerAttributes_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerAttributes_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerAttributes_LabelsEntry_DoNotUse_default_instance_;
class ContainerConfig;
class ContainerConfigDefaultTypeInternal;
extern ContainerConfigDefaultTypeInternal _ContainerConfig_default_instance_;
class ContainerConfig_AnnotationsEntry_DoNotUse;
class ContainerConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern ContainerConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal _ContainerConfig_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerConfig_LabelsEntry_DoNotUse;
class ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
class ContainerFilter;
class ContainerFilterDefaultTypeInternal;
extern ContainerFilterDefaultTypeInternal _ContainerFilter_default_instance_;
class ContainerFilter_LabelSelectorEntry_DoNotUse;
class ContainerFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal;
extern ContainerFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal _ContainerFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class ContainerMetadata;
class ContainerMetadataDefaultTypeInternal;
extern ContainerMetadataDefaultTypeInternal _ContainerMetadata_default_instance_;
class ContainerStateValue;
class ContainerStateValueDefaultTypeInternal;
extern ContainerStateValueDefaultTypeInternal _ContainerStateValue_default_instance_;
class ContainerStats;
class ContainerStatsDefaultTypeInternal;
extern ContainerStatsDefaultTypeInternal _ContainerStats_default_instance_;
class ContainerStatsFilter;
class ContainerStatsFilterDefaultTypeInternal;
extern ContainerStatsFilterDefaultTypeInternal _ContainerStatsFilter_default_instance_;
class ContainerStatsFilter_LabelSelectorEntry_DoNotUse;
class ContainerStatsFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal;
extern ContainerStatsFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal _ContainerStatsFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class ContainerStatsRequest;
class ContainerStatsRequestDefaultTypeInternal;
extern ContainerStatsRequestDefaultTypeInternal _ContainerStatsRequest_default_instance_;
class ContainerStatsResponse;
class ContainerStatsResponseDefaultTypeInternal;
extern ContainerStatsResponseDefaultTypeInternal _ContainerStatsResponse_default_instance_;
class ContainerStatus;
class ContainerStatusDefaultTypeInternal;
extern ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
class ContainerStatusRequest;
class ContainerStatusRequestDefaultTypeInternal;
extern ContainerStatusRequestDefaultTypeInternal _ContainerStatusRequest_default_instance_;
class ContainerStatusResponse;
class ContainerStatusResponseDefaultTypeInternal;
extern ContainerStatusResponseDefaultTypeInternal _ContainerStatusResponse_default_instance_;
class ContainerStatusResponse_InfoEntry_DoNotUse;
class ContainerStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal;
extern ContainerStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal _ContainerStatusResponse_InfoEntry_DoNotUse_default_instance_;
class ContainerStatus_AnnotationsEntry_DoNotUse;
class ContainerStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern ContainerStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal _ContainerStatus_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerStatus_LabelsEntry_DoNotUse;
class ContainerStatus_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ContainerStatus_LabelsEntry_DoNotUseDefaultTypeInternal _ContainerStatus_LabelsEntry_DoNotUse_default_instance_;
class Container_AnnotationsEntry_DoNotUse;
class Container_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Container_AnnotationsEntry_DoNotUseDefaultTypeInternal _Container_AnnotationsEntry_DoNotUse_default_instance_;
class Container_LabelsEntry_DoNotUse;
class Container_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Container_LabelsEntry_DoNotUseDefaultTypeInternal _Container_LabelsEntry_DoNotUse_default_instance_;
class CpuUsage;
class CpuUsageDefaultTypeInternal;
extern CpuUsageDefaultTypeInternal _CpuUsage_default_instance_;
class CreateContainerRequest;
class CreateContainerRequestDefaultTypeInternal;
extern CreateContainerRequestDefaultTypeInternal _CreateContainerRequest_default_instance_;
class CreateContainerResponse;
class CreateContainerResponseDefaultTypeInternal;
extern CreateContainerResponseDefaultTypeInternal _CreateContainerResponse_default_instance_;
class DNSConfig;
class DNSConfigDefaultTypeInternal;
extern DNSConfigDefaultTypeInternal _DNSConfig_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class ExecRequest;
class ExecRequestDefaultTypeInternal;
extern ExecRequestDefaultTypeInternal _ExecRequest_default_instance_;
class ExecResponse;
class ExecResponseDefaultTypeInternal;
extern ExecResponseDefaultTypeInternal _ExecResponse_default_instance_;
class ExecSyncRequest;
class ExecSyncRequestDefaultTypeInternal;
extern ExecSyncRequestDefaultTypeInternal _ExecSyncRequest_default_instance_;
class ExecSyncResponse;
class ExecSyncResponseDefaultTypeInternal;
extern ExecSyncResponseDefaultTypeInternal _ExecSyncResponse_default_instance_;
class FilesystemIdentifier;
class FilesystemIdentifierDefaultTypeInternal;
extern FilesystemIdentifierDefaultTypeInternal _FilesystemIdentifier_default_instance_;
class FilesystemUsage;
class FilesystemUsageDefaultTypeInternal;
extern FilesystemUsageDefaultTypeInternal _FilesystemUsage_default_instance_;
class HugepageLimit;
class HugepageLimitDefaultTypeInternal;
extern HugepageLimitDefaultTypeInternal _HugepageLimit_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageFilter;
class ImageFilterDefaultTypeInternal;
extern ImageFilterDefaultTypeInternal _ImageFilter_default_instance_;
class ImageFsInfoRequest;
class ImageFsInfoRequestDefaultTypeInternal;
extern ImageFsInfoRequestDefaultTypeInternal _ImageFsInfoRequest_default_instance_;
class ImageFsInfoResponse;
class ImageFsInfoResponseDefaultTypeInternal;
extern ImageFsInfoResponseDefaultTypeInternal _ImageFsInfoResponse_default_instance_;
class ImageSpec;
class ImageSpecDefaultTypeInternal;
extern ImageSpecDefaultTypeInternal _ImageSpec_default_instance_;
class ImageSpec_AnnotationsEntry_DoNotUse;
class ImageSpec_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern ImageSpec_AnnotationsEntry_DoNotUseDefaultTypeInternal _ImageSpec_AnnotationsEntry_DoNotUse_default_instance_;
class ImageStatusRequest;
class ImageStatusRequestDefaultTypeInternal;
extern ImageStatusRequestDefaultTypeInternal _ImageStatusRequest_default_instance_;
class ImageStatusResponse;
class ImageStatusResponseDefaultTypeInternal;
extern ImageStatusResponseDefaultTypeInternal _ImageStatusResponse_default_instance_;
class ImageStatusResponse_InfoEntry_DoNotUse;
class ImageStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal;
extern ImageStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal _ImageStatusResponse_InfoEntry_DoNotUse_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LinuxContainerConfig;
class LinuxContainerConfigDefaultTypeInternal;
extern LinuxContainerConfigDefaultTypeInternal _LinuxContainerConfig_default_instance_;
class LinuxContainerResources;
class LinuxContainerResourcesDefaultTypeInternal;
extern LinuxContainerResourcesDefaultTypeInternal _LinuxContainerResources_default_instance_;
class LinuxContainerSecurityContext;
class LinuxContainerSecurityContextDefaultTypeInternal;
extern LinuxContainerSecurityContextDefaultTypeInternal _LinuxContainerSecurityContext_default_instance_;
class LinuxPodSandboxConfig;
class LinuxPodSandboxConfigDefaultTypeInternal;
extern LinuxPodSandboxConfigDefaultTypeInternal _LinuxPodSandboxConfig_default_instance_;
class LinuxPodSandboxConfig_SysctlsEntry_DoNotUse;
class LinuxPodSandboxConfig_SysctlsEntry_DoNotUseDefaultTypeInternal;
extern LinuxPodSandboxConfig_SysctlsEntry_DoNotUseDefaultTypeInternal _LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_default_instance_;
class LinuxPodSandboxStatus;
class LinuxPodSandboxStatusDefaultTypeInternal;
extern LinuxPodSandboxStatusDefaultTypeInternal _LinuxPodSandboxStatus_default_instance_;
class LinuxSandboxSecurityContext;
class LinuxSandboxSecurityContextDefaultTypeInternal;
extern LinuxSandboxSecurityContextDefaultTypeInternal _LinuxSandboxSecurityContext_default_instance_;
class ListContainerStatsRequest;
class ListContainerStatsRequestDefaultTypeInternal;
extern ListContainerStatsRequestDefaultTypeInternal _ListContainerStatsRequest_default_instance_;
class ListContainerStatsResponse;
class ListContainerStatsResponseDefaultTypeInternal;
extern ListContainerStatsResponseDefaultTypeInternal _ListContainerStatsResponse_default_instance_;
class ListContainersRequest;
class ListContainersRequestDefaultTypeInternal;
extern ListContainersRequestDefaultTypeInternal _ListContainersRequest_default_instance_;
class ListContainersResponse;
class ListContainersResponseDefaultTypeInternal;
extern ListContainersResponseDefaultTypeInternal _ListContainersResponse_default_instance_;
class ListImagesRequest;
class ListImagesRequestDefaultTypeInternal;
extern ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
class ListImagesResponse;
class ListImagesResponseDefaultTypeInternal;
extern ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
class ListPodSandboxRequest;
class ListPodSandboxRequestDefaultTypeInternal;
extern ListPodSandboxRequestDefaultTypeInternal _ListPodSandboxRequest_default_instance_;
class ListPodSandboxResponse;
class ListPodSandboxResponseDefaultTypeInternal;
extern ListPodSandboxResponseDefaultTypeInternal _ListPodSandboxResponse_default_instance_;
class MemoryUsage;
class MemoryUsageDefaultTypeInternal;
extern MemoryUsageDefaultTypeInternal _MemoryUsage_default_instance_;
class Mount;
class MountDefaultTypeInternal;
extern MountDefaultTypeInternal _Mount_default_instance_;
class Namespace;
class NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
class NamespaceOption;
class NamespaceOptionDefaultTypeInternal;
extern NamespaceOptionDefaultTypeInternal _NamespaceOption_default_instance_;
class NetworkConfig;
class NetworkConfigDefaultTypeInternal;
extern NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
class PodIP;
class PodIPDefaultTypeInternal;
extern PodIPDefaultTypeInternal _PodIP_default_instance_;
class PodSandbox;
class PodSandboxDefaultTypeInternal;
extern PodSandboxDefaultTypeInternal _PodSandbox_default_instance_;
class PodSandboxConfig;
class PodSandboxConfigDefaultTypeInternal;
extern PodSandboxConfigDefaultTypeInternal _PodSandboxConfig_default_instance_;
class PodSandboxConfig_AnnotationsEntry_DoNotUse;
class PodSandboxConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal _PodSandboxConfig_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandboxConfig_LabelsEntry_DoNotUse;
class PodSandboxConfig_LabelsEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxConfig_LabelsEntry_DoNotUseDefaultTypeInternal _PodSandboxConfig_LabelsEntry_DoNotUse_default_instance_;
class PodSandboxFilter;
class PodSandboxFilterDefaultTypeInternal;
extern PodSandboxFilterDefaultTypeInternal _PodSandboxFilter_default_instance_;
class PodSandboxFilter_LabelSelectorEntry_DoNotUse;
class PodSandboxFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal _PodSandboxFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class PodSandboxMetadata;
class PodSandboxMetadataDefaultTypeInternal;
extern PodSandboxMetadataDefaultTypeInternal _PodSandboxMetadata_default_instance_;
class PodSandboxNetworkStatus;
class PodSandboxNetworkStatusDefaultTypeInternal;
extern PodSandboxNetworkStatusDefaultTypeInternal _PodSandboxNetworkStatus_default_instance_;
class PodSandboxStateValue;
class PodSandboxStateValueDefaultTypeInternal;
extern PodSandboxStateValueDefaultTypeInternal _PodSandboxStateValue_default_instance_;
class PodSandboxStatus;
class PodSandboxStatusDefaultTypeInternal;
extern PodSandboxStatusDefaultTypeInternal _PodSandboxStatus_default_instance_;
class PodSandboxStatusRequest;
class PodSandboxStatusRequestDefaultTypeInternal;
extern PodSandboxStatusRequestDefaultTypeInternal _PodSandboxStatusRequest_default_instance_;
class PodSandboxStatusResponse;
class PodSandboxStatusResponseDefaultTypeInternal;
extern PodSandboxStatusResponseDefaultTypeInternal _PodSandboxStatusResponse_default_instance_;
class PodSandboxStatusResponse_InfoEntry_DoNotUse;
class PodSandboxStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal _PodSandboxStatusResponse_InfoEntry_DoNotUse_default_instance_;
class PodSandboxStatus_AnnotationsEntry_DoNotUse;
class PodSandboxStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal _PodSandboxStatus_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandboxStatus_LabelsEntry_DoNotUse;
class PodSandboxStatus_LabelsEntry_DoNotUseDefaultTypeInternal;
extern PodSandboxStatus_LabelsEntry_DoNotUseDefaultTypeInternal _PodSandboxStatus_LabelsEntry_DoNotUse_default_instance_;
class PodSandbox_AnnotationsEntry_DoNotUse;
class PodSandbox_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern PodSandbox_AnnotationsEntry_DoNotUseDefaultTypeInternal _PodSandbox_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandbox_LabelsEntry_DoNotUse;
class PodSandbox_LabelsEntry_DoNotUseDefaultTypeInternal;
extern PodSandbox_LabelsEntry_DoNotUseDefaultTypeInternal _PodSandbox_LabelsEntry_DoNotUse_default_instance_;
class PortForwardRequest;
class PortForwardRequestDefaultTypeInternal;
extern PortForwardRequestDefaultTypeInternal _PortForwardRequest_default_instance_;
class PortForwardResponse;
class PortForwardResponseDefaultTypeInternal;
extern PortForwardResponseDefaultTypeInternal _PortForwardResponse_default_instance_;
class PortMapping;
class PortMappingDefaultTypeInternal;
extern PortMappingDefaultTypeInternal _PortMapping_default_instance_;
class PullImageRequest;
class PullImageRequestDefaultTypeInternal;
extern PullImageRequestDefaultTypeInternal _PullImageRequest_default_instance_;
class PullImageResponse;
class PullImageResponseDefaultTypeInternal;
extern PullImageResponseDefaultTypeInternal _PullImageResponse_default_instance_;
class RemoveContainerRequest;
class RemoveContainerRequestDefaultTypeInternal;
extern RemoveContainerRequestDefaultTypeInternal _RemoveContainerRequest_default_instance_;
class RemoveContainerResponse;
class RemoveContainerResponseDefaultTypeInternal;
extern RemoveContainerResponseDefaultTypeInternal _RemoveContainerResponse_default_instance_;
class RemoveImageRequest;
class RemoveImageRequestDefaultTypeInternal;
extern RemoveImageRequestDefaultTypeInternal _RemoveImageRequest_default_instance_;
class RemoveImageResponse;
class RemoveImageResponseDefaultTypeInternal;
extern RemoveImageResponseDefaultTypeInternal _RemoveImageResponse_default_instance_;
class RemovePodSandboxRequest;
class RemovePodSandboxRequestDefaultTypeInternal;
extern RemovePodSandboxRequestDefaultTypeInternal _RemovePodSandboxRequest_default_instance_;
class RemovePodSandboxResponse;
class RemovePodSandboxResponseDefaultTypeInternal;
extern RemovePodSandboxResponseDefaultTypeInternal _RemovePodSandboxResponse_default_instance_;
class ReopenContainerLogRequest;
class ReopenContainerLogRequestDefaultTypeInternal;
extern ReopenContainerLogRequestDefaultTypeInternal _ReopenContainerLogRequest_default_instance_;
class ReopenContainerLogResponse;
class ReopenContainerLogResponseDefaultTypeInternal;
extern ReopenContainerLogResponseDefaultTypeInternal _ReopenContainerLogResponse_default_instance_;
class RunPodSandboxRequest;
class RunPodSandboxRequestDefaultTypeInternal;
extern RunPodSandboxRequestDefaultTypeInternal _RunPodSandboxRequest_default_instance_;
class RunPodSandboxResponse;
class RunPodSandboxResponseDefaultTypeInternal;
extern RunPodSandboxResponseDefaultTypeInternal _RunPodSandboxResponse_default_instance_;
class RuntimeCondition;
class RuntimeConditionDefaultTypeInternal;
extern RuntimeConditionDefaultTypeInternal _RuntimeCondition_default_instance_;
class RuntimeConfig;
class RuntimeConfigDefaultTypeInternal;
extern RuntimeConfigDefaultTypeInternal _RuntimeConfig_default_instance_;
class RuntimeStatus;
class RuntimeStatusDefaultTypeInternal;
extern RuntimeStatusDefaultTypeInternal _RuntimeStatus_default_instance_;
class SELinuxOption;
class SELinuxOptionDefaultTypeInternal;
extern SELinuxOptionDefaultTypeInternal _SELinuxOption_default_instance_;
class StartContainerRequest;
class StartContainerRequestDefaultTypeInternal;
extern StartContainerRequestDefaultTypeInternal _StartContainerRequest_default_instance_;
class StartContainerResponse;
class StartContainerResponseDefaultTypeInternal;
extern StartContainerResponseDefaultTypeInternal _StartContainerResponse_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class StatusResponse_InfoEntry_DoNotUse;
class StatusResponse_InfoEntry_DoNotUseDefaultTypeInternal;
extern StatusResponse_InfoEntry_DoNotUseDefaultTypeInternal _StatusResponse_InfoEntry_DoNotUse_default_instance_;
class StopContainerRequest;
class StopContainerRequestDefaultTypeInternal;
extern StopContainerRequestDefaultTypeInternal _StopContainerRequest_default_instance_;
class StopContainerResponse;
class StopContainerResponseDefaultTypeInternal;
extern StopContainerResponseDefaultTypeInternal _StopContainerResponse_default_instance_;
class StopPodSandboxRequest;
class StopPodSandboxRequestDefaultTypeInternal;
extern StopPodSandboxRequestDefaultTypeInternal _StopPodSandboxRequest_default_instance_;
class StopPodSandboxResponse;
class StopPodSandboxResponseDefaultTypeInternal;
extern StopPodSandboxResponseDefaultTypeInternal _StopPodSandboxResponse_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
class UpdateContainerResourcesRequest;
class UpdateContainerResourcesRequestDefaultTypeInternal;
extern UpdateContainerResourcesRequestDefaultTypeInternal _UpdateContainerResourcesRequest_default_instance_;
class UpdateContainerResourcesResponse;
class UpdateContainerResourcesResponseDefaultTypeInternal;
extern UpdateContainerResourcesResponseDefaultTypeInternal _UpdateContainerResourcesResponse_default_instance_;
class UpdateRuntimeConfigRequest;
class UpdateRuntimeConfigRequestDefaultTypeInternal;
extern UpdateRuntimeConfigRequestDefaultTypeInternal _UpdateRuntimeConfigRequest_default_instance_;
class UpdateRuntimeConfigResponse;
class UpdateRuntimeConfigResponseDefaultTypeInternal;
extern UpdateRuntimeConfigResponseDefaultTypeInternal _UpdateRuntimeConfigResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
class WindowsContainerConfig;
class WindowsContainerConfigDefaultTypeInternal;
extern WindowsContainerConfigDefaultTypeInternal _WindowsContainerConfig_default_instance_;
class WindowsContainerResources;
class WindowsContainerResourcesDefaultTypeInternal;
extern WindowsContainerResourcesDefaultTypeInternal _WindowsContainerResources_default_instance_;
class WindowsContainerSecurityContext;
class WindowsContainerSecurityContextDefaultTypeInternal;
extern WindowsContainerSecurityContextDefaultTypeInternal _WindowsContainerSecurityContext_default_instance_;
}  // namespace v1alpha2
}  // namespace runtime
PROTOBUF_NAMESPACE_OPEN
template<> ::runtime::v1alpha2::AttachRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::AttachRequest>(Arena*);
template<> ::runtime::v1alpha2::AttachResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::AttachResponse>(Arena*);
template<> ::runtime::v1alpha2::AuthConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::AuthConfig>(Arena*);
template<> ::runtime::v1alpha2::Capability* Arena::CreateMaybeMessage<::runtime::v1alpha2::Capability>(Arena*);
template<> ::runtime::v1alpha2::Container* Arena::CreateMaybeMessage<::runtime::v1alpha2::Container>(Arena*);
template<> ::runtime::v1alpha2::ContainerAttributes* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerAttributes>(Arena*);
template<> ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerConfig>(Arena*);
template<> ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerFilter* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerFilter>(Arena*);
template<> ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerMetadata* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerMetadata>(Arena*);
template<> ::runtime::v1alpha2::ContainerStateValue* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStateValue>(Arena*);
template<> ::runtime::v1alpha2::ContainerStats* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStats>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatsFilter* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatsFilter>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatsRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatsRequest>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatsResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatsResponse>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatus* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatus>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatusRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatusRequest>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatusResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatusResponse>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::Container_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::CpuUsage* Arena::CreateMaybeMessage<::runtime::v1alpha2::CpuUsage>(Arena*);
template<> ::runtime::v1alpha2::CreateContainerRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::CreateContainerRequest>(Arena*);
template<> ::runtime::v1alpha2::CreateContainerResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::CreateContainerResponse>(Arena*);
template<> ::runtime::v1alpha2::DNSConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::DNSConfig>(Arena*);
template<> ::runtime::v1alpha2::Device* Arena::CreateMaybeMessage<::runtime::v1alpha2::Device>(Arena*);
template<> ::runtime::v1alpha2::ExecRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ExecRequest>(Arena*);
template<> ::runtime::v1alpha2::ExecResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ExecResponse>(Arena*);
template<> ::runtime::v1alpha2::ExecSyncRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ExecSyncRequest>(Arena*);
template<> ::runtime::v1alpha2::ExecSyncResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ExecSyncResponse>(Arena*);
template<> ::runtime::v1alpha2::FilesystemIdentifier* Arena::CreateMaybeMessage<::runtime::v1alpha2::FilesystemIdentifier>(Arena*);
template<> ::runtime::v1alpha2::FilesystemUsage* Arena::CreateMaybeMessage<::runtime::v1alpha2::FilesystemUsage>(Arena*);
template<> ::runtime::v1alpha2::HugepageLimit* Arena::CreateMaybeMessage<::runtime::v1alpha2::HugepageLimit>(Arena*);
template<> ::runtime::v1alpha2::Image* Arena::CreateMaybeMessage<::runtime::v1alpha2::Image>(Arena*);
template<> ::runtime::v1alpha2::ImageFilter* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageFilter>(Arena*);
template<> ::runtime::v1alpha2::ImageFsInfoRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageFsInfoRequest>(Arena*);
template<> ::runtime::v1alpha2::ImageFsInfoResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageFsInfoResponse>(Arena*);
template<> ::runtime::v1alpha2::ImageSpec* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(Arena*);
template<> ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::ImageStatusRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageStatusRequest>(Arena*);
template<> ::runtime::v1alpha2::ImageStatusResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageStatusResponse>(Arena*);
template<> ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::Int64Value* Arena::CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(Arena*);
template<> ::runtime::v1alpha2::KeyValue* Arena::CreateMaybeMessage<::runtime::v1alpha2::KeyValue>(Arena*);
template<> ::runtime::v1alpha2::LinuxContainerConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerConfig>(Arena*);
template<> ::runtime::v1alpha2::LinuxContainerResources* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerResources>(Arena*);
template<> ::runtime::v1alpha2::LinuxContainerSecurityContext* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerSecurityContext>(Arena*);
template<> ::runtime::v1alpha2::LinuxPodSandboxConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxPodSandboxConfig>(Arena*);
template<> ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::LinuxPodSandboxStatus* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxPodSandboxStatus>(Arena*);
template<> ::runtime::v1alpha2::LinuxSandboxSecurityContext* Arena::CreateMaybeMessage<::runtime::v1alpha2::LinuxSandboxSecurityContext>(Arena*);
template<> ::runtime::v1alpha2::ListContainerStatsRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListContainerStatsRequest>(Arena*);
template<> ::runtime::v1alpha2::ListContainerStatsResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListContainerStatsResponse>(Arena*);
template<> ::runtime::v1alpha2::ListContainersRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListContainersRequest>(Arena*);
template<> ::runtime::v1alpha2::ListContainersResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListContainersResponse>(Arena*);
template<> ::runtime::v1alpha2::ListImagesRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListImagesRequest>(Arena*);
template<> ::runtime::v1alpha2::ListImagesResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListImagesResponse>(Arena*);
template<> ::runtime::v1alpha2::ListPodSandboxRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListPodSandboxRequest>(Arena*);
template<> ::runtime::v1alpha2::ListPodSandboxResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ListPodSandboxResponse>(Arena*);
template<> ::runtime::v1alpha2::MemoryUsage* Arena::CreateMaybeMessage<::runtime::v1alpha2::MemoryUsage>(Arena*);
template<> ::runtime::v1alpha2::Mount* Arena::CreateMaybeMessage<::runtime::v1alpha2::Mount>(Arena*);
template<> ::runtime::v1alpha2::Namespace* Arena::CreateMaybeMessage<::runtime::v1alpha2::Namespace>(Arena*);
template<> ::runtime::v1alpha2::NamespaceOption* Arena::CreateMaybeMessage<::runtime::v1alpha2::NamespaceOption>(Arena*);
template<> ::runtime::v1alpha2::NetworkConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::NetworkConfig>(Arena*);
template<> ::runtime::v1alpha2::PodIP* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodIP>(Arena*);
template<> ::runtime::v1alpha2::PodSandbox* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandbox>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxFilter* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxFilter>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxMetadata* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxMetadata>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxNetworkStatus* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxNetworkStatus>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStateValue* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStateValue>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatus* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatus>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatusRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatusRequest>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatusResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatusResponse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::PortForwardRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::PortForwardRequest>(Arena*);
template<> ::runtime::v1alpha2::PortForwardResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PortForwardResponse>(Arena*);
template<> ::runtime::v1alpha2::PortMapping* Arena::CreateMaybeMessage<::runtime::v1alpha2::PortMapping>(Arena*);
template<> ::runtime::v1alpha2::PullImageRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::PullImageRequest>(Arena*);
template<> ::runtime::v1alpha2::PullImageResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::PullImageResponse>(Arena*);
template<> ::runtime::v1alpha2::RemoveContainerRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemoveContainerRequest>(Arena*);
template<> ::runtime::v1alpha2::RemoveContainerResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemoveContainerResponse>(Arena*);
template<> ::runtime::v1alpha2::RemoveImageRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemoveImageRequest>(Arena*);
template<> ::runtime::v1alpha2::RemoveImageResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemoveImageResponse>(Arena*);
template<> ::runtime::v1alpha2::RemovePodSandboxRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemovePodSandboxRequest>(Arena*);
template<> ::runtime::v1alpha2::RemovePodSandboxResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::RemovePodSandboxResponse>(Arena*);
template<> ::runtime::v1alpha2::ReopenContainerLogRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::ReopenContainerLogRequest>(Arena*);
template<> ::runtime::v1alpha2::ReopenContainerLogResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::ReopenContainerLogResponse>(Arena*);
template<> ::runtime::v1alpha2::RunPodSandboxRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::RunPodSandboxRequest>(Arena*);
template<> ::runtime::v1alpha2::RunPodSandboxResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::RunPodSandboxResponse>(Arena*);
template<> ::runtime::v1alpha2::RuntimeCondition* Arena::CreateMaybeMessage<::runtime::v1alpha2::RuntimeCondition>(Arena*);
template<> ::runtime::v1alpha2::RuntimeConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::RuntimeConfig>(Arena*);
template<> ::runtime::v1alpha2::RuntimeStatus* Arena::CreateMaybeMessage<::runtime::v1alpha2::RuntimeStatus>(Arena*);
template<> ::runtime::v1alpha2::SELinuxOption* Arena::CreateMaybeMessage<::runtime::v1alpha2::SELinuxOption>(Arena*);
template<> ::runtime::v1alpha2::StartContainerRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::StartContainerRequest>(Arena*);
template<> ::runtime::v1alpha2::StartContainerResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::StartContainerResponse>(Arena*);
template<> ::runtime::v1alpha2::StatusRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::StatusRequest>(Arena*);
template<> ::runtime::v1alpha2::StatusResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::StatusResponse>(Arena*);
template<> ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse>(Arena*);
template<> ::runtime::v1alpha2::StopContainerRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::StopContainerRequest>(Arena*);
template<> ::runtime::v1alpha2::StopContainerResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::StopContainerResponse>(Arena*);
template<> ::runtime::v1alpha2::StopPodSandboxRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::StopPodSandboxRequest>(Arena*);
template<> ::runtime::v1alpha2::StopPodSandboxResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::StopPodSandboxResponse>(Arena*);
template<> ::runtime::v1alpha2::UInt64Value* Arena::CreateMaybeMessage<::runtime::v1alpha2::UInt64Value>(Arena*);
template<> ::runtime::v1alpha2::UpdateContainerResourcesRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::UpdateContainerResourcesRequest>(Arena*);
template<> ::runtime::v1alpha2::UpdateContainerResourcesResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::UpdateContainerResourcesResponse>(Arena*);
template<> ::runtime::v1alpha2::UpdateRuntimeConfigRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::UpdateRuntimeConfigRequest>(Arena*);
template<> ::runtime::v1alpha2::UpdateRuntimeConfigResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::UpdateRuntimeConfigResponse>(Arena*);
template<> ::runtime::v1alpha2::VersionRequest* Arena::CreateMaybeMessage<::runtime::v1alpha2::VersionRequest>(Arena*);
template<> ::runtime::v1alpha2::VersionResponse* Arena::CreateMaybeMessage<::runtime::v1alpha2::VersionResponse>(Arena*);
template<> ::runtime::v1alpha2::WindowsContainerConfig* Arena::CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerConfig>(Arena*);
template<> ::runtime::v1alpha2::WindowsContainerResources* Arena::CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerResources>(Arena*);
template<> ::runtime::v1alpha2::WindowsContainerSecurityContext* Arena::CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerSecurityContext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace runtime {
namespace v1alpha2 {

enum Protocol : int {
  TCP = 0,
  UDP = 1,
  SCTP = 2,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = TCP;
constexpr Protocol Protocol_MAX = SCTP;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    const std::string& name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
enum MountPropagation : int {
  PROPAGATION_PRIVATE = 0,
  PROPAGATION_HOST_TO_CONTAINER = 1,
  PROPAGATION_BIDIRECTIONAL = 2,
  MountPropagation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MountPropagation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MountPropagation_IsValid(int value);
constexpr MountPropagation MountPropagation_MIN = PROPAGATION_PRIVATE;
constexpr MountPropagation MountPropagation_MAX = PROPAGATION_BIDIRECTIONAL;
constexpr int MountPropagation_ARRAYSIZE = MountPropagation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MountPropagation_descriptor();
template<typename T>
inline const std::string& MountPropagation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MountPropagation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MountPropagation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MountPropagation_descriptor(), enum_t_value);
}
inline bool MountPropagation_Parse(
    const std::string& name, MountPropagation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MountPropagation>(
    MountPropagation_descriptor(), name, value);
}
enum NamespaceMode : int {
  POD = 0,
  CONTAINER = 1,
  NODE = 2,
  TARGET = 3,
  NamespaceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NamespaceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NamespaceMode_IsValid(int value);
constexpr NamespaceMode NamespaceMode_MIN = POD;
constexpr NamespaceMode NamespaceMode_MAX = TARGET;
constexpr int NamespaceMode_ARRAYSIZE = NamespaceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NamespaceMode_descriptor();
template<typename T>
inline const std::string& NamespaceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NamespaceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NamespaceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NamespaceMode_descriptor(), enum_t_value);
}
inline bool NamespaceMode_Parse(
    const std::string& name, NamespaceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NamespaceMode>(
    NamespaceMode_descriptor(), name, value);
}
enum PodSandboxState : int {
  SANDBOX_READY = 0,
  SANDBOX_NOTREADY = 1,
  PodSandboxState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PodSandboxState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PodSandboxState_IsValid(int value);
constexpr PodSandboxState PodSandboxState_MIN = SANDBOX_READY;
constexpr PodSandboxState PodSandboxState_MAX = SANDBOX_NOTREADY;
constexpr int PodSandboxState_ARRAYSIZE = PodSandboxState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PodSandboxState_descriptor();
template<typename T>
inline const std::string& PodSandboxState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PodSandboxState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PodSandboxState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PodSandboxState_descriptor(), enum_t_value);
}
inline bool PodSandboxState_Parse(
    const std::string& name, PodSandboxState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PodSandboxState>(
    PodSandboxState_descriptor(), name, value);
}
enum ContainerState : int {
  CONTAINER_CREATED = 0,
  CONTAINER_RUNNING = 1,
  CONTAINER_EXITED = 2,
  CONTAINER_UNKNOWN = 3,
  ContainerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ContainerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ContainerState_IsValid(int value);
constexpr ContainerState ContainerState_MIN = CONTAINER_CREATED;
constexpr ContainerState ContainerState_MAX = CONTAINER_UNKNOWN;
constexpr int ContainerState_ARRAYSIZE = ContainerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerState_descriptor();
template<typename T>
inline const std::string& ContainerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContainerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContainerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContainerState_descriptor(), enum_t_value);
}
inline bool ContainerState_Parse(
    const std::string& name, ContainerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContainerState>(
    ContainerState_descriptor(), name, value);
}
// ===================================================================

class VersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.VersionRequest) */ {
 public:
  inline VersionRequest() : VersionRequest(nullptr) {};
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(nullptr);
  }

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.VersionRequest";
  }
  protected:
  explicit VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.VersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {};
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(nullptr);
  }

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.VersionResponse";
  }
  protected:
  explicit VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kRuntimeNameFieldNumber = 2,
    kRuntimeVersionFieldNumber = 3,
    kRuntimeApiVersionFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string runtime_name = 2;
  void clear_runtime_name();
  const std::string& runtime_name() const;
  void set_runtime_name(const std::string& value);
  void set_runtime_name(std::string&& value);
  void set_runtime_name(const char* value);
  void set_runtime_name(const char* value, size_t size);
  std::string* mutable_runtime_name();
  std::string* release_runtime_name();
  void set_allocated_runtime_name(std::string* runtime_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_name(
      std::string* runtime_name);
  private:
  const std::string& _internal_runtime_name() const;
  void _internal_set_runtime_name(const std::string& value);
  std::string* _internal_mutable_runtime_name();
  public:

  // string runtime_version = 3;
  void clear_runtime_version();
  const std::string& runtime_version() const;
  void set_runtime_version(const std::string& value);
  void set_runtime_version(std::string&& value);
  void set_runtime_version(const char* value);
  void set_runtime_version(const char* value, size_t size);
  std::string* mutable_runtime_version();
  std::string* release_runtime_version();
  void set_allocated_runtime_version(std::string* runtime_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_version(
      std::string* runtime_version);
  private:
  const std::string& _internal_runtime_version() const;
  void _internal_set_runtime_version(const std::string& value);
  std::string* _internal_mutable_runtime_version();
  public:

  // string runtime_api_version = 4;
  void clear_runtime_api_version();
  const std::string& runtime_api_version() const;
  void set_runtime_api_version(const std::string& value);
  void set_runtime_api_version(std::string&& value);
  void set_runtime_api_version(const char* value);
  void set_runtime_api_version(const char* value, size_t size);
  std::string* mutable_runtime_api_version();
  std::string* release_runtime_api_version();
  void set_allocated_runtime_api_version(std::string* runtime_api_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_api_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_api_version(
      std::string* runtime_api_version);
  private:
  const std::string& _internal_runtime_api_version() const;
  void _internal_set_runtime_api_version(const std::string& value);
  std::string* _internal_mutable_runtime_api_version();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.VersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class DNSConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.DNSConfig) */ {
 public:
  inline DNSConfig() : DNSConfig(nullptr) {};
  virtual ~DNSConfig();

  DNSConfig(const DNSConfig& from);
  DNSConfig(DNSConfig&& from) noexcept
    : DNSConfig() {
    *this = ::std::move(from);
  }

  inline DNSConfig& operator=(const DNSConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNSConfig& operator=(DNSConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNSConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSConfig* internal_default_instance() {
    return reinterpret_cast<const DNSConfig*>(
               &_DNSConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DNSConfig& a, DNSConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DNSConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNSConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNSConfig* New() const final {
    return CreateMaybeMessage<DNSConfig>(nullptr);
  }

  DNSConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNSConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNSConfig& from);
  void MergeFrom(const DNSConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.DNSConfig";
  }
  protected:
  explicit DNSConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
    kSearchesFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // repeated string servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  const std::string& servers(int index) const;
  std::string* mutable_servers(int index);
  void set_servers(int index, const std::string& value);
  void set_servers(int index, std::string&& value);
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  std::string* add_servers();
  void add_servers(const std::string& value);
  void add_servers(std::string&& value);
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servers();
  private:
  const std::string& _internal_servers(int index) const;
  std::string* _internal_add_servers();
  public:

  // repeated string searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  const std::string& searches(int index) const;
  std::string* mutable_searches(int index);
  void set_searches(int index, const std::string& value);
  void set_searches(int index, std::string&& value);
  void set_searches(int index, const char* value);
  void set_searches(int index, const char* value, size_t size);
  std::string* add_searches();
  void add_searches(const std::string& value);
  void add_searches(std::string&& value);
  void add_searches(const char* value);
  void add_searches(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& searches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_searches();
  private:
  const std::string& _internal_searches(int index) const;
  std::string* _internal_add_searches();
  public:

  // repeated string options = 3;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  const std::string& options(int index) const;
  std::string* mutable_options(int index);
  void set_options(int index, const std::string& value);
  void set_options(int index, std::string&& value);
  void set_options(int index, const char* value);
  void set_options(int index, const char* value, size_t size);
  std::string* add_options();
  void add_options(const std::string& value);
  void add_options(std::string&& value);
  void add_options(const char* value);
  void add_options(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_options();
  private:
  const std::string& _internal_options(int index) const;
  std::string* _internal_add_options();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.DNSConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> searches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PortMapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PortMapping) */ {
 public:
  inline PortMapping() : PortMapping(nullptr) {};
  virtual ~PortMapping();

  PortMapping(const PortMapping& from);
  PortMapping(PortMapping&& from) noexcept
    : PortMapping() {
    *this = ::std::move(from);
  }

  inline PortMapping& operator=(const PortMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortMapping& operator=(PortMapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortMapping* internal_default_instance() {
    return reinterpret_cast<const PortMapping*>(
               &_PortMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PortMapping& a, PortMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(PortMapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortMapping* New() const final {
    return CreateMaybeMessage<PortMapping>(nullptr);
  }

  PortMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortMapping& from);
  void MergeFrom(const PortMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PortMapping";
  }
  protected:
  explicit PortMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIpFieldNumber = 4,
    kProtocolFieldNumber = 1,
    kContainerPortFieldNumber = 2,
    kHostPortFieldNumber = 3,
  };
  // string host_ip = 4;
  void clear_host_ip();
  const std::string& host_ip() const;
  void set_host_ip(const std::string& value);
  void set_host_ip(std::string&& value);
  void set_host_ip(const char* value);
  void set_host_ip(const char* value, size_t size);
  std::string* mutable_host_ip();
  std::string* release_host_ip();
  void set_allocated_host_ip(std::string* host_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host_ip(
      std::string* host_ip);
  private:
  const std::string& _internal_host_ip() const;
  void _internal_set_host_ip(const std::string& value);
  std::string* _internal_mutable_host_ip();
  public:

  // .runtime.v1alpha2.Protocol protocol = 1;
  void clear_protocol();
  ::runtime::v1alpha2::Protocol protocol() const;
  void set_protocol(::runtime::v1alpha2::Protocol value);
  private:
  ::runtime::v1alpha2::Protocol _internal_protocol() const;
  void _internal_set_protocol(::runtime::v1alpha2::Protocol value);
  public:

  // int32 container_port = 2;
  void clear_container_port();
  ::PROTOBUF_NAMESPACE_ID::int32 container_port() const;
  void set_container_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_container_port() const;
  void _internal_set_container_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 host_port = 3;
  void clear_host_port();
  ::PROTOBUF_NAMESPACE_ID::int32 host_port() const;
  void set_host_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_host_port() const;
  void _internal_set_host_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PortMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_ip_;
  int protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 container_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 host_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Mount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Mount) */ {
 public:
  inline Mount() : Mount(nullptr) {};
  virtual ~Mount();

  Mount(const Mount& from);
  Mount(Mount&& from) noexcept
    : Mount() {
    *this = ::std::move(from);
  }

  inline Mount& operator=(const Mount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mount& operator=(Mount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mount* internal_default_instance() {
    return reinterpret_cast<const Mount*>(
               &_Mount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Mount& a, Mount& b) {
    a.Swap(&b);
  }
  inline void Swap(Mount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mount* New() const final {
    return CreateMaybeMessage<Mount>(nullptr);
  }

  Mount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mount& from);
  void MergeFrom(const Mount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Mount";
  }
  protected:
  explicit Mount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerPathFieldNumber = 1,
    kHostPathFieldNumber = 2,
    kReadonlyFieldNumber = 3,
    kSelinuxRelabelFieldNumber = 4,
    kPropagationFieldNumber = 5,
  };
  // string container_path = 1;
  void clear_container_path();
  const std::string& container_path() const;
  void set_container_path(const std::string& value);
  void set_container_path(std::string&& value);
  void set_container_path(const char* value);
  void set_container_path(const char* value, size_t size);
  std::string* mutable_container_path();
  std::string* release_container_path();
  void set_allocated_container_path(std::string* container_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_path(
      std::string* container_path);
  private:
  const std::string& _internal_container_path() const;
  void _internal_set_container_path(const std::string& value);
  std::string* _internal_mutable_container_path();
  public:

  // string host_path = 2;
  void clear_host_path();
  const std::string& host_path() const;
  void set_host_path(const std::string& value);
  void set_host_path(std::string&& value);
  void set_host_path(const char* value);
  void set_host_path(const char* value, size_t size);
  std::string* mutable_host_path();
  std::string* release_host_path();
  void set_allocated_host_path(std::string* host_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host_path(
      std::string* host_path);
  private:
  const std::string& _internal_host_path() const;
  void _internal_set_host_path(const std::string& value);
  std::string* _internal_mutable_host_path();
  public:

  // bool readonly = 3;
  void clear_readonly();
  bool readonly() const;
  void set_readonly(bool value);
  private:
  bool _internal_readonly() const;
  void _internal_set_readonly(bool value);
  public:

  // bool selinux_relabel = 4;
  void clear_selinux_relabel();
  bool selinux_relabel() const;
  void set_selinux_relabel(bool value);
  private:
  bool _internal_selinux_relabel() const;
  void _internal_set_selinux_relabel(bool value);
  public:

  // .runtime.v1alpha2.MountPropagation propagation = 5;
  void clear_propagation();
  ::runtime::v1alpha2::MountPropagation propagation() const;
  void set_propagation(::runtime::v1alpha2::MountPropagation value);
  private:
  ::runtime::v1alpha2::MountPropagation _internal_propagation() const;
  void _internal_set_propagation(::runtime::v1alpha2::MountPropagation value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Mount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_path_;
  bool readonly_;
  bool selinux_relabel_;
  int propagation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class NamespaceOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.NamespaceOption) */ {
 public:
  inline NamespaceOption() : NamespaceOption(nullptr) {};
  virtual ~NamespaceOption();

  NamespaceOption(const NamespaceOption& from);
  NamespaceOption(NamespaceOption&& from) noexcept
    : NamespaceOption() {
    *this = ::std::move(from);
  }

  inline NamespaceOption& operator=(const NamespaceOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamespaceOption& operator=(NamespaceOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamespaceOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamespaceOption* internal_default_instance() {
    return reinterpret_cast<const NamespaceOption*>(
               &_NamespaceOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NamespaceOption& a, NamespaceOption& b) {
    a.Swap(&b);
  }
  inline void Swap(NamespaceOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamespaceOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamespaceOption* New() const final {
    return CreateMaybeMessage<NamespaceOption>(nullptr);
  }

  NamespaceOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamespaceOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamespaceOption& from);
  void MergeFrom(const NamespaceOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamespaceOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.NamespaceOption";
  }
  protected:
  explicit NamespaceOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 4,
    kNetworkFieldNumber = 1,
    kPidFieldNumber = 2,
    kIpcFieldNumber = 3,
  };
  // string target_id = 4;
  void clear_target_id();
  const std::string& target_id() const;
  void set_target_id(const std::string& value);
  void set_target_id(std::string&& value);
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  std::string* mutable_target_id();
  std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_id(
      std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // .runtime.v1alpha2.NamespaceMode network = 1;
  void clear_network();
  ::runtime::v1alpha2::NamespaceMode network() const;
  void set_network(::runtime::v1alpha2::NamespaceMode value);
  private:
  ::runtime::v1alpha2::NamespaceMode _internal_network() const;
  void _internal_set_network(::runtime::v1alpha2::NamespaceMode value);
  public:

  // .runtime.v1alpha2.NamespaceMode pid = 2;
  void clear_pid();
  ::runtime::v1alpha2::NamespaceMode pid() const;
  void set_pid(::runtime::v1alpha2::NamespaceMode value);
  private:
  ::runtime::v1alpha2::NamespaceMode _internal_pid() const;
  void _internal_set_pid(::runtime::v1alpha2::NamespaceMode value);
  public:

  // .runtime.v1alpha2.NamespaceMode ipc = 3;
  void clear_ipc();
  ::runtime::v1alpha2::NamespaceMode ipc() const;
  void set_ipc(::runtime::v1alpha2::NamespaceMode value);
  private:
  ::runtime::v1alpha2::NamespaceMode _internal_ipc() const;
  void _internal_set_ipc(::runtime::v1alpha2::NamespaceMode value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.NamespaceOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  int network_;
  int pid_;
  int ipc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Int64Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Int64Value) */ {
 public:
  inline Int64Value() : Int64Value(nullptr) {};
  virtual ~Int64Value();

  Int64Value(const Int64Value& from);
  Int64Value(Int64Value&& from) noexcept
    : Int64Value() {
    *this = ::std::move(from);
  }

  inline Int64Value& operator=(const Int64Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Value& operator=(Int64Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int64Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64Value* internal_default_instance() {
    return reinterpret_cast<const Int64Value*>(
               &_Int64Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Int64Value& a, Int64Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Value* New() const final {
    return CreateMaybeMessage<Int64Value>(nullptr);
  }

  Int64Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int64Value& from);
  void MergeFrom(const Int64Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Int64Value";
  }
  protected:
  explicit Int64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Int64Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxSandboxSecurityContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxSandboxSecurityContext) */ {
 public:
  inline LinuxSandboxSecurityContext() : LinuxSandboxSecurityContext(nullptr) {};
  virtual ~LinuxSandboxSecurityContext();

  LinuxSandboxSecurityContext(const LinuxSandboxSecurityContext& from);
  LinuxSandboxSecurityContext(LinuxSandboxSecurityContext&& from) noexcept
    : LinuxSandboxSecurityContext() {
    *this = ::std::move(from);
  }

  inline LinuxSandboxSecurityContext& operator=(const LinuxSandboxSecurityContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxSandboxSecurityContext& operator=(LinuxSandboxSecurityContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxSandboxSecurityContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxSandboxSecurityContext* internal_default_instance() {
    return reinterpret_cast<const LinuxSandboxSecurityContext*>(
               &_LinuxSandboxSecurityContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LinuxSandboxSecurityContext& a, LinuxSandboxSecurityContext& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxSandboxSecurityContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxSandboxSecurityContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxSandboxSecurityContext* New() const final {
    return CreateMaybeMessage<LinuxSandboxSecurityContext>(nullptr);
  }

  LinuxSandboxSecurityContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxSandboxSecurityContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxSandboxSecurityContext& from);
  void MergeFrom(const LinuxSandboxSecurityContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxSandboxSecurityContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxSandboxSecurityContext";
  }
  protected:
  explicit LinuxSandboxSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalGroupsFieldNumber = 5,
    kSeccompProfilePathFieldNumber = 7,
    kNamespaceOptionsFieldNumber = 1,
    kSelinuxOptionsFieldNumber = 2,
    kRunAsUserFieldNumber = 3,
    kRunAsGroupFieldNumber = 8,
    kReadonlyRootfsFieldNumber = 4,
    kPrivilegedFieldNumber = 6,
  };
  // repeated int64 supplemental_groups = 5;
  int supplemental_groups_size() const;
  private:
  int _internal_supplemental_groups_size() const;
  public:
  void clear_supplemental_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_supplemental_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_supplemental_groups() const;
  void _internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_supplemental_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 supplemental_groups(int index) const;
  void set_supplemental_groups(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      supplemental_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_supplemental_groups();

  // string seccomp_profile_path = 7;
  void clear_seccomp_profile_path();
  const std::string& seccomp_profile_path() const;
  void set_seccomp_profile_path(const std::string& value);
  void set_seccomp_profile_path(std::string&& value);
  void set_seccomp_profile_path(const char* value);
  void set_seccomp_profile_path(const char* value, size_t size);
  std::string* mutable_seccomp_profile_path();
  std::string* release_seccomp_profile_path();
  void set_allocated_seccomp_profile_path(std::string* seccomp_profile_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seccomp_profile_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seccomp_profile_path(
      std::string* seccomp_profile_path);
  private:
  const std::string& _internal_seccomp_profile_path() const;
  void _internal_set_seccomp_profile_path(const std::string& value);
  std::string* _internal_mutable_seccomp_profile_path();
  public:

  // .runtime.v1alpha2.NamespaceOption namespace_options = 1;
  bool has_namespace_options() const;
  private:
  bool _internal_has_namespace_options() const;
  public:
  void clear_namespace_options();
  const ::runtime::v1alpha2::NamespaceOption& namespace_options() const;
  ::runtime::v1alpha2::NamespaceOption* release_namespace_options();
  ::runtime::v1alpha2::NamespaceOption* mutable_namespace_options();
  void set_allocated_namespace_options(::runtime::v1alpha2::NamespaceOption* namespace_options);
  private:
  const ::runtime::v1alpha2::NamespaceOption& _internal_namespace_options() const;
  ::runtime::v1alpha2::NamespaceOption* _internal_mutable_namespace_options();
  public:
  void unsafe_arena_set_allocated_namespace_options(
      ::runtime::v1alpha2::NamespaceOption* namespace_options);
  ::runtime::v1alpha2::NamespaceOption* unsafe_arena_release_namespace_options();

  // .runtime.v1alpha2.SELinuxOption selinux_options = 2;
  bool has_selinux_options() const;
  private:
  bool _internal_has_selinux_options() const;
  public:
  void clear_selinux_options();
  const ::runtime::v1alpha2::SELinuxOption& selinux_options() const;
  ::runtime::v1alpha2::SELinuxOption* release_selinux_options();
  ::runtime::v1alpha2::SELinuxOption* mutable_selinux_options();
  void set_allocated_selinux_options(::runtime::v1alpha2::SELinuxOption* selinux_options);
  private:
  const ::runtime::v1alpha2::SELinuxOption& _internal_selinux_options() const;
  ::runtime::v1alpha2::SELinuxOption* _internal_mutable_selinux_options();
  public:
  void unsafe_arena_set_allocated_selinux_options(
      ::runtime::v1alpha2::SELinuxOption* selinux_options);
  ::runtime::v1alpha2::SELinuxOption* unsafe_arena_release_selinux_options();

  // .runtime.v1alpha2.Int64Value run_as_user = 3;
  bool has_run_as_user() const;
  private:
  bool _internal_has_run_as_user() const;
  public:
  void clear_run_as_user();
  const ::runtime::v1alpha2::Int64Value& run_as_user() const;
  ::runtime::v1alpha2::Int64Value* release_run_as_user();
  ::runtime::v1alpha2::Int64Value* mutable_run_as_user();
  void set_allocated_run_as_user(::runtime::v1alpha2::Int64Value* run_as_user);
  private:
  const ::runtime::v1alpha2::Int64Value& _internal_run_as_user() const;
  ::runtime::v1alpha2::Int64Value* _internal_mutable_run_as_user();
  public:
  void unsafe_arena_set_allocated_run_as_user(
      ::runtime::v1alpha2::Int64Value* run_as_user);
  ::runtime::v1alpha2::Int64Value* unsafe_arena_release_run_as_user();

  // .runtime.v1alpha2.Int64Value run_as_group = 8;
  bool has_run_as_group() const;
  private:
  bool _internal_has_run_as_group() const;
  public:
  void clear_run_as_group();
  const ::runtime::v1alpha2::Int64Value& run_as_group() const;
  ::runtime::v1alpha2::Int64Value* release_run_as_group();
  ::runtime::v1alpha2::Int64Value* mutable_run_as_group();
  void set_allocated_run_as_group(::runtime::v1alpha2::Int64Value* run_as_group);
  private:
  const ::runtime::v1alpha2::Int64Value& _internal_run_as_group() const;
  ::runtime::v1alpha2::Int64Value* _internal_mutable_run_as_group();
  public:
  void unsafe_arena_set_allocated_run_as_group(
      ::runtime::v1alpha2::Int64Value* run_as_group);
  ::runtime::v1alpha2::Int64Value* unsafe_arena_release_run_as_group();

  // bool readonly_rootfs = 4;
  void clear_readonly_rootfs();
  bool readonly_rootfs() const;
  void set_readonly_rootfs(bool value);
  private:
  bool _internal_readonly_rootfs() const;
  void _internal_set_readonly_rootfs(bool value);
  public:

  // bool privileged = 6;
  void clear_privileged();
  bool privileged() const;
  void set_privileged(bool value);
  private:
  bool _internal_privileged() const;
  void _internal_set_privileged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxSandboxSecurityContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > supplemental_groups_;
  mutable std::atomic<int> _supplemental_groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seccomp_profile_path_;
  ::runtime::v1alpha2::NamespaceOption* namespace_options_;
  ::runtime::v1alpha2::SELinuxOption* selinux_options_;
  ::runtime::v1alpha2::Int64Value* run_as_user_;
  ::runtime::v1alpha2::Int64Value* run_as_group_;
  bool readonly_rootfs_;
  bool privileged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxPodSandboxConfig_SysctlsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LinuxPodSandboxConfig_SysctlsEntry_DoNotUse();
  LinuxPodSandboxConfig_SysctlsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LinuxPodSandboxConfig_SysctlsEntry_DoNotUse& other);
  static const LinuxPodSandboxConfig_SysctlsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LinuxPodSandboxConfig_SysctlsEntry_DoNotUse*>(&_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.LinuxPodSandboxConfig.SysctlsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.LinuxPodSandboxConfig.SysctlsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class LinuxPodSandboxConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxPodSandboxConfig) */ {
 public:
  inline LinuxPodSandboxConfig() : LinuxPodSandboxConfig(nullptr) {};
  virtual ~LinuxPodSandboxConfig();

  LinuxPodSandboxConfig(const LinuxPodSandboxConfig& from);
  LinuxPodSandboxConfig(LinuxPodSandboxConfig&& from) noexcept
    : LinuxPodSandboxConfig() {
    *this = ::std::move(from);
  }

  inline LinuxPodSandboxConfig& operator=(const LinuxPodSandboxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxPodSandboxConfig& operator=(LinuxPodSandboxConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxPodSandboxConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxPodSandboxConfig* internal_default_instance() {
    return reinterpret_cast<const LinuxPodSandboxConfig*>(
               &_LinuxPodSandboxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LinuxPodSandboxConfig& a, LinuxPodSandboxConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxPodSandboxConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxPodSandboxConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxPodSandboxConfig* New() const final {
    return CreateMaybeMessage<LinuxPodSandboxConfig>(nullptr);
  }

  LinuxPodSandboxConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxPodSandboxConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxPodSandboxConfig& from);
  void MergeFrom(const LinuxPodSandboxConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxPodSandboxConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxPodSandboxConfig";
  }
  protected:
  explicit LinuxPodSandboxConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSysctlsFieldNumber = 3,
    kCgroupParentFieldNumber = 1,
    kSecurityContextFieldNumber = 2,
  };
  // map<string, string> sysctls = 3;
  int sysctls_size() const;
  private:
  int _internal_sysctls_size() const;
  public:
  void clear_sysctls();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_sysctls() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_sysctls();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      sysctls() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_sysctls();

  // string cgroup_parent = 1;
  void clear_cgroup_parent();
  const std::string& cgroup_parent() const;
  void set_cgroup_parent(const std::string& value);
  void set_cgroup_parent(std::string&& value);
  void set_cgroup_parent(const char* value);
  void set_cgroup_parent(const char* value, size_t size);
  std::string* mutable_cgroup_parent();
  std::string* release_cgroup_parent();
  void set_allocated_cgroup_parent(std::string* cgroup_parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cgroup_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cgroup_parent(
      std::string* cgroup_parent);
  private:
  const std::string& _internal_cgroup_parent() const;
  void _internal_set_cgroup_parent(const std::string& value);
  std::string* _internal_mutable_cgroup_parent();
  public:

  // .runtime.v1alpha2.LinuxSandboxSecurityContext security_context = 2;
  bool has_security_context() const;
  private:
  bool _internal_has_security_context() const;
  public:
  void clear_security_context();
  const ::runtime::v1alpha2::LinuxSandboxSecurityContext& security_context() const;
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* release_security_context();
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* mutable_security_context();
  void set_allocated_security_context(::runtime::v1alpha2::LinuxSandboxSecurityContext* security_context);
  private:
  const ::runtime::v1alpha2::LinuxSandboxSecurityContext& _internal_security_context() const;
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* _internal_mutable_security_context();
  public:
  void unsafe_arena_set_allocated_security_context(
      ::runtime::v1alpha2::LinuxSandboxSecurityContext* security_context);
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* unsafe_arena_release_security_context();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxPodSandboxConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LinuxPodSandboxConfig_SysctlsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > sysctls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgroup_parent_;
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* security_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxMetadata) */ {
 public:
  inline PodSandboxMetadata() : PodSandboxMetadata(nullptr) {};
  virtual ~PodSandboxMetadata();

  PodSandboxMetadata(const PodSandboxMetadata& from);
  PodSandboxMetadata(PodSandboxMetadata&& from) noexcept
    : PodSandboxMetadata() {
    *this = ::std::move(from);
  }

  inline PodSandboxMetadata& operator=(const PodSandboxMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxMetadata& operator=(PodSandboxMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxMetadata* internal_default_instance() {
    return reinterpret_cast<const PodSandboxMetadata*>(
               &_PodSandboxMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PodSandboxMetadata& a, PodSandboxMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxMetadata* New() const final {
    return CreateMaybeMessage<PodSandboxMetadata>(nullptr);
  }

  PodSandboxMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxMetadata& from);
  void MergeFrom(const PodSandboxMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxMetadata";
  }
  protected:
  explicit PodSandboxMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kNamespaceFieldNumber = 3,
    kAttemptFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string namespace = 3;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // uint32 attempt = 4;
  void clear_attempt();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt() const;
  void set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attempt() const;
  void _internal_set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxConfig_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxConfig_LabelsEntry_DoNotUse();
  PodSandboxConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxConfig_LabelsEntry_DoNotUse& other);
  static const PodSandboxConfig_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxConfig_LabelsEntry_DoNotUse*>(&_PodSandboxConfig_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxConfig.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxConfig.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxConfig_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxConfig_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxConfig_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxConfig_AnnotationsEntry_DoNotUse();
  PodSandboxConfig_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxConfig_AnnotationsEntry_DoNotUse& other);
  static const PodSandboxConfig_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxConfig_AnnotationsEntry_DoNotUse*>(&_PodSandboxConfig_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxConfig.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxConfig.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxConfig) */ {
 public:
  inline PodSandboxConfig() : PodSandboxConfig(nullptr) {};
  virtual ~PodSandboxConfig();

  PodSandboxConfig(const PodSandboxConfig& from);
  PodSandboxConfig(PodSandboxConfig&& from) noexcept
    : PodSandboxConfig() {
    *this = ::std::move(from);
  }

  inline PodSandboxConfig& operator=(const PodSandboxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxConfig& operator=(PodSandboxConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxConfig* internal_default_instance() {
    return reinterpret_cast<const PodSandboxConfig*>(
               &_PodSandboxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PodSandboxConfig& a, PodSandboxConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxConfig* New() const final {
    return CreateMaybeMessage<PodSandboxConfig>(nullptr);
  }

  PodSandboxConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxConfig& from);
  void MergeFrom(const PodSandboxConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxConfig";
  }
  protected:
  explicit PodSandboxConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPortMappingsFieldNumber = 5,
    kLabelsFieldNumber = 6,
    kAnnotationsFieldNumber = 7,
    kHostnameFieldNumber = 2,
    kLogDirectoryFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kDnsConfigFieldNumber = 4,
    kLinuxFieldNumber = 8,
  };
  // repeated .runtime.v1alpha2.PortMapping port_mappings = 5;
  int port_mappings_size() const;
  private:
  int _internal_port_mappings_size() const;
  public:
  void clear_port_mappings();
  ::runtime::v1alpha2::PortMapping* mutable_port_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PortMapping >*
      mutable_port_mappings();
  private:
  const ::runtime::v1alpha2::PortMapping& _internal_port_mappings(int index) const;
  ::runtime::v1alpha2::PortMapping* _internal_add_port_mappings();
  public:
  const ::runtime::v1alpha2::PortMapping& port_mappings(int index) const;
  ::runtime::v1alpha2::PortMapping* add_port_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PortMapping >&
      port_mappings() const;

  // map<string, string> labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 7;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string hostname = 2;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string log_directory = 3;
  void clear_log_directory();
  const std::string& log_directory() const;
  void set_log_directory(const std::string& value);
  void set_log_directory(std::string&& value);
  void set_log_directory(const char* value);
  void set_log_directory(const char* value, size_t size);
  std::string* mutable_log_directory();
  std::string* release_log_directory();
  void set_allocated_log_directory(std::string* log_directory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_directory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_directory(
      std::string* log_directory);
  private:
  const std::string& _internal_log_directory() const;
  void _internal_set_log_directory(const std::string& value);
  std::string* _internal_mutable_log_directory();
  public:

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::PodSandboxMetadata& metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* release_metadata();
  ::runtime::v1alpha2::PodSandboxMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata);
  private:
  const ::runtime::v1alpha2::PodSandboxMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::PodSandboxMetadata* metadata);
  ::runtime::v1alpha2::PodSandboxMetadata* unsafe_arena_release_metadata();

  // .runtime.v1alpha2.DNSConfig dns_config = 4;
  bool has_dns_config() const;
  private:
  bool _internal_has_dns_config() const;
  public:
  void clear_dns_config();
  const ::runtime::v1alpha2::DNSConfig& dns_config() const;
  ::runtime::v1alpha2::DNSConfig* release_dns_config();
  ::runtime::v1alpha2::DNSConfig* mutable_dns_config();
  void set_allocated_dns_config(::runtime::v1alpha2::DNSConfig* dns_config);
  private:
  const ::runtime::v1alpha2::DNSConfig& _internal_dns_config() const;
  ::runtime::v1alpha2::DNSConfig* _internal_mutable_dns_config();
  public:
  void unsafe_arena_set_allocated_dns_config(
      ::runtime::v1alpha2::DNSConfig* dns_config);
  ::runtime::v1alpha2::DNSConfig* unsafe_arena_release_dns_config();

  // .runtime.v1alpha2.LinuxPodSandboxConfig linux = 8;
  bool has_linux() const;
  private:
  bool _internal_has_linux() const;
  public:
  void clear_linux();
  const ::runtime::v1alpha2::LinuxPodSandboxConfig& linux() const;
  ::runtime::v1alpha2::LinuxPodSandboxConfig* release_linux();
  ::runtime::v1alpha2::LinuxPodSandboxConfig* mutable_linux();
  void set_allocated_linux(::runtime::v1alpha2::LinuxPodSandboxConfig* linux);
  private:
  const ::runtime::v1alpha2::LinuxPodSandboxConfig& _internal_linux() const;
  ::runtime::v1alpha2::LinuxPodSandboxConfig* _internal_mutable_linux();
  public:
  void unsafe_arena_set_allocated_linux(
      ::runtime::v1alpha2::LinuxPodSandboxConfig* linux);
  ::runtime::v1alpha2::LinuxPodSandboxConfig* unsafe_arena_release_linux();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PortMapping > port_mappings_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxConfig_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxConfig_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_directory_;
  ::runtime::v1alpha2::PodSandboxMetadata* metadata_;
  ::runtime::v1alpha2::DNSConfig* dns_config_;
  ::runtime::v1alpha2::LinuxPodSandboxConfig* linux_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RunPodSandboxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RunPodSandboxRequest) */ {
 public:
  inline RunPodSandboxRequest() : RunPodSandboxRequest(nullptr) {};
  virtual ~RunPodSandboxRequest();

  RunPodSandboxRequest(const RunPodSandboxRequest& from);
  RunPodSandboxRequest(RunPodSandboxRequest&& from) noexcept
    : RunPodSandboxRequest() {
    *this = ::std::move(from);
  }

  inline RunPodSandboxRequest& operator=(const RunPodSandboxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPodSandboxRequest& operator=(RunPodSandboxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunPodSandboxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunPodSandboxRequest* internal_default_instance() {
    return reinterpret_cast<const RunPodSandboxRequest*>(
               &_RunPodSandboxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RunPodSandboxRequest& a, RunPodSandboxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPodSandboxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPodSandboxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunPodSandboxRequest* New() const final {
    return CreateMaybeMessage<RunPodSandboxRequest>(nullptr);
  }

  RunPodSandboxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunPodSandboxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunPodSandboxRequest& from);
  void MergeFrom(const RunPodSandboxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPodSandboxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RunPodSandboxRequest";
  }
  protected:
  explicit RunPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeHandlerFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // string runtime_handler = 2;
  void clear_runtime_handler();
  const std::string& runtime_handler() const;
  void set_runtime_handler(const std::string& value);
  void set_runtime_handler(std::string&& value);
  void set_runtime_handler(const char* value);
  void set_runtime_handler(const char* value, size_t size);
  std::string* mutable_runtime_handler();
  std::string* release_runtime_handler();
  void set_allocated_runtime_handler(std::string* runtime_handler);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_handler();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_handler(
      std::string* runtime_handler);
  private:
  const std::string& _internal_runtime_handler() const;
  void _internal_set_runtime_handler(const std::string& value);
  std::string* _internal_mutable_runtime_handler();
  public:

  // .runtime.v1alpha2.PodSandboxConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::runtime::v1alpha2::PodSandboxConfig& config() const;
  ::runtime::v1alpha2::PodSandboxConfig* release_config();
  ::runtime::v1alpha2::PodSandboxConfig* mutable_config();
  void set_allocated_config(::runtime::v1alpha2::PodSandboxConfig* config);
  private:
  const ::runtime::v1alpha2::PodSandboxConfig& _internal_config() const;
  ::runtime::v1alpha2::PodSandboxConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::runtime::v1alpha2::PodSandboxConfig* config);
  ::runtime::v1alpha2::PodSandboxConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RunPodSandboxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_handler_;
  ::runtime::v1alpha2::PodSandboxConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RunPodSandboxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RunPodSandboxResponse) */ {
 public:
  inline RunPodSandboxResponse() : RunPodSandboxResponse(nullptr) {};
  virtual ~RunPodSandboxResponse();

  RunPodSandboxResponse(const RunPodSandboxResponse& from);
  RunPodSandboxResponse(RunPodSandboxResponse&& from) noexcept
    : RunPodSandboxResponse() {
    *this = ::std::move(from);
  }

  inline RunPodSandboxResponse& operator=(const RunPodSandboxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPodSandboxResponse& operator=(RunPodSandboxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunPodSandboxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunPodSandboxResponse* internal_default_instance() {
    return reinterpret_cast<const RunPodSandboxResponse*>(
               &_RunPodSandboxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RunPodSandboxResponse& a, RunPodSandboxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPodSandboxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPodSandboxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunPodSandboxResponse* New() const final {
    return CreateMaybeMessage<RunPodSandboxResponse>(nullptr);
  }

  RunPodSandboxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunPodSandboxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunPodSandboxResponse& from);
  void MergeFrom(const RunPodSandboxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPodSandboxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RunPodSandboxResponse";
  }
  protected:
  explicit RunPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodSandboxIdFieldNumber = 1,
  };
  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RunPodSandboxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StopPodSandboxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StopPodSandboxRequest) */ {
 public:
  inline StopPodSandboxRequest() : StopPodSandboxRequest(nullptr) {};
  virtual ~StopPodSandboxRequest();

  StopPodSandboxRequest(const StopPodSandboxRequest& from);
  StopPodSandboxRequest(StopPodSandboxRequest&& from) noexcept
    : StopPodSandboxRequest() {
    *this = ::std::move(from);
  }

  inline StopPodSandboxRequest& operator=(const StopPodSandboxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPodSandboxRequest& operator=(StopPodSandboxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPodSandboxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPodSandboxRequest* internal_default_instance() {
    return reinterpret_cast<const StopPodSandboxRequest*>(
               &_StopPodSandboxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StopPodSandboxRequest& a, StopPodSandboxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPodSandboxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPodSandboxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPodSandboxRequest* New() const final {
    return CreateMaybeMessage<StopPodSandboxRequest>(nullptr);
  }

  StopPodSandboxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPodSandboxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPodSandboxRequest& from);
  void MergeFrom(const StopPodSandboxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPodSandboxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StopPodSandboxRequest";
  }
  protected:
  explicit StopPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodSandboxIdFieldNumber = 1,
  };
  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StopPodSandboxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StopPodSandboxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StopPodSandboxResponse) */ {
 public:
  inline StopPodSandboxResponse() : StopPodSandboxResponse(nullptr) {};
  virtual ~StopPodSandboxResponse();

  StopPodSandboxResponse(const StopPodSandboxResponse& from);
  StopPodSandboxResponse(StopPodSandboxResponse&& from) noexcept
    : StopPodSandboxResponse() {
    *this = ::std::move(from);
  }

  inline StopPodSandboxResponse& operator=(const StopPodSandboxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPodSandboxResponse& operator=(StopPodSandboxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPodSandboxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPodSandboxResponse* internal_default_instance() {
    return reinterpret_cast<const StopPodSandboxResponse*>(
               &_StopPodSandboxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StopPodSandboxResponse& a, StopPodSandboxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPodSandboxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPodSandboxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPodSandboxResponse* New() const final {
    return CreateMaybeMessage<StopPodSandboxResponse>(nullptr);
  }

  StopPodSandboxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPodSandboxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPodSandboxResponse& from);
  void MergeFrom(const StopPodSandboxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPodSandboxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StopPodSandboxResponse";
  }
  protected:
  explicit StopPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StopPodSandboxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemovePodSandboxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemovePodSandboxRequest) */ {
 public:
  inline RemovePodSandboxRequest() : RemovePodSandboxRequest(nullptr) {};
  virtual ~RemovePodSandboxRequest();

  RemovePodSandboxRequest(const RemovePodSandboxRequest& from);
  RemovePodSandboxRequest(RemovePodSandboxRequest&& from) noexcept
    : RemovePodSandboxRequest() {
    *this = ::std::move(from);
  }

  inline RemovePodSandboxRequest& operator=(const RemovePodSandboxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePodSandboxRequest& operator=(RemovePodSandboxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePodSandboxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePodSandboxRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePodSandboxRequest*>(
               &_RemovePodSandboxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemovePodSandboxRequest& a, RemovePodSandboxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePodSandboxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePodSandboxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePodSandboxRequest* New() const final {
    return CreateMaybeMessage<RemovePodSandboxRequest>(nullptr);
  }

  RemovePodSandboxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePodSandboxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePodSandboxRequest& from);
  void MergeFrom(const RemovePodSandboxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePodSandboxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemovePodSandboxRequest";
  }
  protected:
  explicit RemovePodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodSandboxIdFieldNumber = 1,
  };
  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemovePodSandboxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemovePodSandboxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemovePodSandboxResponse) */ {
 public:
  inline RemovePodSandboxResponse() : RemovePodSandboxResponse(nullptr) {};
  virtual ~RemovePodSandboxResponse();

  RemovePodSandboxResponse(const RemovePodSandboxResponse& from);
  RemovePodSandboxResponse(RemovePodSandboxResponse&& from) noexcept
    : RemovePodSandboxResponse() {
    *this = ::std::move(from);
  }

  inline RemovePodSandboxResponse& operator=(const RemovePodSandboxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePodSandboxResponse& operator=(RemovePodSandboxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePodSandboxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePodSandboxResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePodSandboxResponse*>(
               &_RemovePodSandboxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemovePodSandboxResponse& a, RemovePodSandboxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePodSandboxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePodSandboxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePodSandboxResponse* New() const final {
    return CreateMaybeMessage<RemovePodSandboxResponse>(nullptr);
  }

  RemovePodSandboxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePodSandboxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePodSandboxResponse& from);
  void MergeFrom(const RemovePodSandboxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePodSandboxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemovePodSandboxResponse";
  }
  protected:
  explicit RemovePodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemovePodSandboxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxStatusRequest) */ {
 public:
  inline PodSandboxStatusRequest() : PodSandboxStatusRequest(nullptr) {};
  virtual ~PodSandboxStatusRequest();

  PodSandboxStatusRequest(const PodSandboxStatusRequest& from);
  PodSandboxStatusRequest(PodSandboxStatusRequest&& from) noexcept
    : PodSandboxStatusRequest() {
    *this = ::std::move(from);
  }

  inline PodSandboxStatusRequest& operator=(const PodSandboxStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxStatusRequest& operator=(PodSandboxStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PodSandboxStatusRequest*>(
               &_PodSandboxStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PodSandboxStatusRequest& a, PodSandboxStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxStatusRequest* New() const final {
    return CreateMaybeMessage<PodSandboxStatusRequest>(nullptr);
  }

  PodSandboxStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxStatusRequest& from);
  void MergeFrom(const PodSandboxStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxStatusRequest";
  }
  protected:
  explicit PodSandboxStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodSandboxIdFieldNumber = 1,
    kVerboseFieldNumber = 2,
  };
  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // bool verbose = 2;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodIP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodIP) */ {
 public:
  inline PodIP() : PodIP(nullptr) {};
  virtual ~PodIP();

  PodIP(const PodIP& from);
  PodIP(PodIP&& from) noexcept
    : PodIP() {
    *this = ::std::move(from);
  }

  inline PodIP& operator=(const PodIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodIP& operator=(PodIP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodIP* internal_default_instance() {
    return reinterpret_cast<const PodIP*>(
               &_PodIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PodIP& a, PodIP& b) {
    a.Swap(&b);
  }
  inline void Swap(PodIP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodIP* New() const final {
    return CreateMaybeMessage<PodIP>(nullptr);
  }

  PodIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodIP& from);
  void MergeFrom(const PodIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodIP";
  }
  protected:
  explicit PodIP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxNetworkStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxNetworkStatus) */ {
 public:
  inline PodSandboxNetworkStatus() : PodSandboxNetworkStatus(nullptr) {};
  virtual ~PodSandboxNetworkStatus();

  PodSandboxNetworkStatus(const PodSandboxNetworkStatus& from);
  PodSandboxNetworkStatus(PodSandboxNetworkStatus&& from) noexcept
    : PodSandboxNetworkStatus() {
    *this = ::std::move(from);
  }

  inline PodSandboxNetworkStatus& operator=(const PodSandboxNetworkStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxNetworkStatus& operator=(PodSandboxNetworkStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxNetworkStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxNetworkStatus* internal_default_instance() {
    return reinterpret_cast<const PodSandboxNetworkStatus*>(
               &_PodSandboxNetworkStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PodSandboxNetworkStatus& a, PodSandboxNetworkStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxNetworkStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxNetworkStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxNetworkStatus* New() const final {
    return CreateMaybeMessage<PodSandboxNetworkStatus>(nullptr);
  }

  PodSandboxNetworkStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxNetworkStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxNetworkStatus& from);
  void MergeFrom(const PodSandboxNetworkStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxNetworkStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxNetworkStatus";
  }
  protected:
  explicit PodSandboxNetworkStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalIpsFieldNumber = 2,
    kIpFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.PodIP additional_ips = 2;
  int additional_ips_size() const;
  private:
  int _internal_additional_ips_size() const;
  public:
  void clear_additional_ips();
  ::runtime::v1alpha2::PodIP* mutable_additional_ips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodIP >*
      mutable_additional_ips();
  private:
  const ::runtime::v1alpha2::PodIP& _internal_additional_ips(int index) const;
  ::runtime::v1alpha2::PodIP* _internal_add_additional_ips();
  public:
  const ::runtime::v1alpha2::PodIP& additional_ips(int index) const;
  ::runtime::v1alpha2::PodIP* add_additional_ips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodIP >&
      additional_ips() const;

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxNetworkStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodIP > additional_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Namespace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Namespace) */ {
 public:
  inline Namespace() : Namespace(nullptr) {};
  virtual ~Namespace();

  Namespace(const Namespace& from);
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Namespace& operator=(Namespace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }
  inline void Swap(Namespace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Namespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return CreateMaybeMessage<Namespace>(nullptr);
  }

  Namespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Namespace& from);
  void MergeFrom(const Namespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Namespace";
  }
  protected:
  explicit Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
  };
  // .runtime.v1alpha2.NamespaceOption options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::runtime::v1alpha2::NamespaceOption& options() const;
  ::runtime::v1alpha2::NamespaceOption* release_options();
  ::runtime::v1alpha2::NamespaceOption* mutable_options();
  void set_allocated_options(::runtime::v1alpha2::NamespaceOption* options);
  private:
  const ::runtime::v1alpha2::NamespaceOption& _internal_options() const;
  ::runtime::v1alpha2::NamespaceOption* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::runtime::v1alpha2::NamespaceOption* options);
  ::runtime::v1alpha2::NamespaceOption* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Namespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::NamespaceOption* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxPodSandboxStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxPodSandboxStatus) */ {
 public:
  inline LinuxPodSandboxStatus() : LinuxPodSandboxStatus(nullptr) {};
  virtual ~LinuxPodSandboxStatus();

  LinuxPodSandboxStatus(const LinuxPodSandboxStatus& from);
  LinuxPodSandboxStatus(LinuxPodSandboxStatus&& from) noexcept
    : LinuxPodSandboxStatus() {
    *this = ::std::move(from);
  }

  inline LinuxPodSandboxStatus& operator=(const LinuxPodSandboxStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxPodSandboxStatus& operator=(LinuxPodSandboxStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxPodSandboxStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxPodSandboxStatus* internal_default_instance() {
    return reinterpret_cast<const LinuxPodSandboxStatus*>(
               &_LinuxPodSandboxStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LinuxPodSandboxStatus& a, LinuxPodSandboxStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxPodSandboxStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxPodSandboxStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxPodSandboxStatus* New() const final {
    return CreateMaybeMessage<LinuxPodSandboxStatus>(nullptr);
  }

  LinuxPodSandboxStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxPodSandboxStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxPodSandboxStatus& from);
  void MergeFrom(const LinuxPodSandboxStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxPodSandboxStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxPodSandboxStatus";
  }
  protected:
  explicit LinuxPodSandboxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespacesFieldNumber = 1,
  };
  // .runtime.v1alpha2.Namespace namespaces = 1;
  bool has_namespaces() const;
  private:
  bool _internal_has_namespaces() const;
  public:
  void clear_namespaces();
  const ::runtime::v1alpha2::Namespace& namespaces() const;
  ::runtime::v1alpha2::Namespace* release_namespaces();
  ::runtime::v1alpha2::Namespace* mutable_namespaces();
  void set_allocated_namespaces(::runtime::v1alpha2::Namespace* namespaces);
  private:
  const ::runtime::v1alpha2::Namespace& _internal_namespaces() const;
  ::runtime::v1alpha2::Namespace* _internal_mutable_namespaces();
  public:
  void unsafe_arena_set_allocated_namespaces(
      ::runtime::v1alpha2::Namespace* namespaces);
  ::runtime::v1alpha2::Namespace* unsafe_arena_release_namespaces();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxPodSandboxStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::Namespace* namespaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxStatus_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatus_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatus_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxStatus_LabelsEntry_DoNotUse();
  PodSandboxStatus_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxStatus_LabelsEntry_DoNotUse& other);
  static const PodSandboxStatus_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxStatus_LabelsEntry_DoNotUse*>(&_PodSandboxStatus_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatus.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatus.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[25];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxStatus_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatus_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatus_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxStatus_AnnotationsEntry_DoNotUse();
  PodSandboxStatus_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxStatus_AnnotationsEntry_DoNotUse& other);
  static const PodSandboxStatus_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxStatus_AnnotationsEntry_DoNotUse*>(&_PodSandboxStatus_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatus.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatus.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxStatus) */ {
 public:
  inline PodSandboxStatus() : PodSandboxStatus(nullptr) {};
  virtual ~PodSandboxStatus();

  PodSandboxStatus(const PodSandboxStatus& from);
  PodSandboxStatus(PodSandboxStatus&& from) noexcept
    : PodSandboxStatus() {
    *this = ::std::move(from);
  }

  inline PodSandboxStatus& operator=(const PodSandboxStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxStatus& operator=(PodSandboxStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxStatus* internal_default_instance() {
    return reinterpret_cast<const PodSandboxStatus*>(
               &_PodSandboxStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PodSandboxStatus& a, PodSandboxStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxStatus* New() const final {
    return CreateMaybeMessage<PodSandboxStatus>(nullptr);
  }

  PodSandboxStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxStatus& from);
  void MergeFrom(const PodSandboxStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxStatus";
  }
  protected:
  explicit PodSandboxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 7,
    kAnnotationsFieldNumber = 8,
    kIdFieldNumber = 1,
    kRuntimeHandlerFieldNumber = 9,
    kMetadataFieldNumber = 2,
    kNetworkFieldNumber = 5,
    kLinuxFieldNumber = 6,
    kCreatedAtFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // map<string, string> labels = 7;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 8;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string runtime_handler = 9;
  void clear_runtime_handler();
  const std::string& runtime_handler() const;
  void set_runtime_handler(const std::string& value);
  void set_runtime_handler(std::string&& value);
  void set_runtime_handler(const char* value);
  void set_runtime_handler(const char* value, size_t size);
  std::string* mutable_runtime_handler();
  std::string* release_runtime_handler();
  void set_allocated_runtime_handler(std::string* runtime_handler);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_handler();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_handler(
      std::string* runtime_handler);
  private:
  const std::string& _internal_runtime_handler() const;
  void _internal_set_runtime_handler(const std::string& value);
  std::string* _internal_mutable_runtime_handler();
  public:

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::PodSandboxMetadata& metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* release_metadata();
  ::runtime::v1alpha2::PodSandboxMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata);
  private:
  const ::runtime::v1alpha2::PodSandboxMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::PodSandboxMetadata* metadata);
  ::runtime::v1alpha2::PodSandboxMetadata* unsafe_arena_release_metadata();

  // .runtime.v1alpha2.PodSandboxNetworkStatus network = 5;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::runtime::v1alpha2::PodSandboxNetworkStatus& network() const;
  ::runtime::v1alpha2::PodSandboxNetworkStatus* release_network();
  ::runtime::v1alpha2::PodSandboxNetworkStatus* mutable_network();
  void set_allocated_network(::runtime::v1alpha2::PodSandboxNetworkStatus* network);
  private:
  const ::runtime::v1alpha2::PodSandboxNetworkStatus& _internal_network() const;
  ::runtime::v1alpha2::PodSandboxNetworkStatus* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::runtime::v1alpha2::PodSandboxNetworkStatus* network);
  ::runtime::v1alpha2::PodSandboxNetworkStatus* unsafe_arena_release_network();

  // .runtime.v1alpha2.LinuxPodSandboxStatus linux = 6;
  bool has_linux() const;
  private:
  bool _internal_has_linux() const;
  public:
  void clear_linux();
  const ::runtime::v1alpha2::LinuxPodSandboxStatus& linux() const;
  ::runtime::v1alpha2::LinuxPodSandboxStatus* release_linux();
  ::runtime::v1alpha2::LinuxPodSandboxStatus* mutable_linux();
  void set_allocated_linux(::runtime::v1alpha2::LinuxPodSandboxStatus* linux);
  private:
  const ::runtime::v1alpha2::LinuxPodSandboxStatus& _internal_linux() const;
  ::runtime::v1alpha2::LinuxPodSandboxStatus* _internal_mutable_linux();
  public:
  void unsafe_arena_set_allocated_linux(
      ::runtime::v1alpha2::LinuxPodSandboxStatus* linux);
  ::runtime::v1alpha2::LinuxPodSandboxStatus* unsafe_arena_release_linux();

  // int64 created_at = 4;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .runtime.v1alpha2.PodSandboxState state = 3;
  void clear_state();
  ::runtime::v1alpha2::PodSandboxState state() const;
  void set_state(::runtime::v1alpha2::PodSandboxState value);
  private:
  ::runtime::v1alpha2::PodSandboxState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::PodSandboxState value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxStatus_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxStatus_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_handler_;
  ::runtime::v1alpha2::PodSandboxMetadata* metadata_;
  ::runtime::v1alpha2::PodSandboxNetworkStatus* network_;
  ::runtime::v1alpha2::LinuxPodSandboxStatus* linux_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxStatusResponse_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxStatusResponse_InfoEntry_DoNotUse();
  PodSandboxStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxStatusResponse_InfoEntry_DoNotUse& other);
  static const PodSandboxStatusResponse_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxStatusResponse_InfoEntry_DoNotUse*>(&_PodSandboxStatusResponse_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatusResponse.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxStatusResponse.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxStatusResponse) */ {
 public:
  inline PodSandboxStatusResponse() : PodSandboxStatusResponse(nullptr) {};
  virtual ~PodSandboxStatusResponse();

  PodSandboxStatusResponse(const PodSandboxStatusResponse& from);
  PodSandboxStatusResponse(PodSandboxStatusResponse&& from) noexcept
    : PodSandboxStatusResponse() {
    *this = ::std::move(from);
  }

  inline PodSandboxStatusResponse& operator=(const PodSandboxStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxStatusResponse& operator=(PodSandboxStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PodSandboxStatusResponse*>(
               &_PodSandboxStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PodSandboxStatusResponse& a, PodSandboxStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxStatusResponse* New() const final {
    return CreateMaybeMessage<PodSandboxStatusResponse>(nullptr);
  }

  PodSandboxStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxStatusResponse& from);
  void MergeFrom(const PodSandboxStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxStatusResponse";
  }
  protected:
  explicit PodSandboxStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, string> info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .runtime.v1alpha2.PodSandboxStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::runtime::v1alpha2::PodSandboxStatus& status() const;
  ::runtime::v1alpha2::PodSandboxStatus* release_status();
  ::runtime::v1alpha2::PodSandboxStatus* mutable_status();
  void set_allocated_status(::runtime::v1alpha2::PodSandboxStatus* status);
  private:
  const ::runtime::v1alpha2::PodSandboxStatus& _internal_status() const;
  ::runtime::v1alpha2::PodSandboxStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::runtime::v1alpha2::PodSandboxStatus* status);
  ::runtime::v1alpha2::PodSandboxStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxStatusResponse_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::runtime::v1alpha2::PodSandboxStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxStateValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxStateValue) */ {
 public:
  inline PodSandboxStateValue() : PodSandboxStateValue(nullptr) {};
  virtual ~PodSandboxStateValue();

  PodSandboxStateValue(const PodSandboxStateValue& from);
  PodSandboxStateValue(PodSandboxStateValue&& from) noexcept
    : PodSandboxStateValue() {
    *this = ::std::move(from);
  }

  inline PodSandboxStateValue& operator=(const PodSandboxStateValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxStateValue& operator=(PodSandboxStateValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxStateValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxStateValue* internal_default_instance() {
    return reinterpret_cast<const PodSandboxStateValue*>(
               &_PodSandboxStateValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PodSandboxStateValue& a, PodSandboxStateValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxStateValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxStateValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxStateValue* New() const final {
    return CreateMaybeMessage<PodSandboxStateValue>(nullptr);
  }

  PodSandboxStateValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxStateValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxStateValue& from);
  void MergeFrom(const PodSandboxStateValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxStateValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxStateValue";
  }
  protected:
  explicit PodSandboxStateValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .runtime.v1alpha2.PodSandboxState state = 1;
  void clear_state();
  ::runtime::v1alpha2::PodSandboxState state() const;
  void set_state(::runtime::v1alpha2::PodSandboxState value);
  private:
  ::runtime::v1alpha2::PodSandboxState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::PodSandboxState value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxStateValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandboxFilter_LabelSelectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandboxFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandboxFilter_LabelSelectorEntry_DoNotUse();
  PodSandboxFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandboxFilter_LabelSelectorEntry_DoNotUse& other);
  static const PodSandboxFilter_LabelSelectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandboxFilter_LabelSelectorEntry_DoNotUse*>(&_PodSandboxFilter_LabelSelectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxFilter.LabelSelectorEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandboxFilter.LabelSelectorEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[31];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandboxFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandboxFilter) */ {
 public:
  inline PodSandboxFilter() : PodSandboxFilter(nullptr) {};
  virtual ~PodSandboxFilter();

  PodSandboxFilter(const PodSandboxFilter& from);
  PodSandboxFilter(PodSandboxFilter&& from) noexcept
    : PodSandboxFilter() {
    *this = ::std::move(from);
  }

  inline PodSandboxFilter& operator=(const PodSandboxFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandboxFilter& operator=(PodSandboxFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandboxFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandboxFilter* internal_default_instance() {
    return reinterpret_cast<const PodSandboxFilter*>(
               &_PodSandboxFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PodSandboxFilter& a, PodSandboxFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandboxFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandboxFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandboxFilter* New() const final {
    return CreateMaybeMessage<PodSandboxFilter>(nullptr);
  }

  PodSandboxFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandboxFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandboxFilter& from);
  void MergeFrom(const PodSandboxFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandboxFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandboxFilter";
  }
  protected:
  explicit PodSandboxFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelSelectorFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // map<string, string> label_selector = 3;
  int label_selector_size() const;
  private:
  int _internal_label_selector_size() const;
  public:
  void clear_label_selector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_label_selector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_label_selector();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .runtime.v1alpha2.PodSandboxStateValue state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::runtime::v1alpha2::PodSandboxStateValue& state() const;
  ::runtime::v1alpha2::PodSandboxStateValue* release_state();
  ::runtime::v1alpha2::PodSandboxStateValue* mutable_state();
  void set_allocated_state(::runtime::v1alpha2::PodSandboxStateValue* state);
  private:
  const ::runtime::v1alpha2::PodSandboxStateValue& _internal_state() const;
  ::runtime::v1alpha2::PodSandboxStateValue* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::runtime::v1alpha2::PodSandboxStateValue* state);
  ::runtime::v1alpha2::PodSandboxStateValue* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandboxFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandboxFilter_LabelSelectorEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > label_selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::runtime::v1alpha2::PodSandboxStateValue* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListPodSandboxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListPodSandboxRequest) */ {
 public:
  inline ListPodSandboxRequest() : ListPodSandboxRequest(nullptr) {};
  virtual ~ListPodSandboxRequest();

  ListPodSandboxRequest(const ListPodSandboxRequest& from);
  ListPodSandboxRequest(ListPodSandboxRequest&& from) noexcept
    : ListPodSandboxRequest() {
    *this = ::std::move(from);
  }

  inline ListPodSandboxRequest& operator=(const ListPodSandboxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPodSandboxRequest& operator=(ListPodSandboxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPodSandboxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPodSandboxRequest* internal_default_instance() {
    return reinterpret_cast<const ListPodSandboxRequest*>(
               &_ListPodSandboxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ListPodSandboxRequest& a, ListPodSandboxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPodSandboxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPodSandboxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPodSandboxRequest* New() const final {
    return CreateMaybeMessage<ListPodSandboxRequest>(nullptr);
  }

  ListPodSandboxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPodSandboxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPodSandboxRequest& from);
  void MergeFrom(const ListPodSandboxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPodSandboxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListPodSandboxRequest";
  }
  protected:
  explicit ListPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .runtime.v1alpha2.PodSandboxFilter filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::runtime::v1alpha2::PodSandboxFilter& filter() const;
  ::runtime::v1alpha2::PodSandboxFilter* release_filter();
  ::runtime::v1alpha2::PodSandboxFilter* mutable_filter();
  void set_allocated_filter(::runtime::v1alpha2::PodSandboxFilter* filter);
  private:
  const ::runtime::v1alpha2::PodSandboxFilter& _internal_filter() const;
  ::runtime::v1alpha2::PodSandboxFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::runtime::v1alpha2::PodSandboxFilter* filter);
  ::runtime::v1alpha2::PodSandboxFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListPodSandboxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::PodSandboxFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PodSandbox_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandbox_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandbox_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandbox_LabelsEntry_DoNotUse();
  PodSandbox_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandbox_LabelsEntry_DoNotUse& other);
  static const PodSandbox_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandbox_LabelsEntry_DoNotUse*>(&_PodSandbox_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandbox.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandbox.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[34];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandbox_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandbox_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodSandbox_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PodSandbox_AnnotationsEntry_DoNotUse();
  PodSandbox_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodSandbox_AnnotationsEntry_DoNotUse& other);
  static const PodSandbox_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodSandbox_AnnotationsEntry_DoNotUse*>(&_PodSandbox_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandbox.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.PodSandbox.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[35];
  }

  public:
};

// -------------------------------------------------------------------

class PodSandbox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PodSandbox) */ {
 public:
  inline PodSandbox() : PodSandbox(nullptr) {};
  virtual ~PodSandbox();

  PodSandbox(const PodSandbox& from);
  PodSandbox(PodSandbox&& from) noexcept
    : PodSandbox() {
    *this = ::std::move(from);
  }

  inline PodSandbox& operator=(const PodSandbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodSandbox& operator=(PodSandbox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PodSandbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodSandbox* internal_default_instance() {
    return reinterpret_cast<const PodSandbox*>(
               &_PodSandbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PodSandbox& a, PodSandbox& b) {
    a.Swap(&b);
  }
  inline void Swap(PodSandbox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodSandbox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodSandbox* New() const final {
    return CreateMaybeMessage<PodSandbox>(nullptr);
  }

  PodSandbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodSandbox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PodSandbox& from);
  void MergeFrom(const PodSandbox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodSandbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PodSandbox";
  }
  protected:
  explicit PodSandbox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kAnnotationsFieldNumber = 6,
    kIdFieldNumber = 1,
    kRuntimeHandlerFieldNumber = 7,
    kMetadataFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // map<string, string> labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 6;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string runtime_handler = 7;
  void clear_runtime_handler();
  const std::string& runtime_handler() const;
  void set_runtime_handler(const std::string& value);
  void set_runtime_handler(std::string&& value);
  void set_runtime_handler(const char* value);
  void set_runtime_handler(const char* value, size_t size);
  std::string* mutable_runtime_handler();
  std::string* release_runtime_handler();
  void set_allocated_runtime_handler(std::string* runtime_handler);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_handler();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_handler(
      std::string* runtime_handler);
  private:
  const std::string& _internal_runtime_handler() const;
  void _internal_set_runtime_handler(const std::string& value);
  std::string* _internal_mutable_runtime_handler();
  public:

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::PodSandboxMetadata& metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* release_metadata();
  ::runtime::v1alpha2::PodSandboxMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata);
  private:
  const ::runtime::v1alpha2::PodSandboxMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::PodSandboxMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::PodSandboxMetadata* metadata);
  ::runtime::v1alpha2::PodSandboxMetadata* unsafe_arena_release_metadata();

  // int64 created_at = 4;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .runtime.v1alpha2.PodSandboxState state = 3;
  void clear_state();
  ::runtime::v1alpha2::PodSandboxState state() const;
  void set_state(::runtime::v1alpha2::PodSandboxState value);
  private:
  ::runtime::v1alpha2::PodSandboxState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::PodSandboxState value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PodSandbox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandbox_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodSandbox_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_handler_;
  ::runtime::v1alpha2::PodSandboxMetadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListPodSandboxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListPodSandboxResponse) */ {
 public:
  inline ListPodSandboxResponse() : ListPodSandboxResponse(nullptr) {};
  virtual ~ListPodSandboxResponse();

  ListPodSandboxResponse(const ListPodSandboxResponse& from);
  ListPodSandboxResponse(ListPodSandboxResponse&& from) noexcept
    : ListPodSandboxResponse() {
    *this = ::std::move(from);
  }

  inline ListPodSandboxResponse& operator=(const ListPodSandboxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPodSandboxResponse& operator=(ListPodSandboxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPodSandboxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPodSandboxResponse* internal_default_instance() {
    return reinterpret_cast<const ListPodSandboxResponse*>(
               &_ListPodSandboxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ListPodSandboxResponse& a, ListPodSandboxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPodSandboxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPodSandboxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPodSandboxResponse* New() const final {
    return CreateMaybeMessage<ListPodSandboxResponse>(nullptr);
  }

  ListPodSandboxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPodSandboxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPodSandboxResponse& from);
  void MergeFrom(const ListPodSandboxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPodSandboxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListPodSandboxResponse";
  }
  protected:
  explicit ListPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.PodSandbox items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::runtime::v1alpha2::PodSandbox* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodSandbox >*
      mutable_items();
  private:
  const ::runtime::v1alpha2::PodSandbox& _internal_items(int index) const;
  ::runtime::v1alpha2::PodSandbox* _internal_add_items();
  public:
  const ::runtime::v1alpha2::PodSandbox& items(int index) const;
  ::runtime::v1alpha2::PodSandbox* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodSandbox >&
      items() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListPodSandboxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodSandbox > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageSpec_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImageSpec_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImageSpec_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ImageSpec_AnnotationsEntry_DoNotUse();
  ImageSpec_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ImageSpec_AnnotationsEntry_DoNotUse& other);
  static const ImageSpec_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImageSpec_AnnotationsEntry_DoNotUse*>(&_ImageSpec_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ImageSpec.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ImageSpec.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[38];
  }

  public:
};

// -------------------------------------------------------------------

class ImageSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageSpec) */ {
 public:
  inline ImageSpec() : ImageSpec(nullptr) {};
  virtual ~ImageSpec();

  ImageSpec(const ImageSpec& from);
  ImageSpec(ImageSpec&& from) noexcept
    : ImageSpec() {
    *this = ::std::move(from);
  }

  inline ImageSpec& operator=(const ImageSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSpec& operator=(ImageSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSpec* internal_default_instance() {
    return reinterpret_cast<const ImageSpec*>(
               &_ImageSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ImageSpec& a, ImageSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSpec* New() const final {
    return CreateMaybeMessage<ImageSpec>(nullptr);
  }

  ImageSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSpec& from);
  void MergeFrom(const ImageSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageSpec";
  }
  protected:
  explicit ImageSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kImageFieldNumber = 1,
  };
  // map<string, string> annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string image = 1;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ImageSpec_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {};
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxContainerResources PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxContainerResources) */ {
 public:
  inline LinuxContainerResources() : LinuxContainerResources(nullptr) {};
  virtual ~LinuxContainerResources();

  LinuxContainerResources(const LinuxContainerResources& from);
  LinuxContainerResources(LinuxContainerResources&& from) noexcept
    : LinuxContainerResources() {
    *this = ::std::move(from);
  }

  inline LinuxContainerResources& operator=(const LinuxContainerResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxContainerResources& operator=(LinuxContainerResources&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxContainerResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxContainerResources* internal_default_instance() {
    return reinterpret_cast<const LinuxContainerResources*>(
               &_LinuxContainerResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LinuxContainerResources& a, LinuxContainerResources& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxContainerResources* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxContainerResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxContainerResources* New() const final {
    return CreateMaybeMessage<LinuxContainerResources>(nullptr);
  }

  LinuxContainerResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxContainerResources>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxContainerResources& from);
  void MergeFrom(const LinuxContainerResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxContainerResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxContainerResources";
  }
  protected:
  explicit LinuxContainerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHugepageLimitsFieldNumber = 8,
    kCpusetCpusFieldNumber = 6,
    kCpusetMemsFieldNumber = 7,
    kCpuPeriodFieldNumber = 1,
    kCpuQuotaFieldNumber = 2,
    kCpuSharesFieldNumber = 3,
    kMemoryLimitInBytesFieldNumber = 4,
    kOomScoreAdjFieldNumber = 5,
  };
  // repeated .runtime.v1alpha2.HugepageLimit hugepage_limits = 8;
  int hugepage_limits_size() const;
  private:
  int _internal_hugepage_limits_size() const;
  public:
  void clear_hugepage_limits();
  ::runtime::v1alpha2::HugepageLimit* mutable_hugepage_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::HugepageLimit >*
      mutable_hugepage_limits();
  private:
  const ::runtime::v1alpha2::HugepageLimit& _internal_hugepage_limits(int index) const;
  ::runtime::v1alpha2::HugepageLimit* _internal_add_hugepage_limits();
  public:
  const ::runtime::v1alpha2::HugepageLimit& hugepage_limits(int index) const;
  ::runtime::v1alpha2::HugepageLimit* add_hugepage_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::HugepageLimit >&
      hugepage_limits() const;

  // string cpuset_cpus = 6;
  void clear_cpuset_cpus();
  const std::string& cpuset_cpus() const;
  void set_cpuset_cpus(const std::string& value);
  void set_cpuset_cpus(std::string&& value);
  void set_cpuset_cpus(const char* value);
  void set_cpuset_cpus(const char* value, size_t size);
  std::string* mutable_cpuset_cpus();
  std::string* release_cpuset_cpus();
  void set_allocated_cpuset_cpus(std::string* cpuset_cpus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cpuset_cpus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cpuset_cpus(
      std::string* cpuset_cpus);
  private:
  const std::string& _internal_cpuset_cpus() const;
  void _internal_set_cpuset_cpus(const std::string& value);
  std::string* _internal_mutable_cpuset_cpus();
  public:

  // string cpuset_mems = 7;
  void clear_cpuset_mems();
  const std::string& cpuset_mems() const;
  void set_cpuset_mems(const std::string& value);
  void set_cpuset_mems(std::string&& value);
  void set_cpuset_mems(const char* value);
  void set_cpuset_mems(const char* value, size_t size);
  std::string* mutable_cpuset_mems();
  std::string* release_cpuset_mems();
  void set_allocated_cpuset_mems(std::string* cpuset_mems);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cpuset_mems();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cpuset_mems(
      std::string* cpuset_mems);
  private:
  const std::string& _internal_cpuset_mems() const;
  void _internal_set_cpuset_mems(const std::string& value);
  std::string* _internal_mutable_cpuset_mems();
  public:

  // int64 cpu_period = 1;
  void clear_cpu_period();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_period() const;
  void set_cpu_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_period() const;
  void _internal_set_cpu_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cpu_quota = 2;
  void clear_cpu_quota();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_quota() const;
  void set_cpu_quota(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_quota() const;
  void _internal_set_cpu_quota(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cpu_shares = 3;
  void clear_cpu_shares();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares() const;
  void set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_shares() const;
  void _internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 memory_limit_in_bytes = 4;
  void clear_memory_limit_in_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit_in_bytes() const;
  void set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_memory_limit_in_bytes() const;
  void _internal_set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 oom_score_adj = 5;
  void clear_oom_score_adj();
  ::PROTOBUF_NAMESPACE_ID::int64 oom_score_adj() const;
  void set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_oom_score_adj() const;
  void _internal_set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxContainerResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::HugepageLimit > hugepage_limits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuset_cpus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuset_mems_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_period_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_quota_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares_;
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit_in_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 oom_score_adj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class HugepageLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.HugepageLimit) */ {
 public:
  inline HugepageLimit() : HugepageLimit(nullptr) {};
  virtual ~HugepageLimit();

  HugepageLimit(const HugepageLimit& from);
  HugepageLimit(HugepageLimit&& from) noexcept
    : HugepageLimit() {
    *this = ::std::move(from);
  }

  inline HugepageLimit& operator=(const HugepageLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline HugepageLimit& operator=(HugepageLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HugepageLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HugepageLimit* internal_default_instance() {
    return reinterpret_cast<const HugepageLimit*>(
               &_HugepageLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(HugepageLimit& a, HugepageLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(HugepageLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HugepageLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HugepageLimit* New() const final {
    return CreateMaybeMessage<HugepageLimit>(nullptr);
  }

  HugepageLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HugepageLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HugepageLimit& from);
  void MergeFrom(const HugepageLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HugepageLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.HugepageLimit";
  }
  protected:
  explicit HugepageLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageSizeFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string page_size = 1;
  void clear_page_size();
  const std::string& page_size() const;
  void set_page_size(const std::string& value);
  void set_page_size(std::string&& value);
  void set_page_size(const char* value);
  void set_page_size(const char* value, size_t size);
  std::string* mutable_page_size();
  std::string* release_page_size();
  void set_allocated_page_size(std::string* page_size);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_size();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_size(
      std::string* page_size);
  private:
  const std::string& _internal_page_size() const;
  void _internal_set_page_size(const std::string& value);
  std::string* _internal_mutable_page_size();
  public:

  // uint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.HugepageLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SELinuxOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.SELinuxOption) */ {
 public:
  inline SELinuxOption() : SELinuxOption(nullptr) {};
  virtual ~SELinuxOption();

  SELinuxOption(const SELinuxOption& from);
  SELinuxOption(SELinuxOption&& from) noexcept
    : SELinuxOption() {
    *this = ::std::move(from);
  }

  inline SELinuxOption& operator=(const SELinuxOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline SELinuxOption& operator=(SELinuxOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SELinuxOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SELinuxOption* internal_default_instance() {
    return reinterpret_cast<const SELinuxOption*>(
               &_SELinuxOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SELinuxOption& a, SELinuxOption& b) {
    a.Swap(&b);
  }
  inline void Swap(SELinuxOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SELinuxOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SELinuxOption* New() const final {
    return CreateMaybeMessage<SELinuxOption>(nullptr);
  }

  SELinuxOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SELinuxOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SELinuxOption& from);
  void MergeFrom(const SELinuxOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SELinuxOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.SELinuxOption";
  }
  protected:
  explicit SELinuxOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kRoleFieldNumber = 2,
    kTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string role = 2;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_role();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role(
      std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string level = 4;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.SELinuxOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Capability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Capability) */ {
 public:
  inline Capability() : Capability(nullptr) {};
  virtual ~Capability();

  Capability(const Capability& from);
  Capability(Capability&& from) noexcept
    : Capability() {
    *this = ::std::move(from);
  }

  inline Capability& operator=(const Capability& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capability& operator=(Capability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Capability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capability* internal_default_instance() {
    return reinterpret_cast<const Capability*>(
               &_Capability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Capability& a, Capability& b) {
    a.Swap(&b);
  }
  inline void Swap(Capability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capability* New() const final {
    return CreateMaybeMessage<Capability>(nullptr);
  }

  Capability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Capability& from);
  void MergeFrom(const Capability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Capability";
  }
  protected:
  explicit Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddCapabilitiesFieldNumber = 1,
    kDropCapabilitiesFieldNumber = 2,
  };
  // repeated string add_capabilities = 1;
  int add_capabilities_size() const;
  private:
  int _internal_add_capabilities_size() const;
  public:
  void clear_add_capabilities();
  const std::string& add_capabilities(int index) const;
  std::string* mutable_add_capabilities(int index);
  void set_add_capabilities(int index, const std::string& value);
  void set_add_capabilities(int index, std::string&& value);
  void set_add_capabilities(int index, const char* value);
  void set_add_capabilities(int index, const char* value, size_t size);
  std::string* add_add_capabilities();
  void add_add_capabilities(const std::string& value);
  void add_add_capabilities(std::string&& value);
  void add_add_capabilities(const char* value);
  void add_add_capabilities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& add_capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_add_capabilities();
  private:
  const std::string& _internal_add_capabilities(int index) const;
  std::string* _internal_add_add_capabilities();
  public:

  // repeated string drop_capabilities = 2;
  int drop_capabilities_size() const;
  private:
  int _internal_drop_capabilities_size() const;
  public:
  void clear_drop_capabilities();
  const std::string& drop_capabilities(int index) const;
  std::string* mutable_drop_capabilities(int index);
  void set_drop_capabilities(int index, const std::string& value);
  void set_drop_capabilities(int index, std::string&& value);
  void set_drop_capabilities(int index, const char* value);
  void set_drop_capabilities(int index, const char* value, size_t size);
  std::string* add_drop_capabilities();
  void add_drop_capabilities(const std::string& value);
  void add_drop_capabilities(std::string&& value);
  void add_drop_capabilities(const char* value);
  void add_drop_capabilities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& drop_capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_drop_capabilities();
  private:
  const std::string& _internal_drop_capabilities(int index) const;
  std::string* _internal_add_drop_capabilities();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Capability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> add_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> drop_capabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxContainerSecurityContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxContainerSecurityContext) */ {
 public:
  inline LinuxContainerSecurityContext() : LinuxContainerSecurityContext(nullptr) {};
  virtual ~LinuxContainerSecurityContext();

  LinuxContainerSecurityContext(const LinuxContainerSecurityContext& from);
  LinuxContainerSecurityContext(LinuxContainerSecurityContext&& from) noexcept
    : LinuxContainerSecurityContext() {
    *this = ::std::move(from);
  }

  inline LinuxContainerSecurityContext& operator=(const LinuxContainerSecurityContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxContainerSecurityContext& operator=(LinuxContainerSecurityContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxContainerSecurityContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxContainerSecurityContext* internal_default_instance() {
    return reinterpret_cast<const LinuxContainerSecurityContext*>(
               &_LinuxContainerSecurityContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(LinuxContainerSecurityContext& a, LinuxContainerSecurityContext& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxContainerSecurityContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxContainerSecurityContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxContainerSecurityContext* New() const final {
    return CreateMaybeMessage<LinuxContainerSecurityContext>(nullptr);
  }

  LinuxContainerSecurityContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxContainerSecurityContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxContainerSecurityContext& from);
  void MergeFrom(const LinuxContainerSecurityContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxContainerSecurityContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxContainerSecurityContext";
  }
  protected:
  explicit LinuxContainerSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalGroupsFieldNumber = 8,
    kMaskedPathsFieldNumber = 13,
    kReadonlyPathsFieldNumber = 14,
    kRunAsUsernameFieldNumber = 6,
    kApparmorProfileFieldNumber = 9,
    kSeccompProfilePathFieldNumber = 10,
    kCapabilitiesFieldNumber = 1,
    kNamespaceOptionsFieldNumber = 3,
    kSelinuxOptionsFieldNumber = 4,
    kRunAsUserFieldNumber = 5,
    kRunAsGroupFieldNumber = 12,
    kPrivilegedFieldNumber = 2,
    kReadonlyRootfsFieldNumber = 7,
    kNoNewPrivsFieldNumber = 11,
  };
  // repeated int64 supplemental_groups = 8;
  int supplemental_groups_size() const;
  private:
  int _internal_supplemental_groups_size() const;
  public:
  void clear_supplemental_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_supplemental_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_supplemental_groups() const;
  void _internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_supplemental_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 supplemental_groups(int index) const;
  void set_supplemental_groups(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      supplemental_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_supplemental_groups();

  // repeated string masked_paths = 13;
  int masked_paths_size() const;
  private:
  int _internal_masked_paths_size() const;
  public:
  void clear_masked_paths();
  const std::string& masked_paths(int index) const;
  std::string* mutable_masked_paths(int index);
  void set_masked_paths(int index, const std::string& value);
  void set_masked_paths(int index, std::string&& value);
  void set_masked_paths(int index, const char* value);
  void set_masked_paths(int index, const char* value, size_t size);
  std::string* add_masked_paths();
  void add_masked_paths(const std::string& value);
  void add_masked_paths(std::string&& value);
  void add_masked_paths(const char* value);
  void add_masked_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& masked_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_masked_paths();
  private:
  const std::string& _internal_masked_paths(int index) const;
  std::string* _internal_add_masked_paths();
  public:

  // repeated string readonly_paths = 14;
  int readonly_paths_size() const;
  private:
  int _internal_readonly_paths_size() const;
  public:
  void clear_readonly_paths();
  const std::string& readonly_paths(int index) const;
  std::string* mutable_readonly_paths(int index);
  void set_readonly_paths(int index, const std::string& value);
  void set_readonly_paths(int index, std::string&& value);
  void set_readonly_paths(int index, const char* value);
  void set_readonly_paths(int index, const char* value, size_t size);
  std::string* add_readonly_paths();
  void add_readonly_paths(const std::string& value);
  void add_readonly_paths(std::string&& value);
  void add_readonly_paths(const char* value);
  void add_readonly_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& readonly_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_readonly_paths();
  private:
  const std::string& _internal_readonly_paths(int index) const;
  std::string* _internal_add_readonly_paths();
  public:

  // string run_as_username = 6;
  void clear_run_as_username();
  const std::string& run_as_username() const;
  void set_run_as_username(const std::string& value);
  void set_run_as_username(std::string&& value);
  void set_run_as_username(const char* value);
  void set_run_as_username(const char* value, size_t size);
  std::string* mutable_run_as_username();
  std::string* release_run_as_username();
  void set_allocated_run_as_username(std::string* run_as_username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_run_as_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_run_as_username(
      std::string* run_as_username);
  private:
  const std::string& _internal_run_as_username() const;
  void _internal_set_run_as_username(const std::string& value);
  std::string* _internal_mutable_run_as_username();
  public:

  // string apparmor_profile = 9;
  void clear_apparmor_profile();
  const std::string& apparmor_profile() const;
  void set_apparmor_profile(const std::string& value);
  void set_apparmor_profile(std::string&& value);
  void set_apparmor_profile(const char* value);
  void set_apparmor_profile(const char* value, size_t size);
  std::string* mutable_apparmor_profile();
  std::string* release_apparmor_profile();
  void set_allocated_apparmor_profile(std::string* apparmor_profile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_apparmor_profile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_apparmor_profile(
      std::string* apparmor_profile);
  private:
  const std::string& _internal_apparmor_profile() const;
  void _internal_set_apparmor_profile(const std::string& value);
  std::string* _internal_mutable_apparmor_profile();
  public:

  // string seccomp_profile_path = 10;
  void clear_seccomp_profile_path();
  const std::string& seccomp_profile_path() const;
  void set_seccomp_profile_path(const std::string& value);
  void set_seccomp_profile_path(std::string&& value);
  void set_seccomp_profile_path(const char* value);
  void set_seccomp_profile_path(const char* value, size_t size);
  std::string* mutable_seccomp_profile_path();
  std::string* release_seccomp_profile_path();
  void set_allocated_seccomp_profile_path(std::string* seccomp_profile_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seccomp_profile_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seccomp_profile_path(
      std::string* seccomp_profile_path);
  private:
  const std::string& _internal_seccomp_profile_path() const;
  void _internal_set_seccomp_profile_path(const std::string& value);
  std::string* _internal_mutable_seccomp_profile_path();
  public:

  // .runtime.v1alpha2.Capability capabilities = 1;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::runtime::v1alpha2::Capability& capabilities() const;
  ::runtime::v1alpha2::Capability* release_capabilities();
  ::runtime::v1alpha2::Capability* mutable_capabilities();
  void set_allocated_capabilities(::runtime::v1alpha2::Capability* capabilities);
  private:
  const ::runtime::v1alpha2::Capability& _internal_capabilities() const;
  ::runtime::v1alpha2::Capability* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::runtime::v1alpha2::Capability* capabilities);
  ::runtime::v1alpha2::Capability* unsafe_arena_release_capabilities();

  // .runtime.v1alpha2.NamespaceOption namespace_options = 3;
  bool has_namespace_options() const;
  private:
  bool _internal_has_namespace_options() const;
  public:
  void clear_namespace_options();
  const ::runtime::v1alpha2::NamespaceOption& namespace_options() const;
  ::runtime::v1alpha2::NamespaceOption* release_namespace_options();
  ::runtime::v1alpha2::NamespaceOption* mutable_namespace_options();
  void set_allocated_namespace_options(::runtime::v1alpha2::NamespaceOption* namespace_options);
  private:
  const ::runtime::v1alpha2::NamespaceOption& _internal_namespace_options() const;
  ::runtime::v1alpha2::NamespaceOption* _internal_mutable_namespace_options();
  public:
  void unsafe_arena_set_allocated_namespace_options(
      ::runtime::v1alpha2::NamespaceOption* namespace_options);
  ::runtime::v1alpha2::NamespaceOption* unsafe_arena_release_namespace_options();

  // .runtime.v1alpha2.SELinuxOption selinux_options = 4;
  bool has_selinux_options() const;
  private:
  bool _internal_has_selinux_options() const;
  public:
  void clear_selinux_options();
  const ::runtime::v1alpha2::SELinuxOption& selinux_options() const;
  ::runtime::v1alpha2::SELinuxOption* release_selinux_options();
  ::runtime::v1alpha2::SELinuxOption* mutable_selinux_options();
  void set_allocated_selinux_options(::runtime::v1alpha2::SELinuxOption* selinux_options);
  private:
  const ::runtime::v1alpha2::SELinuxOption& _internal_selinux_options() const;
  ::runtime::v1alpha2::SELinuxOption* _internal_mutable_selinux_options();
  public:
  void unsafe_arena_set_allocated_selinux_options(
      ::runtime::v1alpha2::SELinuxOption* selinux_options);
  ::runtime::v1alpha2::SELinuxOption* unsafe_arena_release_selinux_options();

  // .runtime.v1alpha2.Int64Value run_as_user = 5;
  bool has_run_as_user() const;
  private:
  bool _internal_has_run_as_user() const;
  public:
  void clear_run_as_user();
  const ::runtime::v1alpha2::Int64Value& run_as_user() const;
  ::runtime::v1alpha2::Int64Value* release_run_as_user();
  ::runtime::v1alpha2::Int64Value* mutable_run_as_user();
  void set_allocated_run_as_user(::runtime::v1alpha2::Int64Value* run_as_user);
  private:
  const ::runtime::v1alpha2::Int64Value& _internal_run_as_user() const;
  ::runtime::v1alpha2::Int64Value* _internal_mutable_run_as_user();
  public:
  void unsafe_arena_set_allocated_run_as_user(
      ::runtime::v1alpha2::Int64Value* run_as_user);
  ::runtime::v1alpha2::Int64Value* unsafe_arena_release_run_as_user();

  // .runtime.v1alpha2.Int64Value run_as_group = 12;
  bool has_run_as_group() const;
  private:
  bool _internal_has_run_as_group() const;
  public:
  void clear_run_as_group();
  const ::runtime::v1alpha2::Int64Value& run_as_group() const;
  ::runtime::v1alpha2::Int64Value* release_run_as_group();
  ::runtime::v1alpha2::Int64Value* mutable_run_as_group();
  void set_allocated_run_as_group(::runtime::v1alpha2::Int64Value* run_as_group);
  private:
  const ::runtime::v1alpha2::Int64Value& _internal_run_as_group() const;
  ::runtime::v1alpha2::Int64Value* _internal_mutable_run_as_group();
  public:
  void unsafe_arena_set_allocated_run_as_group(
      ::runtime::v1alpha2::Int64Value* run_as_group);
  ::runtime::v1alpha2::Int64Value* unsafe_arena_release_run_as_group();

  // bool privileged = 2;
  void clear_privileged();
  bool privileged() const;
  void set_privileged(bool value);
  private:
  bool _internal_privileged() const;
  void _internal_set_privileged(bool value);
  public:

  // bool readonly_rootfs = 7;
  void clear_readonly_rootfs();
  bool readonly_rootfs() const;
  void set_readonly_rootfs(bool value);
  private:
  bool _internal_readonly_rootfs() const;
  void _internal_set_readonly_rootfs(bool value);
  public:

  // bool no_new_privs = 11;
  void clear_no_new_privs();
  bool no_new_privs() const;
  void set_no_new_privs(bool value);
  private:
  bool _internal_no_new_privs() const;
  void _internal_set_no_new_privs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxContainerSecurityContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > supplemental_groups_;
  mutable std::atomic<int> _supplemental_groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> masked_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> readonly_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_as_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apparmor_profile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seccomp_profile_path_;
  ::runtime::v1alpha2::Capability* capabilities_;
  ::runtime::v1alpha2::NamespaceOption* namespace_options_;
  ::runtime::v1alpha2::SELinuxOption* selinux_options_;
  ::runtime::v1alpha2::Int64Value* run_as_user_;
  ::runtime::v1alpha2::Int64Value* run_as_group_;
  bool privileged_;
  bool readonly_rootfs_;
  bool no_new_privs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LinuxContainerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.LinuxContainerConfig) */ {
 public:
  inline LinuxContainerConfig() : LinuxContainerConfig(nullptr) {};
  virtual ~LinuxContainerConfig();

  LinuxContainerConfig(const LinuxContainerConfig& from);
  LinuxContainerConfig(LinuxContainerConfig&& from) noexcept
    : LinuxContainerConfig() {
    *this = ::std::move(from);
  }

  inline LinuxContainerConfig& operator=(const LinuxContainerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinuxContainerConfig& operator=(LinuxContainerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinuxContainerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxContainerConfig* internal_default_instance() {
    return reinterpret_cast<const LinuxContainerConfig*>(
               &_LinuxContainerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(LinuxContainerConfig& a, LinuxContainerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LinuxContainerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinuxContainerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinuxContainerConfig* New() const final {
    return CreateMaybeMessage<LinuxContainerConfig>(nullptr);
  }

  LinuxContainerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinuxContainerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinuxContainerConfig& from);
  void MergeFrom(const LinuxContainerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxContainerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.LinuxContainerConfig";
  }
  protected:
  explicit LinuxContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kSecurityContextFieldNumber = 2,
  };
  // .runtime.v1alpha2.LinuxContainerResources resources = 1;
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::runtime::v1alpha2::LinuxContainerResources& resources() const;
  ::runtime::v1alpha2::LinuxContainerResources* release_resources();
  ::runtime::v1alpha2::LinuxContainerResources* mutable_resources();
  void set_allocated_resources(::runtime::v1alpha2::LinuxContainerResources* resources);
  private:
  const ::runtime::v1alpha2::LinuxContainerResources& _internal_resources() const;
  ::runtime::v1alpha2::LinuxContainerResources* _internal_mutable_resources();
  public:
  void unsafe_arena_set_allocated_resources(
      ::runtime::v1alpha2::LinuxContainerResources* resources);
  ::runtime::v1alpha2::LinuxContainerResources* unsafe_arena_release_resources();

  // .runtime.v1alpha2.LinuxContainerSecurityContext security_context = 2;
  bool has_security_context() const;
  private:
  bool _internal_has_security_context() const;
  public:
  void clear_security_context();
  const ::runtime::v1alpha2::LinuxContainerSecurityContext& security_context() const;
  ::runtime::v1alpha2::LinuxContainerSecurityContext* release_security_context();
  ::runtime::v1alpha2::LinuxContainerSecurityContext* mutable_security_context();
  void set_allocated_security_context(::runtime::v1alpha2::LinuxContainerSecurityContext* security_context);
  private:
  const ::runtime::v1alpha2::LinuxContainerSecurityContext& _internal_security_context() const;
  ::runtime::v1alpha2::LinuxContainerSecurityContext* _internal_mutable_security_context();
  public:
  void unsafe_arena_set_allocated_security_context(
      ::runtime::v1alpha2::LinuxContainerSecurityContext* security_context);
  ::runtime::v1alpha2::LinuxContainerSecurityContext* unsafe_arena_release_security_context();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.LinuxContainerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::LinuxContainerResources* resources_;
  ::runtime::v1alpha2::LinuxContainerSecurityContext* security_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class WindowsContainerSecurityContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.WindowsContainerSecurityContext) */ {
 public:
  inline WindowsContainerSecurityContext() : WindowsContainerSecurityContext(nullptr) {};
  virtual ~WindowsContainerSecurityContext();

  WindowsContainerSecurityContext(const WindowsContainerSecurityContext& from);
  WindowsContainerSecurityContext(WindowsContainerSecurityContext&& from) noexcept
    : WindowsContainerSecurityContext() {
    *this = ::std::move(from);
  }

  inline WindowsContainerSecurityContext& operator=(const WindowsContainerSecurityContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowsContainerSecurityContext& operator=(WindowsContainerSecurityContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowsContainerSecurityContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowsContainerSecurityContext* internal_default_instance() {
    return reinterpret_cast<const WindowsContainerSecurityContext*>(
               &_WindowsContainerSecurityContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(WindowsContainerSecurityContext& a, WindowsContainerSecurityContext& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowsContainerSecurityContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowsContainerSecurityContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowsContainerSecurityContext* New() const final {
    return CreateMaybeMessage<WindowsContainerSecurityContext>(nullptr);
  }

  WindowsContainerSecurityContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowsContainerSecurityContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowsContainerSecurityContext& from);
  void MergeFrom(const WindowsContainerSecurityContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowsContainerSecurityContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.WindowsContainerSecurityContext";
  }
  protected:
  explicit WindowsContainerSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunAsUsernameFieldNumber = 1,
  };
  // string run_as_username = 1;
  void clear_run_as_username();
  const std::string& run_as_username() const;
  void set_run_as_username(const std::string& value);
  void set_run_as_username(std::string&& value);
  void set_run_as_username(const char* value);
  void set_run_as_username(const char* value, size_t size);
  std::string* mutable_run_as_username();
  std::string* release_run_as_username();
  void set_allocated_run_as_username(std::string* run_as_username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_run_as_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_run_as_username(
      std::string* run_as_username);
  private:
  const std::string& _internal_run_as_username() const;
  void _internal_set_run_as_username(const std::string& value);
  std::string* _internal_mutable_run_as_username();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.WindowsContainerSecurityContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_as_username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class WindowsContainerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.WindowsContainerConfig) */ {
 public:
  inline WindowsContainerConfig() : WindowsContainerConfig(nullptr) {};
  virtual ~WindowsContainerConfig();

  WindowsContainerConfig(const WindowsContainerConfig& from);
  WindowsContainerConfig(WindowsContainerConfig&& from) noexcept
    : WindowsContainerConfig() {
    *this = ::std::move(from);
  }

  inline WindowsContainerConfig& operator=(const WindowsContainerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowsContainerConfig& operator=(WindowsContainerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowsContainerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowsContainerConfig* internal_default_instance() {
    return reinterpret_cast<const WindowsContainerConfig*>(
               &_WindowsContainerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(WindowsContainerConfig& a, WindowsContainerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowsContainerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowsContainerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowsContainerConfig* New() const final {
    return CreateMaybeMessage<WindowsContainerConfig>(nullptr);
  }

  WindowsContainerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowsContainerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowsContainerConfig& from);
  void MergeFrom(const WindowsContainerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowsContainerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.WindowsContainerConfig";
  }
  protected:
  explicit WindowsContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kSecurityContextFieldNumber = 2,
  };
  // .runtime.v1alpha2.WindowsContainerResources resources = 1;
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::runtime::v1alpha2::WindowsContainerResources& resources() const;
  ::runtime::v1alpha2::WindowsContainerResources* release_resources();
  ::runtime::v1alpha2::WindowsContainerResources* mutable_resources();
  void set_allocated_resources(::runtime::v1alpha2::WindowsContainerResources* resources);
  private:
  const ::runtime::v1alpha2::WindowsContainerResources& _internal_resources() const;
  ::runtime::v1alpha2::WindowsContainerResources* _internal_mutable_resources();
  public:
  void unsafe_arena_set_allocated_resources(
      ::runtime::v1alpha2::WindowsContainerResources* resources);
  ::runtime::v1alpha2::WindowsContainerResources* unsafe_arena_release_resources();

  // .runtime.v1alpha2.WindowsContainerSecurityContext security_context = 2;
  bool has_security_context() const;
  private:
  bool _internal_has_security_context() const;
  public:
  void clear_security_context();
  const ::runtime::v1alpha2::WindowsContainerSecurityContext& security_context() const;
  ::runtime::v1alpha2::WindowsContainerSecurityContext* release_security_context();
  ::runtime::v1alpha2::WindowsContainerSecurityContext* mutable_security_context();
  void set_allocated_security_context(::runtime::v1alpha2::WindowsContainerSecurityContext* security_context);
  private:
  const ::runtime::v1alpha2::WindowsContainerSecurityContext& _internal_security_context() const;
  ::runtime::v1alpha2::WindowsContainerSecurityContext* _internal_mutable_security_context();
  public:
  void unsafe_arena_set_allocated_security_context(
      ::runtime::v1alpha2::WindowsContainerSecurityContext* security_context);
  ::runtime::v1alpha2::WindowsContainerSecurityContext* unsafe_arena_release_security_context();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.WindowsContainerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::WindowsContainerResources* resources_;
  ::runtime::v1alpha2::WindowsContainerSecurityContext* security_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class WindowsContainerResources PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.WindowsContainerResources) */ {
 public:
  inline WindowsContainerResources() : WindowsContainerResources(nullptr) {};
  virtual ~WindowsContainerResources();

  WindowsContainerResources(const WindowsContainerResources& from);
  WindowsContainerResources(WindowsContainerResources&& from) noexcept
    : WindowsContainerResources() {
    *this = ::std::move(from);
  }

  inline WindowsContainerResources& operator=(const WindowsContainerResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowsContainerResources& operator=(WindowsContainerResources&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowsContainerResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowsContainerResources* internal_default_instance() {
    return reinterpret_cast<const WindowsContainerResources*>(
               &_WindowsContainerResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(WindowsContainerResources& a, WindowsContainerResources& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowsContainerResources* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowsContainerResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowsContainerResources* New() const final {
    return CreateMaybeMessage<WindowsContainerResources>(nullptr);
  }

  WindowsContainerResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowsContainerResources>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowsContainerResources& from);
  void MergeFrom(const WindowsContainerResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowsContainerResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.WindowsContainerResources";
  }
  protected:
  explicit WindowsContainerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuSharesFieldNumber = 1,
    kCpuCountFieldNumber = 2,
    kCpuMaximumFieldNumber = 3,
    kMemoryLimitInBytesFieldNumber = 4,
  };
  // int64 cpu_shares = 1;
  void clear_cpu_shares();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares() const;
  void set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_shares() const;
  void _internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cpu_count = 2;
  void clear_cpu_count();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_count() const;
  void set_cpu_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_count() const;
  void _internal_set_cpu_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cpu_maximum = 3;
  void clear_cpu_maximum();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_maximum() const;
  void set_cpu_maximum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_maximum() const;
  void _internal_set_cpu_maximum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 memory_limit_in_bytes = 4;
  void clear_memory_limit_in_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit_in_bytes() const;
  void set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_memory_limit_in_bytes() const;
  void _internal_set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.WindowsContainerResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_shares_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_maximum_;
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit_in_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerMetadata) */ {
 public:
  inline ContainerMetadata() : ContainerMetadata(nullptr) {};
  virtual ~ContainerMetadata();

  ContainerMetadata(const ContainerMetadata& from);
  ContainerMetadata(ContainerMetadata&& from) noexcept
    : ContainerMetadata() {
    *this = ::std::move(from);
  }

  inline ContainerMetadata& operator=(const ContainerMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerMetadata& operator=(ContainerMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerMetadata* internal_default_instance() {
    return reinterpret_cast<const ContainerMetadata*>(
               &_ContainerMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ContainerMetadata& a, ContainerMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerMetadata* New() const final {
    return CreateMaybeMessage<ContainerMetadata>(nullptr);
  }

  ContainerMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerMetadata& from);
  void MergeFrom(const ContainerMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerMetadata";
  }
  protected:
  explicit ContainerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttemptFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 attempt = 2;
  void clear_attempt();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt() const;
  void set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attempt() const;
  void _internal_set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Device) */ {
 public:
  inline Device() : Device(nullptr) {};
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerPathFieldNumber = 1,
    kHostPathFieldNumber = 2,
    kPermissionsFieldNumber = 3,
  };
  // string container_path = 1;
  void clear_container_path();
  const std::string& container_path() const;
  void set_container_path(const std::string& value);
  void set_container_path(std::string&& value);
  void set_container_path(const char* value);
  void set_container_path(const char* value, size_t size);
  std::string* mutable_container_path();
  std::string* release_container_path();
  void set_allocated_container_path(std::string* container_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_path(
      std::string* container_path);
  private:
  const std::string& _internal_container_path() const;
  void _internal_set_container_path(const std::string& value);
  std::string* _internal_mutable_container_path();
  public:

  // string host_path = 2;
  void clear_host_path();
  const std::string& host_path() const;
  void set_host_path(const std::string& value);
  void set_host_path(std::string&& value);
  void set_host_path(const char* value);
  void set_host_path(const char* value, size_t size);
  std::string* mutable_host_path();
  std::string* release_host_path();
  void set_allocated_host_path(std::string* host_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host_path(
      std::string* host_path);
  private:
  const std::string& _internal_host_path() const;
  void _internal_set_host_path(const std::string& value);
  std::string* _internal_mutable_host_path();
  public:

  // string permissions = 3;
  void clear_permissions();
  const std::string& permissions() const;
  void set_permissions(const std::string& value);
  void set_permissions(std::string&& value);
  void set_permissions(const char* value);
  void set_permissions(const char* value, size_t size);
  std::string* mutable_permissions();
  std::string* release_permissions();
  void set_allocated_permissions(std::string* permissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_permissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_permissions(
      std::string* permissions);
  private:
  const std::string& _internal_permissions() const;
  void _internal_set_permissions(const std::string& value);
  std::string* _internal_mutable_permissions();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerConfig_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerConfig_LabelsEntry_DoNotUse();
  ContainerConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerConfig_LabelsEntry_DoNotUse& other);
  static const ContainerConfig_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerConfig_LabelsEntry_DoNotUse*>(&_ContainerConfig_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerConfig.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerConfig.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[52];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerConfig_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerConfig_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerConfig_AnnotationsEntry_DoNotUse();
  ContainerConfig_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerConfig_AnnotationsEntry_DoNotUse& other);
  static const ContainerConfig_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerConfig_AnnotationsEntry_DoNotUse*>(&_ContainerConfig_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerConfig.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerConfig.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[53];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerConfig) */ {
 public:
  inline ContainerConfig() : ContainerConfig(nullptr) {};
  virtual ~ContainerConfig();

  ContainerConfig(const ContainerConfig& from);
  ContainerConfig(ContainerConfig&& from) noexcept
    : ContainerConfig() {
    *this = ::std::move(from);
  }

  inline ContainerConfig& operator=(const ContainerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerConfig& operator=(ContainerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerConfig* internal_default_instance() {
    return reinterpret_cast<const ContainerConfig*>(
               &_ContainerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ContainerConfig& a, ContainerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerConfig* New() const final {
    return CreateMaybeMessage<ContainerConfig>(nullptr);
  }

  ContainerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerConfig& from);
  void MergeFrom(const ContainerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerConfig";
  }
  protected:
  explicit ContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kArgsFieldNumber = 4,
    kEnvsFieldNumber = 6,
    kMountsFieldNumber = 7,
    kDevicesFieldNumber = 8,
    kLabelsFieldNumber = 9,
    kAnnotationsFieldNumber = 10,
    kWorkingDirFieldNumber = 5,
    kLogPathFieldNumber = 11,
    kMetadataFieldNumber = 1,
    kImageFieldNumber = 2,
    kLinuxFieldNumber = 15,
    kWindowsFieldNumber = 16,
    kStdinFieldNumber = 12,
    kStdinOnceFieldNumber = 13,
    kTtyFieldNumber = 14,
  };
  // repeated string command = 3;
  int command_size() const;
  private:
  int _internal_command_size() const;
  public:
  void clear_command();
  const std::string& command(int index) const;
  std::string* mutable_command(int index);
  void set_command(int index, const std::string& value);
  void set_command(int index, std::string&& value);
  void set_command(int index, const char* value);
  void set_command(int index, const char* value, size_t size);
  std::string* add_command();
  void add_command(const std::string& value);
  void add_command(std::string&& value);
  void add_command(const char* value);
  void add_command(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command();
  private:
  const std::string& _internal_command(int index) const;
  std::string* _internal_add_command();
  public:

  // repeated string args = 4;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // repeated .runtime.v1alpha2.KeyValue envs = 6;
  int envs_size() const;
  private:
  int _internal_envs_size() const;
  public:
  void clear_envs();
  ::runtime::v1alpha2::KeyValue* mutable_envs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::KeyValue >*
      mutable_envs();
  private:
  const ::runtime::v1alpha2::KeyValue& _internal_envs(int index) const;
  ::runtime::v1alpha2::KeyValue* _internal_add_envs();
  public:
  const ::runtime::v1alpha2::KeyValue& envs(int index) const;
  ::runtime::v1alpha2::KeyValue* add_envs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::KeyValue >&
      envs() const;

  // repeated .runtime.v1alpha2.Mount mounts = 7;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::runtime::v1alpha2::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >*
      mutable_mounts();
  private:
  const ::runtime::v1alpha2::Mount& _internal_mounts(int index) const;
  ::runtime::v1alpha2::Mount* _internal_add_mounts();
  public:
  const ::runtime::v1alpha2::Mount& mounts(int index) const;
  ::runtime::v1alpha2::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >&
      mounts() const;

  // repeated .runtime.v1alpha2.Device devices = 8;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::runtime::v1alpha2::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Device >*
      mutable_devices();
  private:
  const ::runtime::v1alpha2::Device& _internal_devices(int index) const;
  ::runtime::v1alpha2::Device* _internal_add_devices();
  public:
  const ::runtime::v1alpha2::Device& devices(int index) const;
  ::runtime::v1alpha2::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Device >&
      devices() const;

  // map<string, string> labels = 9;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 10;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string working_dir = 5;
  void clear_working_dir();
  const std::string& working_dir() const;
  void set_working_dir(const std::string& value);
  void set_working_dir(std::string&& value);
  void set_working_dir(const char* value);
  void set_working_dir(const char* value, size_t size);
  std::string* mutable_working_dir();
  std::string* release_working_dir();
  void set_allocated_working_dir(std::string* working_dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_working_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_working_dir(
      std::string* working_dir);
  private:
  const std::string& _internal_working_dir() const;
  void _internal_set_working_dir(const std::string& value);
  std::string* _internal_mutable_working_dir();
  public:

  // string log_path = 11;
  void clear_log_path();
  const std::string& log_path() const;
  void set_log_path(const std::string& value);
  void set_log_path(std::string&& value);
  void set_log_path(const char* value);
  void set_log_path(const char* value, size_t size);
  std::string* mutable_log_path();
  std::string* release_log_path();
  void set_allocated_log_path(std::string* log_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_path(
      std::string* log_path);
  private:
  const std::string& _internal_log_path() const;
  void _internal_set_log_path(const std::string& value);
  std::string* _internal_mutable_log_path();
  public:

  // .runtime.v1alpha2.ContainerMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::ContainerMetadata& metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* release_metadata();
  ::runtime::v1alpha2::ContainerMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata);
  private:
  const ::runtime::v1alpha2::ContainerMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::ContainerMetadata* metadata);
  ::runtime::v1alpha2::ContainerMetadata* unsafe_arena_release_metadata();

  // .runtime.v1alpha2.ImageSpec image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // .runtime.v1alpha2.LinuxContainerConfig linux = 15;
  bool has_linux() const;
  private:
  bool _internal_has_linux() const;
  public:
  void clear_linux();
  const ::runtime::v1alpha2::LinuxContainerConfig& linux() const;
  ::runtime::v1alpha2::LinuxContainerConfig* release_linux();
  ::runtime::v1alpha2::LinuxContainerConfig* mutable_linux();
  void set_allocated_linux(::runtime::v1alpha2::LinuxContainerConfig* linux);
  private:
  const ::runtime::v1alpha2::LinuxContainerConfig& _internal_linux() const;
  ::runtime::v1alpha2::LinuxContainerConfig* _internal_mutable_linux();
  public:
  void unsafe_arena_set_allocated_linux(
      ::runtime::v1alpha2::LinuxContainerConfig* linux);
  ::runtime::v1alpha2::LinuxContainerConfig* unsafe_arena_release_linux();

  // .runtime.v1alpha2.WindowsContainerConfig windows = 16;
  bool has_windows() const;
  private:
  bool _internal_has_windows() const;
  public:
  void clear_windows();
  const ::runtime::v1alpha2::WindowsContainerConfig& windows() const;
  ::runtime::v1alpha2::WindowsContainerConfig* release_windows();
  ::runtime::v1alpha2::WindowsContainerConfig* mutable_windows();
  void set_allocated_windows(::runtime::v1alpha2::WindowsContainerConfig* windows);
  private:
  const ::runtime::v1alpha2::WindowsContainerConfig& _internal_windows() const;
  ::runtime::v1alpha2::WindowsContainerConfig* _internal_mutable_windows();
  public:
  void unsafe_arena_set_allocated_windows(
      ::runtime::v1alpha2::WindowsContainerConfig* windows);
  ::runtime::v1alpha2::WindowsContainerConfig* unsafe_arena_release_windows();

  // bool stdin = 12;
  void clear_stdin();
  bool stdin() const;
  void set_stdin(bool value);
  private:
  bool _internal_stdin() const;
  void _internal_set_stdin(bool value);
  public:

  // bool stdin_once = 13;
  void clear_stdin_once();
  bool stdin_once() const;
  void set_stdin_once(bool value);
  private:
  bool _internal_stdin_once() const;
  void _internal_set_stdin_once(bool value);
  public:

  // bool tty = 14;
  void clear_tty();
  bool tty() const;
  void set_tty(bool value);
  private:
  bool _internal_tty() const;
  void _internal_set_tty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::KeyValue > envs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount > mounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerConfig_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerConfig_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_path_;
  ::runtime::v1alpha2::ContainerMetadata* metadata_;
  ::runtime::v1alpha2::ImageSpec* image_;
  ::runtime::v1alpha2::LinuxContainerConfig* linux_;
  ::runtime::v1alpha2::WindowsContainerConfig* windows_;
  bool stdin_;
  bool stdin_once_;
  bool tty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CreateContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.CreateContainerRequest) */ {
 public:
  inline CreateContainerRequest() : CreateContainerRequest(nullptr) {};
  virtual ~CreateContainerRequest();

  CreateContainerRequest(const CreateContainerRequest& from);
  CreateContainerRequest(CreateContainerRequest&& from) noexcept
    : CreateContainerRequest() {
    *this = ::std::move(from);
  }

  inline CreateContainerRequest& operator=(const CreateContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateContainerRequest& operator=(CreateContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateContainerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateContainerRequest*>(
               &_CreateContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CreateContainerRequest& a, CreateContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateContainerRequest* New() const final {
    return CreateMaybeMessage<CreateContainerRequest>(nullptr);
  }

  CreateContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateContainerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateContainerRequest& from);
  void MergeFrom(const CreateContainerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.CreateContainerRequest";
  }
  protected:
  explicit CreateContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodSandboxIdFieldNumber = 1,
    kConfigFieldNumber = 2,
    kSandboxConfigFieldNumber = 3,
  };
  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // .runtime.v1alpha2.ContainerConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::runtime::v1alpha2::ContainerConfig& config() const;
  ::runtime::v1alpha2::ContainerConfig* release_config();
  ::runtime::v1alpha2::ContainerConfig* mutable_config();
  void set_allocated_config(::runtime::v1alpha2::ContainerConfig* config);
  private:
  const ::runtime::v1alpha2::ContainerConfig& _internal_config() const;
  ::runtime::v1alpha2::ContainerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::runtime::v1alpha2::ContainerConfig* config);
  ::runtime::v1alpha2::ContainerConfig* unsafe_arena_release_config();

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  bool has_sandbox_config() const;
  private:
  bool _internal_has_sandbox_config() const;
  public:
  void clear_sandbox_config();
  const ::runtime::v1alpha2::PodSandboxConfig& sandbox_config() const;
  ::runtime::v1alpha2::PodSandboxConfig* release_sandbox_config();
  ::runtime::v1alpha2::PodSandboxConfig* mutable_sandbox_config();
  void set_allocated_sandbox_config(::runtime::v1alpha2::PodSandboxConfig* sandbox_config);
  private:
  const ::runtime::v1alpha2::PodSandboxConfig& _internal_sandbox_config() const;
  ::runtime::v1alpha2::PodSandboxConfig* _internal_mutable_sandbox_config();
  public:
  void unsafe_arena_set_allocated_sandbox_config(
      ::runtime::v1alpha2::PodSandboxConfig* sandbox_config);
  ::runtime::v1alpha2::PodSandboxConfig* unsafe_arena_release_sandbox_config();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.CreateContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  ::runtime::v1alpha2::ContainerConfig* config_;
  ::runtime::v1alpha2::PodSandboxConfig* sandbox_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CreateContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.CreateContainerResponse) */ {
 public:
  inline CreateContainerResponse() : CreateContainerResponse(nullptr) {};
  virtual ~CreateContainerResponse();

  CreateContainerResponse(const CreateContainerResponse& from);
  CreateContainerResponse(CreateContainerResponse&& from) noexcept
    : CreateContainerResponse() {
    *this = ::std::move(from);
  }

  inline CreateContainerResponse& operator=(const CreateContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateContainerResponse& operator=(CreateContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateContainerResponse* internal_default_instance() {
    return reinterpret_cast<const CreateContainerResponse*>(
               &_CreateContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CreateContainerResponse& a, CreateContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateContainerResponse* New() const final {
    return CreateMaybeMessage<CreateContainerResponse>(nullptr);
  }

  CreateContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateContainerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateContainerResponse& from);
  void MergeFrom(const CreateContainerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.CreateContainerResponse";
  }
  protected:
  explicit CreateContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.CreateContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StartContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StartContainerRequest) */ {
 public:
  inline StartContainerRequest() : StartContainerRequest(nullptr) {};
  virtual ~StartContainerRequest();

  StartContainerRequest(const StartContainerRequest& from);
  StartContainerRequest(StartContainerRequest&& from) noexcept
    : StartContainerRequest() {
    *this = ::std::move(from);
  }

  inline StartContainerRequest& operator=(const StartContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartContainerRequest& operator=(StartContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartContainerRequest* internal_default_instance() {
    return reinterpret_cast<const StartContainerRequest*>(
               &_StartContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(StartContainerRequest& a, StartContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartContainerRequest* New() const final {
    return CreateMaybeMessage<StartContainerRequest>(nullptr);
  }

  StartContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartContainerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartContainerRequest& from);
  void MergeFrom(const StartContainerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StartContainerRequest";
  }
  protected:
  explicit StartContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StartContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StartContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StartContainerResponse) */ {
 public:
  inline StartContainerResponse() : StartContainerResponse(nullptr) {};
  virtual ~StartContainerResponse();

  StartContainerResponse(const StartContainerResponse& from);
  StartContainerResponse(StartContainerResponse&& from) noexcept
    : StartContainerResponse() {
    *this = ::std::move(from);
  }

  inline StartContainerResponse& operator=(const StartContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartContainerResponse& operator=(StartContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartContainerResponse* internal_default_instance() {
    return reinterpret_cast<const StartContainerResponse*>(
               &_StartContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(StartContainerResponse& a, StartContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartContainerResponse* New() const final {
    return CreateMaybeMessage<StartContainerResponse>(nullptr);
  }

  StartContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartContainerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartContainerResponse& from);
  void MergeFrom(const StartContainerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StartContainerResponse";
  }
  protected:
  explicit StartContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StartContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StopContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StopContainerRequest) */ {
 public:
  inline StopContainerRequest() : StopContainerRequest(nullptr) {};
  virtual ~StopContainerRequest();

  StopContainerRequest(const StopContainerRequest& from);
  StopContainerRequest(StopContainerRequest&& from) noexcept
    : StopContainerRequest() {
    *this = ::std::move(from);
  }

  inline StopContainerRequest& operator=(const StopContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopContainerRequest& operator=(StopContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopContainerRequest* internal_default_instance() {
    return reinterpret_cast<const StopContainerRequest*>(
               &_StopContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(StopContainerRequest& a, StopContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopContainerRequest* New() const final {
    return CreateMaybeMessage<StopContainerRequest>(nullptr);
  }

  StopContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopContainerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopContainerRequest& from);
  void MergeFrom(const StopContainerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StopContainerRequest";
  }
  protected:
  explicit StopContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // int64 timeout = 2;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StopContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StopContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StopContainerResponse) */ {
 public:
  inline StopContainerResponse() : StopContainerResponse(nullptr) {};
  virtual ~StopContainerResponse();

  StopContainerResponse(const StopContainerResponse& from);
  StopContainerResponse(StopContainerResponse&& from) noexcept
    : StopContainerResponse() {
    *this = ::std::move(from);
  }

  inline StopContainerResponse& operator=(const StopContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopContainerResponse& operator=(StopContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopContainerResponse* internal_default_instance() {
    return reinterpret_cast<const StopContainerResponse*>(
               &_StopContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(StopContainerResponse& a, StopContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopContainerResponse* New() const final {
    return CreateMaybeMessage<StopContainerResponse>(nullptr);
  }

  StopContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopContainerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopContainerResponse& from);
  void MergeFrom(const StopContainerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StopContainerResponse";
  }
  protected:
  explicit StopContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StopContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemoveContainerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemoveContainerRequest) */ {
 public:
  inline RemoveContainerRequest() : RemoveContainerRequest(nullptr) {};
  virtual ~RemoveContainerRequest();

  RemoveContainerRequest(const RemoveContainerRequest& from);
  RemoveContainerRequest(RemoveContainerRequest&& from) noexcept
    : RemoveContainerRequest() {
    *this = ::std::move(from);
  }

  inline RemoveContainerRequest& operator=(const RemoveContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveContainerRequest& operator=(RemoveContainerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveContainerRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveContainerRequest*>(
               &_RemoveContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RemoveContainerRequest& a, RemoveContainerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveContainerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveContainerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveContainerRequest* New() const final {
    return CreateMaybeMessage<RemoveContainerRequest>(nullptr);
  }

  RemoveContainerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveContainerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveContainerRequest& from);
  void MergeFrom(const RemoveContainerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveContainerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemoveContainerRequest";
  }
  protected:
  explicit RemoveContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemoveContainerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemoveContainerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemoveContainerResponse) */ {
 public:
  inline RemoveContainerResponse() : RemoveContainerResponse(nullptr) {};
  virtual ~RemoveContainerResponse();

  RemoveContainerResponse(const RemoveContainerResponse& from);
  RemoveContainerResponse(RemoveContainerResponse&& from) noexcept
    : RemoveContainerResponse() {
    *this = ::std::move(from);
  }

  inline RemoveContainerResponse& operator=(const RemoveContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveContainerResponse& operator=(RemoveContainerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveContainerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveContainerResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveContainerResponse*>(
               &_RemoveContainerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RemoveContainerResponse& a, RemoveContainerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveContainerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveContainerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveContainerResponse* New() const final {
    return CreateMaybeMessage<RemoveContainerResponse>(nullptr);
  }

  RemoveContainerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveContainerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveContainerResponse& from);
  void MergeFrom(const RemoveContainerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveContainerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemoveContainerResponse";
  }
  protected:
  explicit RemoveContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemoveContainerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStateValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStateValue) */ {
 public:
  inline ContainerStateValue() : ContainerStateValue(nullptr) {};
  virtual ~ContainerStateValue();

  ContainerStateValue(const ContainerStateValue& from);
  ContainerStateValue(ContainerStateValue&& from) noexcept
    : ContainerStateValue() {
    *this = ::std::move(from);
  }

  inline ContainerStateValue& operator=(const ContainerStateValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStateValue& operator=(ContainerStateValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStateValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStateValue* internal_default_instance() {
    return reinterpret_cast<const ContainerStateValue*>(
               &_ContainerStateValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ContainerStateValue& a, ContainerStateValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStateValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStateValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStateValue* New() const final {
    return CreateMaybeMessage<ContainerStateValue>(nullptr);
  }

  ContainerStateValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStateValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStateValue& from);
  void MergeFrom(const ContainerStateValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStateValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStateValue";
  }
  protected:
  explicit ContainerStateValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .runtime.v1alpha2.ContainerState state = 1;
  void clear_state();
  ::runtime::v1alpha2::ContainerState state() const;
  void set_state(::runtime::v1alpha2::ContainerState value);
  private:
  ::runtime::v1alpha2::ContainerState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::ContainerState value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStateValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerFilter_LabelSelectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerFilter_LabelSelectorEntry_DoNotUse();
  ContainerFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerFilter_LabelSelectorEntry_DoNotUse& other);
  static const ContainerFilter_LabelSelectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerFilter_LabelSelectorEntry_DoNotUse*>(&_ContainerFilter_LabelSelectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerFilter.LabelSelectorEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerFilter.LabelSelectorEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[64];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerFilter) */ {
 public:
  inline ContainerFilter() : ContainerFilter(nullptr) {};
  virtual ~ContainerFilter();

  ContainerFilter(const ContainerFilter& from);
  ContainerFilter(ContainerFilter&& from) noexcept
    : ContainerFilter() {
    *this = ::std::move(from);
  }

  inline ContainerFilter& operator=(const ContainerFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerFilter& operator=(ContainerFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerFilter* internal_default_instance() {
    return reinterpret_cast<const ContainerFilter*>(
               &_ContainerFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ContainerFilter& a, ContainerFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerFilter* New() const final {
    return CreateMaybeMessage<ContainerFilter>(nullptr);
  }

  ContainerFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerFilter& from);
  void MergeFrom(const ContainerFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerFilter";
  }
  protected:
  explicit ContainerFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelSelectorFieldNumber = 4,
    kIdFieldNumber = 1,
    kPodSandboxIdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // map<string, string> label_selector = 4;
  int label_selector_size() const;
  private:
  int _internal_label_selector_size() const;
  public:
  void clear_label_selector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_label_selector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_label_selector();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pod_sandbox_id = 3;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // .runtime.v1alpha2.ContainerStateValue state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::runtime::v1alpha2::ContainerStateValue& state() const;
  ::runtime::v1alpha2::ContainerStateValue* release_state();
  ::runtime::v1alpha2::ContainerStateValue* mutable_state();
  void set_allocated_state(::runtime::v1alpha2::ContainerStateValue* state);
  private:
  const ::runtime::v1alpha2::ContainerStateValue& _internal_state() const;
  ::runtime::v1alpha2::ContainerStateValue* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::runtime::v1alpha2::ContainerStateValue* state);
  ::runtime::v1alpha2::ContainerStateValue* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerFilter_LabelSelectorEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > label_selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  ::runtime::v1alpha2::ContainerStateValue* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListContainersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListContainersRequest) */ {
 public:
  inline ListContainersRequest() : ListContainersRequest(nullptr) {};
  virtual ~ListContainersRequest();

  ListContainersRequest(const ListContainersRequest& from);
  ListContainersRequest(ListContainersRequest&& from) noexcept
    : ListContainersRequest() {
    *this = ::std::move(from);
  }

  inline ListContainersRequest& operator=(const ListContainersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContainersRequest& operator=(ListContainersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListContainersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListContainersRequest* internal_default_instance() {
    return reinterpret_cast<const ListContainersRequest*>(
               &_ListContainersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ListContainersRequest& a, ListContainersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListContainersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListContainersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListContainersRequest* New() const final {
    return CreateMaybeMessage<ListContainersRequest>(nullptr);
  }

  ListContainersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListContainersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListContainersRequest& from);
  void MergeFrom(const ListContainersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContainersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListContainersRequest";
  }
  protected:
  explicit ListContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .runtime.v1alpha2.ContainerFilter filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::runtime::v1alpha2::ContainerFilter& filter() const;
  ::runtime::v1alpha2::ContainerFilter* release_filter();
  ::runtime::v1alpha2::ContainerFilter* mutable_filter();
  void set_allocated_filter(::runtime::v1alpha2::ContainerFilter* filter);
  private:
  const ::runtime::v1alpha2::ContainerFilter& _internal_filter() const;
  ::runtime::v1alpha2::ContainerFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::runtime::v1alpha2::ContainerFilter* filter);
  ::runtime::v1alpha2::ContainerFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListContainersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ContainerFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Container_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Container_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Container_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Container_LabelsEntry_DoNotUse();
  Container_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Container_LabelsEntry_DoNotUse& other);
  static const Container_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Container_LabelsEntry_DoNotUse*>(&_Container_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.Container.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.Container.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[67];
  }

  public:
};

// -------------------------------------------------------------------

class Container_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Container_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Container_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Container_AnnotationsEntry_DoNotUse();
  Container_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Container_AnnotationsEntry_DoNotUse& other);
  static const Container_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Container_AnnotationsEntry_DoNotUse*>(&_Container_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.Container.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.Container.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[68];
  }

  public:
};

// -------------------------------------------------------------------

class Container PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Container) */ {
 public:
  inline Container() : Container(nullptr) {};
  virtual ~Container();

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Container& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Container* New() const final {
    return CreateMaybeMessage<Container>(nullptr);
  }

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Container& from);
  void MergeFrom(const Container& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 8,
    kAnnotationsFieldNumber = 9,
    kIdFieldNumber = 1,
    kPodSandboxIdFieldNumber = 2,
    kImageRefFieldNumber = 5,
    kMetadataFieldNumber = 3,
    kImageFieldNumber = 4,
    kCreatedAtFieldNumber = 7,
    kStateFieldNumber = 6,
  };
  // map<string, string> labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 9;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pod_sandbox_id = 2;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // string image_ref = 5;
  void clear_image_ref();
  const std::string& image_ref() const;
  void set_image_ref(const std::string& value);
  void set_image_ref(std::string&& value);
  void set_image_ref(const char* value);
  void set_image_ref(const char* value, size_t size);
  std::string* mutable_image_ref();
  std::string* release_image_ref();
  void set_allocated_image_ref(std::string* image_ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_ref(
      std::string* image_ref);
  private:
  const std::string& _internal_image_ref() const;
  void _internal_set_image_ref(const std::string& value);
  std::string* _internal_mutable_image_ref();
  public:

  // .runtime.v1alpha2.ContainerMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::ContainerMetadata& metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* release_metadata();
  ::runtime::v1alpha2::ContainerMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata);
  private:
  const ::runtime::v1alpha2::ContainerMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::ContainerMetadata* metadata);
  ::runtime::v1alpha2::ContainerMetadata* unsafe_arena_release_metadata();

  // .runtime.v1alpha2.ImageSpec image = 4;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // int64 created_at = 7;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .runtime.v1alpha2.ContainerState state = 6;
  void clear_state();
  ::runtime::v1alpha2::ContainerState state() const;
  void set_state(::runtime::v1alpha2::ContainerState value);
  private:
  ::runtime::v1alpha2::ContainerState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::ContainerState value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Container_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Container_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_ref_;
  ::runtime::v1alpha2::ContainerMetadata* metadata_;
  ::runtime::v1alpha2::ImageSpec* image_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListContainersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListContainersResponse) */ {
 public:
  inline ListContainersResponse() : ListContainersResponse(nullptr) {};
  virtual ~ListContainersResponse();

  ListContainersResponse(const ListContainersResponse& from);
  ListContainersResponse(ListContainersResponse&& from) noexcept
    : ListContainersResponse() {
    *this = ::std::move(from);
  }

  inline ListContainersResponse& operator=(const ListContainersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContainersResponse& operator=(ListContainersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListContainersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListContainersResponse* internal_default_instance() {
    return reinterpret_cast<const ListContainersResponse*>(
               &_ListContainersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ListContainersResponse& a, ListContainersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListContainersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListContainersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListContainersResponse* New() const final {
    return CreateMaybeMessage<ListContainersResponse>(nullptr);
  }

  ListContainersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListContainersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListContainersResponse& from);
  void MergeFrom(const ListContainersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContainersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListContainersResponse";
  }
  protected:
  explicit ListContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.Container containers = 1;
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::runtime::v1alpha2::Container* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Container >*
      mutable_containers();
  private:
  const ::runtime::v1alpha2::Container& _internal_containers(int index) const;
  ::runtime::v1alpha2::Container* _internal_add_containers();
  public:
  const ::runtime::v1alpha2::Container& containers(int index) const;
  ::runtime::v1alpha2::Container* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Container >&
      containers() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListContainersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Container > containers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatusRequest) */ {
 public:
  inline ContainerStatusRequest() : ContainerStatusRequest(nullptr) {};
  virtual ~ContainerStatusRequest();

  ContainerStatusRequest(const ContainerStatusRequest& from);
  ContainerStatusRequest(ContainerStatusRequest&& from) noexcept
    : ContainerStatusRequest() {
    *this = ::std::move(from);
  }

  inline ContainerStatusRequest& operator=(const ContainerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatusRequest& operator=(ContainerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ContainerStatusRequest*>(
               &_ContainerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ContainerStatusRequest& a, ContainerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatusRequest* New() const final {
    return CreateMaybeMessage<ContainerStatusRequest>(nullptr);
  }

  ContainerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatusRequest& from);
  void MergeFrom(const ContainerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatusRequest";
  }
  protected:
  explicit ContainerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kVerboseFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // bool verbose = 2;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatus_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatus_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatus_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerStatus_LabelsEntry_DoNotUse();
  ContainerStatus_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerStatus_LabelsEntry_DoNotUse& other);
  static const ContainerStatus_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerStatus_LabelsEntry_DoNotUse*>(&_ContainerStatus_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatus.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatus.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[72];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerStatus_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatus_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatus_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerStatus_AnnotationsEntry_DoNotUse();
  ContainerStatus_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerStatus_AnnotationsEntry_DoNotUse& other);
  static const ContainerStatus_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerStatus_AnnotationsEntry_DoNotUse*>(&_ContainerStatus_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatus.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatus.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[73];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatus) */ {
 public:
  inline ContainerStatus() : ContainerStatus(nullptr) {};
  virtual ~ContainerStatus();

  ContainerStatus(const ContainerStatus& from);
  ContainerStatus(ContainerStatus&& from) noexcept
    : ContainerStatus() {
    *this = ::std::move(from);
  }

  inline ContainerStatus& operator=(const ContainerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatus& operator=(ContainerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatus* internal_default_instance() {
    return reinterpret_cast<const ContainerStatus*>(
               &_ContainerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ContainerStatus& a, ContainerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatus* New() const final {
    return CreateMaybeMessage<ContainerStatus>(nullptr);
  }

  ContainerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatus& from);
  void MergeFrom(const ContainerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatus";
  }
  protected:
  explicit ContainerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 12,
    kAnnotationsFieldNumber = 13,
    kMountsFieldNumber = 14,
    kIdFieldNumber = 1,
    kImageRefFieldNumber = 9,
    kReasonFieldNumber = 10,
    kMessageFieldNumber = 11,
    kLogPathFieldNumber = 15,
    kMetadataFieldNumber = 2,
    kImageFieldNumber = 8,
    kCreatedAtFieldNumber = 4,
    kStartedAtFieldNumber = 5,
    kStateFieldNumber = 3,
    kExitCodeFieldNumber = 7,
    kFinishedAtFieldNumber = 6,
  };
  // map<string, string> labels = 12;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 13;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // repeated .runtime.v1alpha2.Mount mounts = 14;
  int mounts_size() const;
  private:
  int _internal_mounts_size() const;
  public:
  void clear_mounts();
  ::runtime::v1alpha2::Mount* mutable_mounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >*
      mutable_mounts();
  private:
  const ::runtime::v1alpha2::Mount& _internal_mounts(int index) const;
  ::runtime::v1alpha2::Mount* _internal_add_mounts();
  public:
  const ::runtime::v1alpha2::Mount& mounts(int index) const;
  ::runtime::v1alpha2::Mount* add_mounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >&
      mounts() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string image_ref = 9;
  void clear_image_ref();
  const std::string& image_ref() const;
  void set_image_ref(const std::string& value);
  void set_image_ref(std::string&& value);
  void set_image_ref(const char* value);
  void set_image_ref(const char* value, size_t size);
  std::string* mutable_image_ref();
  std::string* release_image_ref();
  void set_allocated_image_ref(std::string* image_ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_ref(
      std::string* image_ref);
  private:
  const std::string& _internal_image_ref() const;
  void _internal_set_image_ref(const std::string& value);
  std::string* _internal_mutable_image_ref();
  public:

  // string reason = 10;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string message = 11;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string log_path = 15;
  void clear_log_path();
  const std::string& log_path() const;
  void set_log_path(const std::string& value);
  void set_log_path(std::string&& value);
  void set_log_path(const char* value);
  void set_log_path(const char* value, size_t size);
  std::string* mutable_log_path();
  std::string* release_log_path();
  void set_allocated_log_path(std::string* log_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_path(
      std::string* log_path);
  private:
  const std::string& _internal_log_path() const;
  void _internal_set_log_path(const std::string& value);
  std::string* _internal_mutable_log_path();
  public:

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::ContainerMetadata& metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* release_metadata();
  ::runtime::v1alpha2::ContainerMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata);
  private:
  const ::runtime::v1alpha2::ContainerMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::ContainerMetadata* metadata);
  ::runtime::v1alpha2::ContainerMetadata* unsafe_arena_release_metadata();

  // .runtime.v1alpha2.ImageSpec image = 8;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // int64 created_at = 4;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 started_at = 5;
  void clear_started_at();
  ::PROTOBUF_NAMESPACE_ID::int64 started_at() const;
  void set_started_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_started_at() const;
  void _internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .runtime.v1alpha2.ContainerState state = 3;
  void clear_state();
  ::runtime::v1alpha2::ContainerState state() const;
  void set_state(::runtime::v1alpha2::ContainerState value);
  private:
  ::runtime::v1alpha2::ContainerState _internal_state() const;
  void _internal_set_state(::runtime::v1alpha2::ContainerState value);
  public:

  // int32 exit_code = 7;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 finished_at = 6;
  void clear_finished_at();
  ::PROTOBUF_NAMESPACE_ID::int64 finished_at() const;
  void set_finished_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finished_at() const;
  void _internal_set_finished_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerStatus_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerStatus_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount > mounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_path_;
  ::runtime::v1alpha2::ContainerMetadata* metadata_;
  ::runtime::v1alpha2::ImageSpec* image_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 started_at_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 finished_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatusResponse_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerStatusResponse_InfoEntry_DoNotUse();
  ContainerStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerStatusResponse_InfoEntry_DoNotUse& other);
  static const ContainerStatusResponse_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerStatusResponse_InfoEntry_DoNotUse*>(&_ContainerStatusResponse_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatusResponse.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatusResponse.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[75];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatusResponse) */ {
 public:
  inline ContainerStatusResponse() : ContainerStatusResponse(nullptr) {};
  virtual ~ContainerStatusResponse();

  ContainerStatusResponse(const ContainerStatusResponse& from);
  ContainerStatusResponse(ContainerStatusResponse&& from) noexcept
    : ContainerStatusResponse() {
    *this = ::std::move(from);
  }

  inline ContainerStatusResponse& operator=(const ContainerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatusResponse& operator=(ContainerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ContainerStatusResponse*>(
               &_ContainerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ContainerStatusResponse& a, ContainerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatusResponse* New() const final {
    return CreateMaybeMessage<ContainerStatusResponse>(nullptr);
  }

  ContainerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatusResponse& from);
  void MergeFrom(const ContainerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatusResponse";
  }
  protected:
  explicit ContainerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, string> info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .runtime.v1alpha2.ContainerStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::runtime::v1alpha2::ContainerStatus& status() const;
  ::runtime::v1alpha2::ContainerStatus* release_status();
  ::runtime::v1alpha2::ContainerStatus* mutable_status();
  void set_allocated_status(::runtime::v1alpha2::ContainerStatus* status);
  private:
  const ::runtime::v1alpha2::ContainerStatus& _internal_status() const;
  ::runtime::v1alpha2::ContainerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::runtime::v1alpha2::ContainerStatus* status);
  ::runtime::v1alpha2::ContainerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerStatusResponse_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::runtime::v1alpha2::ContainerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UpdateContainerResourcesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.UpdateContainerResourcesRequest) */ {
 public:
  inline UpdateContainerResourcesRequest() : UpdateContainerResourcesRequest(nullptr) {};
  virtual ~UpdateContainerResourcesRequest();

  UpdateContainerResourcesRequest(const UpdateContainerResourcesRequest& from);
  UpdateContainerResourcesRequest(UpdateContainerResourcesRequest&& from) noexcept
    : UpdateContainerResourcesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateContainerResourcesRequest& operator=(const UpdateContainerResourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateContainerResourcesRequest& operator=(UpdateContainerResourcesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateContainerResourcesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateContainerResourcesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateContainerResourcesRequest*>(
               &_UpdateContainerResourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(UpdateContainerResourcesRequest& a, UpdateContainerResourcesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateContainerResourcesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateContainerResourcesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateContainerResourcesRequest* New() const final {
    return CreateMaybeMessage<UpdateContainerResourcesRequest>(nullptr);
  }

  UpdateContainerResourcesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateContainerResourcesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateContainerResourcesRequest& from);
  void MergeFrom(const UpdateContainerResourcesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateContainerResourcesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.UpdateContainerResourcesRequest";
  }
  protected:
  explicit UpdateContainerResourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kLinuxFieldNumber = 2,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // .runtime.v1alpha2.LinuxContainerResources linux = 2;
  bool has_linux() const;
  private:
  bool _internal_has_linux() const;
  public:
  void clear_linux();
  const ::runtime::v1alpha2::LinuxContainerResources& linux() const;
  ::runtime::v1alpha2::LinuxContainerResources* release_linux();
  ::runtime::v1alpha2::LinuxContainerResources* mutable_linux();
  void set_allocated_linux(::runtime::v1alpha2::LinuxContainerResources* linux);
  private:
  const ::runtime::v1alpha2::LinuxContainerResources& _internal_linux() const;
  ::runtime::v1alpha2::LinuxContainerResources* _internal_mutable_linux();
  public:
  void unsafe_arena_set_allocated_linux(
      ::runtime::v1alpha2::LinuxContainerResources* linux);
  ::runtime::v1alpha2::LinuxContainerResources* unsafe_arena_release_linux();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.UpdateContainerResourcesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::runtime::v1alpha2::LinuxContainerResources* linux_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UpdateContainerResourcesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.UpdateContainerResourcesResponse) */ {
 public:
  inline UpdateContainerResourcesResponse() : UpdateContainerResourcesResponse(nullptr) {};
  virtual ~UpdateContainerResourcesResponse();

  UpdateContainerResourcesResponse(const UpdateContainerResourcesResponse& from);
  UpdateContainerResourcesResponse(UpdateContainerResourcesResponse&& from) noexcept
    : UpdateContainerResourcesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateContainerResourcesResponse& operator=(const UpdateContainerResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateContainerResourcesResponse& operator=(UpdateContainerResourcesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateContainerResourcesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateContainerResourcesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateContainerResourcesResponse*>(
               &_UpdateContainerResourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(UpdateContainerResourcesResponse& a, UpdateContainerResourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateContainerResourcesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateContainerResourcesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateContainerResourcesResponse* New() const final {
    return CreateMaybeMessage<UpdateContainerResourcesResponse>(nullptr);
  }

  UpdateContainerResourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateContainerResourcesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateContainerResourcesResponse& from);
  void MergeFrom(const UpdateContainerResourcesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateContainerResourcesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.UpdateContainerResourcesResponse";
  }
  protected:
  explicit UpdateContainerResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.UpdateContainerResourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ExecSyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ExecSyncRequest) */ {
 public:
  inline ExecSyncRequest() : ExecSyncRequest(nullptr) {};
  virtual ~ExecSyncRequest();

  ExecSyncRequest(const ExecSyncRequest& from);
  ExecSyncRequest(ExecSyncRequest&& from) noexcept
    : ExecSyncRequest() {
    *this = ::std::move(from);
  }

  inline ExecSyncRequest& operator=(const ExecSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecSyncRequest& operator=(ExecSyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecSyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecSyncRequest* internal_default_instance() {
    return reinterpret_cast<const ExecSyncRequest*>(
               &_ExecSyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(ExecSyncRequest& a, ExecSyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecSyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecSyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecSyncRequest* New() const final {
    return CreateMaybeMessage<ExecSyncRequest>(nullptr);
  }

  ExecSyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecSyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecSyncRequest& from);
  void MergeFrom(const ExecSyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecSyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ExecSyncRequest";
  }
  protected:
  explicit ExecSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 2,
    kContainerIdFieldNumber = 1,
    kTimeoutFieldNumber = 3,
  };
  // repeated string cmd = 2;
  int cmd_size() const;
  private:
  int _internal_cmd_size() const;
  public:
  void clear_cmd();
  const std::string& cmd(int index) const;
  std::string* mutable_cmd(int index);
  void set_cmd(int index, const std::string& value);
  void set_cmd(int index, std::string&& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const char* value, size_t size);
  std::string* add_cmd();
  void add_cmd(const std::string& value);
  void add_cmd(std::string&& value);
  void add_cmd(const char* value);
  void add_cmd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmd();
  private:
  const std::string& _internal_cmd(int index) const;
  std::string* _internal_add_cmd();
  public:

  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // int64 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ExecSyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ExecSyncResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ExecSyncResponse) */ {
 public:
  inline ExecSyncResponse() : ExecSyncResponse(nullptr) {};
  virtual ~ExecSyncResponse();

  ExecSyncResponse(const ExecSyncResponse& from);
  ExecSyncResponse(ExecSyncResponse&& from) noexcept
    : ExecSyncResponse() {
    *this = ::std::move(from);
  }

  inline ExecSyncResponse& operator=(const ExecSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecSyncResponse& operator=(ExecSyncResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecSyncResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecSyncResponse* internal_default_instance() {
    return reinterpret_cast<const ExecSyncResponse*>(
               &_ExecSyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ExecSyncResponse& a, ExecSyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecSyncResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecSyncResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecSyncResponse* New() const final {
    return CreateMaybeMessage<ExecSyncResponse>(nullptr);
  }

  ExecSyncResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecSyncResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecSyncResponse& from);
  void MergeFrom(const ExecSyncResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecSyncResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ExecSyncResponse";
  }
  protected:
  explicit ExecSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kExitCodeFieldNumber = 3,
  };
  // bytes stdout = 1;
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const void* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // bytes stderr = 2;
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const void* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // int32 exit_code = 3;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ExecSyncResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ExecRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ExecRequest) */ {
 public:
  inline ExecRequest() : ExecRequest(nullptr) {};
  virtual ~ExecRequest();

  ExecRequest(const ExecRequest& from);
  ExecRequest(ExecRequest&& from) noexcept
    : ExecRequest() {
    *this = ::std::move(from);
  }

  inline ExecRequest& operator=(const ExecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecRequest& operator=(ExecRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecRequest* internal_default_instance() {
    return reinterpret_cast<const ExecRequest*>(
               &_ExecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ExecRequest& a, ExecRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecRequest* New() const final {
    return CreateMaybeMessage<ExecRequest>(nullptr);
  }

  ExecRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecRequest& from);
  void MergeFrom(const ExecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ExecRequest";
  }
  protected:
  explicit ExecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 2,
    kContainerIdFieldNumber = 1,
    kTtyFieldNumber = 3,
    kStdinFieldNumber = 4,
    kStdoutFieldNumber = 5,
    kStderrFieldNumber = 6,
  };
  // repeated string cmd = 2;
  int cmd_size() const;
  private:
  int _internal_cmd_size() const;
  public:
  void clear_cmd();
  const std::string& cmd(int index) const;
  std::string* mutable_cmd(int index);
  void set_cmd(int index, const std::string& value);
  void set_cmd(int index, std::string&& value);
  void set_cmd(int index, const char* value);
  void set_cmd(int index, const char* value, size_t size);
  std::string* add_cmd();
  void add_cmd(const std::string& value);
  void add_cmd(std::string&& value);
  void add_cmd(const char* value);
  void add_cmd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmd();
  private:
  const std::string& _internal_cmd(int index) const;
  std::string* _internal_add_cmd();
  public:

  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // bool tty = 3;
  void clear_tty();
  bool tty() const;
  void set_tty(bool value);
  private:
  bool _internal_tty() const;
  void _internal_set_tty(bool value);
  public:

  // bool stdin = 4;
  void clear_stdin();
  bool stdin() const;
  void set_stdin(bool value);
  private:
  bool _internal_stdin() const;
  void _internal_set_stdin(bool value);
  public:

  // bool stdout = 5;
  void clear_stdout();
  bool stdout() const;
  void set_stdout(bool value);
  private:
  bool _internal_stdout() const;
  void _internal_set_stdout(bool value);
  public:

  // bool stderr = 6;
  void clear_stderr();
  bool stderr() const;
  void set_stderr(bool value);
  private:
  bool _internal_stderr() const;
  void _internal_set_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ExecRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  bool tty_;
  bool stdin_;
  bool stdout_;
  bool stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ExecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ExecResponse) */ {
 public:
  inline ExecResponse() : ExecResponse(nullptr) {};
  virtual ~ExecResponse();

  ExecResponse(const ExecResponse& from);
  ExecResponse(ExecResponse&& from) noexcept
    : ExecResponse() {
    *this = ::std::move(from);
  }

  inline ExecResponse& operator=(const ExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecResponse& operator=(ExecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecResponse* internal_default_instance() {
    return reinterpret_cast<const ExecResponse*>(
               &_ExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ExecResponse& a, ExecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecResponse* New() const final {
    return CreateMaybeMessage<ExecResponse>(nullptr);
  }

  ExecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecResponse& from);
  void MergeFrom(const ExecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ExecResponse";
  }
  protected:
  explicit ExecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ExecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AttachRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.AttachRequest) */ {
 public:
  inline AttachRequest() : AttachRequest(nullptr) {};
  virtual ~AttachRequest();

  AttachRequest(const AttachRequest& from);
  AttachRequest(AttachRequest&& from) noexcept
    : AttachRequest() {
    *this = ::std::move(from);
  }

  inline AttachRequest& operator=(const AttachRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachRequest& operator=(AttachRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttachRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachRequest* internal_default_instance() {
    return reinterpret_cast<const AttachRequest*>(
               &_AttachRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(AttachRequest& a, AttachRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttachRequest* New() const final {
    return CreateMaybeMessage<AttachRequest>(nullptr);
  }

  AttachRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttachRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttachRequest& from);
  void MergeFrom(const AttachRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.AttachRequest";
  }
  protected:
  explicit AttachRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
    kStdinFieldNumber = 2,
    kTtyFieldNumber = 3,
    kStdoutFieldNumber = 4,
    kStderrFieldNumber = 5,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // bool stdin = 2;
  void clear_stdin();
  bool stdin() const;
  void set_stdin(bool value);
  private:
  bool _internal_stdin() const;
  void _internal_set_stdin(bool value);
  public:

  // bool tty = 3;
  void clear_tty();
  bool tty() const;
  void set_tty(bool value);
  private:
  bool _internal_tty() const;
  void _internal_set_tty(bool value);
  public:

  // bool stdout = 4;
  void clear_stdout();
  bool stdout() const;
  void set_stdout(bool value);
  private:
  bool _internal_stdout() const;
  void _internal_set_stdout(bool value);
  public:

  // bool stderr = 5;
  void clear_stderr();
  bool stderr() const;
  void set_stderr(bool value);
  private:
  bool _internal_stderr() const;
  void _internal_set_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.AttachRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  bool stdin_;
  bool tty_;
  bool stdout_;
  bool stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AttachResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.AttachResponse) */ {
 public:
  inline AttachResponse() : AttachResponse(nullptr) {};
  virtual ~AttachResponse();

  AttachResponse(const AttachResponse& from);
  AttachResponse(AttachResponse&& from) noexcept
    : AttachResponse() {
    *this = ::std::move(from);
  }

  inline AttachResponse& operator=(const AttachResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachResponse& operator=(AttachResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttachResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachResponse* internal_default_instance() {
    return reinterpret_cast<const AttachResponse*>(
               &_AttachResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(AttachResponse& a, AttachResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttachResponse* New() const final {
    return CreateMaybeMessage<AttachResponse>(nullptr);
  }

  AttachResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttachResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttachResponse& from);
  void MergeFrom(const AttachResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.AttachResponse";
  }
  protected:
  explicit AttachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.AttachResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PortForwardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PortForwardRequest) */ {
 public:
  inline PortForwardRequest() : PortForwardRequest(nullptr) {};
  virtual ~PortForwardRequest();

  PortForwardRequest(const PortForwardRequest& from);
  PortForwardRequest(PortForwardRequest&& from) noexcept
    : PortForwardRequest() {
    *this = ::std::move(from);
  }

  inline PortForwardRequest& operator=(const PortForwardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortForwardRequest& operator=(PortForwardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortForwardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortForwardRequest* internal_default_instance() {
    return reinterpret_cast<const PortForwardRequest*>(
               &_PortForwardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(PortForwardRequest& a, PortForwardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PortForwardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortForwardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortForwardRequest* New() const final {
    return CreateMaybeMessage<PortForwardRequest>(nullptr);
  }

  PortForwardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortForwardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortForwardRequest& from);
  void MergeFrom(const PortForwardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortForwardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PortForwardRequest";
  }
  protected:
  explicit PortForwardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 2,
    kPodSandboxIdFieldNumber = 1,
  };
  // repeated int32 port = 2;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_port() const;
  void _internal_add_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_port();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 port(int index) const;
  void set_port(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      port() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_port();

  // string pod_sandbox_id = 1;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PortForwardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > port_;
  mutable std::atomic<int> _port_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PortForwardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PortForwardResponse) */ {
 public:
  inline PortForwardResponse() : PortForwardResponse(nullptr) {};
  virtual ~PortForwardResponse();

  PortForwardResponse(const PortForwardResponse& from);
  PortForwardResponse(PortForwardResponse&& from) noexcept
    : PortForwardResponse() {
    *this = ::std::move(from);
  }

  inline PortForwardResponse& operator=(const PortForwardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortForwardResponse& operator=(PortForwardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortForwardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortForwardResponse* internal_default_instance() {
    return reinterpret_cast<const PortForwardResponse*>(
               &_PortForwardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PortForwardResponse& a, PortForwardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PortForwardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortForwardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortForwardResponse* New() const final {
    return CreateMaybeMessage<PortForwardResponse>(nullptr);
  }

  PortForwardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortForwardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortForwardResponse& from);
  void MergeFrom(const PortForwardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortForwardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PortForwardResponse";
  }
  protected:
  explicit PortForwardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PortForwardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageFilter) */ {
 public:
  inline ImageFilter() : ImageFilter(nullptr) {};
  virtual ~ImageFilter();

  ImageFilter(const ImageFilter& from);
  ImageFilter(ImageFilter&& from) noexcept
    : ImageFilter() {
    *this = ::std::move(from);
  }

  inline ImageFilter& operator=(const ImageFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFilter& operator=(ImageFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageFilter* internal_default_instance() {
    return reinterpret_cast<const ImageFilter*>(
               &_ImageFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ImageFilter& a, ImageFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFilter* New() const final {
    return CreateMaybeMessage<ImageFilter>(nullptr);
  }

  ImageFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFilter& from);
  void MergeFrom(const ImageFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageFilter";
  }
  protected:
  explicit ImageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .runtime.v1alpha2.ImageSpec image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ImageSpec* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListImagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListImagesRequest) */ {
 public:
  inline ListImagesRequest() : ListImagesRequest(nullptr) {};
  virtual ~ListImagesRequest();

  ListImagesRequest(const ListImagesRequest& from);
  ListImagesRequest(ListImagesRequest&& from) noexcept
    : ListImagesRequest() {
    *this = ::std::move(from);
  }

  inline ListImagesRequest& operator=(const ListImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesRequest& operator=(ListImagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListImagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListImagesRequest*>(
               &_ListImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ListImagesRequest& a, ListImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesRequest* New() const final {
    return CreateMaybeMessage<ListImagesRequest>(nullptr);
  }

  ListImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListImagesRequest& from);
  void MergeFrom(const ListImagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListImagesRequest";
  }
  protected:
  explicit ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .runtime.v1alpha2.ImageFilter filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::runtime::v1alpha2::ImageFilter& filter() const;
  ::runtime::v1alpha2::ImageFilter* release_filter();
  ::runtime::v1alpha2::ImageFilter* mutable_filter();
  void set_allocated_filter(::runtime::v1alpha2::ImageFilter* filter);
  private:
  const ::runtime::v1alpha2::ImageFilter& _internal_filter() const;
  ::runtime::v1alpha2::ImageFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::runtime::v1alpha2::ImageFilter* filter);
  ::runtime::v1alpha2::ImageFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ImageFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.Image) */ {
 public:
  inline Image() : Image(nullptr) {};
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoTagsFieldNumber = 2,
    kRepoDigestsFieldNumber = 3,
    kIdFieldNumber = 1,
    kUsernameFieldNumber = 6,
    kUidFieldNumber = 5,
    kSpecFieldNumber = 7,
    kSizeFieldNumber = 4,
  };
  // repeated string repo_tags = 2;
  int repo_tags_size() const;
  private:
  int _internal_repo_tags_size() const;
  public:
  void clear_repo_tags();
  const std::string& repo_tags(int index) const;
  std::string* mutable_repo_tags(int index);
  void set_repo_tags(int index, const std::string& value);
  void set_repo_tags(int index, std::string&& value);
  void set_repo_tags(int index, const char* value);
  void set_repo_tags(int index, const char* value, size_t size);
  std::string* add_repo_tags();
  void add_repo_tags(const std::string& value);
  void add_repo_tags(std::string&& value);
  void add_repo_tags(const char* value);
  void add_repo_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repo_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repo_tags();
  private:
  const std::string& _internal_repo_tags(int index) const;
  std::string* _internal_add_repo_tags();
  public:

  // repeated string repo_digests = 3;
  int repo_digests_size() const;
  private:
  int _internal_repo_digests_size() const;
  public:
  void clear_repo_digests();
  const std::string& repo_digests(int index) const;
  std::string* mutable_repo_digests(int index);
  void set_repo_digests(int index, const std::string& value);
  void set_repo_digests(int index, std::string&& value);
  void set_repo_digests(int index, const char* value);
  void set_repo_digests(int index, const char* value, size_t size);
  std::string* add_repo_digests();
  void add_repo_digests(const std::string& value);
  void add_repo_digests(std::string&& value);
  void add_repo_digests(const char* value);
  void add_repo_digests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repo_digests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repo_digests();
  private:
  const std::string& _internal_repo_digests(int index) const;
  std::string* _internal_add_repo_digests();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string username = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .runtime.v1alpha2.Int64Value uid = 5;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const ::runtime::v1alpha2::Int64Value& uid() const;
  ::runtime::v1alpha2::Int64Value* release_uid();
  ::runtime::v1alpha2::Int64Value* mutable_uid();
  void set_allocated_uid(::runtime::v1alpha2::Int64Value* uid);
  private:
  const ::runtime::v1alpha2::Int64Value& _internal_uid() const;
  ::runtime::v1alpha2::Int64Value* _internal_mutable_uid();
  public:
  void unsafe_arena_set_allocated_uid(
      ::runtime::v1alpha2::Int64Value* uid);
  ::runtime::v1alpha2::Int64Value* unsafe_arena_release_uid();

  // .runtime.v1alpha2.ImageSpec spec = 7;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::runtime::v1alpha2::ImageSpec& spec() const;
  ::runtime::v1alpha2::ImageSpec* release_spec();
  ::runtime::v1alpha2::ImageSpec* mutable_spec();
  void set_allocated_spec(::runtime::v1alpha2::ImageSpec* spec);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_spec() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::runtime::v1alpha2::ImageSpec* spec);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_spec();

  // uint64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repo_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repo_digests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::runtime::v1alpha2::Int64Value* uid_;
  ::runtime::v1alpha2::ImageSpec* spec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListImagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListImagesResponse) */ {
 public:
  inline ListImagesResponse() : ListImagesResponse(nullptr) {};
  virtual ~ListImagesResponse();

  ListImagesResponse(const ListImagesResponse& from);
  ListImagesResponse(ListImagesResponse&& from) noexcept
    : ListImagesResponse() {
    *this = ::std::move(from);
  }

  inline ListImagesResponse& operator=(const ListImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesResponse& operator=(ListImagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListImagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListImagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListImagesResponse*>(
               &_ListImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ListImagesResponse& a, ListImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesResponse* New() const final {
    return CreateMaybeMessage<ListImagesResponse>(nullptr);
  }

  ListImagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListImagesResponse& from);
  void MergeFrom(const ListImagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListImagesResponse";
  }
  protected:
  explicit ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.Image images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::runtime::v1alpha2::Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Image >*
      mutable_images();
  private:
  const ::runtime::v1alpha2::Image& _internal_images(int index) const;
  ::runtime::v1alpha2::Image* _internal_add_images();
  public:
  const ::runtime::v1alpha2::Image& images(int index) const;
  ::runtime::v1alpha2::Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Image >&
      images() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListImagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Image > images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageStatusRequest) */ {
 public:
  inline ImageStatusRequest() : ImageStatusRequest(nullptr) {};
  virtual ~ImageStatusRequest();

  ImageStatusRequest(const ImageStatusRequest& from);
  ImageStatusRequest(ImageStatusRequest&& from) noexcept
    : ImageStatusRequest() {
    *this = ::std::move(from);
  }

  inline ImageStatusRequest& operator=(const ImageStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageStatusRequest& operator=(ImageStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ImageStatusRequest*>(
               &_ImageStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ImageStatusRequest& a, ImageStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageStatusRequest* New() const final {
    return CreateMaybeMessage<ImageStatusRequest>(nullptr);
  }

  ImageStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageStatusRequest& from);
  void MergeFrom(const ImageStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageStatusRequest";
  }
  protected:
  explicit ImageStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kVerboseFieldNumber = 2,
  };
  // .runtime.v1alpha2.ImageSpec image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // bool verbose = 2;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ImageSpec* image_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageStatusResponse_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImageStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImageStatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ImageStatusResponse_InfoEntry_DoNotUse();
  ImageStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ImageStatusResponse_InfoEntry_DoNotUse& other);
  static const ImageStatusResponse_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImageStatusResponse_InfoEntry_DoNotUse*>(&_ImageStatusResponse_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ImageStatusResponse.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ImageStatusResponse.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[92];
  }

  public:
};

// -------------------------------------------------------------------

class ImageStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageStatusResponse) */ {
 public:
  inline ImageStatusResponse() : ImageStatusResponse(nullptr) {};
  virtual ~ImageStatusResponse();

  ImageStatusResponse(const ImageStatusResponse& from);
  ImageStatusResponse(ImageStatusResponse&& from) noexcept
    : ImageStatusResponse() {
    *this = ::std::move(from);
  }

  inline ImageStatusResponse& operator=(const ImageStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageStatusResponse& operator=(ImageStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ImageStatusResponse*>(
               &_ImageStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ImageStatusResponse& a, ImageStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageStatusResponse* New() const final {
    return CreateMaybeMessage<ImageStatusResponse>(nullptr);
  }

  ImageStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageStatusResponse& from);
  void MergeFrom(const ImageStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageStatusResponse";
  }
  protected:
  explicit ImageStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kImageFieldNumber = 1,
  };
  // map<string, string> info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .runtime.v1alpha2.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::Image& image() const;
  ::runtime::v1alpha2::Image* release_image();
  ::runtime::v1alpha2::Image* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::Image* image);
  private:
  const ::runtime::v1alpha2::Image& _internal_image() const;
  ::runtime::v1alpha2::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::Image* image);
  ::runtime::v1alpha2::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ImageStatusResponse_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::runtime::v1alpha2::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.AuthConfig) */ {
 public:
  inline AuthConfig() : AuthConfig(nullptr) {};
  virtual ~AuthConfig();

  AuthConfig(const AuthConfig& from);
  AuthConfig(AuthConfig&& from) noexcept
    : AuthConfig() {
    *this = ::std::move(from);
  }

  inline AuthConfig& operator=(const AuthConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthConfig& operator=(AuthConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthConfig* internal_default_instance() {
    return reinterpret_cast<const AuthConfig*>(
               &_AuthConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(AuthConfig& a, AuthConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthConfig* New() const final {
    return CreateMaybeMessage<AuthConfig>(nullptr);
  }

  AuthConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthConfig& from);
  void MergeFrom(const AuthConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.AuthConfig";
  }
  protected:
  explicit AuthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kAuthFieldNumber = 3,
    kServerAddressFieldNumber = 4,
    kIdentityTokenFieldNumber = 5,
    kRegistryTokenFieldNumber = 6,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string auth = 3;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth(
      std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string server_address = 4;
  void clear_server_address();
  const std::string& server_address() const;
  void set_server_address(const std::string& value);
  void set_server_address(std::string&& value);
  void set_server_address(const char* value);
  void set_server_address(const char* value, size_t size);
  std::string* mutable_server_address();
  std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_address(
      std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // string identity_token = 5;
  void clear_identity_token();
  const std::string& identity_token() const;
  void set_identity_token(const std::string& value);
  void set_identity_token(std::string&& value);
  void set_identity_token(const char* value);
  void set_identity_token(const char* value, size_t size);
  std::string* mutable_identity_token();
  std::string* release_identity_token();
  void set_allocated_identity_token(std::string* identity_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_identity_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_identity_token(
      std::string* identity_token);
  private:
  const std::string& _internal_identity_token() const;
  void _internal_set_identity_token(const std::string& value);
  std::string* _internal_mutable_identity_token();
  public:

  // string registry_token = 6;
  void clear_registry_token();
  const std::string& registry_token() const;
  void set_registry_token(const std::string& value);
  void set_registry_token(std::string&& value);
  void set_registry_token(const char* value);
  void set_registry_token(const char* value, size_t size);
  std::string* mutable_registry_token();
  std::string* release_registry_token();
  void set_allocated_registry_token(std::string* registry_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_registry_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_registry_token(
      std::string* registry_token);
  private:
  const std::string& _internal_registry_token() const;
  void _internal_set_registry_token(const std::string& value);
  std::string* _internal_mutable_registry_token();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.AuthConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registry_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PullImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PullImageRequest) */ {
 public:
  inline PullImageRequest() : PullImageRequest(nullptr) {};
  virtual ~PullImageRequest();

  PullImageRequest(const PullImageRequest& from);
  PullImageRequest(PullImageRequest&& from) noexcept
    : PullImageRequest() {
    *this = ::std::move(from);
  }

  inline PullImageRequest& operator=(const PullImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullImageRequest& operator=(PullImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullImageRequest* internal_default_instance() {
    return reinterpret_cast<const PullImageRequest*>(
               &_PullImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PullImageRequest& a, PullImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullImageRequest* New() const final {
    return CreateMaybeMessage<PullImageRequest>(nullptr);
  }

  PullImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullImageRequest& from);
  void MergeFrom(const PullImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PullImageRequest";
  }
  protected:
  explicit PullImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kAuthFieldNumber = 2,
    kSandboxConfigFieldNumber = 3,
  };
  // .runtime.v1alpha2.ImageSpec image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // .runtime.v1alpha2.AuthConfig auth = 2;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::runtime::v1alpha2::AuthConfig& auth() const;
  ::runtime::v1alpha2::AuthConfig* release_auth();
  ::runtime::v1alpha2::AuthConfig* mutable_auth();
  void set_allocated_auth(::runtime::v1alpha2::AuthConfig* auth);
  private:
  const ::runtime::v1alpha2::AuthConfig& _internal_auth() const;
  ::runtime::v1alpha2::AuthConfig* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::runtime::v1alpha2::AuthConfig* auth);
  ::runtime::v1alpha2::AuthConfig* unsafe_arena_release_auth();

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  bool has_sandbox_config() const;
  private:
  bool _internal_has_sandbox_config() const;
  public:
  void clear_sandbox_config();
  const ::runtime::v1alpha2::PodSandboxConfig& sandbox_config() const;
  ::runtime::v1alpha2::PodSandboxConfig* release_sandbox_config();
  ::runtime::v1alpha2::PodSandboxConfig* mutable_sandbox_config();
  void set_allocated_sandbox_config(::runtime::v1alpha2::PodSandboxConfig* sandbox_config);
  private:
  const ::runtime::v1alpha2::PodSandboxConfig& _internal_sandbox_config() const;
  ::runtime::v1alpha2::PodSandboxConfig* _internal_mutable_sandbox_config();
  public:
  void unsafe_arena_set_allocated_sandbox_config(
      ::runtime::v1alpha2::PodSandboxConfig* sandbox_config);
  ::runtime::v1alpha2::PodSandboxConfig* unsafe_arena_release_sandbox_config();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PullImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ImageSpec* image_;
  ::runtime::v1alpha2::AuthConfig* auth_;
  ::runtime::v1alpha2::PodSandboxConfig* sandbox_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PullImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.PullImageResponse) */ {
 public:
  inline PullImageResponse() : PullImageResponse(nullptr) {};
  virtual ~PullImageResponse();

  PullImageResponse(const PullImageResponse& from);
  PullImageResponse(PullImageResponse&& from) noexcept
    : PullImageResponse() {
    *this = ::std::move(from);
  }

  inline PullImageResponse& operator=(const PullImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullImageResponse& operator=(PullImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullImageResponse* internal_default_instance() {
    return reinterpret_cast<const PullImageResponse*>(
               &_PullImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PullImageResponse& a, PullImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullImageResponse* New() const final {
    return CreateMaybeMessage<PullImageResponse>(nullptr);
  }

  PullImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullImageResponse& from);
  void MergeFrom(const PullImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.PullImageResponse";
  }
  protected:
  explicit PullImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageRefFieldNumber = 1,
  };
  // string image_ref = 1;
  void clear_image_ref();
  const std::string& image_ref() const;
  void set_image_ref(const std::string& value);
  void set_image_ref(std::string&& value);
  void set_image_ref(const char* value);
  void set_image_ref(const char* value, size_t size);
  std::string* mutable_image_ref();
  std::string* release_image_ref();
  void set_allocated_image_ref(std::string* image_ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_ref(
      std::string* image_ref);
  private:
  const std::string& _internal_image_ref() const;
  void _internal_set_image_ref(const std::string& value);
  std::string* _internal_mutable_image_ref();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.PullImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemoveImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemoveImageRequest) */ {
 public:
  inline RemoveImageRequest() : RemoveImageRequest(nullptr) {};
  virtual ~RemoveImageRequest();

  RemoveImageRequest(const RemoveImageRequest& from);
  RemoveImageRequest(RemoveImageRequest&& from) noexcept
    : RemoveImageRequest() {
    *this = ::std::move(from);
  }

  inline RemoveImageRequest& operator=(const RemoveImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageRequest& operator=(RemoveImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveImageRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveImageRequest*>(
               &_RemoveImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RemoveImageRequest& a, RemoveImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveImageRequest* New() const final {
    return CreateMaybeMessage<RemoveImageRequest>(nullptr);
  }

  RemoveImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveImageRequest& from);
  void MergeFrom(const RemoveImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemoveImageRequest";
  }
  protected:
  explicit RemoveImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .runtime.v1alpha2.ImageSpec image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::runtime::v1alpha2::ImageSpec& image() const;
  ::runtime::v1alpha2::ImageSpec* release_image();
  ::runtime::v1alpha2::ImageSpec* mutable_image();
  void set_allocated_image(::runtime::v1alpha2::ImageSpec* image);
  private:
  const ::runtime::v1alpha2::ImageSpec& _internal_image() const;
  ::runtime::v1alpha2::ImageSpec* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::runtime::v1alpha2::ImageSpec* image);
  ::runtime::v1alpha2::ImageSpec* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemoveImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ImageSpec* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RemoveImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RemoveImageResponse) */ {
 public:
  inline RemoveImageResponse() : RemoveImageResponse(nullptr) {};
  virtual ~RemoveImageResponse();

  RemoveImageResponse(const RemoveImageResponse& from);
  RemoveImageResponse(RemoveImageResponse&& from) noexcept
    : RemoveImageResponse() {
    *this = ::std::move(from);
  }

  inline RemoveImageResponse& operator=(const RemoveImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageResponse& operator=(RemoveImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveImageResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveImageResponse*>(
               &_RemoveImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RemoveImageResponse& a, RemoveImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveImageResponse* New() const final {
    return CreateMaybeMessage<RemoveImageResponse>(nullptr);
  }

  RemoveImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveImageResponse& from);
  void MergeFrom(const RemoveImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RemoveImageResponse";
  }
  protected:
  explicit RemoveImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RemoveImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class NetworkConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.NetworkConfig) */ {
 public:
  inline NetworkConfig() : NetworkConfig(nullptr) {};
  virtual ~NetworkConfig();

  NetworkConfig(const NetworkConfig& from);
  NetworkConfig(NetworkConfig&& from) noexcept
    : NetworkConfig() {
    *this = ::std::move(from);
  }

  inline NetworkConfig& operator=(const NetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfig& operator=(NetworkConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig*>(
               &_NetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(NetworkConfig& a, NetworkConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConfig* New() const final {
    return CreateMaybeMessage<NetworkConfig>(nullptr);
  }

  NetworkConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConfig& from);
  void MergeFrom(const NetworkConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.NetworkConfig";
  }
  protected:
  explicit NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodCidrFieldNumber = 1,
  };
  // string pod_cidr = 1;
  void clear_pod_cidr();
  const std::string& pod_cidr() const;
  void set_pod_cidr(const std::string& value);
  void set_pod_cidr(std::string&& value);
  void set_pod_cidr(const char* value);
  void set_pod_cidr(const char* value, size_t size);
  std::string* mutable_pod_cidr();
  std::string* release_pod_cidr();
  void set_allocated_pod_cidr(std::string* pod_cidr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_cidr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_cidr(
      std::string* pod_cidr);
  private:
  const std::string& _internal_pod_cidr() const;
  void _internal_set_pod_cidr(const std::string& value);
  std::string* _internal_mutable_pod_cidr();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.NetworkConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_cidr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RuntimeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RuntimeConfig) */ {
 public:
  inline RuntimeConfig() : RuntimeConfig(nullptr) {};
  virtual ~RuntimeConfig();

  RuntimeConfig(const RuntimeConfig& from);
  RuntimeConfig(RuntimeConfig&& from) noexcept
    : RuntimeConfig() {
    *this = ::std::move(from);
  }

  inline RuntimeConfig& operator=(const RuntimeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeConfig& operator=(RuntimeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeConfig* internal_default_instance() {
    return reinterpret_cast<const RuntimeConfig*>(
               &_RuntimeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(RuntimeConfig& a, RuntimeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeConfig* New() const final {
    return CreateMaybeMessage<RuntimeConfig>(nullptr);
  }

  RuntimeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeConfig& from);
  void MergeFrom(const RuntimeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RuntimeConfig";
  }
  protected:
  explicit RuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkConfigFieldNumber = 1,
  };
  // .runtime.v1alpha2.NetworkConfig network_config = 1;
  bool has_network_config() const;
  private:
  bool _internal_has_network_config() const;
  public:
  void clear_network_config();
  const ::runtime::v1alpha2::NetworkConfig& network_config() const;
  ::runtime::v1alpha2::NetworkConfig* release_network_config();
  ::runtime::v1alpha2::NetworkConfig* mutable_network_config();
  void set_allocated_network_config(::runtime::v1alpha2::NetworkConfig* network_config);
  private:
  const ::runtime::v1alpha2::NetworkConfig& _internal_network_config() const;
  ::runtime::v1alpha2::NetworkConfig* _internal_mutable_network_config();
  public:
  void unsafe_arena_set_allocated_network_config(
      ::runtime::v1alpha2::NetworkConfig* network_config);
  ::runtime::v1alpha2::NetworkConfig* unsafe_arena_release_network_config();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RuntimeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::NetworkConfig* network_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.UpdateRuntimeConfigRequest) */ {
 public:
  inline UpdateRuntimeConfigRequest() : UpdateRuntimeConfigRequest(nullptr) {};
  virtual ~UpdateRuntimeConfigRequest();

  UpdateRuntimeConfigRequest(const UpdateRuntimeConfigRequest& from);
  UpdateRuntimeConfigRequest(UpdateRuntimeConfigRequest&& from) noexcept
    : UpdateRuntimeConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeConfigRequest& operator=(const UpdateRuntimeConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeConfigRequest& operator=(UpdateRuntimeConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRuntimeConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRuntimeConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeConfigRequest*>(
               &_UpdateRuntimeConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(UpdateRuntimeConfigRequest& a, UpdateRuntimeConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeConfigRequest* New() const final {
    return CreateMaybeMessage<UpdateRuntimeConfigRequest>(nullptr);
  }

  UpdateRuntimeConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRuntimeConfigRequest& from);
  void MergeFrom(const UpdateRuntimeConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.UpdateRuntimeConfigRequest";
  }
  protected:
  explicit UpdateRuntimeConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeConfigFieldNumber = 1,
  };
  // .runtime.v1alpha2.RuntimeConfig runtime_config = 1;
  bool has_runtime_config() const;
  private:
  bool _internal_has_runtime_config() const;
  public:
  void clear_runtime_config();
  const ::runtime::v1alpha2::RuntimeConfig& runtime_config() const;
  ::runtime::v1alpha2::RuntimeConfig* release_runtime_config();
  ::runtime::v1alpha2::RuntimeConfig* mutable_runtime_config();
  void set_allocated_runtime_config(::runtime::v1alpha2::RuntimeConfig* runtime_config);
  private:
  const ::runtime::v1alpha2::RuntimeConfig& _internal_runtime_config() const;
  ::runtime::v1alpha2::RuntimeConfig* _internal_mutable_runtime_config();
  public:
  void unsafe_arena_set_allocated_runtime_config(
      ::runtime::v1alpha2::RuntimeConfig* runtime_config);
  ::runtime::v1alpha2::RuntimeConfig* unsafe_arena_release_runtime_config();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.UpdateRuntimeConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::RuntimeConfig* runtime_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.UpdateRuntimeConfigResponse) */ {
 public:
  inline UpdateRuntimeConfigResponse() : UpdateRuntimeConfigResponse(nullptr) {};
  virtual ~UpdateRuntimeConfigResponse();

  UpdateRuntimeConfigResponse(const UpdateRuntimeConfigResponse& from);
  UpdateRuntimeConfigResponse(UpdateRuntimeConfigResponse&& from) noexcept
    : UpdateRuntimeConfigResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeConfigResponse& operator=(const UpdateRuntimeConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeConfigResponse& operator=(UpdateRuntimeConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRuntimeConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRuntimeConfigResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeConfigResponse*>(
               &_UpdateRuntimeConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(UpdateRuntimeConfigResponse& a, UpdateRuntimeConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeConfigResponse* New() const final {
    return CreateMaybeMessage<UpdateRuntimeConfigResponse>(nullptr);
  }

  UpdateRuntimeConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRuntimeConfigResponse& from);
  void MergeFrom(const UpdateRuntimeConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.UpdateRuntimeConfigResponse";
  }
  protected:
  explicit UpdateRuntimeConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.UpdateRuntimeConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RuntimeCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RuntimeCondition) */ {
 public:
  inline RuntimeCondition() : RuntimeCondition(nullptr) {};
  virtual ~RuntimeCondition();

  RuntimeCondition(const RuntimeCondition& from);
  RuntimeCondition(RuntimeCondition&& from) noexcept
    : RuntimeCondition() {
    *this = ::std::move(from);
  }

  inline RuntimeCondition& operator=(const RuntimeCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeCondition& operator=(RuntimeCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeCondition* internal_default_instance() {
    return reinterpret_cast<const RuntimeCondition*>(
               &_RuntimeCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(RuntimeCondition& a, RuntimeCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeCondition* New() const final {
    return CreateMaybeMessage<RuntimeCondition>(nullptr);
  }

  RuntimeCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeCondition& from);
  void MergeFrom(const RuntimeCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RuntimeCondition";
  }
  protected:
  explicit RuntimeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kReasonFieldNumber = 3,
    kMessageFieldNumber = 4,
    kStatusFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RuntimeCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RuntimeStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.RuntimeStatus) */ {
 public:
  inline RuntimeStatus() : RuntimeStatus(nullptr) {};
  virtual ~RuntimeStatus();

  RuntimeStatus(const RuntimeStatus& from);
  RuntimeStatus(RuntimeStatus&& from) noexcept
    : RuntimeStatus() {
    *this = ::std::move(from);
  }

  inline RuntimeStatus& operator=(const RuntimeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeStatus& operator=(RuntimeStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeStatus* internal_default_instance() {
    return reinterpret_cast<const RuntimeStatus*>(
               &_RuntimeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(RuntimeStatus& a, RuntimeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeStatus* New() const final {
    return CreateMaybeMessage<RuntimeStatus>(nullptr);
  }

  RuntimeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeStatus& from);
  void MergeFrom(const RuntimeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.RuntimeStatus";
  }
  protected:
  explicit RuntimeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.RuntimeCondition conditions = 1;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::runtime::v1alpha2::RuntimeCondition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::RuntimeCondition >*
      mutable_conditions();
  private:
  const ::runtime::v1alpha2::RuntimeCondition& _internal_conditions(int index) const;
  ::runtime::v1alpha2::RuntimeCondition* _internal_add_conditions();
  public:
  const ::runtime::v1alpha2::RuntimeCondition& conditions(int index) const;
  ::runtime::v1alpha2::RuntimeCondition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::RuntimeCondition >&
      conditions() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.RuntimeStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::RuntimeCondition > conditions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {};
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerboseFieldNumber = 1,
  };
  // bool verbose = 1;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatusResponse_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StatusResponse_InfoEntry_DoNotUse();
  StatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StatusResponse_InfoEntry_DoNotUse& other);
  static const StatusResponse_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StatusResponse_InfoEntry_DoNotUse*>(&_StatusResponse_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.StatusResponse.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.StatusResponse.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[106];
  }

  public:
};

// -------------------------------------------------------------------

class StatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {};
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, string> info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .runtime.v1alpha2.RuntimeStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::runtime::v1alpha2::RuntimeStatus& status() const;
  ::runtime::v1alpha2::RuntimeStatus* release_status();
  ::runtime::v1alpha2::RuntimeStatus* mutable_status();
  void set_allocated_status(::runtime::v1alpha2::RuntimeStatus* status);
  private:
  const ::runtime::v1alpha2::RuntimeStatus& _internal_status() const;
  ::runtime::v1alpha2::RuntimeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::runtime::v1alpha2::RuntimeStatus* status);
  ::runtime::v1alpha2::RuntimeStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StatusResponse_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::runtime::v1alpha2::RuntimeStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageFsInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageFsInfoRequest) */ {
 public:
  inline ImageFsInfoRequest() : ImageFsInfoRequest(nullptr) {};
  virtual ~ImageFsInfoRequest();

  ImageFsInfoRequest(const ImageFsInfoRequest& from);
  ImageFsInfoRequest(ImageFsInfoRequest&& from) noexcept
    : ImageFsInfoRequest() {
    *this = ::std::move(from);
  }

  inline ImageFsInfoRequest& operator=(const ImageFsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFsInfoRequest& operator=(ImageFsInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFsInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageFsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ImageFsInfoRequest*>(
               &_ImageFsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ImageFsInfoRequest& a, ImageFsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFsInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFsInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFsInfoRequest* New() const final {
    return CreateMaybeMessage<ImageFsInfoRequest>(nullptr);
  }

  ImageFsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFsInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFsInfoRequest& from);
  void MergeFrom(const ImageFsInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFsInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageFsInfoRequest";
  }
  protected:
  explicit ImageFsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageFsInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UInt64Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.UInt64Value) */ {
 public:
  inline UInt64Value() : UInt64Value(nullptr) {};
  virtual ~UInt64Value();

  UInt64Value(const UInt64Value& from);
  UInt64Value(UInt64Value&& from) noexcept
    : UInt64Value() {
    *this = ::std::move(from);
  }

  inline UInt64Value& operator=(const UInt64Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt64Value& operator=(UInt64Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UInt64Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt64Value* internal_default_instance() {
    return reinterpret_cast<const UInt64Value*>(
               &_UInt64Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(UInt64Value& a, UInt64Value& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt64Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt64Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt64Value* New() const final {
    return CreateMaybeMessage<UInt64Value>(nullptr);
  }

  UInt64Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt64Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UInt64Value& from);
  void MergeFrom(const UInt64Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt64Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.UInt64Value";
  }
  protected:
  explicit UInt64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.UInt64Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class FilesystemIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.FilesystemIdentifier) */ {
 public:
  inline FilesystemIdentifier() : FilesystemIdentifier(nullptr) {};
  virtual ~FilesystemIdentifier();

  FilesystemIdentifier(const FilesystemIdentifier& from);
  FilesystemIdentifier(FilesystemIdentifier&& from) noexcept
    : FilesystemIdentifier() {
    *this = ::std::move(from);
  }

  inline FilesystemIdentifier& operator=(const FilesystemIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilesystemIdentifier& operator=(FilesystemIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilesystemIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilesystemIdentifier* internal_default_instance() {
    return reinterpret_cast<const FilesystemIdentifier*>(
               &_FilesystemIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(FilesystemIdentifier& a, FilesystemIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(FilesystemIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilesystemIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilesystemIdentifier* New() const final {
    return CreateMaybeMessage<FilesystemIdentifier>(nullptr);
  }

  FilesystemIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilesystemIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilesystemIdentifier& from);
  void MergeFrom(const FilesystemIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilesystemIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.FilesystemIdentifier";
  }
  protected:
  explicit FilesystemIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountpointFieldNumber = 1,
  };
  // string mountpoint = 1;
  void clear_mountpoint();
  const std::string& mountpoint() const;
  void set_mountpoint(const std::string& value);
  void set_mountpoint(std::string&& value);
  void set_mountpoint(const char* value);
  void set_mountpoint(const char* value, size_t size);
  std::string* mutable_mountpoint();
  std::string* release_mountpoint();
  void set_allocated_mountpoint(std::string* mountpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mountpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mountpoint(
      std::string* mountpoint);
  private:
  const std::string& _internal_mountpoint() const;
  void _internal_set_mountpoint(const std::string& value);
  std::string* _internal_mutable_mountpoint();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.FilesystemIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mountpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class FilesystemUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.FilesystemUsage) */ {
 public:
  inline FilesystemUsage() : FilesystemUsage(nullptr) {};
  virtual ~FilesystemUsage();

  FilesystemUsage(const FilesystemUsage& from);
  FilesystemUsage(FilesystemUsage&& from) noexcept
    : FilesystemUsage() {
    *this = ::std::move(from);
  }

  inline FilesystemUsage& operator=(const FilesystemUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilesystemUsage& operator=(FilesystemUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilesystemUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilesystemUsage* internal_default_instance() {
    return reinterpret_cast<const FilesystemUsage*>(
               &_FilesystemUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(FilesystemUsage& a, FilesystemUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(FilesystemUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilesystemUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilesystemUsage* New() const final {
    return CreateMaybeMessage<FilesystemUsage>(nullptr);
  }

  FilesystemUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilesystemUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilesystemUsage& from);
  void MergeFrom(const FilesystemUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilesystemUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.FilesystemUsage";
  }
  protected:
  explicit FilesystemUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsIdFieldNumber = 2,
    kUsedBytesFieldNumber = 3,
    kInodesUsedFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // .runtime.v1alpha2.FilesystemIdentifier fs_id = 2;
  bool has_fs_id() const;
  private:
  bool _internal_has_fs_id() const;
  public:
  void clear_fs_id();
  const ::runtime::v1alpha2::FilesystemIdentifier& fs_id() const;
  ::runtime::v1alpha2::FilesystemIdentifier* release_fs_id();
  ::runtime::v1alpha2::FilesystemIdentifier* mutable_fs_id();
  void set_allocated_fs_id(::runtime::v1alpha2::FilesystemIdentifier* fs_id);
  private:
  const ::runtime::v1alpha2::FilesystemIdentifier& _internal_fs_id() const;
  ::runtime::v1alpha2::FilesystemIdentifier* _internal_mutable_fs_id();
  public:
  void unsafe_arena_set_allocated_fs_id(
      ::runtime::v1alpha2::FilesystemIdentifier* fs_id);
  ::runtime::v1alpha2::FilesystemIdentifier* unsafe_arena_release_fs_id();

  // .runtime.v1alpha2.UInt64Value used_bytes = 3;
  bool has_used_bytes() const;
  private:
  bool _internal_has_used_bytes() const;
  public:
  void clear_used_bytes();
  const ::runtime::v1alpha2::UInt64Value& used_bytes() const;
  ::runtime::v1alpha2::UInt64Value* release_used_bytes();
  ::runtime::v1alpha2::UInt64Value* mutable_used_bytes();
  void set_allocated_used_bytes(::runtime::v1alpha2::UInt64Value* used_bytes);
  private:
  const ::runtime::v1alpha2::UInt64Value& _internal_used_bytes() const;
  ::runtime::v1alpha2::UInt64Value* _internal_mutable_used_bytes();
  public:
  void unsafe_arena_set_allocated_used_bytes(
      ::runtime::v1alpha2::UInt64Value* used_bytes);
  ::runtime::v1alpha2::UInt64Value* unsafe_arena_release_used_bytes();

  // .runtime.v1alpha2.UInt64Value inodes_used = 4;
  bool has_inodes_used() const;
  private:
  bool _internal_has_inodes_used() const;
  public:
  void clear_inodes_used();
  const ::runtime::v1alpha2::UInt64Value& inodes_used() const;
  ::runtime::v1alpha2::UInt64Value* release_inodes_used();
  ::runtime::v1alpha2::UInt64Value* mutable_inodes_used();
  void set_allocated_inodes_used(::runtime::v1alpha2::UInt64Value* inodes_used);
  private:
  const ::runtime::v1alpha2::UInt64Value& _internal_inodes_used() const;
  ::runtime::v1alpha2::UInt64Value* _internal_mutable_inodes_used();
  public:
  void unsafe_arena_set_allocated_inodes_used(
      ::runtime::v1alpha2::UInt64Value* inodes_used);
  ::runtime::v1alpha2::UInt64Value* unsafe_arena_release_inodes_used();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.FilesystemUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::FilesystemIdentifier* fs_id_;
  ::runtime::v1alpha2::UInt64Value* used_bytes_;
  ::runtime::v1alpha2::UInt64Value* inodes_used_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ImageFsInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ImageFsInfoResponse) */ {
 public:
  inline ImageFsInfoResponse() : ImageFsInfoResponse(nullptr) {};
  virtual ~ImageFsInfoResponse();

  ImageFsInfoResponse(const ImageFsInfoResponse& from);
  ImageFsInfoResponse(ImageFsInfoResponse&& from) noexcept
    : ImageFsInfoResponse() {
    *this = ::std::move(from);
  }

  inline ImageFsInfoResponse& operator=(const ImageFsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFsInfoResponse& operator=(ImageFsInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFsInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageFsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ImageFsInfoResponse*>(
               &_ImageFsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ImageFsInfoResponse& a, ImageFsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFsInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFsInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFsInfoResponse* New() const final {
    return CreateMaybeMessage<ImageFsInfoResponse>(nullptr);
  }

  ImageFsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFsInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFsInfoResponse& from);
  void MergeFrom(const ImageFsInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFsInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ImageFsInfoResponse";
  }
  protected:
  explicit ImageFsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFilesystemsFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.FilesystemUsage image_filesystems = 1;
  int image_filesystems_size() const;
  private:
  int _internal_image_filesystems_size() const;
  public:
  void clear_image_filesystems();
  ::runtime::v1alpha2::FilesystemUsage* mutable_image_filesystems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::FilesystemUsage >*
      mutable_image_filesystems();
  private:
  const ::runtime::v1alpha2::FilesystemUsage& _internal_image_filesystems(int index) const;
  ::runtime::v1alpha2::FilesystemUsage* _internal_add_image_filesystems();
  public:
  const ::runtime::v1alpha2::FilesystemUsage& image_filesystems(int index) const;
  ::runtime::v1alpha2::FilesystemUsage* add_image_filesystems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::FilesystemUsage >&
      image_filesystems() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ImageFsInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::FilesystemUsage > image_filesystems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatsRequest) */ {
 public:
  inline ContainerStatsRequest() : ContainerStatsRequest(nullptr) {};
  virtual ~ContainerStatsRequest();

  ContainerStatsRequest(const ContainerStatsRequest& from);
  ContainerStatsRequest(ContainerStatsRequest&& from) noexcept
    : ContainerStatsRequest() {
    *this = ::std::move(from);
  }

  inline ContainerStatsRequest& operator=(const ContainerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatsRequest& operator=(ContainerStatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const ContainerStatsRequest*>(
               &_ContainerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ContainerStatsRequest& a, ContainerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatsRequest* New() const final {
    return CreateMaybeMessage<ContainerStatsRequest>(nullptr);
  }

  ContainerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatsRequest& from);
  void MergeFrom(const ContainerStatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatsRequest";
  }
  protected:
  explicit ContainerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatsResponse) */ {
 public:
  inline ContainerStatsResponse() : ContainerStatsResponse(nullptr) {};
  virtual ~ContainerStatsResponse();

  ContainerStatsResponse(const ContainerStatsResponse& from);
  ContainerStatsResponse(ContainerStatsResponse&& from) noexcept
    : ContainerStatsResponse() {
    *this = ::std::move(from);
  }

  inline ContainerStatsResponse& operator=(const ContainerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatsResponse& operator=(ContainerStatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const ContainerStatsResponse*>(
               &_ContainerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ContainerStatsResponse& a, ContainerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatsResponse* New() const final {
    return CreateMaybeMessage<ContainerStatsResponse>(nullptr);
  }

  ContainerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatsResponse& from);
  void MergeFrom(const ContainerStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatsResponse";
  }
  protected:
  explicit ContainerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .runtime.v1alpha2.ContainerStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::runtime::v1alpha2::ContainerStats& stats() const;
  ::runtime::v1alpha2::ContainerStats* release_stats();
  ::runtime::v1alpha2::ContainerStats* mutable_stats();
  void set_allocated_stats(::runtime::v1alpha2::ContainerStats* stats);
  private:
  const ::runtime::v1alpha2::ContainerStats& _internal_stats() const;
  ::runtime::v1alpha2::ContainerStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::runtime::v1alpha2::ContainerStats* stats);
  ::runtime::v1alpha2::ContainerStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ContainerStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListContainerStatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListContainerStatsRequest) */ {
 public:
  inline ListContainerStatsRequest() : ListContainerStatsRequest(nullptr) {};
  virtual ~ListContainerStatsRequest();

  ListContainerStatsRequest(const ListContainerStatsRequest& from);
  ListContainerStatsRequest(ListContainerStatsRequest&& from) noexcept
    : ListContainerStatsRequest() {
    *this = ::std::move(from);
  }

  inline ListContainerStatsRequest& operator=(const ListContainerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContainerStatsRequest& operator=(ListContainerStatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListContainerStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListContainerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const ListContainerStatsRequest*>(
               &_ListContainerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ListContainerStatsRequest& a, ListContainerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListContainerStatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListContainerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListContainerStatsRequest* New() const final {
    return CreateMaybeMessage<ListContainerStatsRequest>(nullptr);
  }

  ListContainerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListContainerStatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListContainerStatsRequest& from);
  void MergeFrom(const ListContainerStatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContainerStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListContainerStatsRequest";
  }
  protected:
  explicit ListContainerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .runtime.v1alpha2.ContainerStatsFilter filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::runtime::v1alpha2::ContainerStatsFilter& filter() const;
  ::runtime::v1alpha2::ContainerStatsFilter* release_filter();
  ::runtime::v1alpha2::ContainerStatsFilter* mutable_filter();
  void set_allocated_filter(::runtime::v1alpha2::ContainerStatsFilter* filter);
  private:
  const ::runtime::v1alpha2::ContainerStatsFilter& _internal_filter() const;
  ::runtime::v1alpha2::ContainerStatsFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::runtime::v1alpha2::ContainerStatsFilter* filter);
  ::runtime::v1alpha2::ContainerStatsFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListContainerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ContainerStatsFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatsFilter_LabelSelectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatsFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerStatsFilter_LabelSelectorEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerStatsFilter_LabelSelectorEntry_DoNotUse();
  ContainerStatsFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerStatsFilter_LabelSelectorEntry_DoNotUse& other);
  static const ContainerStatsFilter_LabelSelectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerStatsFilter_LabelSelectorEntry_DoNotUse*>(&_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatsFilter.LabelSelectorEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerStatsFilter.LabelSelectorEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[116];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerStatsFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStatsFilter) */ {
 public:
  inline ContainerStatsFilter() : ContainerStatsFilter(nullptr) {};
  virtual ~ContainerStatsFilter();

  ContainerStatsFilter(const ContainerStatsFilter& from);
  ContainerStatsFilter(ContainerStatsFilter&& from) noexcept
    : ContainerStatsFilter() {
    *this = ::std::move(from);
  }

  inline ContainerStatsFilter& operator=(const ContainerStatsFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStatsFilter& operator=(ContainerStatsFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStatsFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatsFilter* internal_default_instance() {
    return reinterpret_cast<const ContainerStatsFilter*>(
               &_ContainerStatsFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ContainerStatsFilter& a, ContainerStatsFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStatsFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStatsFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatsFilter* New() const final {
    return CreateMaybeMessage<ContainerStatsFilter>(nullptr);
  }

  ContainerStatsFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatsFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStatsFilter& from);
  void MergeFrom(const ContainerStatsFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatsFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStatsFilter";
  }
  protected:
  explicit ContainerStatsFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelSelectorFieldNumber = 3,
    kIdFieldNumber = 1,
    kPodSandboxIdFieldNumber = 2,
  };
  // map<string, string> label_selector = 3;
  int label_selector_size() const;
  private:
  int _internal_label_selector_size() const;
  public:
  void clear_label_selector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_label_selector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      label_selector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_label_selector();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pod_sandbox_id = 2;
  void clear_pod_sandbox_id();
  const std::string& pod_sandbox_id() const;
  void set_pod_sandbox_id(const std::string& value);
  void set_pod_sandbox_id(std::string&& value);
  void set_pod_sandbox_id(const char* value);
  void set_pod_sandbox_id(const char* value, size_t size);
  std::string* mutable_pod_sandbox_id();
  std::string* release_pod_sandbox_id();
  void set_allocated_pod_sandbox_id(std::string* pod_sandbox_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pod_sandbox_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pod_sandbox_id(
      std::string* pod_sandbox_id);
  private:
  const std::string& _internal_pod_sandbox_id() const;
  void _internal_set_pod_sandbox_id(const std::string& value);
  std::string* _internal_mutable_pod_sandbox_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStatsFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerStatsFilter_LabelSelectorEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > label_selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_sandbox_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ListContainerStatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ListContainerStatsResponse) */ {
 public:
  inline ListContainerStatsResponse() : ListContainerStatsResponse(nullptr) {};
  virtual ~ListContainerStatsResponse();

  ListContainerStatsResponse(const ListContainerStatsResponse& from);
  ListContainerStatsResponse(ListContainerStatsResponse&& from) noexcept
    : ListContainerStatsResponse() {
    *this = ::std::move(from);
  }

  inline ListContainerStatsResponse& operator=(const ListContainerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContainerStatsResponse& operator=(ListContainerStatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListContainerStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListContainerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const ListContainerStatsResponse*>(
               &_ListContainerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ListContainerStatsResponse& a, ListContainerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListContainerStatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListContainerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListContainerStatsResponse* New() const final {
    return CreateMaybeMessage<ListContainerStatsResponse>(nullptr);
  }

  ListContainerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListContainerStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListContainerStatsResponse& from);
  void MergeFrom(const ListContainerStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContainerStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ListContainerStatsResponse";
  }
  protected:
  explicit ListContainerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .runtime.v1alpha2.ContainerStats stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::runtime::v1alpha2::ContainerStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::ContainerStats >*
      mutable_stats();
  private:
  const ::runtime::v1alpha2::ContainerStats& _internal_stats(int index) const;
  ::runtime::v1alpha2::ContainerStats* _internal_add_stats();
  public:
  const ::runtime::v1alpha2::ContainerStats& stats(int index) const;
  ::runtime::v1alpha2::ContainerStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::ContainerStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ListContainerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::ContainerStats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerAttributes_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerAttributes_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerAttributes_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerAttributes_LabelsEntry_DoNotUse();
  ContainerAttributes_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerAttributes_LabelsEntry_DoNotUse& other);
  static const ContainerAttributes_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerAttributes_LabelsEntry_DoNotUse*>(&_ContainerAttributes_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerAttributes.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerAttributes.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[119];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerAttributes_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerAttributes_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContainerAttributes_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContainerAttributes_AnnotationsEntry_DoNotUse();
  ContainerAttributes_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContainerAttributes_AnnotationsEntry_DoNotUse& other);
  static const ContainerAttributes_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContainerAttributes_AnnotationsEntry_DoNotUse*>(&_ContainerAttributes_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerAttributes.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "runtime.v1alpha2.ContainerAttributes.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[120];
  }

  public:
};

// -------------------------------------------------------------------

class ContainerAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerAttributes) */ {
 public:
  inline ContainerAttributes() : ContainerAttributes(nullptr) {};
  virtual ~ContainerAttributes();

  ContainerAttributes(const ContainerAttributes& from);
  ContainerAttributes(ContainerAttributes&& from) noexcept
    : ContainerAttributes() {
    *this = ::std::move(from);
  }

  inline ContainerAttributes& operator=(const ContainerAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerAttributes& operator=(ContainerAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerAttributes* internal_default_instance() {
    return reinterpret_cast<const ContainerAttributes*>(
               &_ContainerAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(ContainerAttributes& a, ContainerAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerAttributes* New() const final {
    return CreateMaybeMessage<ContainerAttributes>(nullptr);
  }

  ContainerAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerAttributes& from);
  void MergeFrom(const ContainerAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerAttributes";
  }
  protected:
  explicit ContainerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
    kIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 4;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::runtime::v1alpha2::ContainerMetadata& metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* release_metadata();
  ::runtime::v1alpha2::ContainerMetadata* mutable_metadata();
  void set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata);
  private:
  const ::runtime::v1alpha2::ContainerMetadata& _internal_metadata() const;
  ::runtime::v1alpha2::ContainerMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::runtime::v1alpha2::ContainerMetadata* metadata);
  ::runtime::v1alpha2::ContainerMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerAttributes_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContainerAttributes_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::runtime::v1alpha2::ContainerMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ContainerStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ContainerStats) */ {
 public:
  inline ContainerStats() : ContainerStats(nullptr) {};
  virtual ~ContainerStats();

  ContainerStats(const ContainerStats& from);
  ContainerStats(ContainerStats&& from) noexcept
    : ContainerStats() {
    *this = ::std::move(from);
  }

  inline ContainerStats& operator=(const ContainerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerStats& operator=(ContainerStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStats* internal_default_instance() {
    return reinterpret_cast<const ContainerStats*>(
               &_ContainerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(ContainerStats& a, ContainerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerStats* New() const final {
    return CreateMaybeMessage<ContainerStats>(nullptr);
  }

  ContainerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerStats& from);
  void MergeFrom(const ContainerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ContainerStats";
  }
  protected:
  explicit ContainerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kCpuFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kWritableLayerFieldNumber = 4,
  };
  // .runtime.v1alpha2.ContainerAttributes attributes = 1;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::runtime::v1alpha2::ContainerAttributes& attributes() const;
  ::runtime::v1alpha2::ContainerAttributes* release_attributes();
  ::runtime::v1alpha2::ContainerAttributes* mutable_attributes();
  void set_allocated_attributes(::runtime::v1alpha2::ContainerAttributes* attributes);
  private:
  const ::runtime::v1alpha2::ContainerAttributes& _internal_attributes() const;
  ::runtime::v1alpha2::ContainerAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::runtime::v1alpha2::ContainerAttributes* attributes);
  ::runtime::v1alpha2::ContainerAttributes* unsafe_arena_release_attributes();

  // .runtime.v1alpha2.CpuUsage cpu = 2;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::runtime::v1alpha2::CpuUsage& cpu() const;
  ::runtime::v1alpha2::CpuUsage* release_cpu();
  ::runtime::v1alpha2::CpuUsage* mutable_cpu();
  void set_allocated_cpu(::runtime::v1alpha2::CpuUsage* cpu);
  private:
  const ::runtime::v1alpha2::CpuUsage& _internal_cpu() const;
  ::runtime::v1alpha2::CpuUsage* _internal_mutable_cpu();
  public:
  void unsafe_arena_set_allocated_cpu(
      ::runtime::v1alpha2::CpuUsage* cpu);
  ::runtime::v1alpha2::CpuUsage* unsafe_arena_release_cpu();

  // .runtime.v1alpha2.MemoryUsage memory = 3;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::runtime::v1alpha2::MemoryUsage& memory() const;
  ::runtime::v1alpha2::MemoryUsage* release_memory();
  ::runtime::v1alpha2::MemoryUsage* mutable_memory();
  void set_allocated_memory(::runtime::v1alpha2::MemoryUsage* memory);
  private:
  const ::runtime::v1alpha2::MemoryUsage& _internal_memory() const;
  ::runtime::v1alpha2::MemoryUsage* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::runtime::v1alpha2::MemoryUsage* memory);
  ::runtime::v1alpha2::MemoryUsage* unsafe_arena_release_memory();

  // .runtime.v1alpha2.FilesystemUsage writable_layer = 4;
  bool has_writable_layer() const;
  private:
  bool _internal_has_writable_layer() const;
  public:
  void clear_writable_layer();
  const ::runtime::v1alpha2::FilesystemUsage& writable_layer() const;
  ::runtime::v1alpha2::FilesystemUsage* release_writable_layer();
  ::runtime::v1alpha2::FilesystemUsage* mutable_writable_layer();
  void set_allocated_writable_layer(::runtime::v1alpha2::FilesystemUsage* writable_layer);
  private:
  const ::runtime::v1alpha2::FilesystemUsage& _internal_writable_layer() const;
  ::runtime::v1alpha2::FilesystemUsage* _internal_mutable_writable_layer();
  public:
  void unsafe_arena_set_allocated_writable_layer(
      ::runtime::v1alpha2::FilesystemUsage* writable_layer);
  ::runtime::v1alpha2::FilesystemUsage* unsafe_arena_release_writable_layer();

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ContainerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::ContainerAttributes* attributes_;
  ::runtime::v1alpha2::CpuUsage* cpu_;
  ::runtime::v1alpha2::MemoryUsage* memory_;
  ::runtime::v1alpha2::FilesystemUsage* writable_layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class CpuUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.CpuUsage) */ {
 public:
  inline CpuUsage() : CpuUsage(nullptr) {};
  virtual ~CpuUsage();

  CpuUsage(const CpuUsage& from);
  CpuUsage(CpuUsage&& from) noexcept
    : CpuUsage() {
    *this = ::std::move(from);
  }

  inline CpuUsage& operator=(const CpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuUsage& operator=(CpuUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuUsage* internal_default_instance() {
    return reinterpret_cast<const CpuUsage*>(
               &_CpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CpuUsage& a, CpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuUsage* New() const final {
    return CreateMaybeMessage<CpuUsage>(nullptr);
  }

  CpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuUsage& from);
  void MergeFrom(const CpuUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.CpuUsage";
  }
  protected:
  explicit CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageCoreNanoSecondsFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .runtime.v1alpha2.UInt64Value usage_core_nano_seconds = 2;
  bool has_usage_core_nano_seconds() const;
  private:
  bool _internal_has_usage_core_nano_seconds() const;
  public:
  void clear_usage_core_nano_seconds();
  const ::runtime::v1alpha2::UInt64Value& usage_core_nano_seconds() const;
  ::runtime::v1alpha2::UInt64Value* release_usage_core_nano_seconds();
  ::runtime::v1alpha2::UInt64Value* mutable_usage_core_nano_seconds();
  void set_allocated_usage_core_nano_seconds(::runtime::v1alpha2::UInt64Value* usage_core_nano_seconds);
  private:
  const ::runtime::v1alpha2::UInt64Value& _internal_usage_core_nano_seconds() const;
  ::runtime::v1alpha2::UInt64Value* _internal_mutable_usage_core_nano_seconds();
  public:
  void unsafe_arena_set_allocated_usage_core_nano_seconds(
      ::runtime::v1alpha2::UInt64Value* usage_core_nano_seconds);
  ::runtime::v1alpha2::UInt64Value* unsafe_arena_release_usage_core_nano_seconds();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.CpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::UInt64Value* usage_core_nano_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MemoryUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.MemoryUsage) */ {
 public:
  inline MemoryUsage() : MemoryUsage(nullptr) {};
  virtual ~MemoryUsage();

  MemoryUsage(const MemoryUsage& from);
  MemoryUsage(MemoryUsage&& from) noexcept
    : MemoryUsage() {
    *this = ::std::move(from);
  }

  inline MemoryUsage& operator=(const MemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryUsage& operator=(MemoryUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryUsage* internal_default_instance() {
    return reinterpret_cast<const MemoryUsage*>(
               &_MemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(MemoryUsage& a, MemoryUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryUsage* New() const final {
    return CreateMaybeMessage<MemoryUsage>(nullptr);
  }

  MemoryUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryUsage& from);
  void MergeFrom(const MemoryUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.MemoryUsage";
  }
  protected:
  explicit MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingSetBytesFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .runtime.v1alpha2.UInt64Value working_set_bytes = 2;
  bool has_working_set_bytes() const;
  private:
  bool _internal_has_working_set_bytes() const;
  public:
  void clear_working_set_bytes();
  const ::runtime::v1alpha2::UInt64Value& working_set_bytes() const;
  ::runtime::v1alpha2::UInt64Value* release_working_set_bytes();
  ::runtime::v1alpha2::UInt64Value* mutable_working_set_bytes();
  void set_allocated_working_set_bytes(::runtime::v1alpha2::UInt64Value* working_set_bytes);
  private:
  const ::runtime::v1alpha2::UInt64Value& _internal_working_set_bytes() const;
  ::runtime::v1alpha2::UInt64Value* _internal_mutable_working_set_bytes();
  public:
  void unsafe_arena_set_allocated_working_set_bytes(
      ::runtime::v1alpha2::UInt64Value* working_set_bytes);
  ::runtime::v1alpha2::UInt64Value* unsafe_arena_release_working_set_bytes();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.MemoryUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::runtime::v1alpha2::UInt64Value* working_set_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ReopenContainerLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ReopenContainerLogRequest) */ {
 public:
  inline ReopenContainerLogRequest() : ReopenContainerLogRequest(nullptr) {};
  virtual ~ReopenContainerLogRequest();

  ReopenContainerLogRequest(const ReopenContainerLogRequest& from);
  ReopenContainerLogRequest(ReopenContainerLogRequest&& from) noexcept
    : ReopenContainerLogRequest() {
    *this = ::std::move(from);
  }

  inline ReopenContainerLogRequest& operator=(const ReopenContainerLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReopenContainerLogRequest& operator=(ReopenContainerLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReopenContainerLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReopenContainerLogRequest* internal_default_instance() {
    return reinterpret_cast<const ReopenContainerLogRequest*>(
               &_ReopenContainerLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ReopenContainerLogRequest& a, ReopenContainerLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReopenContainerLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReopenContainerLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReopenContainerLogRequest* New() const final {
    return CreateMaybeMessage<ReopenContainerLogRequest>(nullptr);
  }

  ReopenContainerLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReopenContainerLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReopenContainerLogRequest& from);
  void MergeFrom(const ReopenContainerLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReopenContainerLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ReopenContainerLogRequest";
  }
  protected:
  explicit ReopenContainerLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIdFieldNumber = 1,
  };
  // string container_id = 1;
  void clear_container_id();
  const std::string& container_id() const;
  void set_container_id(const std::string& value);
  void set_container_id(std::string&& value);
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  std::string* mutable_container_id();
  std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_container_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_container_id(
      std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ReopenContainerLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class ReopenContainerLogResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runtime.v1alpha2.ReopenContainerLogResponse) */ {
 public:
  inline ReopenContainerLogResponse() : ReopenContainerLogResponse(nullptr) {};
  virtual ~ReopenContainerLogResponse();

  ReopenContainerLogResponse(const ReopenContainerLogResponse& from);
  ReopenContainerLogResponse(ReopenContainerLogResponse&& from) noexcept
    : ReopenContainerLogResponse() {
    *this = ::std::move(from);
  }

  inline ReopenContainerLogResponse& operator=(const ReopenContainerLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReopenContainerLogResponse& operator=(ReopenContainerLogResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReopenContainerLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReopenContainerLogResponse* internal_default_instance() {
    return reinterpret_cast<const ReopenContainerLogResponse*>(
               &_ReopenContainerLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(ReopenContainerLogResponse& a, ReopenContainerLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReopenContainerLogResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReopenContainerLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReopenContainerLogResponse* New() const final {
    return CreateMaybeMessage<ReopenContainerLogResponse>(nullptr);
  }

  ReopenContainerLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReopenContainerLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReopenContainerLogResponse& from);
  void MergeFrom(const ReopenContainerLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReopenContainerLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runtime.v1alpha2.ReopenContainerLogResponse";
  }
  protected:
  explicit ReopenContainerLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:runtime.v1alpha2.ReopenContainerLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionRequest

// string version = 1;
inline void VersionRequest::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionRequest::version() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.VersionRequest.version)
  return _internal_version();
}
inline void VersionRequest::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.VersionRequest.version)
}
inline std::string* VersionRequest::mutable_version() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.VersionRequest.version)
  return _internal_mutable_version();
}
inline const std::string& VersionRequest::_internal_version() const {
  return version_.Get();
}
inline void VersionRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionRequest::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.VersionRequest.version)
}
inline void VersionRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.VersionRequest.version)
}
inline void VersionRequest::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.VersionRequest.version)
}
inline std::string* VersionRequest::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionRequest::release_version() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.VersionRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.VersionRequest.version)
}
inline std::string* VersionRequest::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.VersionRequest.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionRequest::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.VersionRequest.version)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.VersionResponse.version)
  return _internal_version();
}
inline void VersionResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.VersionResponse.version)
}
inline std::string* VersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.VersionResponse.version)
  return _internal_mutable_version();
}
inline const std::string& VersionResponse::_internal_version() const {
  return version_.Get();
}
inline void VersionResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.VersionResponse.version)
}
inline std::string* VersionResponse::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.VersionResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.VersionResponse.version)
}
inline std::string* VersionResponse::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.VersionResponse.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.VersionResponse.version)
}

// string runtime_name = 2;
inline void VersionResponse::clear_runtime_name() {
  runtime_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::runtime_name() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.VersionResponse.runtime_name)
  return _internal_runtime_name();
}
inline void VersionResponse::set_runtime_name(const std::string& value) {
  _internal_set_runtime_name(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.VersionResponse.runtime_name)
}
inline std::string* VersionResponse::mutable_runtime_name() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.VersionResponse.runtime_name)
  return _internal_mutable_runtime_name();
}
inline const std::string& VersionResponse::_internal_runtime_name() const {
  return runtime_name_.Get();
}
inline void VersionResponse::_internal_set_runtime_name(const std::string& value) {
  
  runtime_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_runtime_name(std::string&& value) {
  
  runtime_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.VersionResponse.runtime_name)
}
inline void VersionResponse::set_runtime_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.VersionResponse.runtime_name)
}
inline void VersionResponse::set_runtime_name(const char* value,
    size_t size) {
  
  runtime_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.VersionResponse.runtime_name)
}
inline std::string* VersionResponse::_internal_mutable_runtime_name() {
  
  return runtime_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_runtime_name() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.VersionResponse.runtime_name)
  return runtime_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_runtime_name(std::string* runtime_name) {
  if (runtime_name != nullptr) {
    
  } else {
    
  }
  runtime_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.VersionResponse.runtime_name)
}
inline std::string* VersionResponse::unsafe_arena_release_runtime_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.VersionResponse.runtime_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_runtime_name(
    std::string* runtime_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_name != nullptr) {
    
  } else {
    
  }
  runtime_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.VersionResponse.runtime_name)
}

// string runtime_version = 3;
inline void VersionResponse::clear_runtime_version() {
  runtime_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::runtime_version() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.VersionResponse.runtime_version)
  return _internal_runtime_version();
}
inline void VersionResponse::set_runtime_version(const std::string& value) {
  _internal_set_runtime_version(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.VersionResponse.runtime_version)
}
inline std::string* VersionResponse::mutable_runtime_version() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.VersionResponse.runtime_version)
  return _internal_mutable_runtime_version();
}
inline const std::string& VersionResponse::_internal_runtime_version() const {
  return runtime_version_.Get();
}
inline void VersionResponse::_internal_set_runtime_version(const std::string& value) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_runtime_version(std::string&& value) {
  
  runtime_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.VersionResponse.runtime_version)
}
inline void VersionResponse::set_runtime_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.VersionResponse.runtime_version)
}
inline void VersionResponse::set_runtime_version(const char* value,
    size_t size) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.VersionResponse.runtime_version)
}
inline std::string* VersionResponse::_internal_mutable_runtime_version() {
  
  return runtime_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_runtime_version() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.VersionResponse.runtime_version)
  return runtime_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_runtime_version(std::string* runtime_version) {
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.VersionResponse.runtime_version)
}
inline std::string* VersionResponse::unsafe_arena_release_runtime_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.VersionResponse.runtime_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_runtime_version(
    std::string* runtime_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.VersionResponse.runtime_version)
}

// string runtime_api_version = 4;
inline void VersionResponse::clear_runtime_api_version() {
  runtime_api_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionResponse::runtime_api_version() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.VersionResponse.runtime_api_version)
  return _internal_runtime_api_version();
}
inline void VersionResponse::set_runtime_api_version(const std::string& value) {
  _internal_set_runtime_api_version(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.VersionResponse.runtime_api_version)
}
inline std::string* VersionResponse::mutable_runtime_api_version() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.VersionResponse.runtime_api_version)
  return _internal_mutable_runtime_api_version();
}
inline const std::string& VersionResponse::_internal_runtime_api_version() const {
  return runtime_api_version_.Get();
}
inline void VersionResponse::_internal_set_runtime_api_version(const std::string& value) {
  
  runtime_api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionResponse::set_runtime_api_version(std::string&& value) {
  
  runtime_api_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.VersionResponse.runtime_api_version)
}
inline void VersionResponse::set_runtime_api_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.VersionResponse.runtime_api_version)
}
inline void VersionResponse::set_runtime_api_version(const char* value,
    size_t size) {
  
  runtime_api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.VersionResponse.runtime_api_version)
}
inline std::string* VersionResponse::_internal_mutable_runtime_api_version() {
  
  return runtime_api_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionResponse::release_runtime_api_version() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.VersionResponse.runtime_api_version)
  return runtime_api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionResponse::set_allocated_runtime_api_version(std::string* runtime_api_version) {
  if (runtime_api_version != nullptr) {
    
  } else {
    
  }
  runtime_api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_api_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.VersionResponse.runtime_api_version)
}
inline std::string* VersionResponse::unsafe_arena_release_runtime_api_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.VersionResponse.runtime_api_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_api_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VersionResponse::unsafe_arena_set_allocated_runtime_api_version(
    std::string* runtime_api_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_api_version != nullptr) {
    
  } else {
    
  }
  runtime_api_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_api_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.VersionResponse.runtime_api_version)
}

// -------------------------------------------------------------------

// DNSConfig

// repeated string servers = 1;
inline int DNSConfig::_internal_servers_size() const {
  return servers_.size();
}
inline int DNSConfig::servers_size() const {
  return _internal_servers_size();
}
inline void DNSConfig::clear_servers() {
  servers_.Clear();
}
inline std::string* DNSConfig::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.DNSConfig.servers)
  return _internal_add_servers();
}
inline const std::string& DNSConfig::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const std::string& DNSConfig::servers(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.DNSConfig.servers)
  return _internal_servers(index);
}
inline std::string* DNSConfig::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.DNSConfig.servers)
  return servers_.Mutable(index);
}
inline void DNSConfig::set_servers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.servers)
  servers_.Mutable(index)->assign(value);
}
inline void DNSConfig::set_servers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
inline void DNSConfig::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.DNSConfig.servers)
}
inline void DNSConfig::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.DNSConfig.servers)
}
inline std::string* DNSConfig::_internal_add_servers() {
  return servers_.Add();
}
inline void DNSConfig::add_servers(const std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.servers)
}
inline void DNSConfig::add_servers(std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.servers)
}
inline void DNSConfig::add_servers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.DNSConfig.servers)
}
inline void DNSConfig::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.DNSConfig.servers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DNSConfig::servers() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.DNSConfig.servers)
  return servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DNSConfig::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.DNSConfig.servers)
  return &servers_;
}

// repeated string searches = 2;
inline int DNSConfig::_internal_searches_size() const {
  return searches_.size();
}
inline int DNSConfig::searches_size() const {
  return _internal_searches_size();
}
inline void DNSConfig::clear_searches() {
  searches_.Clear();
}
inline std::string* DNSConfig::add_searches() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.DNSConfig.searches)
  return _internal_add_searches();
}
inline const std::string& DNSConfig::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const std::string& DNSConfig::searches(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.DNSConfig.searches)
  return _internal_searches(index);
}
inline std::string* DNSConfig::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.DNSConfig.searches)
  return searches_.Mutable(index);
}
inline void DNSConfig::set_searches(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.searches)
  searches_.Mutable(index)->assign(value);
}
inline void DNSConfig::set_searches(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.searches)
  searches_.Mutable(index)->assign(std::move(value));
}
inline void DNSConfig::set_searches(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  searches_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.DNSConfig.searches)
}
inline void DNSConfig::set_searches(int index, const char* value, size_t size) {
  searches_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.DNSConfig.searches)
}
inline std::string* DNSConfig::_internal_add_searches() {
  return searches_.Add();
}
inline void DNSConfig::add_searches(const std::string& value) {
  searches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.searches)
}
inline void DNSConfig::add_searches(std::string&& value) {
  searches_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.searches)
}
inline void DNSConfig::add_searches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  searches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.DNSConfig.searches)
}
inline void DNSConfig::add_searches(const char* value, size_t size) {
  searches_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.DNSConfig.searches)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DNSConfig::searches() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.DNSConfig.searches)
  return searches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DNSConfig::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.DNSConfig.searches)
  return &searches_;
}

// repeated string options = 3;
inline int DNSConfig::_internal_options_size() const {
  return options_.size();
}
inline int DNSConfig::options_size() const {
  return _internal_options_size();
}
inline void DNSConfig::clear_options() {
  options_.Clear();
}
inline std::string* DNSConfig::add_options() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.DNSConfig.options)
  return _internal_add_options();
}
inline const std::string& DNSConfig::_internal_options(int index) const {
  return options_.Get(index);
}
inline const std::string& DNSConfig::options(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.DNSConfig.options)
  return _internal_options(index);
}
inline std::string* DNSConfig::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.DNSConfig.options)
  return options_.Mutable(index);
}
inline void DNSConfig::set_options(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.options)
  options_.Mutable(index)->assign(value);
}
inline void DNSConfig::set_options(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.DNSConfig.options)
  options_.Mutable(index)->assign(std::move(value));
}
inline void DNSConfig::set_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.DNSConfig.options)
}
inline void DNSConfig::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.DNSConfig.options)
}
inline std::string* DNSConfig::_internal_add_options() {
  return options_.Add();
}
inline void DNSConfig::add_options(const std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.options)
}
inline void DNSConfig::add_options(std::string&& value) {
  options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.DNSConfig.options)
}
inline void DNSConfig::add_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.DNSConfig.options)
}
inline void DNSConfig::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.DNSConfig.options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DNSConfig::options() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.DNSConfig.options)
  return options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DNSConfig::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.DNSConfig.options)
  return &options_;
}

// -------------------------------------------------------------------

// PortMapping

// .runtime.v1alpha2.Protocol protocol = 1;
inline void PortMapping::clear_protocol() {
  protocol_ = 0;
}
inline ::runtime::v1alpha2::Protocol PortMapping::_internal_protocol() const {
  return static_cast< ::runtime::v1alpha2::Protocol >(protocol_);
}
inline ::runtime::v1alpha2::Protocol PortMapping::protocol() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortMapping.protocol)
  return _internal_protocol();
}
inline void PortMapping::_internal_set_protocol(::runtime::v1alpha2::Protocol value) {
  
  protocol_ = value;
}
inline void PortMapping::set_protocol(::runtime::v1alpha2::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortMapping.protocol)
}

// int32 container_port = 2;
inline void PortMapping::clear_container_port() {
  container_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortMapping::_internal_container_port() const {
  return container_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortMapping::container_port() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortMapping.container_port)
  return _internal_container_port();
}
inline void PortMapping::_internal_set_container_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  container_port_ = value;
}
inline void PortMapping::set_container_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_container_port(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortMapping.container_port)
}

// int32 host_port = 3;
inline void PortMapping::clear_host_port() {
  host_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortMapping::_internal_host_port() const {
  return host_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortMapping::host_port() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortMapping.host_port)
  return _internal_host_port();
}
inline void PortMapping::_internal_set_host_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  host_port_ = value;
}
inline void PortMapping::set_host_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_host_port(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortMapping.host_port)
}

// string host_ip = 4;
inline void PortMapping::clear_host_ip() {
  host_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortMapping::host_ip() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortMapping.host_ip)
  return _internal_host_ip();
}
inline void PortMapping::set_host_ip(const std::string& value) {
  _internal_set_host_ip(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortMapping.host_ip)
}
inline std::string* PortMapping::mutable_host_ip() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PortMapping.host_ip)
  return _internal_mutable_host_ip();
}
inline const std::string& PortMapping::_internal_host_ip() const {
  return host_ip_.Get();
}
inline void PortMapping::_internal_set_host_ip(const std::string& value) {
  
  host_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortMapping::set_host_ip(std::string&& value) {
  
  host_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PortMapping.host_ip)
}
inline void PortMapping::set_host_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PortMapping.host_ip)
}
inline void PortMapping::set_host_ip(const char* value,
    size_t size) {
  
  host_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PortMapping.host_ip)
}
inline std::string* PortMapping::_internal_mutable_host_ip() {
  
  return host_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortMapping::release_host_ip() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PortMapping.host_ip)
  return host_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortMapping::set_allocated_host_ip(std::string* host_ip) {
  if (host_ip != nullptr) {
    
  } else {
    
  }
  host_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PortMapping.host_ip)
}
inline std::string* PortMapping::unsafe_arena_release_host_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PortMapping.host_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortMapping::unsafe_arena_set_allocated_host_ip(
    std::string* host_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host_ip != nullptr) {
    
  } else {
    
  }
  host_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PortMapping.host_ip)
}

// -------------------------------------------------------------------

// Mount

// string container_path = 1;
inline void Mount::clear_container_path() {
  container_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::container_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Mount.container_path)
  return _internal_container_path();
}
inline void Mount::set_container_path(const std::string& value) {
  _internal_set_container_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Mount.container_path)
}
inline std::string* Mount::mutable_container_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Mount.container_path)
  return _internal_mutable_container_path();
}
inline const std::string& Mount::_internal_container_path() const {
  return container_path_.Get();
}
inline void Mount::_internal_set_container_path(const std::string& value) {
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_container_path(std::string&& value) {
  
  container_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Mount.container_path)
}
inline void Mount::set_container_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Mount.container_path)
}
inline void Mount::set_container_path(const char* value,
    size_t size) {
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Mount.container_path)
}
inline std::string* Mount::_internal_mutable_container_path() {
  
  return container_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_container_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Mount.container_path)
  return container_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_container_path(std::string* container_path) {
  if (container_path != nullptr) {
    
  } else {
    
  }
  container_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Mount.container_path)
}
inline std::string* Mount::unsafe_arena_release_container_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Mount.container_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_container_path(
    std::string* container_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_path != nullptr) {
    
  } else {
    
  }
  container_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Mount.container_path)
}

// string host_path = 2;
inline void Mount::clear_host_path() {
  host_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mount::host_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Mount.host_path)
  return _internal_host_path();
}
inline void Mount::set_host_path(const std::string& value) {
  _internal_set_host_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Mount.host_path)
}
inline std::string* Mount::mutable_host_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Mount.host_path)
  return _internal_mutable_host_path();
}
inline const std::string& Mount::_internal_host_path() const {
  return host_path_.Get();
}
inline void Mount::_internal_set_host_path(const std::string& value) {
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mount::set_host_path(std::string&& value) {
  
  host_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Mount.host_path)
}
inline void Mount::set_host_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Mount.host_path)
}
inline void Mount::set_host_path(const char* value,
    size_t size) {
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Mount.host_path)
}
inline std::string* Mount::_internal_mutable_host_path() {
  
  return host_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mount::release_host_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Mount.host_path)
  return host_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mount::set_allocated_host_path(std::string* host_path) {
  if (host_path != nullptr) {
    
  } else {
    
  }
  host_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Mount.host_path)
}
inline std::string* Mount::unsafe_arena_release_host_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Mount.host_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mount::unsafe_arena_set_allocated_host_path(
    std::string* host_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host_path != nullptr) {
    
  } else {
    
  }
  host_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Mount.host_path)
}

// bool readonly = 3;
inline void Mount::clear_readonly() {
  readonly_ = false;
}
inline bool Mount::_internal_readonly() const {
  return readonly_;
}
inline bool Mount::readonly() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Mount.readonly)
  return _internal_readonly();
}
inline void Mount::_internal_set_readonly(bool value) {
  
  readonly_ = value;
}
inline void Mount::set_readonly(bool value) {
  _internal_set_readonly(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Mount.readonly)
}

// bool selinux_relabel = 4;
inline void Mount::clear_selinux_relabel() {
  selinux_relabel_ = false;
}
inline bool Mount::_internal_selinux_relabel() const {
  return selinux_relabel_;
}
inline bool Mount::selinux_relabel() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Mount.selinux_relabel)
  return _internal_selinux_relabel();
}
inline void Mount::_internal_set_selinux_relabel(bool value) {
  
  selinux_relabel_ = value;
}
inline void Mount::set_selinux_relabel(bool value) {
  _internal_set_selinux_relabel(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Mount.selinux_relabel)
}

// .runtime.v1alpha2.MountPropagation propagation = 5;
inline void Mount::clear_propagation() {
  propagation_ = 0;
}
inline ::runtime::v1alpha2::MountPropagation Mount::_internal_propagation() const {
  return static_cast< ::runtime::v1alpha2::MountPropagation >(propagation_);
}
inline ::runtime::v1alpha2::MountPropagation Mount::propagation() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Mount.propagation)
  return _internal_propagation();
}
inline void Mount::_internal_set_propagation(::runtime::v1alpha2::MountPropagation value) {
  
  propagation_ = value;
}
inline void Mount::set_propagation(::runtime::v1alpha2::MountPropagation value) {
  _internal_set_propagation(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Mount.propagation)
}

// -------------------------------------------------------------------

// NamespaceOption

// .runtime.v1alpha2.NamespaceMode network = 1;
inline void NamespaceOption::clear_network() {
  network_ = 0;
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::_internal_network() const {
  return static_cast< ::runtime::v1alpha2::NamespaceMode >(network_);
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::network() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.NamespaceOption.network)
  return _internal_network();
}
inline void NamespaceOption::_internal_set_network(::runtime::v1alpha2::NamespaceMode value) {
  
  network_ = value;
}
inline void NamespaceOption::set_network(::runtime::v1alpha2::NamespaceMode value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.NamespaceOption.network)
}

// .runtime.v1alpha2.NamespaceMode pid = 2;
inline void NamespaceOption::clear_pid() {
  pid_ = 0;
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::_internal_pid() const {
  return static_cast< ::runtime::v1alpha2::NamespaceMode >(pid_);
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::pid() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.NamespaceOption.pid)
  return _internal_pid();
}
inline void NamespaceOption::_internal_set_pid(::runtime::v1alpha2::NamespaceMode value) {
  
  pid_ = value;
}
inline void NamespaceOption::set_pid(::runtime::v1alpha2::NamespaceMode value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.NamespaceOption.pid)
}

// .runtime.v1alpha2.NamespaceMode ipc = 3;
inline void NamespaceOption::clear_ipc() {
  ipc_ = 0;
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::_internal_ipc() const {
  return static_cast< ::runtime::v1alpha2::NamespaceMode >(ipc_);
}
inline ::runtime::v1alpha2::NamespaceMode NamespaceOption::ipc() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.NamespaceOption.ipc)
  return _internal_ipc();
}
inline void NamespaceOption::_internal_set_ipc(::runtime::v1alpha2::NamespaceMode value) {
  
  ipc_ = value;
}
inline void NamespaceOption::set_ipc(::runtime::v1alpha2::NamespaceMode value) {
  _internal_set_ipc(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.NamespaceOption.ipc)
}

// string target_id = 4;
inline void NamespaceOption::clear_target_id() {
  target_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamespaceOption::target_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.NamespaceOption.target_id)
  return _internal_target_id();
}
inline void NamespaceOption::set_target_id(const std::string& value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.NamespaceOption.target_id)
}
inline std::string* NamespaceOption::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.NamespaceOption.target_id)
  return _internal_mutable_target_id();
}
inline const std::string& NamespaceOption::_internal_target_id() const {
  return target_id_.Get();
}
inline void NamespaceOption::_internal_set_target_id(const std::string& value) {
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamespaceOption::set_target_id(std::string&& value) {
  
  target_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.NamespaceOption.target_id)
}
inline void NamespaceOption::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.NamespaceOption.target_id)
}
inline void NamespaceOption::set_target_id(const char* value,
    size_t size) {
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.NamespaceOption.target_id)
}
inline std::string* NamespaceOption::_internal_mutable_target_id() {
  
  return target_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamespaceOption::release_target_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.NamespaceOption.target_id)
  return target_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamespaceOption::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.NamespaceOption.target_id)
}
inline std::string* NamespaceOption::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.NamespaceOption.target_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NamespaceOption::unsafe_arena_set_allocated_target_id(
    std::string* target_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.NamespaceOption.target_id)
}

// -------------------------------------------------------------------

// Int64Value

// int64 value = 1;
inline void Int64Value::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Value::value() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Int64Value.value)
  return _internal_value();
}
inline void Int64Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Int64Value::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Int64Value.value)
}

// -------------------------------------------------------------------

// LinuxSandboxSecurityContext

// .runtime.v1alpha2.NamespaceOption namespace_options = 1;
inline bool LinuxSandboxSecurityContext::_internal_has_namespace_options() const {
  return this != internal_default_instance() && namespace_options_ != nullptr;
}
inline bool LinuxSandboxSecurityContext::has_namespace_options() const {
  return _internal_has_namespace_options();
}
inline void LinuxSandboxSecurityContext::clear_namespace_options() {
  if (GetArena() == nullptr && namespace_options_ != nullptr) {
    delete namespace_options_;
  }
  namespace_options_ = nullptr;
}
inline const ::runtime::v1alpha2::NamespaceOption& LinuxSandboxSecurityContext::_internal_namespace_options() const {
  const ::runtime::v1alpha2::NamespaceOption* p = namespace_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::NamespaceOption*>(
      &::runtime::v1alpha2::_NamespaceOption_default_instance_);
}
inline const ::runtime::v1alpha2::NamespaceOption& LinuxSandboxSecurityContext::namespace_options() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.namespace_options)
  return _internal_namespace_options();
}
inline void LinuxSandboxSecurityContext::unsafe_arena_set_allocated_namespace_options(
    ::runtime::v1alpha2::NamespaceOption* namespace_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_options_);
  }
  namespace_options_ = namespace_options;
  if (namespace_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.namespace_options)
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxSandboxSecurityContext::release_namespace_options() {
  auto temp = unsafe_arena_release_namespace_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxSandboxSecurityContext::unsafe_arena_release_namespace_options() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxSandboxSecurityContext.namespace_options)
  
  ::runtime::v1alpha2::NamespaceOption* temp = namespace_options_;
  namespace_options_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxSandboxSecurityContext::_internal_mutable_namespace_options() {
  
  if (namespace_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::NamespaceOption>(GetArena());
    namespace_options_ = p;
  }
  return namespace_options_;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxSandboxSecurityContext::mutable_namespace_options() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxSandboxSecurityContext.namespace_options)
  return _internal_mutable_namespace_options();
}
inline void LinuxSandboxSecurityContext::set_allocated_namespace_options(::runtime::v1alpha2::NamespaceOption* namespace_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete namespace_options_;
  }
  if (namespace_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(namespace_options);
    if (message_arena != submessage_arena) {
      namespace_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_options, submessage_arena);
    }
    
  } else {
    
  }
  namespace_options_ = namespace_options;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.namespace_options)
}

// .runtime.v1alpha2.SELinuxOption selinux_options = 2;
inline bool LinuxSandboxSecurityContext::_internal_has_selinux_options() const {
  return this != internal_default_instance() && selinux_options_ != nullptr;
}
inline bool LinuxSandboxSecurityContext::has_selinux_options() const {
  return _internal_has_selinux_options();
}
inline void LinuxSandboxSecurityContext::clear_selinux_options() {
  if (GetArena() == nullptr && selinux_options_ != nullptr) {
    delete selinux_options_;
  }
  selinux_options_ = nullptr;
}
inline const ::runtime::v1alpha2::SELinuxOption& LinuxSandboxSecurityContext::_internal_selinux_options() const {
  const ::runtime::v1alpha2::SELinuxOption* p = selinux_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::SELinuxOption*>(
      &::runtime::v1alpha2::_SELinuxOption_default_instance_);
}
inline const ::runtime::v1alpha2::SELinuxOption& LinuxSandboxSecurityContext::selinux_options() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.selinux_options)
  return _internal_selinux_options();
}
inline void LinuxSandboxSecurityContext::unsafe_arena_set_allocated_selinux_options(
    ::runtime::v1alpha2::SELinuxOption* selinux_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selinux_options_);
  }
  selinux_options_ = selinux_options;
  if (selinux_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.selinux_options)
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxSandboxSecurityContext::release_selinux_options() {
  auto temp = unsafe_arena_release_selinux_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxSandboxSecurityContext::unsafe_arena_release_selinux_options() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxSandboxSecurityContext.selinux_options)
  
  ::runtime::v1alpha2::SELinuxOption* temp = selinux_options_;
  selinux_options_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxSandboxSecurityContext::_internal_mutable_selinux_options() {
  
  if (selinux_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::SELinuxOption>(GetArena());
    selinux_options_ = p;
  }
  return selinux_options_;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxSandboxSecurityContext::mutable_selinux_options() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxSandboxSecurityContext.selinux_options)
  return _internal_mutable_selinux_options();
}
inline void LinuxSandboxSecurityContext::set_allocated_selinux_options(::runtime::v1alpha2::SELinuxOption* selinux_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selinux_options_;
  }
  if (selinux_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selinux_options);
    if (message_arena != submessage_arena) {
      selinux_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selinux_options, submessage_arena);
    }
    
  } else {
    
  }
  selinux_options_ = selinux_options;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.selinux_options)
}

// .runtime.v1alpha2.Int64Value run_as_user = 3;
inline bool LinuxSandboxSecurityContext::_internal_has_run_as_user() const {
  return this != internal_default_instance() && run_as_user_ != nullptr;
}
inline bool LinuxSandboxSecurityContext::has_run_as_user() const {
  return _internal_has_run_as_user();
}
inline void LinuxSandboxSecurityContext::clear_run_as_user() {
  if (GetArena() == nullptr && run_as_user_ != nullptr) {
    delete run_as_user_;
  }
  run_as_user_ = nullptr;
}
inline const ::runtime::v1alpha2::Int64Value& LinuxSandboxSecurityContext::_internal_run_as_user() const {
  const ::runtime::v1alpha2::Int64Value* p = run_as_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Int64Value*>(
      &::runtime::v1alpha2::_Int64Value_default_instance_);
}
inline const ::runtime::v1alpha2::Int64Value& LinuxSandboxSecurityContext::run_as_user() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_user)
  return _internal_run_as_user();
}
inline void LinuxSandboxSecurityContext::unsafe_arena_set_allocated_run_as_user(
    ::runtime::v1alpha2::Int64Value* run_as_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_as_user_);
  }
  run_as_user_ = run_as_user;
  if (run_as_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_user)
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::release_run_as_user() {
  auto temp = unsafe_arena_release_run_as_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::unsafe_arena_release_run_as_user() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_user)
  
  ::runtime::v1alpha2::Int64Value* temp = run_as_user_;
  run_as_user_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::_internal_mutable_run_as_user() {
  
  if (run_as_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(GetArena());
    run_as_user_ = p;
  }
  return run_as_user_;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::mutable_run_as_user() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_user)
  return _internal_mutable_run_as_user();
}
inline void LinuxSandboxSecurityContext::set_allocated_run_as_user(::runtime::v1alpha2::Int64Value* run_as_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete run_as_user_;
  }
  if (run_as_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_as_user);
    if (message_arena != submessage_arena) {
      run_as_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_as_user, submessage_arena);
    }
    
  } else {
    
  }
  run_as_user_ = run_as_user;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_user)
}

// .runtime.v1alpha2.Int64Value run_as_group = 8;
inline bool LinuxSandboxSecurityContext::_internal_has_run_as_group() const {
  return this != internal_default_instance() && run_as_group_ != nullptr;
}
inline bool LinuxSandboxSecurityContext::has_run_as_group() const {
  return _internal_has_run_as_group();
}
inline void LinuxSandboxSecurityContext::clear_run_as_group() {
  if (GetArena() == nullptr && run_as_group_ != nullptr) {
    delete run_as_group_;
  }
  run_as_group_ = nullptr;
}
inline const ::runtime::v1alpha2::Int64Value& LinuxSandboxSecurityContext::_internal_run_as_group() const {
  const ::runtime::v1alpha2::Int64Value* p = run_as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Int64Value*>(
      &::runtime::v1alpha2::_Int64Value_default_instance_);
}
inline const ::runtime::v1alpha2::Int64Value& LinuxSandboxSecurityContext::run_as_group() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_group)
  return _internal_run_as_group();
}
inline void LinuxSandboxSecurityContext::unsafe_arena_set_allocated_run_as_group(
    ::runtime::v1alpha2::Int64Value* run_as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_as_group_);
  }
  run_as_group_ = run_as_group;
  if (run_as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_group)
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::release_run_as_group() {
  auto temp = unsafe_arena_release_run_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::unsafe_arena_release_run_as_group() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_group)
  
  ::runtime::v1alpha2::Int64Value* temp = run_as_group_;
  run_as_group_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::_internal_mutable_run_as_group() {
  
  if (run_as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(GetArena());
    run_as_group_ = p;
  }
  return run_as_group_;
}
inline ::runtime::v1alpha2::Int64Value* LinuxSandboxSecurityContext::mutable_run_as_group() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_group)
  return _internal_mutable_run_as_group();
}
inline void LinuxSandboxSecurityContext::set_allocated_run_as_group(::runtime::v1alpha2::Int64Value* run_as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete run_as_group_;
  }
  if (run_as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_as_group);
    if (message_arena != submessage_arena) {
      run_as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_as_group, submessage_arena);
    }
    
  } else {
    
  }
  run_as_group_ = run_as_group;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.run_as_group)
}

// bool readonly_rootfs = 4;
inline void LinuxSandboxSecurityContext::clear_readonly_rootfs() {
  readonly_rootfs_ = false;
}
inline bool LinuxSandboxSecurityContext::_internal_readonly_rootfs() const {
  return readonly_rootfs_;
}
inline bool LinuxSandboxSecurityContext::readonly_rootfs() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.readonly_rootfs)
  return _internal_readonly_rootfs();
}
inline void LinuxSandboxSecurityContext::_internal_set_readonly_rootfs(bool value) {
  
  readonly_rootfs_ = value;
}
inline void LinuxSandboxSecurityContext::set_readonly_rootfs(bool value) {
  _internal_set_readonly_rootfs(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxSandboxSecurityContext.readonly_rootfs)
}

// repeated int64 supplemental_groups = 5;
inline int LinuxSandboxSecurityContext::_internal_supplemental_groups_size() const {
  return supplemental_groups_.size();
}
inline int LinuxSandboxSecurityContext::supplemental_groups_size() const {
  return _internal_supplemental_groups_size();
}
inline void LinuxSandboxSecurityContext::clear_supplemental_groups() {
  supplemental_groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxSandboxSecurityContext::_internal_supplemental_groups(int index) const {
  return supplemental_groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxSandboxSecurityContext::supplemental_groups(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.supplemental_groups)
  return _internal_supplemental_groups(index);
}
inline void LinuxSandboxSecurityContext::set_supplemental_groups(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  supplemental_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxSandboxSecurityContext.supplemental_groups)
}
inline void LinuxSandboxSecurityContext::_internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value) {
  supplemental_groups_.Add(value);
}
inline void LinuxSandboxSecurityContext::add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_supplemental_groups(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxSandboxSecurityContext.supplemental_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinuxSandboxSecurityContext::_internal_supplemental_groups() const {
  return supplemental_groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinuxSandboxSecurityContext::supplemental_groups() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.LinuxSandboxSecurityContext.supplemental_groups)
  return _internal_supplemental_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinuxSandboxSecurityContext::_internal_mutable_supplemental_groups() {
  return &supplemental_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinuxSandboxSecurityContext::mutable_supplemental_groups() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.LinuxSandboxSecurityContext.supplemental_groups)
  return _internal_mutable_supplemental_groups();
}

// bool privileged = 6;
inline void LinuxSandboxSecurityContext::clear_privileged() {
  privileged_ = false;
}
inline bool LinuxSandboxSecurityContext::_internal_privileged() const {
  return privileged_;
}
inline bool LinuxSandboxSecurityContext::privileged() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.privileged)
  return _internal_privileged();
}
inline void LinuxSandboxSecurityContext::_internal_set_privileged(bool value) {
  
  privileged_ = value;
}
inline void LinuxSandboxSecurityContext::set_privileged(bool value) {
  _internal_set_privileged(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxSandboxSecurityContext.privileged)
}

// string seccomp_profile_path = 7;
inline void LinuxSandboxSecurityContext::clear_seccomp_profile_path() {
  seccomp_profile_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxSandboxSecurityContext::seccomp_profile_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
  return _internal_seccomp_profile_path();
}
inline void LinuxSandboxSecurityContext::set_seccomp_profile_path(const std::string& value) {
  _internal_set_seccomp_profile_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxSandboxSecurityContext::mutable_seccomp_profile_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
  return _internal_mutable_seccomp_profile_path();
}
inline const std::string& LinuxSandboxSecurityContext::_internal_seccomp_profile_path() const {
  return seccomp_profile_path_.Get();
}
inline void LinuxSandboxSecurityContext::_internal_set_seccomp_profile_path(const std::string& value) {
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxSandboxSecurityContext::set_seccomp_profile_path(std::string&& value) {
  
  seccomp_profile_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}
inline void LinuxSandboxSecurityContext::set_seccomp_profile_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}
inline void LinuxSandboxSecurityContext::set_seccomp_profile_path(const char* value,
    size_t size) {
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxSandboxSecurityContext::_internal_mutable_seccomp_profile_path() {
  
  return seccomp_profile_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxSandboxSecurityContext::release_seccomp_profile_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
  return seccomp_profile_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxSandboxSecurityContext::set_allocated_seccomp_profile_path(std::string* seccomp_profile_path) {
  if (seccomp_profile_path != nullptr) {
    
  } else {
    
  }
  seccomp_profile_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seccomp_profile_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxSandboxSecurityContext::unsafe_arena_release_seccomp_profile_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seccomp_profile_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxSandboxSecurityContext::unsafe_arena_set_allocated_seccomp_profile_path(
    std::string* seccomp_profile_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seccomp_profile_path != nullptr) {
    
  } else {
    
  }
  seccomp_profile_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seccomp_profile_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LinuxPodSandboxConfig

// string cgroup_parent = 1;
inline void LinuxPodSandboxConfig::clear_cgroup_parent() {
  cgroup_parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxPodSandboxConfig::cgroup_parent() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
  return _internal_cgroup_parent();
}
inline void LinuxPodSandboxConfig::set_cgroup_parent(const std::string& value) {
  _internal_set_cgroup_parent(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}
inline std::string* LinuxPodSandboxConfig::mutable_cgroup_parent() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
  return _internal_mutable_cgroup_parent();
}
inline const std::string& LinuxPodSandboxConfig::_internal_cgroup_parent() const {
  return cgroup_parent_.Get();
}
inline void LinuxPodSandboxConfig::_internal_set_cgroup_parent(const std::string& value) {
  
  cgroup_parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxPodSandboxConfig::set_cgroup_parent(std::string&& value) {
  
  cgroup_parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}
inline void LinuxPodSandboxConfig::set_cgroup_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgroup_parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}
inline void LinuxPodSandboxConfig::set_cgroup_parent(const char* value,
    size_t size) {
  
  cgroup_parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}
inline std::string* LinuxPodSandboxConfig::_internal_mutable_cgroup_parent() {
  
  return cgroup_parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxPodSandboxConfig::release_cgroup_parent() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
  return cgroup_parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxPodSandboxConfig::set_allocated_cgroup_parent(std::string* cgroup_parent) {
  if (cgroup_parent != nullptr) {
    
  } else {
    
  }
  cgroup_parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgroup_parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}
inline std::string* LinuxPodSandboxConfig::unsafe_arena_release_cgroup_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cgroup_parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxPodSandboxConfig::unsafe_arena_set_allocated_cgroup_parent(
    std::string* cgroup_parent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cgroup_parent != nullptr) {
    
  } else {
    
  }
  cgroup_parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cgroup_parent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent)
}

// .runtime.v1alpha2.LinuxSandboxSecurityContext security_context = 2;
inline bool LinuxPodSandboxConfig::_internal_has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline bool LinuxPodSandboxConfig::has_security_context() const {
  return _internal_has_security_context();
}
inline void LinuxPodSandboxConfig::clear_security_context() {
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxSandboxSecurityContext& LinuxPodSandboxConfig::_internal_security_context() const {
  const ::runtime::v1alpha2::LinuxSandboxSecurityContext* p = security_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxSandboxSecurityContext*>(
      &::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxSandboxSecurityContext& LinuxPodSandboxConfig::security_context() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxPodSandboxConfig.security_context)
  return _internal_security_context();
}
inline void LinuxPodSandboxConfig::unsafe_arena_set_allocated_security_context(
    ::runtime::v1alpha2::LinuxSandboxSecurityContext* security_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  security_context_ = security_context;
  if (security_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxPodSandboxConfig.security_context)
}
inline ::runtime::v1alpha2::LinuxSandboxSecurityContext* LinuxPodSandboxConfig::release_security_context() {
  auto temp = unsafe_arena_release_security_context();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxSandboxSecurityContext* LinuxPodSandboxConfig::unsafe_arena_release_security_context() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxPodSandboxConfig.security_context)
  
  ::runtime::v1alpha2::LinuxSandboxSecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxSandboxSecurityContext* LinuxPodSandboxConfig::_internal_mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxSandboxSecurityContext>(GetArena());
    security_context_ = p;
  }
  return security_context_;
}
inline ::runtime::v1alpha2::LinuxSandboxSecurityContext* LinuxPodSandboxConfig::mutable_security_context() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxPodSandboxConfig.security_context)
  return _internal_mutable_security_context();
}
inline void LinuxPodSandboxConfig::set_allocated_security_context(::runtime::v1alpha2::LinuxSandboxSecurityContext* security_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_context_;
  }
  if (security_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security_context);
    if (message_arena != submessage_arena) {
      security_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxPodSandboxConfig.security_context)
}

// map<string, string> sysctls = 3;
inline int LinuxPodSandboxConfig::_internal_sysctls_size() const {
  return sysctls_.size();
}
inline int LinuxPodSandboxConfig::sysctls_size() const {
  return _internal_sysctls_size();
}
inline void LinuxPodSandboxConfig::clear_sysctls() {
  sysctls_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LinuxPodSandboxConfig::_internal_sysctls() const {
  return sysctls_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LinuxPodSandboxConfig::sysctls() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.LinuxPodSandboxConfig.sysctls)
  return _internal_sysctls();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LinuxPodSandboxConfig::_internal_mutable_sysctls() {
  return sysctls_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LinuxPodSandboxConfig::mutable_sysctls() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.LinuxPodSandboxConfig.sysctls)
  return _internal_mutable_sysctls();
}

// -------------------------------------------------------------------

// PodSandboxMetadata

// string name = 1;
inline void PodSandboxMetadata::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxMetadata::name() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxMetadata.name)
  return _internal_name();
}
inline void PodSandboxMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxMetadata.name)
}
inline std::string* PodSandboxMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& PodSandboxMetadata::_internal_name() const {
  return name_.Get();
}
inline void PodSandboxMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxMetadata::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxMetadata.name)
}
inline void PodSandboxMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxMetadata.name)
}
inline void PodSandboxMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxMetadata.name)
}
inline std::string* PodSandboxMetadata::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxMetadata::release_name() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxMetadata.name)
}
inline std::string* PodSandboxMetadata::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxMetadata.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxMetadata::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxMetadata.name)
}

// string uid = 2;
inline void PodSandboxMetadata::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxMetadata::uid() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxMetadata.uid)
  return _internal_uid();
}
inline void PodSandboxMetadata::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxMetadata.uid)
}
inline std::string* PodSandboxMetadata::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxMetadata.uid)
  return _internal_mutable_uid();
}
inline const std::string& PodSandboxMetadata::_internal_uid() const {
  return uid_.Get();
}
inline void PodSandboxMetadata::_internal_set_uid(const std::string& value) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxMetadata::set_uid(std::string&& value) {
  
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxMetadata.uid)
}
inline void PodSandboxMetadata::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxMetadata.uid)
}
inline void PodSandboxMetadata::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxMetadata.uid)
}
inline std::string* PodSandboxMetadata::_internal_mutable_uid() {
  
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxMetadata::release_uid() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxMetadata.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxMetadata::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxMetadata.uid)
}
inline std::string* PodSandboxMetadata::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxMetadata.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxMetadata::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxMetadata.uid)
}

// string namespace = 3;
inline void PodSandboxMetadata::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxMetadata::namespace_() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxMetadata.namespace)
  return _internal_namespace_();
}
inline void PodSandboxMetadata::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxMetadata.namespace)
}
inline std::string* PodSandboxMetadata::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxMetadata.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& PodSandboxMetadata::_internal_namespace_() const {
  return namespace__.Get();
}
inline void PodSandboxMetadata::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxMetadata::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxMetadata.namespace)
}
inline void PodSandboxMetadata::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxMetadata.namespace)
}
inline void PodSandboxMetadata::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxMetadata.namespace)
}
inline std::string* PodSandboxMetadata::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxMetadata::release_namespace_() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxMetadata.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxMetadata::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxMetadata.namespace)
}
inline std::string* PodSandboxMetadata::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxMetadata.namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxMetadata::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxMetadata.namespace)
}

// uint32 attempt = 4;
inline void PodSandboxMetadata::clear_attempt() {
  attempt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PodSandboxMetadata::_internal_attempt() const {
  return attempt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PodSandboxMetadata::attempt() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxMetadata.attempt)
  return _internal_attempt();
}
inline void PodSandboxMetadata::_internal_set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  attempt_ = value;
}
inline void PodSandboxMetadata::set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attempt(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxMetadata.attempt)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodSandboxConfig

// .runtime.v1alpha2.PodSandboxMetadata metadata = 1;
inline bool PodSandboxConfig::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PodSandboxConfig::has_metadata() const {
  return _internal_has_metadata();
}
inline void PodSandboxConfig::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandboxConfig::_internal_metadata() const {
  const ::runtime::v1alpha2::PodSandboxMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxMetadata*>(
      &::runtime::v1alpha2::_PodSandboxMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandboxConfig::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.metadata)
  return _internal_metadata();
}
inline void PodSandboxConfig::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxConfig.metadata)
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxConfig::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxConfig::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxConfig.metadata)
  
  ::runtime::v1alpha2::PodSandboxMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxConfig::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.metadata)
  return _internal_mutable_metadata();
}
inline void PodSandboxConfig::set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxConfig.metadata)
}

// string hostname = 2;
inline void PodSandboxConfig::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxConfig::hostname() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.hostname)
  return _internal_hostname();
}
inline void PodSandboxConfig::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxConfig.hostname)
}
inline std::string* PodSandboxConfig::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& PodSandboxConfig::_internal_hostname() const {
  return hostname_.Get();
}
inline void PodSandboxConfig::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxConfig::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxConfig.hostname)
}
inline void PodSandboxConfig::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxConfig.hostname)
}
inline void PodSandboxConfig::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxConfig.hostname)
}
inline std::string* PodSandboxConfig::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxConfig::release_hostname() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxConfig.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxConfig::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxConfig.hostname)
}
inline std::string* PodSandboxConfig::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxConfig.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxConfig::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxConfig.hostname)
}

// string log_directory = 3;
inline void PodSandboxConfig::clear_log_directory() {
  log_directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxConfig::log_directory() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.log_directory)
  return _internal_log_directory();
}
inline void PodSandboxConfig::set_log_directory(const std::string& value) {
  _internal_set_log_directory(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxConfig.log_directory)
}
inline std::string* PodSandboxConfig::mutable_log_directory() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.log_directory)
  return _internal_mutable_log_directory();
}
inline const std::string& PodSandboxConfig::_internal_log_directory() const {
  return log_directory_.Get();
}
inline void PodSandboxConfig::_internal_set_log_directory(const std::string& value) {
  
  log_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxConfig::set_log_directory(std::string&& value) {
  
  log_directory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxConfig.log_directory)
}
inline void PodSandboxConfig::set_log_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxConfig.log_directory)
}
inline void PodSandboxConfig::set_log_directory(const char* value,
    size_t size) {
  
  log_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxConfig.log_directory)
}
inline std::string* PodSandboxConfig::_internal_mutable_log_directory() {
  
  return log_directory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxConfig::release_log_directory() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxConfig.log_directory)
  return log_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxConfig::set_allocated_log_directory(std::string* log_directory) {
  if (log_directory != nullptr) {
    
  } else {
    
  }
  log_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxConfig.log_directory)
}
inline std::string* PodSandboxConfig::unsafe_arena_release_log_directory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxConfig.log_directory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return log_directory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxConfig::unsafe_arena_set_allocated_log_directory(
    std::string* log_directory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (log_directory != nullptr) {
    
  } else {
    
  }
  log_directory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_directory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxConfig.log_directory)
}

// .runtime.v1alpha2.DNSConfig dns_config = 4;
inline bool PodSandboxConfig::_internal_has_dns_config() const {
  return this != internal_default_instance() && dns_config_ != nullptr;
}
inline bool PodSandboxConfig::has_dns_config() const {
  return _internal_has_dns_config();
}
inline void PodSandboxConfig::clear_dns_config() {
  if (GetArena() == nullptr && dns_config_ != nullptr) {
    delete dns_config_;
  }
  dns_config_ = nullptr;
}
inline const ::runtime::v1alpha2::DNSConfig& PodSandboxConfig::_internal_dns_config() const {
  const ::runtime::v1alpha2::DNSConfig* p = dns_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::DNSConfig*>(
      &::runtime::v1alpha2::_DNSConfig_default_instance_);
}
inline const ::runtime::v1alpha2::DNSConfig& PodSandboxConfig::dns_config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.dns_config)
  return _internal_dns_config();
}
inline void PodSandboxConfig::unsafe_arena_set_allocated_dns_config(
    ::runtime::v1alpha2::DNSConfig* dns_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dns_config_);
  }
  dns_config_ = dns_config;
  if (dns_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxConfig.dns_config)
}
inline ::runtime::v1alpha2::DNSConfig* PodSandboxConfig::release_dns_config() {
  auto temp = unsafe_arena_release_dns_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::DNSConfig* PodSandboxConfig::unsafe_arena_release_dns_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxConfig.dns_config)
  
  ::runtime::v1alpha2::DNSConfig* temp = dns_config_;
  dns_config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::DNSConfig* PodSandboxConfig::_internal_mutable_dns_config() {
  
  if (dns_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::DNSConfig>(GetArena());
    dns_config_ = p;
  }
  return dns_config_;
}
inline ::runtime::v1alpha2::DNSConfig* PodSandboxConfig::mutable_dns_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.dns_config)
  return _internal_mutable_dns_config();
}
inline void PodSandboxConfig::set_allocated_dns_config(::runtime::v1alpha2::DNSConfig* dns_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dns_config_;
  }
  if (dns_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns_config);
    if (message_arena != submessage_arena) {
      dns_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_config, submessage_arena);
    }
    
  } else {
    
  }
  dns_config_ = dns_config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxConfig.dns_config)
}

// repeated .runtime.v1alpha2.PortMapping port_mappings = 5;
inline int PodSandboxConfig::_internal_port_mappings_size() const {
  return port_mappings_.size();
}
inline int PodSandboxConfig::port_mappings_size() const {
  return _internal_port_mappings_size();
}
inline void PodSandboxConfig::clear_port_mappings() {
  port_mappings_.Clear();
}
inline ::runtime::v1alpha2::PortMapping* PodSandboxConfig::mutable_port_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.port_mappings)
  return port_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PortMapping >*
PodSandboxConfig::mutable_port_mappings() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.PodSandboxConfig.port_mappings)
  return &port_mappings_;
}
inline const ::runtime::v1alpha2::PortMapping& PodSandboxConfig::_internal_port_mappings(int index) const {
  return port_mappings_.Get(index);
}
inline const ::runtime::v1alpha2::PortMapping& PodSandboxConfig::port_mappings(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.port_mappings)
  return _internal_port_mappings(index);
}
inline ::runtime::v1alpha2::PortMapping* PodSandboxConfig::_internal_add_port_mappings() {
  return port_mappings_.Add();
}
inline ::runtime::v1alpha2::PortMapping* PodSandboxConfig::add_port_mappings() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.PodSandboxConfig.port_mappings)
  return _internal_add_port_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PortMapping >&
PodSandboxConfig::port_mappings() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.PodSandboxConfig.port_mappings)
  return port_mappings_;
}

// map<string, string> labels = 6;
inline int PodSandboxConfig::_internal_labels_size() const {
  return labels_.size();
}
inline int PodSandboxConfig::labels_size() const {
  return _internal_labels_size();
}
inline void PodSandboxConfig::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxConfig::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxConfig::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxConfig.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxConfig::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxConfig.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 7;
inline int PodSandboxConfig::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PodSandboxConfig::annotations_size() const {
  return _internal_annotations_size();
}
inline void PodSandboxConfig::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxConfig::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxConfig::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxConfig.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxConfig::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxConfig::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxConfig.annotations)
  return _internal_mutable_annotations();
}

// .runtime.v1alpha2.LinuxPodSandboxConfig linux = 8;
inline bool PodSandboxConfig::_internal_has_linux() const {
  return this != internal_default_instance() && linux_ != nullptr;
}
inline bool PodSandboxConfig::has_linux() const {
  return _internal_has_linux();
}
inline void PodSandboxConfig::clear_linux() {
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxPodSandboxConfig& PodSandboxConfig::_internal_linux() const {
  const ::runtime::v1alpha2::LinuxPodSandboxConfig* p = linux_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxPodSandboxConfig*>(
      &::runtime::v1alpha2::_LinuxPodSandboxConfig_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxPodSandboxConfig& PodSandboxConfig::linux() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxConfig.linux)
  return _internal_linux();
}
inline void PodSandboxConfig::unsafe_arena_set_allocated_linux(
    ::runtime::v1alpha2::LinuxPodSandboxConfig* linux) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linux_);
  }
  linux_ = linux;
  if (linux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxConfig.linux)
}
inline ::runtime::v1alpha2::LinuxPodSandboxConfig* PodSandboxConfig::release_linux() {
  auto temp = unsafe_arena_release_linux();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxPodSandboxConfig* PodSandboxConfig::unsafe_arena_release_linux() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxConfig.linux)
  
  ::runtime::v1alpha2::LinuxPodSandboxConfig* temp = linux_;
  linux_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxPodSandboxConfig* PodSandboxConfig::_internal_mutable_linux() {
  
  if (linux_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxPodSandboxConfig>(GetArena());
    linux_ = p;
  }
  return linux_;
}
inline ::runtime::v1alpha2::LinuxPodSandboxConfig* PodSandboxConfig::mutable_linux() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxConfig.linux)
  return _internal_mutable_linux();
}
inline void PodSandboxConfig::set_allocated_linux(::runtime::v1alpha2::LinuxPodSandboxConfig* linux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linux_;
  }
  if (linux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linux);
    if (message_arena != submessage_arena) {
      linux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linux, submessage_arena);
    }
    
  } else {
    
  }
  linux_ = linux;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxConfig.linux)
}

// -------------------------------------------------------------------

// RunPodSandboxRequest

// .runtime.v1alpha2.PodSandboxConfig config = 1;
inline bool RunPodSandboxRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool RunPodSandboxRequest::has_config() const {
  return _internal_has_config();
}
inline void RunPodSandboxRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxConfig& RunPodSandboxRequest::_internal_config() const {
  const ::runtime::v1alpha2::PodSandboxConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxConfig*>(
      &::runtime::v1alpha2::_PodSandboxConfig_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxConfig& RunPodSandboxRequest::config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RunPodSandboxRequest.config)
  return _internal_config();
}
inline void RunPodSandboxRequest::unsafe_arena_set_allocated_config(
    ::runtime::v1alpha2::PodSandboxConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RunPodSandboxRequest.config)
}
inline ::runtime::v1alpha2::PodSandboxConfig* RunPodSandboxRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* RunPodSandboxRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RunPodSandboxRequest.config)
  
  ::runtime::v1alpha2::PodSandboxConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* RunPodSandboxRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::runtime::v1alpha2::PodSandboxConfig* RunPodSandboxRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RunPodSandboxRequest.config)
  return _internal_mutable_config();
}
inline void RunPodSandboxRequest::set_allocated_config(::runtime::v1alpha2::PodSandboxConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RunPodSandboxRequest.config)
}

// string runtime_handler = 2;
inline void RunPodSandboxRequest::clear_runtime_handler() {
  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RunPodSandboxRequest::runtime_handler() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
  return _internal_runtime_handler();
}
inline void RunPodSandboxRequest::set_runtime_handler(const std::string& value) {
  _internal_set_runtime_handler(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}
inline std::string* RunPodSandboxRequest::mutable_runtime_handler() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
  return _internal_mutable_runtime_handler();
}
inline const std::string& RunPodSandboxRequest::_internal_runtime_handler() const {
  return runtime_handler_.Get();
}
inline void RunPodSandboxRequest::_internal_set_runtime_handler(const std::string& value) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RunPodSandboxRequest::set_runtime_handler(std::string&& value) {
  
  runtime_handler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}
inline void RunPodSandboxRequest::set_runtime_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}
inline void RunPodSandboxRequest::set_runtime_handler(const char* value,
    size_t size) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}
inline std::string* RunPodSandboxRequest::_internal_mutable_runtime_handler() {
  
  return runtime_handler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RunPodSandboxRequest::release_runtime_handler() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
  return runtime_handler_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RunPodSandboxRequest::set_allocated_runtime_handler(std::string* runtime_handler) {
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_handler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}
inline std::string* RunPodSandboxRequest::unsafe_arena_release_runtime_handler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_handler_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RunPodSandboxRequest::unsafe_arena_set_allocated_runtime_handler(
    std::string* runtime_handler) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_handler, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RunPodSandboxRequest.runtime_handler)
}

// -------------------------------------------------------------------

// RunPodSandboxResponse

// string pod_sandbox_id = 1;
inline void RunPodSandboxResponse::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RunPodSandboxResponse::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void RunPodSandboxResponse::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}
inline std::string* RunPodSandboxResponse::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& RunPodSandboxResponse::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void RunPodSandboxResponse::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RunPodSandboxResponse::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}
inline void RunPodSandboxResponse::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}
inline void RunPodSandboxResponse::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}
inline std::string* RunPodSandboxResponse::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RunPodSandboxResponse::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RunPodSandboxResponse::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}
inline std::string* RunPodSandboxResponse::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RunPodSandboxResponse::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id)
}

// -------------------------------------------------------------------

// StopPodSandboxRequest

// string pod_sandbox_id = 1;
inline void StopPodSandboxRequest::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopPodSandboxRequest::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void StopPodSandboxRequest::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}
inline std::string* StopPodSandboxRequest::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& StopPodSandboxRequest::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void StopPodSandboxRequest::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopPodSandboxRequest::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}
inline void StopPodSandboxRequest::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}
inline void StopPodSandboxRequest::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}
inline std::string* StopPodSandboxRequest::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopPodSandboxRequest::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopPodSandboxRequest::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}
inline std::string* StopPodSandboxRequest::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopPodSandboxRequest::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id)
}

// -------------------------------------------------------------------

// StopPodSandboxResponse

// -------------------------------------------------------------------

// RemovePodSandboxRequest

// string pod_sandbox_id = 1;
inline void RemovePodSandboxRequest::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemovePodSandboxRequest::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void RemovePodSandboxRequest::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}
inline std::string* RemovePodSandboxRequest::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& RemovePodSandboxRequest::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void RemovePodSandboxRequest::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemovePodSandboxRequest::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}
inline void RemovePodSandboxRequest::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}
inline void RemovePodSandboxRequest::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}
inline std::string* RemovePodSandboxRequest::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemovePodSandboxRequest::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemovePodSandboxRequest::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}
inline std::string* RemovePodSandboxRequest::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemovePodSandboxRequest::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id)
}

// -------------------------------------------------------------------

// RemovePodSandboxResponse

// -------------------------------------------------------------------

// PodSandboxStatusRequest

// string pod_sandbox_id = 1;
inline void PodSandboxStatusRequest::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxStatusRequest::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void PodSandboxStatusRequest::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}
inline std::string* PodSandboxStatusRequest::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& PodSandboxStatusRequest::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void PodSandboxStatusRequest::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxStatusRequest::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}
inline void PodSandboxStatusRequest::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}
inline void PodSandboxStatusRequest::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}
inline std::string* PodSandboxStatusRequest::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxStatusRequest::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxStatusRequest::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}
inline std::string* PodSandboxStatusRequest::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxStatusRequest::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id)
}

// bool verbose = 2;
inline void PodSandboxStatusRequest::clear_verbose() {
  verbose_ = false;
}
inline bool PodSandboxStatusRequest::_internal_verbose() const {
  return verbose_;
}
inline bool PodSandboxStatusRequest::verbose() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatusRequest.verbose)
  return _internal_verbose();
}
inline void PodSandboxStatusRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void PodSandboxStatusRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatusRequest.verbose)
}

// -------------------------------------------------------------------

// PodIP

// string ip = 1;
inline void PodIP::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodIP::ip() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodIP.ip)
  return _internal_ip();
}
inline void PodIP::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodIP.ip)
}
inline std::string* PodIP::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodIP.ip)
  return _internal_mutable_ip();
}
inline const std::string& PodIP::_internal_ip() const {
  return ip_.Get();
}
inline void PodIP::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodIP::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodIP.ip)
}
inline void PodIP::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodIP.ip)
}
inline void PodIP::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodIP.ip)
}
inline std::string* PodIP::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodIP::release_ip() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodIP.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodIP::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodIP.ip)
}
inline std::string* PodIP::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodIP.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodIP::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodIP.ip)
}

// -------------------------------------------------------------------

// PodSandboxNetworkStatus

// string ip = 1;
inline void PodSandboxNetworkStatus::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxNetworkStatus::ip() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
  return _internal_ip();
}
inline void PodSandboxNetworkStatus::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}
inline std::string* PodSandboxNetworkStatus::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
  return _internal_mutable_ip();
}
inline const std::string& PodSandboxNetworkStatus::_internal_ip() const {
  return ip_.Get();
}
inline void PodSandboxNetworkStatus::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxNetworkStatus::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}
inline void PodSandboxNetworkStatus::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}
inline void PodSandboxNetworkStatus::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}
inline std::string* PodSandboxNetworkStatus::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxNetworkStatus::release_ip() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxNetworkStatus::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}
inline std::string* PodSandboxNetworkStatus::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxNetworkStatus::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxNetworkStatus.ip)
}

// repeated .runtime.v1alpha2.PodIP additional_ips = 2;
inline int PodSandboxNetworkStatus::_internal_additional_ips_size() const {
  return additional_ips_.size();
}
inline int PodSandboxNetworkStatus::additional_ips_size() const {
  return _internal_additional_ips_size();
}
inline void PodSandboxNetworkStatus::clear_additional_ips() {
  additional_ips_.Clear();
}
inline ::runtime::v1alpha2::PodIP* PodSandboxNetworkStatus::mutable_additional_ips(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxNetworkStatus.additional_ips)
  return additional_ips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodIP >*
PodSandboxNetworkStatus::mutable_additional_ips() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.PodSandboxNetworkStatus.additional_ips)
  return &additional_ips_;
}
inline const ::runtime::v1alpha2::PodIP& PodSandboxNetworkStatus::_internal_additional_ips(int index) const {
  return additional_ips_.Get(index);
}
inline const ::runtime::v1alpha2::PodIP& PodSandboxNetworkStatus::additional_ips(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxNetworkStatus.additional_ips)
  return _internal_additional_ips(index);
}
inline ::runtime::v1alpha2::PodIP* PodSandboxNetworkStatus::_internal_add_additional_ips() {
  return additional_ips_.Add();
}
inline ::runtime::v1alpha2::PodIP* PodSandboxNetworkStatus::add_additional_ips() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.PodSandboxNetworkStatus.additional_ips)
  return _internal_add_additional_ips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodIP >&
PodSandboxNetworkStatus::additional_ips() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.PodSandboxNetworkStatus.additional_ips)
  return additional_ips_;
}

// -------------------------------------------------------------------

// Namespace

// .runtime.v1alpha2.NamespaceOption options = 2;
inline bool Namespace::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool Namespace::has_options() const {
  return _internal_has_options();
}
inline void Namespace::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::runtime::v1alpha2::NamespaceOption& Namespace::_internal_options() const {
  const ::runtime::v1alpha2::NamespaceOption* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::NamespaceOption*>(
      &::runtime::v1alpha2::_NamespaceOption_default_instance_);
}
inline const ::runtime::v1alpha2::NamespaceOption& Namespace::options() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Namespace.options)
  return _internal_options();
}
inline void Namespace::unsafe_arena_set_allocated_options(
    ::runtime::v1alpha2::NamespaceOption* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Namespace.options)
}
inline ::runtime::v1alpha2::NamespaceOption* Namespace::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* Namespace::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Namespace.options)
  
  ::runtime::v1alpha2::NamespaceOption* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* Namespace::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::NamespaceOption>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::runtime::v1alpha2::NamespaceOption* Namespace::mutable_options() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Namespace.options)
  return _internal_mutable_options();
}
inline void Namespace::set_allocated_options(::runtime::v1alpha2::NamespaceOption* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Namespace.options)
}

// -------------------------------------------------------------------

// LinuxPodSandboxStatus

// .runtime.v1alpha2.Namespace namespaces = 1;
inline bool LinuxPodSandboxStatus::_internal_has_namespaces() const {
  return this != internal_default_instance() && namespaces_ != nullptr;
}
inline bool LinuxPodSandboxStatus::has_namespaces() const {
  return _internal_has_namespaces();
}
inline void LinuxPodSandboxStatus::clear_namespaces() {
  if (GetArena() == nullptr && namespaces_ != nullptr) {
    delete namespaces_;
  }
  namespaces_ = nullptr;
}
inline const ::runtime::v1alpha2::Namespace& LinuxPodSandboxStatus::_internal_namespaces() const {
  const ::runtime::v1alpha2::Namespace* p = namespaces_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Namespace*>(
      &::runtime::v1alpha2::_Namespace_default_instance_);
}
inline const ::runtime::v1alpha2::Namespace& LinuxPodSandboxStatus::namespaces() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxPodSandboxStatus.namespaces)
  return _internal_namespaces();
}
inline void LinuxPodSandboxStatus::unsafe_arena_set_allocated_namespaces(
    ::runtime::v1alpha2::Namespace* namespaces) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespaces_);
  }
  namespaces_ = namespaces;
  if (namespaces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxPodSandboxStatus.namespaces)
}
inline ::runtime::v1alpha2::Namespace* LinuxPodSandboxStatus::release_namespaces() {
  auto temp = unsafe_arena_release_namespaces();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Namespace* LinuxPodSandboxStatus::unsafe_arena_release_namespaces() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxPodSandboxStatus.namespaces)
  
  ::runtime::v1alpha2::Namespace* temp = namespaces_;
  namespaces_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Namespace* LinuxPodSandboxStatus::_internal_mutable_namespaces() {
  
  if (namespaces_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Namespace>(GetArena());
    namespaces_ = p;
  }
  return namespaces_;
}
inline ::runtime::v1alpha2::Namespace* LinuxPodSandboxStatus::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxPodSandboxStatus.namespaces)
  return _internal_mutable_namespaces();
}
inline void LinuxPodSandboxStatus::set_allocated_namespaces(::runtime::v1alpha2::Namespace* namespaces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete namespaces_;
  }
  if (namespaces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(namespaces);
    if (message_arena != submessage_arena) {
      namespaces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespaces, submessage_arena);
    }
    
  } else {
    
  }
  namespaces_ = namespaces;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxPodSandboxStatus.namespaces)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodSandboxStatus

// string id = 1;
inline void PodSandboxStatus::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxStatus::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.id)
  return _internal_id();
}
inline void PodSandboxStatus::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatus.id)
}
inline std::string* PodSandboxStatus::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatus.id)
  return _internal_mutable_id();
}
inline const std::string& PodSandboxStatus::_internal_id() const {
  return id_.Get();
}
inline void PodSandboxStatus::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxStatus::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxStatus.id)
}
inline void PodSandboxStatus::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxStatus.id)
}
inline void PodSandboxStatus::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxStatus.id)
}
inline std::string* PodSandboxStatus::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxStatus::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatus.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxStatus::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatus.id)
}
inline std::string* PodSandboxStatus::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxStatus.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxStatus::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatus.id)
}

// .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
inline bool PodSandboxStatus::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PodSandboxStatus::has_metadata() const {
  return _internal_has_metadata();
}
inline void PodSandboxStatus::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandboxStatus::_internal_metadata() const {
  const ::runtime::v1alpha2::PodSandboxMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxMetadata*>(
      &::runtime::v1alpha2::_PodSandboxMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandboxStatus::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.metadata)
  return _internal_metadata();
}
inline void PodSandboxStatus::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatus.metadata)
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxStatus::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxStatus::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatus.metadata)
  
  ::runtime::v1alpha2::PodSandboxMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxStatus::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandboxStatus::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatus.metadata)
  return _internal_mutable_metadata();
}
inline void PodSandboxStatus::set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatus.metadata)
}

// .runtime.v1alpha2.PodSandboxState state = 3;
inline void PodSandboxStatus::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::PodSandboxState PodSandboxStatus::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::PodSandboxState >(state_);
}
inline ::runtime::v1alpha2::PodSandboxState PodSandboxStatus::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.state)
  return _internal_state();
}
inline void PodSandboxStatus::_internal_set_state(::runtime::v1alpha2::PodSandboxState value) {
  
  state_ = value;
}
inline void PodSandboxStatus::set_state(::runtime::v1alpha2::PodSandboxState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatus.state)
}

// int64 created_at = 4;
inline void PodSandboxStatus::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodSandboxStatus::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodSandboxStatus::created_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.created_at)
  return _internal_created_at();
}
inline void PodSandboxStatus::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void PodSandboxStatus::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatus.created_at)
}

// .runtime.v1alpha2.PodSandboxNetworkStatus network = 5;
inline bool PodSandboxStatus::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool PodSandboxStatus::has_network() const {
  return _internal_has_network();
}
inline void PodSandboxStatus::clear_network() {
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxNetworkStatus& PodSandboxStatus::_internal_network() const {
  const ::runtime::v1alpha2::PodSandboxNetworkStatus* p = network_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxNetworkStatus*>(
      &::runtime::v1alpha2::_PodSandboxNetworkStatus_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxNetworkStatus& PodSandboxStatus::network() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.network)
  return _internal_network();
}
inline void PodSandboxStatus::unsafe_arena_set_allocated_network(
    ::runtime::v1alpha2::PodSandboxNetworkStatus* network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatus.network)
}
inline ::runtime::v1alpha2::PodSandboxNetworkStatus* PodSandboxStatus::release_network() {
  auto temp = unsafe_arena_release_network();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxNetworkStatus* PodSandboxStatus::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatus.network)
  
  ::runtime::v1alpha2::PodSandboxNetworkStatus* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxNetworkStatus* PodSandboxStatus::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxNetworkStatus>(GetArena());
    network_ = p;
  }
  return network_;
}
inline ::runtime::v1alpha2::PodSandboxNetworkStatus* PodSandboxStatus::mutable_network() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatus.network)
  return _internal_mutable_network();
}
inline void PodSandboxStatus::set_allocated_network(::runtime::v1alpha2::PodSandboxNetworkStatus* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network);
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatus.network)
}

// .runtime.v1alpha2.LinuxPodSandboxStatus linux = 6;
inline bool PodSandboxStatus::_internal_has_linux() const {
  return this != internal_default_instance() && linux_ != nullptr;
}
inline bool PodSandboxStatus::has_linux() const {
  return _internal_has_linux();
}
inline void PodSandboxStatus::clear_linux() {
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxPodSandboxStatus& PodSandboxStatus::_internal_linux() const {
  const ::runtime::v1alpha2::LinuxPodSandboxStatus* p = linux_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxPodSandboxStatus*>(
      &::runtime::v1alpha2::_LinuxPodSandboxStatus_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxPodSandboxStatus& PodSandboxStatus::linux() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.linux)
  return _internal_linux();
}
inline void PodSandboxStatus::unsafe_arena_set_allocated_linux(
    ::runtime::v1alpha2::LinuxPodSandboxStatus* linux) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linux_);
  }
  linux_ = linux;
  if (linux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatus.linux)
}
inline ::runtime::v1alpha2::LinuxPodSandboxStatus* PodSandboxStatus::release_linux() {
  auto temp = unsafe_arena_release_linux();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxPodSandboxStatus* PodSandboxStatus::unsafe_arena_release_linux() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatus.linux)
  
  ::runtime::v1alpha2::LinuxPodSandboxStatus* temp = linux_;
  linux_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxPodSandboxStatus* PodSandboxStatus::_internal_mutable_linux() {
  
  if (linux_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxPodSandboxStatus>(GetArena());
    linux_ = p;
  }
  return linux_;
}
inline ::runtime::v1alpha2::LinuxPodSandboxStatus* PodSandboxStatus::mutable_linux() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatus.linux)
  return _internal_mutable_linux();
}
inline void PodSandboxStatus::set_allocated_linux(::runtime::v1alpha2::LinuxPodSandboxStatus* linux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linux_;
  }
  if (linux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linux);
    if (message_arena != submessage_arena) {
      linux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linux, submessage_arena);
    }
    
  } else {
    
  }
  linux_ = linux;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatus.linux)
}

// map<string, string> labels = 7;
inline int PodSandboxStatus::_internal_labels_size() const {
  return labels_.size();
}
inline int PodSandboxStatus::labels_size() const {
  return _internal_labels_size();
}
inline void PodSandboxStatus::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatus::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatus::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxStatus.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatus::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatus::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxStatus.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 8;
inline int PodSandboxStatus::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PodSandboxStatus::annotations_size() const {
  return _internal_annotations_size();
}
inline void PodSandboxStatus::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatus::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatus::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxStatus.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatus::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatus::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxStatus.annotations)
  return _internal_mutable_annotations();
}

// string runtime_handler = 9;
inline void PodSandboxStatus::clear_runtime_handler() {
  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxStatus::runtime_handler() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
  return _internal_runtime_handler();
}
inline void PodSandboxStatus::set_runtime_handler(const std::string& value) {
  _internal_set_runtime_handler(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}
inline std::string* PodSandboxStatus::mutable_runtime_handler() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
  return _internal_mutable_runtime_handler();
}
inline const std::string& PodSandboxStatus::_internal_runtime_handler() const {
  return runtime_handler_.Get();
}
inline void PodSandboxStatus::_internal_set_runtime_handler(const std::string& value) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxStatus::set_runtime_handler(std::string&& value) {
  
  runtime_handler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}
inline void PodSandboxStatus::set_runtime_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}
inline void PodSandboxStatus::set_runtime_handler(const char* value,
    size_t size) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}
inline std::string* PodSandboxStatus::_internal_mutable_runtime_handler() {
  
  return runtime_handler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxStatus::release_runtime_handler() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
  return runtime_handler_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxStatus::set_allocated_runtime_handler(std::string* runtime_handler) {
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_handler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}
inline std::string* PodSandboxStatus::unsafe_arena_release_runtime_handler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_handler_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxStatus::unsafe_arena_set_allocated_runtime_handler(
    std::string* runtime_handler) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_handler, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatus.runtime_handler)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodSandboxStatusResponse

// .runtime.v1alpha2.PodSandboxStatus status = 1;
inline bool PodSandboxStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PodSandboxStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void PodSandboxStatusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxStatus& PodSandboxStatusResponse::_internal_status() const {
  const ::runtime::v1alpha2::PodSandboxStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxStatus*>(
      &::runtime::v1alpha2::_PodSandboxStatus_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxStatus& PodSandboxStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStatusResponse.status)
  return _internal_status();
}
inline void PodSandboxStatusResponse::unsafe_arena_set_allocated_status(
    ::runtime::v1alpha2::PodSandboxStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxStatusResponse.status)
}
inline ::runtime::v1alpha2::PodSandboxStatus* PodSandboxStatusResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxStatus* PodSandboxStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxStatusResponse.status)
  
  ::runtime::v1alpha2::PodSandboxStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxStatus* PodSandboxStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::runtime::v1alpha2::PodSandboxStatus* PodSandboxStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxStatusResponse.status)
  return _internal_mutable_status();
}
inline void PodSandboxStatusResponse::set_allocated_status(::runtime::v1alpha2::PodSandboxStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxStatusResponse.status)
}

// map<string, string> info = 2;
inline int PodSandboxStatusResponse::_internal_info_size() const {
  return info_.size();
}
inline int PodSandboxStatusResponse::info_size() const {
  return _internal_info_size();
}
inline void PodSandboxStatusResponse::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatusResponse::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxStatusResponse::info() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxStatusResponse.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatusResponse::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxStatusResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxStatusResponse.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// PodSandboxStateValue

// .runtime.v1alpha2.PodSandboxState state = 1;
inline void PodSandboxStateValue::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::PodSandboxState PodSandboxStateValue::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::PodSandboxState >(state_);
}
inline ::runtime::v1alpha2::PodSandboxState PodSandboxStateValue::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxStateValue.state)
  return _internal_state();
}
inline void PodSandboxStateValue::_internal_set_state(::runtime::v1alpha2::PodSandboxState value) {
  
  state_ = value;
}
inline void PodSandboxStateValue::set_state(::runtime::v1alpha2::PodSandboxState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxStateValue.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodSandboxFilter

// string id = 1;
inline void PodSandboxFilter::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandboxFilter::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxFilter.id)
  return _internal_id();
}
inline void PodSandboxFilter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandboxFilter.id)
}
inline std::string* PodSandboxFilter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxFilter.id)
  return _internal_mutable_id();
}
inline const std::string& PodSandboxFilter::_internal_id() const {
  return id_.Get();
}
inline void PodSandboxFilter::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandboxFilter::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandboxFilter.id)
}
inline void PodSandboxFilter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandboxFilter.id)
}
inline void PodSandboxFilter::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandboxFilter.id)
}
inline std::string* PodSandboxFilter::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandboxFilter::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxFilter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandboxFilter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxFilter.id)
}
inline std::string* PodSandboxFilter::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandboxFilter.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandboxFilter::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxFilter.id)
}

// .runtime.v1alpha2.PodSandboxStateValue state = 2;
inline bool PodSandboxFilter::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool PodSandboxFilter::has_state() const {
  return _internal_has_state();
}
inline void PodSandboxFilter::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxStateValue& PodSandboxFilter::_internal_state() const {
  const ::runtime::v1alpha2::PodSandboxStateValue* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxStateValue*>(
      &::runtime::v1alpha2::_PodSandboxStateValue_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxStateValue& PodSandboxFilter::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandboxFilter.state)
  return _internal_state();
}
inline void PodSandboxFilter::unsafe_arena_set_allocated_state(
    ::runtime::v1alpha2::PodSandboxStateValue* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandboxFilter.state)
}
inline ::runtime::v1alpha2::PodSandboxStateValue* PodSandboxFilter::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxStateValue* PodSandboxFilter::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandboxFilter.state)
  
  ::runtime::v1alpha2::PodSandboxStateValue* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxStateValue* PodSandboxFilter::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxStateValue>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::runtime::v1alpha2::PodSandboxStateValue* PodSandboxFilter::mutable_state() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandboxFilter.state)
  return _internal_mutable_state();
}
inline void PodSandboxFilter::set_allocated_state(::runtime::v1alpha2::PodSandboxStateValue* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandboxFilter.state)
}

// map<string, string> label_selector = 3;
inline int PodSandboxFilter::_internal_label_selector_size() const {
  return label_selector_.size();
}
inline int PodSandboxFilter::label_selector_size() const {
  return _internal_label_selector_size();
}
inline void PodSandboxFilter::clear_label_selector() {
  label_selector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxFilter::_internal_label_selector() const {
  return label_selector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandboxFilter::label_selector() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandboxFilter.label_selector)
  return _internal_label_selector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxFilter::_internal_mutable_label_selector() {
  return label_selector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandboxFilter::mutable_label_selector() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandboxFilter.label_selector)
  return _internal_mutable_label_selector();
}

// -------------------------------------------------------------------

// ListPodSandboxRequest

// .runtime.v1alpha2.PodSandboxFilter filter = 1;
inline bool ListPodSandboxRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ListPodSandboxRequest::has_filter() const {
  return _internal_has_filter();
}
inline void ListPodSandboxRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxFilter& ListPodSandboxRequest::_internal_filter() const {
  const ::runtime::v1alpha2::PodSandboxFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxFilter*>(
      &::runtime::v1alpha2::_PodSandboxFilter_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxFilter& ListPodSandboxRequest::filter() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListPodSandboxRequest.filter)
  return _internal_filter();
}
inline void ListPodSandboxRequest::unsafe_arena_set_allocated_filter(
    ::runtime::v1alpha2::PodSandboxFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ListPodSandboxRequest.filter)
}
inline ::runtime::v1alpha2::PodSandboxFilter* ListPodSandboxRequest::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxFilter* ListPodSandboxRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ListPodSandboxRequest.filter)
  
  ::runtime::v1alpha2::PodSandboxFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxFilter* ListPodSandboxRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::runtime::v1alpha2::PodSandboxFilter* ListPodSandboxRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListPodSandboxRequest.filter)
  return _internal_mutable_filter();
}
inline void ListPodSandboxRequest::set_allocated_filter(::runtime::v1alpha2::PodSandboxFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ListPodSandboxRequest.filter)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodSandbox

// string id = 1;
inline void PodSandbox::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandbox::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandbox.id)
  return _internal_id();
}
inline void PodSandbox::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandbox.id)
}
inline std::string* PodSandbox::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandbox.id)
  return _internal_mutable_id();
}
inline const std::string& PodSandbox::_internal_id() const {
  return id_.Get();
}
inline void PodSandbox::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandbox::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandbox.id)
}
inline void PodSandbox::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandbox.id)
}
inline void PodSandbox::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandbox.id)
}
inline std::string* PodSandbox::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandbox::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandbox.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandbox::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandbox.id)
}
inline std::string* PodSandbox::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandbox.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandbox::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandbox.id)
}

// .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
inline bool PodSandbox::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PodSandbox::has_metadata() const {
  return _internal_has_metadata();
}
inline void PodSandbox::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandbox::_internal_metadata() const {
  const ::runtime::v1alpha2::PodSandboxMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxMetadata*>(
      &::runtime::v1alpha2::_PodSandboxMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxMetadata& PodSandbox::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandbox.metadata)
  return _internal_metadata();
}
inline void PodSandbox::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandbox.metadata)
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandbox::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandbox::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandbox.metadata)
  
  ::runtime::v1alpha2::PodSandboxMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandbox::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::PodSandboxMetadata* PodSandbox::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandbox.metadata)
  return _internal_mutable_metadata();
}
inline void PodSandbox::set_allocated_metadata(::runtime::v1alpha2::PodSandboxMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandbox.metadata)
}

// .runtime.v1alpha2.PodSandboxState state = 3;
inline void PodSandbox::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::PodSandboxState PodSandbox::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::PodSandboxState >(state_);
}
inline ::runtime::v1alpha2::PodSandboxState PodSandbox::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandbox.state)
  return _internal_state();
}
inline void PodSandbox::_internal_set_state(::runtime::v1alpha2::PodSandboxState value) {
  
  state_ = value;
}
inline void PodSandbox::set_state(::runtime::v1alpha2::PodSandboxState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandbox.state)
}

// int64 created_at = 4;
inline void PodSandbox::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodSandbox::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodSandbox::created_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandbox.created_at)
  return _internal_created_at();
}
inline void PodSandbox::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void PodSandbox::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandbox.created_at)
}

// map<string, string> labels = 5;
inline int PodSandbox::_internal_labels_size() const {
  return labels_.size();
}
inline int PodSandbox::labels_size() const {
  return _internal_labels_size();
}
inline void PodSandbox::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandbox::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandbox::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandbox.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandbox::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandbox::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandbox.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 6;
inline int PodSandbox::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PodSandbox::annotations_size() const {
  return _internal_annotations_size();
}
inline void PodSandbox::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandbox::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodSandbox::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.PodSandbox.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandbox::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodSandbox::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.PodSandbox.annotations)
  return _internal_mutable_annotations();
}

// string runtime_handler = 7;
inline void PodSandbox::clear_runtime_handler() {
  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PodSandbox::runtime_handler() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PodSandbox.runtime_handler)
  return _internal_runtime_handler();
}
inline void PodSandbox::set_runtime_handler(const std::string& value) {
  _internal_set_runtime_handler(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PodSandbox.runtime_handler)
}
inline std::string* PodSandbox::mutable_runtime_handler() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PodSandbox.runtime_handler)
  return _internal_mutable_runtime_handler();
}
inline const std::string& PodSandbox::_internal_runtime_handler() const {
  return runtime_handler_.Get();
}
inline void PodSandbox::_internal_set_runtime_handler(const std::string& value) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PodSandbox::set_runtime_handler(std::string&& value) {
  
  runtime_handler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PodSandbox.runtime_handler)
}
inline void PodSandbox::set_runtime_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PodSandbox.runtime_handler)
}
inline void PodSandbox::set_runtime_handler(const char* value,
    size_t size) {
  
  runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PodSandbox.runtime_handler)
}
inline std::string* PodSandbox::_internal_mutable_runtime_handler() {
  
  return runtime_handler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PodSandbox::release_runtime_handler() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PodSandbox.runtime_handler)
  return runtime_handler_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PodSandbox::set_allocated_runtime_handler(std::string* runtime_handler) {
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_handler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PodSandbox.runtime_handler)
}
inline std::string* PodSandbox::unsafe_arena_release_runtime_handler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PodSandbox.runtime_handler)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_handler_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PodSandbox::unsafe_arena_set_allocated_runtime_handler(
    std::string* runtime_handler) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_handler != nullptr) {
    
  } else {
    
  }
  runtime_handler_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_handler, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PodSandbox.runtime_handler)
}

// -------------------------------------------------------------------

// ListPodSandboxResponse

// repeated .runtime.v1alpha2.PodSandbox items = 1;
inline int ListPodSandboxResponse::_internal_items_size() const {
  return items_.size();
}
inline int ListPodSandboxResponse::items_size() const {
  return _internal_items_size();
}
inline void ListPodSandboxResponse::clear_items() {
  items_.Clear();
}
inline ::runtime::v1alpha2::PodSandbox* ListPodSandboxResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListPodSandboxResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodSandbox >*
ListPodSandboxResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ListPodSandboxResponse.items)
  return &items_;
}
inline const ::runtime::v1alpha2::PodSandbox& ListPodSandboxResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::runtime::v1alpha2::PodSandbox& ListPodSandboxResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListPodSandboxResponse.items)
  return _internal_items(index);
}
inline ::runtime::v1alpha2::PodSandbox* ListPodSandboxResponse::_internal_add_items() {
  return items_.Add();
}
inline ::runtime::v1alpha2::PodSandbox* ListPodSandboxResponse::add_items() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ListPodSandboxResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::PodSandbox >&
ListPodSandboxResponse::items() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ListPodSandboxResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImageSpec

// string image = 1;
inline void ImageSpec::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageSpec::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageSpec.image)
  return _internal_image();
}
inline void ImageSpec::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ImageSpec.image)
}
inline std::string* ImageSpec::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ImageSpec.image)
  return _internal_mutable_image();
}
inline const std::string& ImageSpec::_internal_image() const {
  return image_.Get();
}
inline void ImageSpec::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageSpec::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ImageSpec.image)
}
inline void ImageSpec::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ImageSpec.image)
}
inline void ImageSpec::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ImageSpec.image)
}
inline std::string* ImageSpec::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageSpec::release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ImageSpec.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageSpec::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ImageSpec.image)
}
inline std::string* ImageSpec::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ImageSpec.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageSpec::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ImageSpec.image)
}

// map<string, string> annotations = 2;
inline int ImageSpec::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ImageSpec::annotations_size() const {
  return _internal_annotations_size();
}
inline void ImageSpec::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImageSpec::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImageSpec::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ImageSpec.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImageSpec::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImageSpec::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ImageSpec.annotations)
  return _internal_mutable_annotations();
}

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.KeyValue.key)
}
inline std::string* KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.KeyValue.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValue::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.KeyValue.value)
}
inline std::string* KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.KeyValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.KeyValue.value)
}

// -------------------------------------------------------------------

// LinuxContainerResources

// int64 cpu_period = 1;
inline void LinuxContainerResources::clear_cpu_period() {
  cpu_period_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::_internal_cpu_period() const {
  return cpu_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::cpu_period() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.cpu_period)
  return _internal_cpu_period();
}
inline void LinuxContainerResources::_internal_set_cpu_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_period_ = value;
}
inline void LinuxContainerResources::set_cpu_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_period(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.cpu_period)
}

// int64 cpu_quota = 2;
inline void LinuxContainerResources::clear_cpu_quota() {
  cpu_quota_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::_internal_cpu_quota() const {
  return cpu_quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::cpu_quota() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.cpu_quota)
  return _internal_cpu_quota();
}
inline void LinuxContainerResources::_internal_set_cpu_quota(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_quota_ = value;
}
inline void LinuxContainerResources::set_cpu_quota(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_quota(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.cpu_quota)
}

// int64 cpu_shares = 3;
inline void LinuxContainerResources::clear_cpu_shares() {
  cpu_shares_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::_internal_cpu_shares() const {
  return cpu_shares_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::cpu_shares() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.cpu_shares)
  return _internal_cpu_shares();
}
inline void LinuxContainerResources::_internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_shares_ = value;
}
inline void LinuxContainerResources::set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_shares(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.cpu_shares)
}

// int64 memory_limit_in_bytes = 4;
inline void LinuxContainerResources::clear_memory_limit_in_bytes() {
  memory_limit_in_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::_internal_memory_limit_in_bytes() const {
  return memory_limit_in_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::memory_limit_in_bytes() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.memory_limit_in_bytes)
  return _internal_memory_limit_in_bytes();
}
inline void LinuxContainerResources::_internal_set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  memory_limit_in_bytes_ = value;
}
inline void LinuxContainerResources::set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_memory_limit_in_bytes(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.memory_limit_in_bytes)
}

// int64 oom_score_adj = 5;
inline void LinuxContainerResources::clear_oom_score_adj() {
  oom_score_adj_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::_internal_oom_score_adj() const {
  return oom_score_adj_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerResources::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.oom_score_adj)
  return _internal_oom_score_adj();
}
inline void LinuxContainerResources::_internal_set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  oom_score_adj_ = value;
}
inline void LinuxContainerResources::set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_oom_score_adj(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.oom_score_adj)
}

// string cpuset_cpus = 6;
inline void LinuxContainerResources::clear_cpuset_cpus() {
  cpuset_cpus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxContainerResources::cpuset_cpus() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
  return _internal_cpuset_cpus();
}
inline void LinuxContainerResources::set_cpuset_cpus(const std::string& value) {
  _internal_set_cpuset_cpus(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}
inline std::string* LinuxContainerResources::mutable_cpuset_cpus() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
  return _internal_mutable_cpuset_cpus();
}
inline const std::string& LinuxContainerResources::_internal_cpuset_cpus() const {
  return cpuset_cpus_.Get();
}
inline void LinuxContainerResources::_internal_set_cpuset_cpus(const std::string& value) {
  
  cpuset_cpus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxContainerResources::set_cpuset_cpus(std::string&& value) {
  
  cpuset_cpus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}
inline void LinuxContainerResources::set_cpuset_cpus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpuset_cpus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}
inline void LinuxContainerResources::set_cpuset_cpus(const char* value,
    size_t size) {
  
  cpuset_cpus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}
inline std::string* LinuxContainerResources::_internal_mutable_cpuset_cpus() {
  
  return cpuset_cpus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxContainerResources::release_cpuset_cpus() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
  return cpuset_cpus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxContainerResources::set_allocated_cpuset_cpus(std::string* cpuset_cpus) {
  if (cpuset_cpus != nullptr) {
    
  } else {
    
  }
  cpuset_cpus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuset_cpus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}
inline std::string* LinuxContainerResources::unsafe_arena_release_cpuset_cpus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cpuset_cpus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxContainerResources::unsafe_arena_set_allocated_cpuset_cpus(
    std::string* cpuset_cpus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cpuset_cpus != nullptr) {
    
  } else {
    
  }
  cpuset_cpus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cpuset_cpus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerResources.cpuset_cpus)
}

// string cpuset_mems = 7;
inline void LinuxContainerResources::clear_cpuset_mems() {
  cpuset_mems_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxContainerResources::cpuset_mems() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
  return _internal_cpuset_mems();
}
inline void LinuxContainerResources::set_cpuset_mems(const std::string& value) {
  _internal_set_cpuset_mems(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}
inline std::string* LinuxContainerResources::mutable_cpuset_mems() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
  return _internal_mutable_cpuset_mems();
}
inline const std::string& LinuxContainerResources::_internal_cpuset_mems() const {
  return cpuset_mems_.Get();
}
inline void LinuxContainerResources::_internal_set_cpuset_mems(const std::string& value) {
  
  cpuset_mems_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxContainerResources::set_cpuset_mems(std::string&& value) {
  
  cpuset_mems_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}
inline void LinuxContainerResources::set_cpuset_mems(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpuset_mems_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}
inline void LinuxContainerResources::set_cpuset_mems(const char* value,
    size_t size) {
  
  cpuset_mems_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}
inline std::string* LinuxContainerResources::_internal_mutable_cpuset_mems() {
  
  return cpuset_mems_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxContainerResources::release_cpuset_mems() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
  return cpuset_mems_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxContainerResources::set_allocated_cpuset_mems(std::string* cpuset_mems) {
  if (cpuset_mems != nullptr) {
    
  } else {
    
  }
  cpuset_mems_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuset_mems,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}
inline std::string* LinuxContainerResources::unsafe_arena_release_cpuset_mems() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cpuset_mems_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxContainerResources::unsafe_arena_set_allocated_cpuset_mems(
    std::string* cpuset_mems) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cpuset_mems != nullptr) {
    
  } else {
    
  }
  cpuset_mems_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cpuset_mems, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerResources.cpuset_mems)
}

// repeated .runtime.v1alpha2.HugepageLimit hugepage_limits = 8;
inline int LinuxContainerResources::_internal_hugepage_limits_size() const {
  return hugepage_limits_.size();
}
inline int LinuxContainerResources::hugepage_limits_size() const {
  return _internal_hugepage_limits_size();
}
inline void LinuxContainerResources::clear_hugepage_limits() {
  hugepage_limits_.Clear();
}
inline ::runtime::v1alpha2::HugepageLimit* LinuxContainerResources::mutable_hugepage_limits(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerResources.hugepage_limits)
  return hugepage_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::HugepageLimit >*
LinuxContainerResources::mutable_hugepage_limits() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.LinuxContainerResources.hugepage_limits)
  return &hugepage_limits_;
}
inline const ::runtime::v1alpha2::HugepageLimit& LinuxContainerResources::_internal_hugepage_limits(int index) const {
  return hugepage_limits_.Get(index);
}
inline const ::runtime::v1alpha2::HugepageLimit& LinuxContainerResources::hugepage_limits(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerResources.hugepage_limits)
  return _internal_hugepage_limits(index);
}
inline ::runtime::v1alpha2::HugepageLimit* LinuxContainerResources::_internal_add_hugepage_limits() {
  return hugepage_limits_.Add();
}
inline ::runtime::v1alpha2::HugepageLimit* LinuxContainerResources::add_hugepage_limits() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerResources.hugepage_limits)
  return _internal_add_hugepage_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::HugepageLimit >&
LinuxContainerResources::hugepage_limits() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.LinuxContainerResources.hugepage_limits)
  return hugepage_limits_;
}

// -------------------------------------------------------------------

// HugepageLimit

// string page_size = 1;
inline void HugepageLimit::clear_page_size() {
  page_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HugepageLimit::page_size() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.HugepageLimit.page_size)
  return _internal_page_size();
}
inline void HugepageLimit::set_page_size(const std::string& value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.HugepageLimit.page_size)
}
inline std::string* HugepageLimit::mutable_page_size() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.HugepageLimit.page_size)
  return _internal_mutable_page_size();
}
inline const std::string& HugepageLimit::_internal_page_size() const {
  return page_size_.Get();
}
inline void HugepageLimit::_internal_set_page_size(const std::string& value) {
  
  page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HugepageLimit::set_page_size(std::string&& value) {
  
  page_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.HugepageLimit.page_size)
}
inline void HugepageLimit::set_page_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.HugepageLimit.page_size)
}
inline void HugepageLimit::set_page_size(const char* value,
    size_t size) {
  
  page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.HugepageLimit.page_size)
}
inline std::string* HugepageLimit::_internal_mutable_page_size() {
  
  return page_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HugepageLimit::release_page_size() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.HugepageLimit.page_size)
  return page_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HugepageLimit::set_allocated_page_size(std::string* page_size) {
  if (page_size != nullptr) {
    
  } else {
    
  }
  page_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.HugepageLimit.page_size)
}
inline std::string* HugepageLimit::unsafe_arena_release_page_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.HugepageLimit.page_size)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return page_size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HugepageLimit::unsafe_arena_set_allocated_page_size(
    std::string* page_size) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (page_size != nullptr) {
    
  } else {
    
  }
  page_size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_size, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.HugepageLimit.page_size)
}

// uint64 limit = 2;
inline void HugepageLimit::clear_limit() {
  limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HugepageLimit::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HugepageLimit::limit() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.HugepageLimit.limit)
  return _internal_limit();
}
inline void HugepageLimit::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void HugepageLimit::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.HugepageLimit.limit)
}

// -------------------------------------------------------------------

// SELinuxOption

// string user = 1;
inline void SELinuxOption::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SELinuxOption::user() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.SELinuxOption.user)
  return _internal_user();
}
inline void SELinuxOption::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.SELinuxOption.user)
}
inline std::string* SELinuxOption::mutable_user() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.SELinuxOption.user)
  return _internal_mutable_user();
}
inline const std::string& SELinuxOption::_internal_user() const {
  return user_.Get();
}
inline void SELinuxOption::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SELinuxOption::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.SELinuxOption.user)
}
inline void SELinuxOption::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.SELinuxOption.user)
}
inline void SELinuxOption::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.SELinuxOption.user)
}
inline std::string* SELinuxOption::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SELinuxOption::release_user() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.SELinuxOption.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SELinuxOption::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.SELinuxOption.user)
}
inline std::string* SELinuxOption::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.SELinuxOption.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SELinuxOption::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.SELinuxOption.user)
}

// string role = 2;
inline void SELinuxOption::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SELinuxOption::role() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.SELinuxOption.role)
  return _internal_role();
}
inline void SELinuxOption::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.SELinuxOption.role)
}
inline std::string* SELinuxOption::mutable_role() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.SELinuxOption.role)
  return _internal_mutable_role();
}
inline const std::string& SELinuxOption::_internal_role() const {
  return role_.Get();
}
inline void SELinuxOption::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SELinuxOption::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.SELinuxOption.role)
}
inline void SELinuxOption::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.SELinuxOption.role)
}
inline void SELinuxOption::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.SELinuxOption.role)
}
inline std::string* SELinuxOption::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SELinuxOption::release_role() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.SELinuxOption.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SELinuxOption::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.SELinuxOption.role)
}
inline std::string* SELinuxOption::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.SELinuxOption.role)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return role_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SELinuxOption::unsafe_arena_set_allocated_role(
    std::string* role) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (role != nullptr) {
    
  } else {
    
  }
  role_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      role, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.SELinuxOption.role)
}

// string type = 3;
inline void SELinuxOption::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SELinuxOption::type() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.SELinuxOption.type)
  return _internal_type();
}
inline void SELinuxOption::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.SELinuxOption.type)
}
inline std::string* SELinuxOption::mutable_type() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.SELinuxOption.type)
  return _internal_mutable_type();
}
inline const std::string& SELinuxOption::_internal_type() const {
  return type_.Get();
}
inline void SELinuxOption::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SELinuxOption::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.SELinuxOption.type)
}
inline void SELinuxOption::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.SELinuxOption.type)
}
inline void SELinuxOption::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.SELinuxOption.type)
}
inline std::string* SELinuxOption::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SELinuxOption::release_type() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.SELinuxOption.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SELinuxOption::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.SELinuxOption.type)
}
inline std::string* SELinuxOption::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.SELinuxOption.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SELinuxOption::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.SELinuxOption.type)
}

// string level = 4;
inline void SELinuxOption::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SELinuxOption::level() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.SELinuxOption.level)
  return _internal_level();
}
inline void SELinuxOption::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.SELinuxOption.level)
}
inline std::string* SELinuxOption::mutable_level() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.SELinuxOption.level)
  return _internal_mutable_level();
}
inline const std::string& SELinuxOption::_internal_level() const {
  return level_.Get();
}
inline void SELinuxOption::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SELinuxOption::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.SELinuxOption.level)
}
inline void SELinuxOption::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.SELinuxOption.level)
}
inline void SELinuxOption::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.SELinuxOption.level)
}
inline std::string* SELinuxOption::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SELinuxOption::release_level() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.SELinuxOption.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SELinuxOption::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.SELinuxOption.level)
}
inline std::string* SELinuxOption::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.SELinuxOption.level)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SELinuxOption::unsafe_arena_set_allocated_level(
    std::string* level) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level != nullptr) {
    
  } else {
    
  }
  level_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.SELinuxOption.level)
}

// -------------------------------------------------------------------

// Capability

// repeated string add_capabilities = 1;
inline int Capability::_internal_add_capabilities_size() const {
  return add_capabilities_.size();
}
inline int Capability::add_capabilities_size() const {
  return _internal_add_capabilities_size();
}
inline void Capability::clear_add_capabilities() {
  add_capabilities_.Clear();
}
inline std::string* Capability::add_add_capabilities() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.Capability.add_capabilities)
  return _internal_add_add_capabilities();
}
inline const std::string& Capability::_internal_add_capabilities(int index) const {
  return add_capabilities_.Get(index);
}
inline const std::string& Capability::add_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Capability.add_capabilities)
  return _internal_add_capabilities(index);
}
inline std::string* Capability::mutable_add_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Capability.add_capabilities)
  return add_capabilities_.Mutable(index);
}
inline void Capability::set_add_capabilities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Capability.add_capabilities)
  add_capabilities_.Mutable(index)->assign(value);
}
inline void Capability::set_add_capabilities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Capability.add_capabilities)
  add_capabilities_.Mutable(index)->assign(std::move(value));
}
inline void Capability::set_add_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  add_capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Capability.add_capabilities)
}
inline void Capability::set_add_capabilities(int index, const char* value, size_t size) {
  add_capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Capability.add_capabilities)
}
inline std::string* Capability::_internal_add_add_capabilities() {
  return add_capabilities_.Add();
}
inline void Capability::add_add_capabilities(const std::string& value) {
  add_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Capability.add_capabilities)
}
inline void Capability::add_add_capabilities(std::string&& value) {
  add_capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Capability.add_capabilities)
}
inline void Capability::add_add_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  add_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.Capability.add_capabilities)
}
inline void Capability::add_add_capabilities(const char* value, size_t size) {
  add_capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.Capability.add_capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Capability::add_capabilities() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.Capability.add_capabilities)
  return add_capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Capability::mutable_add_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.Capability.add_capabilities)
  return &add_capabilities_;
}

// repeated string drop_capabilities = 2;
inline int Capability::_internal_drop_capabilities_size() const {
  return drop_capabilities_.size();
}
inline int Capability::drop_capabilities_size() const {
  return _internal_drop_capabilities_size();
}
inline void Capability::clear_drop_capabilities() {
  drop_capabilities_.Clear();
}
inline std::string* Capability::add_drop_capabilities() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.Capability.drop_capabilities)
  return _internal_add_drop_capabilities();
}
inline const std::string& Capability::_internal_drop_capabilities(int index) const {
  return drop_capabilities_.Get(index);
}
inline const std::string& Capability::drop_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Capability.drop_capabilities)
  return _internal_drop_capabilities(index);
}
inline std::string* Capability::mutable_drop_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Capability.drop_capabilities)
  return drop_capabilities_.Mutable(index);
}
inline void Capability::set_drop_capabilities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Capability.drop_capabilities)
  drop_capabilities_.Mutable(index)->assign(value);
}
inline void Capability::set_drop_capabilities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Capability.drop_capabilities)
  drop_capabilities_.Mutable(index)->assign(std::move(value));
}
inline void Capability::set_drop_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  drop_capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Capability.drop_capabilities)
}
inline void Capability::set_drop_capabilities(int index, const char* value, size_t size) {
  drop_capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Capability.drop_capabilities)
}
inline std::string* Capability::_internal_add_drop_capabilities() {
  return drop_capabilities_.Add();
}
inline void Capability::add_drop_capabilities(const std::string& value) {
  drop_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Capability.drop_capabilities)
}
inline void Capability::add_drop_capabilities(std::string&& value) {
  drop_capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Capability.drop_capabilities)
}
inline void Capability::add_drop_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  drop_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.Capability.drop_capabilities)
}
inline void Capability::add_drop_capabilities(const char* value, size_t size) {
  drop_capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.Capability.drop_capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Capability::drop_capabilities() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.Capability.drop_capabilities)
  return drop_capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Capability::mutable_drop_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.Capability.drop_capabilities)
  return &drop_capabilities_;
}

// -------------------------------------------------------------------

// LinuxContainerSecurityContext

// .runtime.v1alpha2.Capability capabilities = 1;
inline bool LinuxContainerSecurityContext::_internal_has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != nullptr;
}
inline bool LinuxContainerSecurityContext::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void LinuxContainerSecurityContext::clear_capabilities() {
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
}
inline const ::runtime::v1alpha2::Capability& LinuxContainerSecurityContext::_internal_capabilities() const {
  const ::runtime::v1alpha2::Capability* p = capabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Capability*>(
      &::runtime::v1alpha2::_Capability_default_instance_);
}
inline const ::runtime::v1alpha2::Capability& LinuxContainerSecurityContext::capabilities() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.capabilities)
  return _internal_capabilities();
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_capabilities(
    ::runtime::v1alpha2::Capability* capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_);
  }
  capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.capabilities)
}
inline ::runtime::v1alpha2::Capability* LinuxContainerSecurityContext::release_capabilities() {
  auto temp = unsafe_arena_release_capabilities();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Capability* LinuxContainerSecurityContext::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.capabilities)
  
  ::runtime::v1alpha2::Capability* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Capability* LinuxContainerSecurityContext::_internal_mutable_capabilities() {
  
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Capability>(GetArena());
    capabilities_ = p;
  }
  return capabilities_;
}
inline ::runtime::v1alpha2::Capability* LinuxContainerSecurityContext::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.capabilities)
  return _internal_mutable_capabilities();
}
inline void LinuxContainerSecurityContext::set_allocated_capabilities(::runtime::v1alpha2::Capability* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.capabilities)
}

// bool privileged = 2;
inline void LinuxContainerSecurityContext::clear_privileged() {
  privileged_ = false;
}
inline bool LinuxContainerSecurityContext::_internal_privileged() const {
  return privileged_;
}
inline bool LinuxContainerSecurityContext::privileged() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.privileged)
  return _internal_privileged();
}
inline void LinuxContainerSecurityContext::_internal_set_privileged(bool value) {
  
  privileged_ = value;
}
inline void LinuxContainerSecurityContext::set_privileged(bool value) {
  _internal_set_privileged(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.privileged)
}

// .runtime.v1alpha2.NamespaceOption namespace_options = 3;
inline bool LinuxContainerSecurityContext::_internal_has_namespace_options() const {
  return this != internal_default_instance() && namespace_options_ != nullptr;
}
inline bool LinuxContainerSecurityContext::has_namespace_options() const {
  return _internal_has_namespace_options();
}
inline void LinuxContainerSecurityContext::clear_namespace_options() {
  if (GetArena() == nullptr && namespace_options_ != nullptr) {
    delete namespace_options_;
  }
  namespace_options_ = nullptr;
}
inline const ::runtime::v1alpha2::NamespaceOption& LinuxContainerSecurityContext::_internal_namespace_options() const {
  const ::runtime::v1alpha2::NamespaceOption* p = namespace_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::NamespaceOption*>(
      &::runtime::v1alpha2::_NamespaceOption_default_instance_);
}
inline const ::runtime::v1alpha2::NamespaceOption& LinuxContainerSecurityContext::namespace_options() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.namespace_options)
  return _internal_namespace_options();
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_namespace_options(
    ::runtime::v1alpha2::NamespaceOption* namespace_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_options_);
  }
  namespace_options_ = namespace_options;
  if (namespace_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.namespace_options)
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxContainerSecurityContext::release_namespace_options() {
  auto temp = unsafe_arena_release_namespace_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxContainerSecurityContext::unsafe_arena_release_namespace_options() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.namespace_options)
  
  ::runtime::v1alpha2::NamespaceOption* temp = namespace_options_;
  namespace_options_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxContainerSecurityContext::_internal_mutable_namespace_options() {
  
  if (namespace_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::NamespaceOption>(GetArena());
    namespace_options_ = p;
  }
  return namespace_options_;
}
inline ::runtime::v1alpha2::NamespaceOption* LinuxContainerSecurityContext::mutable_namespace_options() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.namespace_options)
  return _internal_mutable_namespace_options();
}
inline void LinuxContainerSecurityContext::set_allocated_namespace_options(::runtime::v1alpha2::NamespaceOption* namespace_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete namespace_options_;
  }
  if (namespace_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(namespace_options);
    if (message_arena != submessage_arena) {
      namespace_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_options, submessage_arena);
    }
    
  } else {
    
  }
  namespace_options_ = namespace_options;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.namespace_options)
}

// .runtime.v1alpha2.SELinuxOption selinux_options = 4;
inline bool LinuxContainerSecurityContext::_internal_has_selinux_options() const {
  return this != internal_default_instance() && selinux_options_ != nullptr;
}
inline bool LinuxContainerSecurityContext::has_selinux_options() const {
  return _internal_has_selinux_options();
}
inline void LinuxContainerSecurityContext::clear_selinux_options() {
  if (GetArena() == nullptr && selinux_options_ != nullptr) {
    delete selinux_options_;
  }
  selinux_options_ = nullptr;
}
inline const ::runtime::v1alpha2::SELinuxOption& LinuxContainerSecurityContext::_internal_selinux_options() const {
  const ::runtime::v1alpha2::SELinuxOption* p = selinux_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::SELinuxOption*>(
      &::runtime::v1alpha2::_SELinuxOption_default_instance_);
}
inline const ::runtime::v1alpha2::SELinuxOption& LinuxContainerSecurityContext::selinux_options() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.selinux_options)
  return _internal_selinux_options();
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_selinux_options(
    ::runtime::v1alpha2::SELinuxOption* selinux_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selinux_options_);
  }
  selinux_options_ = selinux_options;
  if (selinux_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.selinux_options)
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxContainerSecurityContext::release_selinux_options() {
  auto temp = unsafe_arena_release_selinux_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxContainerSecurityContext::unsafe_arena_release_selinux_options() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.selinux_options)
  
  ::runtime::v1alpha2::SELinuxOption* temp = selinux_options_;
  selinux_options_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxContainerSecurityContext::_internal_mutable_selinux_options() {
  
  if (selinux_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::SELinuxOption>(GetArena());
    selinux_options_ = p;
  }
  return selinux_options_;
}
inline ::runtime::v1alpha2::SELinuxOption* LinuxContainerSecurityContext::mutable_selinux_options() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.selinux_options)
  return _internal_mutable_selinux_options();
}
inline void LinuxContainerSecurityContext::set_allocated_selinux_options(::runtime::v1alpha2::SELinuxOption* selinux_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selinux_options_;
  }
  if (selinux_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selinux_options);
    if (message_arena != submessage_arena) {
      selinux_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selinux_options, submessage_arena);
    }
    
  } else {
    
  }
  selinux_options_ = selinux_options;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.selinux_options)
}

// .runtime.v1alpha2.Int64Value run_as_user = 5;
inline bool LinuxContainerSecurityContext::_internal_has_run_as_user() const {
  return this != internal_default_instance() && run_as_user_ != nullptr;
}
inline bool LinuxContainerSecurityContext::has_run_as_user() const {
  return _internal_has_run_as_user();
}
inline void LinuxContainerSecurityContext::clear_run_as_user() {
  if (GetArena() == nullptr && run_as_user_ != nullptr) {
    delete run_as_user_;
  }
  run_as_user_ = nullptr;
}
inline const ::runtime::v1alpha2::Int64Value& LinuxContainerSecurityContext::_internal_run_as_user() const {
  const ::runtime::v1alpha2::Int64Value* p = run_as_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Int64Value*>(
      &::runtime::v1alpha2::_Int64Value_default_instance_);
}
inline const ::runtime::v1alpha2::Int64Value& LinuxContainerSecurityContext::run_as_user() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_user)
  return _internal_run_as_user();
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_run_as_user(
    ::runtime::v1alpha2::Int64Value* run_as_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_as_user_);
  }
  run_as_user_ = run_as_user;
  if (run_as_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_user)
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::release_run_as_user() {
  auto temp = unsafe_arena_release_run_as_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::unsafe_arena_release_run_as_user() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_user)
  
  ::runtime::v1alpha2::Int64Value* temp = run_as_user_;
  run_as_user_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::_internal_mutable_run_as_user() {
  
  if (run_as_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(GetArena());
    run_as_user_ = p;
  }
  return run_as_user_;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::mutable_run_as_user() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_user)
  return _internal_mutable_run_as_user();
}
inline void LinuxContainerSecurityContext::set_allocated_run_as_user(::runtime::v1alpha2::Int64Value* run_as_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete run_as_user_;
  }
  if (run_as_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_as_user);
    if (message_arena != submessage_arena) {
      run_as_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_as_user, submessage_arena);
    }
    
  } else {
    
  }
  run_as_user_ = run_as_user;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_user)
}

// .runtime.v1alpha2.Int64Value run_as_group = 12;
inline bool LinuxContainerSecurityContext::_internal_has_run_as_group() const {
  return this != internal_default_instance() && run_as_group_ != nullptr;
}
inline bool LinuxContainerSecurityContext::has_run_as_group() const {
  return _internal_has_run_as_group();
}
inline void LinuxContainerSecurityContext::clear_run_as_group() {
  if (GetArena() == nullptr && run_as_group_ != nullptr) {
    delete run_as_group_;
  }
  run_as_group_ = nullptr;
}
inline const ::runtime::v1alpha2::Int64Value& LinuxContainerSecurityContext::_internal_run_as_group() const {
  const ::runtime::v1alpha2::Int64Value* p = run_as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Int64Value*>(
      &::runtime::v1alpha2::_Int64Value_default_instance_);
}
inline const ::runtime::v1alpha2::Int64Value& LinuxContainerSecurityContext::run_as_group() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_group)
  return _internal_run_as_group();
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_run_as_group(
    ::runtime::v1alpha2::Int64Value* run_as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_as_group_);
  }
  run_as_group_ = run_as_group;
  if (run_as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_group)
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::release_run_as_group() {
  auto temp = unsafe_arena_release_run_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::unsafe_arena_release_run_as_group() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_group)
  
  ::runtime::v1alpha2::Int64Value* temp = run_as_group_;
  run_as_group_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::_internal_mutable_run_as_group() {
  
  if (run_as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(GetArena());
    run_as_group_ = p;
  }
  return run_as_group_;
}
inline ::runtime::v1alpha2::Int64Value* LinuxContainerSecurityContext::mutable_run_as_group() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_group)
  return _internal_mutable_run_as_group();
}
inline void LinuxContainerSecurityContext::set_allocated_run_as_group(::runtime::v1alpha2::Int64Value* run_as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete run_as_group_;
  }
  if (run_as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_as_group);
    if (message_arena != submessage_arena) {
      run_as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_as_group, submessage_arena);
    }
    
  } else {
    
  }
  run_as_group_ = run_as_group;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_group)
}

// string run_as_username = 6;
inline void LinuxContainerSecurityContext::clear_run_as_username() {
  run_as_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxContainerSecurityContext::run_as_username() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
  return _internal_run_as_username();
}
inline void LinuxContainerSecurityContext::set_run_as_username(const std::string& value) {
  _internal_set_run_as_username(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}
inline std::string* LinuxContainerSecurityContext::mutable_run_as_username() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
  return _internal_mutable_run_as_username();
}
inline const std::string& LinuxContainerSecurityContext::_internal_run_as_username() const {
  return run_as_username_.Get();
}
inline void LinuxContainerSecurityContext::_internal_set_run_as_username(const std::string& value) {
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxContainerSecurityContext::set_run_as_username(std::string&& value) {
  
  run_as_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}
inline void LinuxContainerSecurityContext::set_run_as_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}
inline void LinuxContainerSecurityContext::set_run_as_username(const char* value,
    size_t size) {
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}
inline std::string* LinuxContainerSecurityContext::_internal_mutable_run_as_username() {
  
  return run_as_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxContainerSecurityContext::release_run_as_username() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
  return run_as_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxContainerSecurityContext::set_allocated_run_as_username(std::string* run_as_username) {
  if (run_as_username != nullptr) {
    
  } else {
    
  }
  run_as_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_as_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}
inline std::string* LinuxContainerSecurityContext::unsafe_arena_release_run_as_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return run_as_username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_run_as_username(
    std::string* run_as_username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (run_as_username != nullptr) {
    
  } else {
    
  }
  run_as_username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      run_as_username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username)
}

// bool readonly_rootfs = 7;
inline void LinuxContainerSecurityContext::clear_readonly_rootfs() {
  readonly_rootfs_ = false;
}
inline bool LinuxContainerSecurityContext::_internal_readonly_rootfs() const {
  return readonly_rootfs_;
}
inline bool LinuxContainerSecurityContext::readonly_rootfs() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_rootfs)
  return _internal_readonly_rootfs();
}
inline void LinuxContainerSecurityContext::_internal_set_readonly_rootfs(bool value) {
  
  readonly_rootfs_ = value;
}
inline void LinuxContainerSecurityContext::set_readonly_rootfs(bool value) {
  _internal_set_readonly_rootfs(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_rootfs)
}

// repeated int64 supplemental_groups = 8;
inline int LinuxContainerSecurityContext::_internal_supplemental_groups_size() const {
  return supplemental_groups_.size();
}
inline int LinuxContainerSecurityContext::supplemental_groups_size() const {
  return _internal_supplemental_groups_size();
}
inline void LinuxContainerSecurityContext::clear_supplemental_groups() {
  supplemental_groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerSecurityContext::_internal_supplemental_groups(int index) const {
  return supplemental_groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinuxContainerSecurityContext::supplemental_groups(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.supplemental_groups)
  return _internal_supplemental_groups(index);
}
inline void LinuxContainerSecurityContext::set_supplemental_groups(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  supplemental_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.supplemental_groups)
}
inline void LinuxContainerSecurityContext::_internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value) {
  supplemental_groups_.Add(value);
}
inline void LinuxContainerSecurityContext::add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_supplemental_groups(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerSecurityContext.supplemental_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinuxContainerSecurityContext::_internal_supplemental_groups() const {
  return supplemental_groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinuxContainerSecurityContext::supplemental_groups() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.LinuxContainerSecurityContext.supplemental_groups)
  return _internal_supplemental_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinuxContainerSecurityContext::_internal_mutable_supplemental_groups() {
  return &supplemental_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinuxContainerSecurityContext::mutable_supplemental_groups() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.LinuxContainerSecurityContext.supplemental_groups)
  return _internal_mutable_supplemental_groups();
}

// string apparmor_profile = 9;
inline void LinuxContainerSecurityContext::clear_apparmor_profile() {
  apparmor_profile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxContainerSecurityContext::apparmor_profile() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
  return _internal_apparmor_profile();
}
inline void LinuxContainerSecurityContext::set_apparmor_profile(const std::string& value) {
  _internal_set_apparmor_profile(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}
inline std::string* LinuxContainerSecurityContext::mutable_apparmor_profile() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
  return _internal_mutable_apparmor_profile();
}
inline const std::string& LinuxContainerSecurityContext::_internal_apparmor_profile() const {
  return apparmor_profile_.Get();
}
inline void LinuxContainerSecurityContext::_internal_set_apparmor_profile(const std::string& value) {
  
  apparmor_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxContainerSecurityContext::set_apparmor_profile(std::string&& value) {
  
  apparmor_profile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}
inline void LinuxContainerSecurityContext::set_apparmor_profile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apparmor_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}
inline void LinuxContainerSecurityContext::set_apparmor_profile(const char* value,
    size_t size) {
  
  apparmor_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}
inline std::string* LinuxContainerSecurityContext::_internal_mutable_apparmor_profile() {
  
  return apparmor_profile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxContainerSecurityContext::release_apparmor_profile() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
  return apparmor_profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxContainerSecurityContext::set_allocated_apparmor_profile(std::string* apparmor_profile) {
  if (apparmor_profile != nullptr) {
    
  } else {
    
  }
  apparmor_profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apparmor_profile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}
inline std::string* LinuxContainerSecurityContext::unsafe_arena_release_apparmor_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return apparmor_profile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_apparmor_profile(
    std::string* apparmor_profile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (apparmor_profile != nullptr) {
    
  } else {
    
  }
  apparmor_profile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      apparmor_profile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile)
}

// string seccomp_profile_path = 10;
inline void LinuxContainerSecurityContext::clear_seccomp_profile_path() {
  seccomp_profile_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinuxContainerSecurityContext::seccomp_profile_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
  return _internal_seccomp_profile_path();
}
inline void LinuxContainerSecurityContext::set_seccomp_profile_path(const std::string& value) {
  _internal_set_seccomp_profile_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxContainerSecurityContext::mutable_seccomp_profile_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
  return _internal_mutable_seccomp_profile_path();
}
inline const std::string& LinuxContainerSecurityContext::_internal_seccomp_profile_path() const {
  return seccomp_profile_path_.Get();
}
inline void LinuxContainerSecurityContext::_internal_set_seccomp_profile_path(const std::string& value) {
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinuxContainerSecurityContext::set_seccomp_profile_path(std::string&& value) {
  
  seccomp_profile_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}
inline void LinuxContainerSecurityContext::set_seccomp_profile_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}
inline void LinuxContainerSecurityContext::set_seccomp_profile_path(const char* value,
    size_t size) {
  
  seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxContainerSecurityContext::_internal_mutable_seccomp_profile_path() {
  
  return seccomp_profile_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinuxContainerSecurityContext::release_seccomp_profile_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
  return seccomp_profile_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinuxContainerSecurityContext::set_allocated_seccomp_profile_path(std::string* seccomp_profile_path) {
  if (seccomp_profile_path != nullptr) {
    
  } else {
    
  }
  seccomp_profile_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seccomp_profile_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}
inline std::string* LinuxContainerSecurityContext::unsafe_arena_release_seccomp_profile_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seccomp_profile_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinuxContainerSecurityContext::unsafe_arena_set_allocated_seccomp_profile_path(
    std::string* seccomp_profile_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seccomp_profile_path != nullptr) {
    
  } else {
    
  }
  seccomp_profile_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seccomp_profile_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path)
}

// bool no_new_privs = 11;
inline void LinuxContainerSecurityContext::clear_no_new_privs() {
  no_new_privs_ = false;
}
inline bool LinuxContainerSecurityContext::_internal_no_new_privs() const {
  return no_new_privs_;
}
inline bool LinuxContainerSecurityContext::no_new_privs() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.no_new_privs)
  return _internal_no_new_privs();
}
inline void LinuxContainerSecurityContext::_internal_set_no_new_privs(bool value) {
  
  no_new_privs_ = value;
}
inline void LinuxContainerSecurityContext::set_no_new_privs(bool value) {
  _internal_set_no_new_privs(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.no_new_privs)
}

// repeated string masked_paths = 13;
inline int LinuxContainerSecurityContext::_internal_masked_paths_size() const {
  return masked_paths_.size();
}
inline int LinuxContainerSecurityContext::masked_paths_size() const {
  return _internal_masked_paths_size();
}
inline void LinuxContainerSecurityContext::clear_masked_paths() {
  masked_paths_.Clear();
}
inline std::string* LinuxContainerSecurityContext::add_masked_paths() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  return _internal_add_masked_paths();
}
inline const std::string& LinuxContainerSecurityContext::_internal_masked_paths(int index) const {
  return masked_paths_.Get(index);
}
inline const std::string& LinuxContainerSecurityContext::masked_paths(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  return _internal_masked_paths(index);
}
inline std::string* LinuxContainerSecurityContext::mutable_masked_paths(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  return masked_paths_.Mutable(index);
}
inline void LinuxContainerSecurityContext::set_masked_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  masked_paths_.Mutable(index)->assign(value);
}
inline void LinuxContainerSecurityContext::set_masked_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  masked_paths_.Mutable(index)->assign(std::move(value));
}
inline void LinuxContainerSecurityContext::set_masked_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  masked_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline void LinuxContainerSecurityContext::set_masked_paths(int index, const char* value, size_t size) {
  masked_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline std::string* LinuxContainerSecurityContext::_internal_add_masked_paths() {
  return masked_paths_.Add();
}
inline void LinuxContainerSecurityContext::add_masked_paths(const std::string& value) {
  masked_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline void LinuxContainerSecurityContext::add_masked_paths(std::string&& value) {
  masked_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline void LinuxContainerSecurityContext::add_masked_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  masked_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline void LinuxContainerSecurityContext::add_masked_paths(const char* value, size_t size) {
  masked_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinuxContainerSecurityContext::masked_paths() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  return masked_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinuxContainerSecurityContext::mutable_masked_paths() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths)
  return &masked_paths_;
}

// repeated string readonly_paths = 14;
inline int LinuxContainerSecurityContext::_internal_readonly_paths_size() const {
  return readonly_paths_.size();
}
inline int LinuxContainerSecurityContext::readonly_paths_size() const {
  return _internal_readonly_paths_size();
}
inline void LinuxContainerSecurityContext::clear_readonly_paths() {
  readonly_paths_.Clear();
}
inline std::string* LinuxContainerSecurityContext::add_readonly_paths() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  return _internal_add_readonly_paths();
}
inline const std::string& LinuxContainerSecurityContext::_internal_readonly_paths(int index) const {
  return readonly_paths_.Get(index);
}
inline const std::string& LinuxContainerSecurityContext::readonly_paths(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  return _internal_readonly_paths(index);
}
inline std::string* LinuxContainerSecurityContext::mutable_readonly_paths(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  return readonly_paths_.Mutable(index);
}
inline void LinuxContainerSecurityContext::set_readonly_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  readonly_paths_.Mutable(index)->assign(value);
}
inline void LinuxContainerSecurityContext::set_readonly_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  readonly_paths_.Mutable(index)->assign(std::move(value));
}
inline void LinuxContainerSecurityContext::set_readonly_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readonly_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline void LinuxContainerSecurityContext::set_readonly_paths(int index, const char* value, size_t size) {
  readonly_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline std::string* LinuxContainerSecurityContext::_internal_add_readonly_paths() {
  return readonly_paths_.Add();
}
inline void LinuxContainerSecurityContext::add_readonly_paths(const std::string& value) {
  readonly_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline void LinuxContainerSecurityContext::add_readonly_paths(std::string&& value) {
  readonly_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline void LinuxContainerSecurityContext::add_readonly_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readonly_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline void LinuxContainerSecurityContext::add_readonly_paths(const char* value, size_t size) {
  readonly_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinuxContainerSecurityContext::readonly_paths() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  return readonly_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinuxContainerSecurityContext::mutable_readonly_paths() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths)
  return &readonly_paths_;
}

// -------------------------------------------------------------------

// LinuxContainerConfig

// .runtime.v1alpha2.LinuxContainerResources resources = 1;
inline bool LinuxContainerConfig::_internal_has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline bool LinuxContainerConfig::has_resources() const {
  return _internal_has_resources();
}
inline void LinuxContainerConfig::clear_resources() {
  if (GetArena() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxContainerResources& LinuxContainerConfig::_internal_resources() const {
  const ::runtime::v1alpha2::LinuxContainerResources* p = resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxContainerResources*>(
      &::runtime::v1alpha2::_LinuxContainerResources_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxContainerResources& LinuxContainerConfig::resources() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerConfig.resources)
  return _internal_resources();
}
inline void LinuxContainerConfig::unsafe_arena_set_allocated_resources(
    ::runtime::v1alpha2::LinuxContainerResources* resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerConfig.resources)
}
inline ::runtime::v1alpha2::LinuxContainerResources* LinuxContainerConfig::release_resources() {
  auto temp = unsafe_arena_release_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerResources* LinuxContainerConfig::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerConfig.resources)
  
  ::runtime::v1alpha2::LinuxContainerResources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerResources* LinuxContainerConfig::_internal_mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerResources>(GetArena());
    resources_ = p;
  }
  return resources_;
}
inline ::runtime::v1alpha2::LinuxContainerResources* LinuxContainerConfig::mutable_resources() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerConfig.resources)
  return _internal_mutable_resources();
}
inline void LinuxContainerConfig::set_allocated_resources(::runtime::v1alpha2::LinuxContainerResources* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resources_;
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerConfig.resources)
}

// .runtime.v1alpha2.LinuxContainerSecurityContext security_context = 2;
inline bool LinuxContainerConfig::_internal_has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline bool LinuxContainerConfig::has_security_context() const {
  return _internal_has_security_context();
}
inline void LinuxContainerConfig::clear_security_context() {
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxContainerSecurityContext& LinuxContainerConfig::_internal_security_context() const {
  const ::runtime::v1alpha2::LinuxContainerSecurityContext* p = security_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxContainerSecurityContext*>(
      &::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxContainerSecurityContext& LinuxContainerConfig::security_context() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.LinuxContainerConfig.security_context)
  return _internal_security_context();
}
inline void LinuxContainerConfig::unsafe_arena_set_allocated_security_context(
    ::runtime::v1alpha2::LinuxContainerSecurityContext* security_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  security_context_ = security_context;
  if (security_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.LinuxContainerConfig.security_context)
}
inline ::runtime::v1alpha2::LinuxContainerSecurityContext* LinuxContainerConfig::release_security_context() {
  auto temp = unsafe_arena_release_security_context();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerSecurityContext* LinuxContainerConfig::unsafe_arena_release_security_context() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.LinuxContainerConfig.security_context)
  
  ::runtime::v1alpha2::LinuxContainerSecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerSecurityContext* LinuxContainerConfig::_internal_mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerSecurityContext>(GetArena());
    security_context_ = p;
  }
  return security_context_;
}
inline ::runtime::v1alpha2::LinuxContainerSecurityContext* LinuxContainerConfig::mutable_security_context() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.LinuxContainerConfig.security_context)
  return _internal_mutable_security_context();
}
inline void LinuxContainerConfig::set_allocated_security_context(::runtime::v1alpha2::LinuxContainerSecurityContext* security_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_context_;
  }
  if (security_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security_context);
    if (message_arena != submessage_arena) {
      security_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.LinuxContainerConfig.security_context)
}

// -------------------------------------------------------------------

// WindowsContainerSecurityContext

// string run_as_username = 1;
inline void WindowsContainerSecurityContext::clear_run_as_username() {
  run_as_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WindowsContainerSecurityContext::run_as_username() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
  return _internal_run_as_username();
}
inline void WindowsContainerSecurityContext::set_run_as_username(const std::string& value) {
  _internal_set_run_as_username(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}
inline std::string* WindowsContainerSecurityContext::mutable_run_as_username() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
  return _internal_mutable_run_as_username();
}
inline const std::string& WindowsContainerSecurityContext::_internal_run_as_username() const {
  return run_as_username_.Get();
}
inline void WindowsContainerSecurityContext::_internal_set_run_as_username(const std::string& value) {
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WindowsContainerSecurityContext::set_run_as_username(std::string&& value) {
  
  run_as_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}
inline void WindowsContainerSecurityContext::set_run_as_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}
inline void WindowsContainerSecurityContext::set_run_as_username(const char* value,
    size_t size) {
  
  run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}
inline std::string* WindowsContainerSecurityContext::_internal_mutable_run_as_username() {
  
  return run_as_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WindowsContainerSecurityContext::release_run_as_username() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
  return run_as_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WindowsContainerSecurityContext::set_allocated_run_as_username(std::string* run_as_username) {
  if (run_as_username != nullptr) {
    
  } else {
    
  }
  run_as_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_as_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}
inline std::string* WindowsContainerSecurityContext::unsafe_arena_release_run_as_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return run_as_username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WindowsContainerSecurityContext::unsafe_arena_set_allocated_run_as_username(
    std::string* run_as_username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (run_as_username != nullptr) {
    
  } else {
    
  }
  run_as_username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      run_as_username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username)
}

// -------------------------------------------------------------------

// WindowsContainerConfig

// .runtime.v1alpha2.WindowsContainerResources resources = 1;
inline bool WindowsContainerConfig::_internal_has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline bool WindowsContainerConfig::has_resources() const {
  return _internal_has_resources();
}
inline void WindowsContainerConfig::clear_resources() {
  if (GetArena() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
inline const ::runtime::v1alpha2::WindowsContainerResources& WindowsContainerConfig::_internal_resources() const {
  const ::runtime::v1alpha2::WindowsContainerResources* p = resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::WindowsContainerResources*>(
      &::runtime::v1alpha2::_WindowsContainerResources_default_instance_);
}
inline const ::runtime::v1alpha2::WindowsContainerResources& WindowsContainerConfig::resources() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerConfig.resources)
  return _internal_resources();
}
inline void WindowsContainerConfig::unsafe_arena_set_allocated_resources(
    ::runtime::v1alpha2::WindowsContainerResources* resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.WindowsContainerConfig.resources)
}
inline ::runtime::v1alpha2::WindowsContainerResources* WindowsContainerConfig::release_resources() {
  auto temp = unsafe_arena_release_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerResources* WindowsContainerConfig::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.WindowsContainerConfig.resources)
  
  ::runtime::v1alpha2::WindowsContainerResources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerResources* WindowsContainerConfig::_internal_mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerResources>(GetArena());
    resources_ = p;
  }
  return resources_;
}
inline ::runtime::v1alpha2::WindowsContainerResources* WindowsContainerConfig::mutable_resources() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.WindowsContainerConfig.resources)
  return _internal_mutable_resources();
}
inline void WindowsContainerConfig::set_allocated_resources(::runtime::v1alpha2::WindowsContainerResources* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resources_;
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.WindowsContainerConfig.resources)
}

// .runtime.v1alpha2.WindowsContainerSecurityContext security_context = 2;
inline bool WindowsContainerConfig::_internal_has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline bool WindowsContainerConfig::has_security_context() const {
  return _internal_has_security_context();
}
inline void WindowsContainerConfig::clear_security_context() {
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
inline const ::runtime::v1alpha2::WindowsContainerSecurityContext& WindowsContainerConfig::_internal_security_context() const {
  const ::runtime::v1alpha2::WindowsContainerSecurityContext* p = security_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::WindowsContainerSecurityContext*>(
      &::runtime::v1alpha2::_WindowsContainerSecurityContext_default_instance_);
}
inline const ::runtime::v1alpha2::WindowsContainerSecurityContext& WindowsContainerConfig::security_context() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerConfig.security_context)
  return _internal_security_context();
}
inline void WindowsContainerConfig::unsafe_arena_set_allocated_security_context(
    ::runtime::v1alpha2::WindowsContainerSecurityContext* security_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  security_context_ = security_context;
  if (security_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.WindowsContainerConfig.security_context)
}
inline ::runtime::v1alpha2::WindowsContainerSecurityContext* WindowsContainerConfig::release_security_context() {
  auto temp = unsafe_arena_release_security_context();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerSecurityContext* WindowsContainerConfig::unsafe_arena_release_security_context() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.WindowsContainerConfig.security_context)
  
  ::runtime::v1alpha2::WindowsContainerSecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerSecurityContext* WindowsContainerConfig::_internal_mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerSecurityContext>(GetArena());
    security_context_ = p;
  }
  return security_context_;
}
inline ::runtime::v1alpha2::WindowsContainerSecurityContext* WindowsContainerConfig::mutable_security_context() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.WindowsContainerConfig.security_context)
  return _internal_mutable_security_context();
}
inline void WindowsContainerConfig::set_allocated_security_context(::runtime::v1alpha2::WindowsContainerSecurityContext* security_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_context_;
  }
  if (security_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security_context);
    if (message_arena != submessage_arena) {
      security_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.WindowsContainerConfig.security_context)
}

// -------------------------------------------------------------------

// WindowsContainerResources

// int64 cpu_shares = 1;
inline void WindowsContainerResources::clear_cpu_shares() {
  cpu_shares_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::_internal_cpu_shares() const {
  return cpu_shares_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::cpu_shares() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerResources.cpu_shares)
  return _internal_cpu_shares();
}
inline void WindowsContainerResources::_internal_set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_shares_ = value;
}
inline void WindowsContainerResources::set_cpu_shares(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_shares(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.WindowsContainerResources.cpu_shares)
}

// int64 cpu_count = 2;
inline void WindowsContainerResources::clear_cpu_count() {
  cpu_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::_internal_cpu_count() const {
  return cpu_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::cpu_count() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerResources.cpu_count)
  return _internal_cpu_count();
}
inline void WindowsContainerResources::_internal_set_cpu_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_count_ = value;
}
inline void WindowsContainerResources::set_cpu_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_count(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.WindowsContainerResources.cpu_count)
}

// int64 cpu_maximum = 3;
inline void WindowsContainerResources::clear_cpu_maximum() {
  cpu_maximum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::_internal_cpu_maximum() const {
  return cpu_maximum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::cpu_maximum() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerResources.cpu_maximum)
  return _internal_cpu_maximum();
}
inline void WindowsContainerResources::_internal_set_cpu_maximum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cpu_maximum_ = value;
}
inline void WindowsContainerResources::set_cpu_maximum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_maximum(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.WindowsContainerResources.cpu_maximum)
}

// int64 memory_limit_in_bytes = 4;
inline void WindowsContainerResources::clear_memory_limit_in_bytes() {
  memory_limit_in_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::_internal_memory_limit_in_bytes() const {
  return memory_limit_in_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WindowsContainerResources::memory_limit_in_bytes() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.WindowsContainerResources.memory_limit_in_bytes)
  return _internal_memory_limit_in_bytes();
}
inline void WindowsContainerResources::_internal_set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  memory_limit_in_bytes_ = value;
}
inline void WindowsContainerResources::set_memory_limit_in_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_memory_limit_in_bytes(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.WindowsContainerResources.memory_limit_in_bytes)
}

// -------------------------------------------------------------------

// ContainerMetadata

// string name = 1;
inline void ContainerMetadata::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerMetadata::name() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerMetadata.name)
  return _internal_name();
}
inline void ContainerMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerMetadata.name)
}
inline std::string* ContainerMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& ContainerMetadata::_internal_name() const {
  return name_.Get();
}
inline void ContainerMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerMetadata::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerMetadata.name)
}
inline void ContainerMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerMetadata.name)
}
inline void ContainerMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerMetadata.name)
}
inline std::string* ContainerMetadata::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerMetadata::release_name() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerMetadata.name)
}
inline std::string* ContainerMetadata::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerMetadata.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerMetadata::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerMetadata.name)
}

// uint32 attempt = 2;
inline void ContainerMetadata::clear_attempt() {
  attempt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerMetadata::_internal_attempt() const {
  return attempt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContainerMetadata::attempt() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerMetadata.attempt)
  return _internal_attempt();
}
inline void ContainerMetadata::_internal_set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  attempt_ = value;
}
inline void ContainerMetadata::set_attempt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attempt(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerMetadata.attempt)
}

// -------------------------------------------------------------------

// Device

// string container_path = 1;
inline void Device::clear_container_path() {
  container_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::container_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Device.container_path)
  return _internal_container_path();
}
inline void Device::set_container_path(const std::string& value) {
  _internal_set_container_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Device.container_path)
}
inline std::string* Device::mutable_container_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Device.container_path)
  return _internal_mutable_container_path();
}
inline const std::string& Device::_internal_container_path() const {
  return container_path_.Get();
}
inline void Device::_internal_set_container_path(const std::string& value) {
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_container_path(std::string&& value) {
  
  container_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Device.container_path)
}
inline void Device::set_container_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Device.container_path)
}
inline void Device::set_container_path(const char* value,
    size_t size) {
  
  container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Device.container_path)
}
inline std::string* Device::_internal_mutable_container_path() {
  
  return container_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_container_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Device.container_path)
  return container_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_container_path(std::string* container_path) {
  if (container_path != nullptr) {
    
  } else {
    
  }
  container_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Device.container_path)
}
inline std::string* Device::unsafe_arena_release_container_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Device.container_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_container_path(
    std::string* container_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_path != nullptr) {
    
  } else {
    
  }
  container_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Device.container_path)
}

// string host_path = 2;
inline void Device::clear_host_path() {
  host_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::host_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Device.host_path)
  return _internal_host_path();
}
inline void Device::set_host_path(const std::string& value) {
  _internal_set_host_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Device.host_path)
}
inline std::string* Device::mutable_host_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Device.host_path)
  return _internal_mutable_host_path();
}
inline const std::string& Device::_internal_host_path() const {
  return host_path_.Get();
}
inline void Device::_internal_set_host_path(const std::string& value) {
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_host_path(std::string&& value) {
  
  host_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Device.host_path)
}
inline void Device::set_host_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Device.host_path)
}
inline void Device::set_host_path(const char* value,
    size_t size) {
  
  host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Device.host_path)
}
inline std::string* Device::_internal_mutable_host_path() {
  
  return host_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_host_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Device.host_path)
  return host_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_host_path(std::string* host_path) {
  if (host_path != nullptr) {
    
  } else {
    
  }
  host_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Device.host_path)
}
inline std::string* Device::unsafe_arena_release_host_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Device.host_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_host_path(
    std::string* host_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host_path != nullptr) {
    
  } else {
    
  }
  host_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Device.host_path)
}

// string permissions = 3;
inline void Device::clear_permissions() {
  permissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::permissions() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Device.permissions)
  return _internal_permissions();
}
inline void Device::set_permissions(const std::string& value) {
  _internal_set_permissions(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Device.permissions)
}
inline std::string* Device::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Device.permissions)
  return _internal_mutable_permissions();
}
inline const std::string& Device::_internal_permissions() const {
  return permissions_.Get();
}
inline void Device::_internal_set_permissions(const std::string& value) {
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_permissions(std::string&& value) {
  
  permissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Device.permissions)
}
inline void Device::set_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Device.permissions)
}
inline void Device::set_permissions(const char* value,
    size_t size) {
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Device.permissions)
}
inline std::string* Device::_internal_mutable_permissions() {
  
  return permissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_permissions() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Device.permissions)
  return permissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_permissions(std::string* permissions) {
  if (permissions != nullptr) {
    
  } else {
    
  }
  permissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Device.permissions)
}
inline std::string* Device::unsafe_arena_release_permissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Device.permissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return permissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_permissions(
    std::string* permissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (permissions != nullptr) {
    
  } else {
    
  }
  permissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      permissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Device.permissions)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerConfig

// .runtime.v1alpha2.ContainerMetadata metadata = 1;
inline bool ContainerConfig::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ContainerConfig::has_metadata() const {
  return _internal_has_metadata();
}
inline void ContainerConfig::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerConfig::_internal_metadata() const {
  const ::runtime::v1alpha2::ContainerMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerMetadata*>(
      &::runtime::v1alpha2::_ContainerMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerConfig::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.metadata)
  return _internal_metadata();
}
inline void ContainerConfig::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::ContainerMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.metadata)
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerConfig::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerConfig::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.metadata)
  
  ::runtime::v1alpha2::ContainerMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerConfig::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.metadata)
  return _internal_mutable_metadata();
}
inline void ContainerConfig::set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.metadata)
}

// .runtime.v1alpha2.ImageSpec image = 2;
inline bool ContainerConfig::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ContainerConfig::has_image() const {
  return _internal_has_image();
}
inline void ContainerConfig::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& ContainerConfig::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& ContainerConfig::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.image)
  return _internal_image();
}
inline void ContainerConfig::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.image)
}
inline ::runtime::v1alpha2::ImageSpec* ContainerConfig::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerConfig::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerConfig::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerConfig::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.image)
  return _internal_mutable_image();
}
inline void ContainerConfig::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.image)
}

// repeated string command = 3;
inline int ContainerConfig::_internal_command_size() const {
  return command_.size();
}
inline int ContainerConfig::command_size() const {
  return _internal_command_size();
}
inline void ContainerConfig::clear_command() {
  command_.Clear();
}
inline std::string* ContainerConfig::add_command() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.ContainerConfig.command)
  return _internal_add_command();
}
inline const std::string& ContainerConfig::_internal_command(int index) const {
  return command_.Get(index);
}
inline const std::string& ContainerConfig::command(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.command)
  return _internal_command(index);
}
inline std::string* ContainerConfig::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.command)
  return command_.Mutable(index);
}
inline void ContainerConfig::set_command(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.command)
  command_.Mutable(index)->assign(value);
}
inline void ContainerConfig::set_command(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.command)
  command_.Mutable(index)->assign(std::move(value));
}
inline void ContainerConfig::set_command(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerConfig.command)
}
inline void ContainerConfig::set_command(int index, const char* value, size_t size) {
  command_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerConfig.command)
}
inline std::string* ContainerConfig::_internal_add_command() {
  return command_.Add();
}
inline void ContainerConfig::add_command(const std::string& value) {
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.command)
}
inline void ContainerConfig::add_command(std::string&& value) {
  command_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.command)
}
inline void ContainerConfig::add_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.ContainerConfig.command)
}
inline void ContainerConfig::add_command(const char* value, size_t size) {
  command_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.ContainerConfig.command)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContainerConfig::command() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerConfig.command)
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContainerConfig::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerConfig.command)
  return &command_;
}

// repeated string args = 4;
inline int ContainerConfig::_internal_args_size() const {
  return args_.size();
}
inline int ContainerConfig::args_size() const {
  return _internal_args_size();
}
inline void ContainerConfig::clear_args() {
  args_.Clear();
}
inline std::string* ContainerConfig::add_args() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.ContainerConfig.args)
  return _internal_add_args();
}
inline const std::string& ContainerConfig::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& ContainerConfig::args(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.args)
  return _internal_args(index);
}
inline std::string* ContainerConfig::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.args)
  return args_.Mutable(index);
}
inline void ContainerConfig::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.args)
  args_.Mutable(index)->assign(value);
}
inline void ContainerConfig::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void ContainerConfig::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerConfig.args)
}
inline void ContainerConfig::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerConfig.args)
}
inline std::string* ContainerConfig::_internal_add_args() {
  return args_.Add();
}
inline void ContainerConfig::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.args)
}
inline void ContainerConfig::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.args)
}
inline void ContainerConfig::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.ContainerConfig.args)
}
inline void ContainerConfig::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.ContainerConfig.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContainerConfig::args() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerConfig.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContainerConfig::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerConfig.args)
  return &args_;
}

// string working_dir = 5;
inline void ContainerConfig::clear_working_dir() {
  working_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::working_dir() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.working_dir)
  return _internal_working_dir();
}
inline void ContainerConfig::set_working_dir(const std::string& value) {
  _internal_set_working_dir(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::mutable_working_dir() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.working_dir)
  return _internal_mutable_working_dir();
}
inline const std::string& ContainerConfig::_internal_working_dir() const {
  return working_dir_.Get();
}
inline void ContainerConfig::_internal_set_working_dir(const std::string& value) {
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_working_dir(std::string&& value) {
  
  working_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerConfig.working_dir)
}
inline void ContainerConfig::set_working_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerConfig.working_dir)
}
inline void ContainerConfig::set_working_dir(const char* value,
    size_t size) {
  
  working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::_internal_mutable_working_dir() {
  
  return working_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_working_dir() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.working_dir)
  return working_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_working_dir(std::string* working_dir) {
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.working_dir)
}
inline std::string* ContainerConfig::unsafe_arena_release_working_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerConfig.working_dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return working_dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_working_dir(
    std::string* working_dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      working_dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.working_dir)
}

// repeated .runtime.v1alpha2.KeyValue envs = 6;
inline int ContainerConfig::_internal_envs_size() const {
  return envs_.size();
}
inline int ContainerConfig::envs_size() const {
  return _internal_envs_size();
}
inline void ContainerConfig::clear_envs() {
  envs_.Clear();
}
inline ::runtime::v1alpha2::KeyValue* ContainerConfig::mutable_envs(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.envs)
  return envs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::KeyValue >*
ContainerConfig::mutable_envs() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerConfig.envs)
  return &envs_;
}
inline const ::runtime::v1alpha2::KeyValue& ContainerConfig::_internal_envs(int index) const {
  return envs_.Get(index);
}
inline const ::runtime::v1alpha2::KeyValue& ContainerConfig::envs(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.envs)
  return _internal_envs(index);
}
inline ::runtime::v1alpha2::KeyValue* ContainerConfig::_internal_add_envs() {
  return envs_.Add();
}
inline ::runtime::v1alpha2::KeyValue* ContainerConfig::add_envs() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.envs)
  return _internal_add_envs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::KeyValue >&
ContainerConfig::envs() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerConfig.envs)
  return envs_;
}

// repeated .runtime.v1alpha2.Mount mounts = 7;
inline int ContainerConfig::_internal_mounts_size() const {
  return mounts_.size();
}
inline int ContainerConfig::mounts_size() const {
  return _internal_mounts_size();
}
inline void ContainerConfig::clear_mounts() {
  mounts_.Clear();
}
inline ::runtime::v1alpha2::Mount* ContainerConfig::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >*
ContainerConfig::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerConfig.mounts)
  return &mounts_;
}
inline const ::runtime::v1alpha2::Mount& ContainerConfig::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::runtime::v1alpha2::Mount& ContainerConfig::mounts(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.mounts)
  return _internal_mounts(index);
}
inline ::runtime::v1alpha2::Mount* ContainerConfig::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::runtime::v1alpha2::Mount* ContainerConfig::add_mounts() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.mounts)
  return _internal_add_mounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >&
ContainerConfig::mounts() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerConfig.mounts)
  return mounts_;
}

// repeated .runtime.v1alpha2.Device devices = 8;
inline int ContainerConfig::_internal_devices_size() const {
  return devices_.size();
}
inline int ContainerConfig::devices_size() const {
  return _internal_devices_size();
}
inline void ContainerConfig::clear_devices() {
  devices_.Clear();
}
inline ::runtime::v1alpha2::Device* ContainerConfig::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Device >*
ContainerConfig::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerConfig.devices)
  return &devices_;
}
inline const ::runtime::v1alpha2::Device& ContainerConfig::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::runtime::v1alpha2::Device& ContainerConfig::devices(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.devices)
  return _internal_devices(index);
}
inline ::runtime::v1alpha2::Device* ContainerConfig::_internal_add_devices() {
  return devices_.Add();
}
inline ::runtime::v1alpha2::Device* ContainerConfig::add_devices() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerConfig.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Device >&
ContainerConfig::devices() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerConfig.devices)
  return devices_;
}

// map<string, string> labels = 9;
inline int ContainerConfig::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerConfig::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerConfig::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerConfig.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerConfig.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 10;
inline int ContainerConfig::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ContainerConfig::annotations_size() const {
  return _internal_annotations_size();
}
inline void ContainerConfig::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerConfig::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerConfig.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerConfig::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerConfig.annotations)
  return _internal_mutable_annotations();
}

// string log_path = 11;
inline void ContainerConfig::clear_log_path() {
  log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerConfig::log_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.log_path)
  return _internal_log_path();
}
inline void ContainerConfig::set_log_path(const std::string& value) {
  _internal_set_log_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.log_path)
}
inline std::string* ContainerConfig::mutable_log_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.log_path)
  return _internal_mutable_log_path();
}
inline const std::string& ContainerConfig::_internal_log_path() const {
  return log_path_.Get();
}
inline void ContainerConfig::_internal_set_log_path(const std::string& value) {
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerConfig::set_log_path(std::string&& value) {
  
  log_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerConfig.log_path)
}
inline void ContainerConfig::set_log_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerConfig.log_path)
}
inline void ContainerConfig::set_log_path(const char* value,
    size_t size) {
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerConfig.log_path)
}
inline std::string* ContainerConfig::_internal_mutable_log_path() {
  
  return log_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerConfig::release_log_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.log_path)
  return log_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerConfig::set_allocated_log_path(std::string* log_path) {
  if (log_path != nullptr) {
    
  } else {
    
  }
  log_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.log_path)
}
inline std::string* ContainerConfig::unsafe_arena_release_log_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerConfig.log_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return log_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerConfig::unsafe_arena_set_allocated_log_path(
    std::string* log_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (log_path != nullptr) {
    
  } else {
    
  }
  log_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.log_path)
}

// bool stdin = 12;
inline void ContainerConfig::clear_stdin() {
  stdin_ = false;
}
inline bool ContainerConfig::_internal_stdin() const {
  return stdin_;
}
inline bool ContainerConfig::stdin() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.stdin)
  return _internal_stdin();
}
inline void ContainerConfig::_internal_set_stdin(bool value) {
  
  stdin_ = value;
}
inline void ContainerConfig::set_stdin(bool value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.stdin)
}

// bool stdin_once = 13;
inline void ContainerConfig::clear_stdin_once() {
  stdin_once_ = false;
}
inline bool ContainerConfig::_internal_stdin_once() const {
  return stdin_once_;
}
inline bool ContainerConfig::stdin_once() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.stdin_once)
  return _internal_stdin_once();
}
inline void ContainerConfig::_internal_set_stdin_once(bool value) {
  
  stdin_once_ = value;
}
inline void ContainerConfig::set_stdin_once(bool value) {
  _internal_set_stdin_once(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.stdin_once)
}

// bool tty = 14;
inline void ContainerConfig::clear_tty() {
  tty_ = false;
}
inline bool ContainerConfig::_internal_tty() const {
  return tty_;
}
inline bool ContainerConfig::tty() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.tty)
  return _internal_tty();
}
inline void ContainerConfig::_internal_set_tty(bool value) {
  
  tty_ = value;
}
inline void ContainerConfig::set_tty(bool value) {
  _internal_set_tty(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerConfig.tty)
}

// .runtime.v1alpha2.LinuxContainerConfig linux = 15;
inline bool ContainerConfig::_internal_has_linux() const {
  return this != internal_default_instance() && linux_ != nullptr;
}
inline bool ContainerConfig::has_linux() const {
  return _internal_has_linux();
}
inline void ContainerConfig::clear_linux() {
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxContainerConfig& ContainerConfig::_internal_linux() const {
  const ::runtime::v1alpha2::LinuxContainerConfig* p = linux_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxContainerConfig*>(
      &::runtime::v1alpha2::_LinuxContainerConfig_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxContainerConfig& ContainerConfig::linux() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.linux)
  return _internal_linux();
}
inline void ContainerConfig::unsafe_arena_set_allocated_linux(
    ::runtime::v1alpha2::LinuxContainerConfig* linux) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linux_);
  }
  linux_ = linux;
  if (linux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.linux)
}
inline ::runtime::v1alpha2::LinuxContainerConfig* ContainerConfig::release_linux() {
  auto temp = unsafe_arena_release_linux();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerConfig* ContainerConfig::unsafe_arena_release_linux() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.linux)
  
  ::runtime::v1alpha2::LinuxContainerConfig* temp = linux_;
  linux_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerConfig* ContainerConfig::_internal_mutable_linux() {
  
  if (linux_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerConfig>(GetArena());
    linux_ = p;
  }
  return linux_;
}
inline ::runtime::v1alpha2::LinuxContainerConfig* ContainerConfig::mutable_linux() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.linux)
  return _internal_mutable_linux();
}
inline void ContainerConfig::set_allocated_linux(::runtime::v1alpha2::LinuxContainerConfig* linux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linux_;
  }
  if (linux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linux);
    if (message_arena != submessage_arena) {
      linux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linux, submessage_arena);
    }
    
  } else {
    
  }
  linux_ = linux;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.linux)
}

// .runtime.v1alpha2.WindowsContainerConfig windows = 16;
inline bool ContainerConfig::_internal_has_windows() const {
  return this != internal_default_instance() && windows_ != nullptr;
}
inline bool ContainerConfig::has_windows() const {
  return _internal_has_windows();
}
inline void ContainerConfig::clear_windows() {
  if (GetArena() == nullptr && windows_ != nullptr) {
    delete windows_;
  }
  windows_ = nullptr;
}
inline const ::runtime::v1alpha2::WindowsContainerConfig& ContainerConfig::_internal_windows() const {
  const ::runtime::v1alpha2::WindowsContainerConfig* p = windows_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::WindowsContainerConfig*>(
      &::runtime::v1alpha2::_WindowsContainerConfig_default_instance_);
}
inline const ::runtime::v1alpha2::WindowsContainerConfig& ContainerConfig::windows() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerConfig.windows)
  return _internal_windows();
}
inline void ContainerConfig::unsafe_arena_set_allocated_windows(
    ::runtime::v1alpha2::WindowsContainerConfig* windows) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(windows_);
  }
  windows_ = windows;
  if (windows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerConfig.windows)
}
inline ::runtime::v1alpha2::WindowsContainerConfig* ContainerConfig::release_windows() {
  auto temp = unsafe_arena_release_windows();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerConfig* ContainerConfig::unsafe_arena_release_windows() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerConfig.windows)
  
  ::runtime::v1alpha2::WindowsContainerConfig* temp = windows_;
  windows_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::WindowsContainerConfig* ContainerConfig::_internal_mutable_windows() {
  
  if (windows_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::WindowsContainerConfig>(GetArena());
    windows_ = p;
  }
  return windows_;
}
inline ::runtime::v1alpha2::WindowsContainerConfig* ContainerConfig::mutable_windows() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerConfig.windows)
  return _internal_mutable_windows();
}
inline void ContainerConfig::set_allocated_windows(::runtime::v1alpha2::WindowsContainerConfig* windows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete windows_;
  }
  if (windows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(windows);
    if (message_arena != submessage_arena) {
      windows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windows, submessage_arena);
    }
    
  } else {
    
  }
  windows_ = windows;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerConfig.windows)
}

// -------------------------------------------------------------------

// CreateContainerRequest

// string pod_sandbox_id = 1;
inline void CreateContainerRequest::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateContainerRequest::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void CreateContainerRequest::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}
inline std::string* CreateContainerRequest::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& CreateContainerRequest::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void CreateContainerRequest::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateContainerRequest::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}
inline void CreateContainerRequest::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}
inline void CreateContainerRequest::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}
inline std::string* CreateContainerRequest::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateContainerRequest::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateContainerRequest::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}
inline std::string* CreateContainerRequest::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateContainerRequest::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id)
}

// .runtime.v1alpha2.ContainerConfig config = 2;
inline bool CreateContainerRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool CreateContainerRequest::has_config() const {
  return _internal_has_config();
}
inline void CreateContainerRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerConfig& CreateContainerRequest::_internal_config() const {
  const ::runtime::v1alpha2::ContainerConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerConfig*>(
      &::runtime::v1alpha2::_ContainerConfig_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerConfig& CreateContainerRequest::config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CreateContainerRequest.config)
  return _internal_config();
}
inline void CreateContainerRequest::unsafe_arena_set_allocated_config(
    ::runtime::v1alpha2::ContainerConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.CreateContainerRequest.config)
}
inline ::runtime::v1alpha2::ContainerConfig* CreateContainerRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerConfig* CreateContainerRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.CreateContainerRequest.config)
  
  ::runtime::v1alpha2::ContainerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerConfig* CreateContainerRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::runtime::v1alpha2::ContainerConfig* CreateContainerRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.CreateContainerRequest.config)
  return _internal_mutable_config();
}
inline void CreateContainerRequest::set_allocated_config(::runtime::v1alpha2::ContainerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.CreateContainerRequest.config)
}

// .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
inline bool CreateContainerRequest::_internal_has_sandbox_config() const {
  return this != internal_default_instance() && sandbox_config_ != nullptr;
}
inline bool CreateContainerRequest::has_sandbox_config() const {
  return _internal_has_sandbox_config();
}
inline void CreateContainerRequest::clear_sandbox_config() {
  if (GetArena() == nullptr && sandbox_config_ != nullptr) {
    delete sandbox_config_;
  }
  sandbox_config_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxConfig& CreateContainerRequest::_internal_sandbox_config() const {
  const ::runtime::v1alpha2::PodSandboxConfig* p = sandbox_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxConfig*>(
      &::runtime::v1alpha2::_PodSandboxConfig_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxConfig& CreateContainerRequest::sandbox_config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CreateContainerRequest.sandbox_config)
  return _internal_sandbox_config();
}
inline void CreateContainerRequest::unsafe_arena_set_allocated_sandbox_config(
    ::runtime::v1alpha2::PodSandboxConfig* sandbox_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sandbox_config_);
  }
  sandbox_config_ = sandbox_config;
  if (sandbox_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.CreateContainerRequest.sandbox_config)
}
inline ::runtime::v1alpha2::PodSandboxConfig* CreateContainerRequest::release_sandbox_config() {
  auto temp = unsafe_arena_release_sandbox_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* CreateContainerRequest::unsafe_arena_release_sandbox_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.CreateContainerRequest.sandbox_config)
  
  ::runtime::v1alpha2::PodSandboxConfig* temp = sandbox_config_;
  sandbox_config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* CreateContainerRequest::_internal_mutable_sandbox_config() {
  
  if (sandbox_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig>(GetArena());
    sandbox_config_ = p;
  }
  return sandbox_config_;
}
inline ::runtime::v1alpha2::PodSandboxConfig* CreateContainerRequest::mutable_sandbox_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.CreateContainerRequest.sandbox_config)
  return _internal_mutable_sandbox_config();
}
inline void CreateContainerRequest::set_allocated_sandbox_config(::runtime::v1alpha2::PodSandboxConfig* sandbox_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sandbox_config_;
  }
  if (sandbox_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sandbox_config);
    if (message_arena != submessage_arena) {
      sandbox_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sandbox_config, submessage_arena);
    }
    
  } else {
    
  }
  sandbox_config_ = sandbox_config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.CreateContainerRequest.sandbox_config)
}

// -------------------------------------------------------------------

// CreateContainerResponse

// string container_id = 1;
inline void CreateContainerResponse::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateContainerResponse::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CreateContainerResponse.container_id)
  return _internal_container_id();
}
inline void CreateContainerResponse::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.CreateContainerResponse.container_id)
}
inline std::string* CreateContainerResponse::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.CreateContainerResponse.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& CreateContainerResponse::_internal_container_id() const {
  return container_id_.Get();
}
inline void CreateContainerResponse::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateContainerResponse::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.CreateContainerResponse.container_id)
}
inline void CreateContainerResponse::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.CreateContainerResponse.container_id)
}
inline void CreateContainerResponse::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.CreateContainerResponse.container_id)
}
inline std::string* CreateContainerResponse::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateContainerResponse::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.CreateContainerResponse.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateContainerResponse::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.CreateContainerResponse.container_id)
}
inline std::string* CreateContainerResponse::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.CreateContainerResponse.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateContainerResponse::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.CreateContainerResponse.container_id)
}

// -------------------------------------------------------------------

// StartContainerRequest

// string container_id = 1;
inline void StartContainerRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartContainerRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StartContainerRequest.container_id)
  return _internal_container_id();
}
inline void StartContainerRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.StartContainerRequest.container_id)
}
inline std::string* StartContainerRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.StartContainerRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& StartContainerRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void StartContainerRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartContainerRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.StartContainerRequest.container_id)
}
inline void StartContainerRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.StartContainerRequest.container_id)
}
inline void StartContainerRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.StartContainerRequest.container_id)
}
inline std::string* StartContainerRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartContainerRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.StartContainerRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartContainerRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.StartContainerRequest.container_id)
}
inline std::string* StartContainerRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.StartContainerRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartContainerRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.StartContainerRequest.container_id)
}

// -------------------------------------------------------------------

// StartContainerResponse

// -------------------------------------------------------------------

// StopContainerRequest

// string container_id = 1;
inline void StopContainerRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopContainerRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StopContainerRequest.container_id)
  return _internal_container_id();
}
inline void StopContainerRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.StopContainerRequest.container_id)
}
inline std::string* StopContainerRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.StopContainerRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& StopContainerRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void StopContainerRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopContainerRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.StopContainerRequest.container_id)
}
inline void StopContainerRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.StopContainerRequest.container_id)
}
inline void StopContainerRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.StopContainerRequest.container_id)
}
inline std::string* StopContainerRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopContainerRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.StopContainerRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopContainerRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.StopContainerRequest.container_id)
}
inline std::string* StopContainerRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.StopContainerRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopContainerRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.StopContainerRequest.container_id)
}

// int64 timeout = 2;
inline void StopContainerRequest::clear_timeout() {
  timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StopContainerRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StopContainerRequest::timeout() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StopContainerRequest.timeout)
  return _internal_timeout();
}
inline void StopContainerRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeout_ = value;
}
inline void StopContainerRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.StopContainerRequest.timeout)
}

// -------------------------------------------------------------------

// StopContainerResponse

// -------------------------------------------------------------------

// RemoveContainerRequest

// string container_id = 1;
inline void RemoveContainerRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveContainerRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RemoveContainerRequest.container_id)
  return _internal_container_id();
}
inline void RemoveContainerRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RemoveContainerRequest.container_id)
}
inline std::string* RemoveContainerRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RemoveContainerRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& RemoveContainerRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void RemoveContainerRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveContainerRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RemoveContainerRequest.container_id)
}
inline void RemoveContainerRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RemoveContainerRequest.container_id)
}
inline void RemoveContainerRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RemoveContainerRequest.container_id)
}
inline std::string* RemoveContainerRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveContainerRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RemoveContainerRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveContainerRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RemoveContainerRequest.container_id)
}
inline std::string* RemoveContainerRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RemoveContainerRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveContainerRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RemoveContainerRequest.container_id)
}

// -------------------------------------------------------------------

// RemoveContainerResponse

// -------------------------------------------------------------------

// ContainerStateValue

// .runtime.v1alpha2.ContainerState state = 1;
inline void ContainerStateValue::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::ContainerState ContainerStateValue::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::ContainerState >(state_);
}
inline ::runtime::v1alpha2::ContainerState ContainerStateValue::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStateValue.state)
  return _internal_state();
}
inline void ContainerStateValue::_internal_set_state(::runtime::v1alpha2::ContainerState value) {
  
  state_ = value;
}
inline void ContainerStateValue::set_state(::runtime::v1alpha2::ContainerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStateValue.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerFilter

// string id = 1;
inline void ContainerFilter::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerFilter::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerFilter.id)
  return _internal_id();
}
inline void ContainerFilter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerFilter.id)
}
inline std::string* ContainerFilter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerFilter.id)
  return _internal_mutable_id();
}
inline const std::string& ContainerFilter::_internal_id() const {
  return id_.Get();
}
inline void ContainerFilter::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerFilter::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerFilter.id)
}
inline void ContainerFilter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerFilter.id)
}
inline void ContainerFilter::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerFilter.id)
}
inline std::string* ContainerFilter::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerFilter::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerFilter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerFilter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerFilter.id)
}
inline std::string* ContainerFilter::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerFilter.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerFilter::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerFilter.id)
}

// .runtime.v1alpha2.ContainerStateValue state = 2;
inline bool ContainerFilter::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ContainerFilter::has_state() const {
  return _internal_has_state();
}
inline void ContainerFilter::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerStateValue& ContainerFilter::_internal_state() const {
  const ::runtime::v1alpha2::ContainerStateValue* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerStateValue*>(
      &::runtime::v1alpha2::_ContainerStateValue_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerStateValue& ContainerFilter::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerFilter.state)
  return _internal_state();
}
inline void ContainerFilter::unsafe_arena_set_allocated_state(
    ::runtime::v1alpha2::ContainerStateValue* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerFilter.state)
}
inline ::runtime::v1alpha2::ContainerStateValue* ContainerFilter::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerStateValue* ContainerFilter::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerFilter.state)
  
  ::runtime::v1alpha2::ContainerStateValue* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerStateValue* ContainerFilter::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerStateValue>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::runtime::v1alpha2::ContainerStateValue* ContainerFilter::mutable_state() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerFilter.state)
  return _internal_mutable_state();
}
inline void ContainerFilter::set_allocated_state(::runtime::v1alpha2::ContainerStateValue* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerFilter.state)
}

// string pod_sandbox_id = 3;
inline void ContainerFilter::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerFilter::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void ContainerFilter::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}
inline std::string* ContainerFilter::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& ContainerFilter::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void ContainerFilter::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerFilter::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}
inline void ContainerFilter::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}
inline void ContainerFilter::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}
inline std::string* ContainerFilter::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerFilter::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerFilter::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}
inline std::string* ContainerFilter::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerFilter::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerFilter.pod_sandbox_id)
}

// map<string, string> label_selector = 4;
inline int ContainerFilter::_internal_label_selector_size() const {
  return label_selector_.size();
}
inline int ContainerFilter::label_selector_size() const {
  return _internal_label_selector_size();
}
inline void ContainerFilter::clear_label_selector() {
  label_selector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerFilter::_internal_label_selector() const {
  return label_selector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerFilter::label_selector() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerFilter.label_selector)
  return _internal_label_selector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerFilter::_internal_mutable_label_selector() {
  return label_selector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerFilter::mutable_label_selector() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerFilter.label_selector)
  return _internal_mutable_label_selector();
}

// -------------------------------------------------------------------

// ListContainersRequest

// .runtime.v1alpha2.ContainerFilter filter = 1;
inline bool ListContainersRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ListContainersRequest::has_filter() const {
  return _internal_has_filter();
}
inline void ListContainersRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerFilter& ListContainersRequest::_internal_filter() const {
  const ::runtime::v1alpha2::ContainerFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerFilter*>(
      &::runtime::v1alpha2::_ContainerFilter_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerFilter& ListContainersRequest::filter() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListContainersRequest.filter)
  return _internal_filter();
}
inline void ListContainersRequest::unsafe_arena_set_allocated_filter(
    ::runtime::v1alpha2::ContainerFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ListContainersRequest.filter)
}
inline ::runtime::v1alpha2::ContainerFilter* ListContainersRequest::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerFilter* ListContainersRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ListContainersRequest.filter)
  
  ::runtime::v1alpha2::ContainerFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerFilter* ListContainersRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::runtime::v1alpha2::ContainerFilter* ListContainersRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListContainersRequest.filter)
  return _internal_mutable_filter();
}
inline void ListContainersRequest::set_allocated_filter(::runtime::v1alpha2::ContainerFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ListContainersRequest.filter)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Container

// string id = 1;
inline void Container::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.id)
  return _internal_id();
}
inline void Container::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Container.id)
}
inline std::string* Container::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Container.id)
  return _internal_mutable_id();
}
inline const std::string& Container::_internal_id() const {
  return id_.Get();
}
inline void Container::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Container.id)
}
inline void Container::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Container.id)
}
inline void Container::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Container.id)
}
inline std::string* Container::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Container.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Container.id)
}
inline std::string* Container::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Container.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Container.id)
}

// string pod_sandbox_id = 2;
inline void Container::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void Container::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Container.pod_sandbox_id)
}
inline std::string* Container::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Container.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& Container::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void Container::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Container.pod_sandbox_id)
}
inline void Container::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Container.pod_sandbox_id)
}
inline void Container::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Container.pod_sandbox_id)
}
inline std::string* Container::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Container.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Container.pod_sandbox_id)
}
inline std::string* Container::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Container.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Container.pod_sandbox_id)
}

// .runtime.v1alpha2.ContainerMetadata metadata = 3;
inline bool Container::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Container::has_metadata() const {
  return _internal_has_metadata();
}
inline void Container::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerMetadata& Container::_internal_metadata() const {
  const ::runtime::v1alpha2::ContainerMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerMetadata*>(
      &::runtime::v1alpha2::_ContainerMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerMetadata& Container::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.metadata)
  return _internal_metadata();
}
inline void Container::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::ContainerMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Container.metadata)
}
inline ::runtime::v1alpha2::ContainerMetadata* Container::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* Container::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Container.metadata)
  
  ::runtime::v1alpha2::ContainerMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* Container::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::ContainerMetadata* Container::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Container.metadata)
  return _internal_mutable_metadata();
}
inline void Container::set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Container.metadata)
}

// .runtime.v1alpha2.ImageSpec image = 4;
inline bool Container::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Container::has_image() const {
  return _internal_has_image();
}
inline void Container::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& Container::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& Container::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.image)
  return _internal_image();
}
inline void Container::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Container.image)
}
inline ::runtime::v1alpha2::ImageSpec* Container::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* Container::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Container.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* Container::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* Container::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Container.image)
  return _internal_mutable_image();
}
inline void Container::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Container.image)
}

// string image_ref = 5;
inline void Container::clear_image_ref() {
  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Container::image_ref() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.image_ref)
  return _internal_image_ref();
}
inline void Container::set_image_ref(const std::string& value) {
  _internal_set_image_ref(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Container.image_ref)
}
inline std::string* Container::mutable_image_ref() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Container.image_ref)
  return _internal_mutable_image_ref();
}
inline const std::string& Container::_internal_image_ref() const {
  return image_ref_.Get();
}
inline void Container::_internal_set_image_ref(const std::string& value) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Container::set_image_ref(std::string&& value) {
  
  image_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Container.image_ref)
}
inline void Container::set_image_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Container.image_ref)
}
inline void Container::set_image_ref(const char* value,
    size_t size) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Container.image_ref)
}
inline std::string* Container::_internal_mutable_image_ref() {
  
  return image_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Container::release_image_ref() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Container.image_ref)
  return image_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Container::set_allocated_image_ref(std::string* image_ref) {
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Container.image_ref)
}
inline std::string* Container::unsafe_arena_release_image_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Container.image_ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Container::unsafe_arena_set_allocated_image_ref(
    std::string* image_ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Container.image_ref)
}

// .runtime.v1alpha2.ContainerState state = 6;
inline void Container::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::ContainerState Container::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::ContainerState >(state_);
}
inline ::runtime::v1alpha2::ContainerState Container::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.state)
  return _internal_state();
}
inline void Container::_internal_set_state(::runtime::v1alpha2::ContainerState value) {
  
  state_ = value;
}
inline void Container::set_state(::runtime::v1alpha2::ContainerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Container.state)
}

// int64 created_at = 7;
inline void Container::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Container::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Container::created_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Container.created_at)
  return _internal_created_at();
}
inline void Container::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void Container::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Container.created_at)
}

// map<string, string> labels = 8;
inline int Container::_internal_labels_size() const {
  return labels_.size();
}
inline int Container::labels_size() const {
  return _internal_labels_size();
}
inline void Container::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Container::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Container::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.Container.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Container::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Container::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.Container.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 9;
inline int Container::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Container::annotations_size() const {
  return _internal_annotations_size();
}
inline void Container::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Container::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Container::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.Container.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Container::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Container::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.Container.annotations)
  return _internal_mutable_annotations();
}

// -------------------------------------------------------------------

// ListContainersResponse

// repeated .runtime.v1alpha2.Container containers = 1;
inline int ListContainersResponse::_internal_containers_size() const {
  return containers_.size();
}
inline int ListContainersResponse::containers_size() const {
  return _internal_containers_size();
}
inline void ListContainersResponse::clear_containers() {
  containers_.Clear();
}
inline ::runtime::v1alpha2::Container* ListContainersResponse::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListContainersResponse.containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Container >*
ListContainersResponse::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ListContainersResponse.containers)
  return &containers_;
}
inline const ::runtime::v1alpha2::Container& ListContainersResponse::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::runtime::v1alpha2::Container& ListContainersResponse::containers(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListContainersResponse.containers)
  return _internal_containers(index);
}
inline ::runtime::v1alpha2::Container* ListContainersResponse::_internal_add_containers() {
  return containers_.Add();
}
inline ::runtime::v1alpha2::Container* ListContainersResponse::add_containers() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ListContainersResponse.containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Container >&
ListContainersResponse::containers() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ListContainersResponse.containers)
  return containers_;
}

// -------------------------------------------------------------------

// ContainerStatusRequest

// string container_id = 1;
inline void ContainerStatusRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatusRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatusRequest.container_id)
  return _internal_container_id();
}
inline void ContainerStatusRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatusRequest.container_id)
}
inline std::string* ContainerStatusRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatusRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ContainerStatusRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ContainerStatusRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatusRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatusRequest.container_id)
}
inline void ContainerStatusRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatusRequest.container_id)
}
inline void ContainerStatusRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatusRequest.container_id)
}
inline std::string* ContainerStatusRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatusRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatusRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatusRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatusRequest.container_id)
}
inline std::string* ContainerStatusRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatusRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatusRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatusRequest.container_id)
}

// bool verbose = 2;
inline void ContainerStatusRequest::clear_verbose() {
  verbose_ = false;
}
inline bool ContainerStatusRequest::_internal_verbose() const {
  return verbose_;
}
inline bool ContainerStatusRequest::verbose() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatusRequest.verbose)
  return _internal_verbose();
}
inline void ContainerStatusRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void ContainerStatusRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatusRequest.verbose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerStatus

// string id = 1;
inline void ContainerStatus::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatus::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.id)
  return _internal_id();
}
inline void ContainerStatus::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.id)
}
inline std::string* ContainerStatus::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.id)
  return _internal_mutable_id();
}
inline const std::string& ContainerStatus::_internal_id() const {
  return id_.Get();
}
inline void ContainerStatus::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatus::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatus.id)
}
inline void ContainerStatus::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatus.id)
}
inline void ContainerStatus::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatus.id)
}
inline std::string* ContainerStatus::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatus::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatus::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.id)
}
inline std::string* ContainerStatus::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatus.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatus::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.id)
}

// .runtime.v1alpha2.ContainerMetadata metadata = 2;
inline bool ContainerStatus::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ContainerStatus::has_metadata() const {
  return _internal_has_metadata();
}
inline void ContainerStatus::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerStatus::_internal_metadata() const {
  const ::runtime::v1alpha2::ContainerMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerMetadata*>(
      &::runtime::v1alpha2::_ContainerMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerStatus::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.metadata)
  return _internal_metadata();
}
inline void ContainerStatus::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::ContainerMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.metadata)
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerStatus::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerStatus::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.metadata)
  
  ::runtime::v1alpha2::ContainerMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerStatus::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerStatus::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.metadata)
  return _internal_mutable_metadata();
}
inline void ContainerStatus::set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.metadata)
}

// .runtime.v1alpha2.ContainerState state = 3;
inline void ContainerStatus::clear_state() {
  state_ = 0;
}
inline ::runtime::v1alpha2::ContainerState ContainerStatus::_internal_state() const {
  return static_cast< ::runtime::v1alpha2::ContainerState >(state_);
}
inline ::runtime::v1alpha2::ContainerState ContainerStatus::state() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.state)
  return _internal_state();
}
inline void ContainerStatus::_internal_set_state(::runtime::v1alpha2::ContainerState value) {
  
  state_ = value;
}
inline void ContainerStatus::set_state(::runtime::v1alpha2::ContainerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.state)
}

// int64 created_at = 4;
inline void ContainerStatus::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::created_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.created_at)
  return _internal_created_at();
}
inline void ContainerStatus::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void ContainerStatus::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.created_at)
}

// int64 started_at = 5;
inline void ContainerStatus::clear_started_at() {
  started_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::_internal_started_at() const {
  return started_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::started_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.started_at)
  return _internal_started_at();
}
inline void ContainerStatus::_internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  started_at_ = value;
}
inline void ContainerStatus::set_started_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_started_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.started_at)
}

// int64 finished_at = 6;
inline void ContainerStatus::clear_finished_at() {
  finished_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::_internal_finished_at() const {
  return finished_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContainerStatus::finished_at() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.finished_at)
  return _internal_finished_at();
}
inline void ContainerStatus::_internal_set_finished_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  finished_at_ = value;
}
inline void ContainerStatus::set_finished_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finished_at(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.finished_at)
}

// int32 exit_code = 7;
inline void ContainerStatus::clear_exit_code() {
  exit_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContainerStatus::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContainerStatus::exit_code() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.exit_code)
  return _internal_exit_code();
}
inline void ContainerStatus::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exit_code_ = value;
}
inline void ContainerStatus::set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.exit_code)
}

// .runtime.v1alpha2.ImageSpec image = 8;
inline bool ContainerStatus::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ContainerStatus::has_image() const {
  return _internal_has_image();
}
inline void ContainerStatus::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& ContainerStatus::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& ContainerStatus::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.image)
  return _internal_image();
}
inline void ContainerStatus::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.image)
}
inline ::runtime::v1alpha2::ImageSpec* ContainerStatus::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerStatus::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerStatus::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* ContainerStatus::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.image)
  return _internal_mutable_image();
}
inline void ContainerStatus::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.image)
}

// string image_ref = 9;
inline void ContainerStatus::clear_image_ref() {
  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatus::image_ref() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.image_ref)
  return _internal_image_ref();
}
inline void ContainerStatus::set_image_ref(const std::string& value) {
  _internal_set_image_ref(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.image_ref)
}
inline std::string* ContainerStatus::mutable_image_ref() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.image_ref)
  return _internal_mutable_image_ref();
}
inline const std::string& ContainerStatus::_internal_image_ref() const {
  return image_ref_.Get();
}
inline void ContainerStatus::_internal_set_image_ref(const std::string& value) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatus::set_image_ref(std::string&& value) {
  
  image_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatus.image_ref)
}
inline void ContainerStatus::set_image_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatus.image_ref)
}
inline void ContainerStatus::set_image_ref(const char* value,
    size_t size) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatus.image_ref)
}
inline std::string* ContainerStatus::_internal_mutable_image_ref() {
  
  return image_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatus::release_image_ref() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.image_ref)
  return image_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatus::set_allocated_image_ref(std::string* image_ref) {
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.image_ref)
}
inline std::string* ContainerStatus::unsafe_arena_release_image_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatus.image_ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatus::unsafe_arena_set_allocated_image_ref(
    std::string* image_ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.image_ref)
}

// string reason = 10;
inline void ContainerStatus::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatus::reason() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.reason)
  return _internal_reason();
}
inline void ContainerStatus::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.reason)
}
inline std::string* ContainerStatus::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.reason)
  return _internal_mutable_reason();
}
inline const std::string& ContainerStatus::_internal_reason() const {
  return reason_.Get();
}
inline void ContainerStatus::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatus::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatus.reason)
}
inline void ContainerStatus::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatus.reason)
}
inline void ContainerStatus::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatus.reason)
}
inline std::string* ContainerStatus::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatus::release_reason() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatus::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.reason)
}
inline std::string* ContainerStatus::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatus.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatus::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.reason)
}

// string message = 11;
inline void ContainerStatus::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatus::message() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.message)
  return _internal_message();
}
inline void ContainerStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.message)
}
inline std::string* ContainerStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.message)
  return _internal_mutable_message();
}
inline const std::string& ContainerStatus::_internal_message() const {
  return message_.Get();
}
inline void ContainerStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatus::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatus.message)
}
inline void ContainerStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatus.message)
}
inline void ContainerStatus::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatus.message)
}
inline std::string* ContainerStatus::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatus::release_message() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.message)
}
inline std::string* ContainerStatus::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatus.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatus::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.message)
}

// map<string, string> labels = 12;
inline int ContainerStatus::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerStatus::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerStatus::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatus::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatus::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerStatus.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatus::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatus::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerStatus.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 13;
inline int ContainerStatus::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ContainerStatus::annotations_size() const {
  return _internal_annotations_size();
}
inline void ContainerStatus::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatus::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatus::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerStatus.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatus::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatus::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerStatus.annotations)
  return _internal_mutable_annotations();
}

// repeated .runtime.v1alpha2.Mount mounts = 14;
inline int ContainerStatus::_internal_mounts_size() const {
  return mounts_.size();
}
inline int ContainerStatus::mounts_size() const {
  return _internal_mounts_size();
}
inline void ContainerStatus::clear_mounts() {
  mounts_.Clear();
}
inline ::runtime::v1alpha2::Mount* ContainerStatus::mutable_mounts(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.mounts)
  return mounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >*
ContainerStatus::mutable_mounts() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ContainerStatus.mounts)
  return &mounts_;
}
inline const ::runtime::v1alpha2::Mount& ContainerStatus::_internal_mounts(int index) const {
  return mounts_.Get(index);
}
inline const ::runtime::v1alpha2::Mount& ContainerStatus::mounts(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.mounts)
  return _internal_mounts(index);
}
inline ::runtime::v1alpha2::Mount* ContainerStatus::_internal_add_mounts() {
  return mounts_.Add();
}
inline ::runtime::v1alpha2::Mount* ContainerStatus::add_mounts() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ContainerStatus.mounts)
  return _internal_add_mounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Mount >&
ContainerStatus::mounts() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ContainerStatus.mounts)
  return mounts_;
}

// string log_path = 15;
inline void ContainerStatus::clear_log_path() {
  log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatus::log_path() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatus.log_path)
  return _internal_log_path();
}
inline void ContainerStatus::set_log_path(const std::string& value) {
  _internal_set_log_path(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatus.log_path)
}
inline std::string* ContainerStatus::mutable_log_path() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatus.log_path)
  return _internal_mutable_log_path();
}
inline const std::string& ContainerStatus::_internal_log_path() const {
  return log_path_.Get();
}
inline void ContainerStatus::_internal_set_log_path(const std::string& value) {
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatus::set_log_path(std::string&& value) {
  
  log_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatus.log_path)
}
inline void ContainerStatus::set_log_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatus.log_path)
}
inline void ContainerStatus::set_log_path(const char* value,
    size_t size) {
  
  log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatus.log_path)
}
inline std::string* ContainerStatus::_internal_mutable_log_path() {
  
  return log_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatus::release_log_path() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatus.log_path)
  return log_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatus::set_allocated_log_path(std::string* log_path) {
  if (log_path != nullptr) {
    
  } else {
    
  }
  log_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatus.log_path)
}
inline std::string* ContainerStatus::unsafe_arena_release_log_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatus.log_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return log_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatus::unsafe_arena_set_allocated_log_path(
    std::string* log_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (log_path != nullptr) {
    
  } else {
    
  }
  log_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatus.log_path)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerStatusResponse

// .runtime.v1alpha2.ContainerStatus status = 1;
inline bool ContainerStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ContainerStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void ContainerStatusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerStatus& ContainerStatusResponse::_internal_status() const {
  const ::runtime::v1alpha2::ContainerStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerStatus*>(
      &::runtime::v1alpha2::_ContainerStatus_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerStatus& ContainerStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatusResponse.status)
  return _internal_status();
}
inline void ContainerStatusResponse::unsafe_arena_set_allocated_status(
    ::runtime::v1alpha2::ContainerStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatusResponse.status)
}
inline ::runtime::v1alpha2::ContainerStatus* ContainerStatusResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerStatus* ContainerStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatusResponse.status)
  
  ::runtime::v1alpha2::ContainerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerStatus* ContainerStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::runtime::v1alpha2::ContainerStatus* ContainerStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatusResponse.status)
  return _internal_mutable_status();
}
inline void ContainerStatusResponse::set_allocated_status(::runtime::v1alpha2::ContainerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatusResponse.status)
}

// map<string, string> info = 2;
inline int ContainerStatusResponse::_internal_info_size() const {
  return info_.size();
}
inline int ContainerStatusResponse::info_size() const {
  return _internal_info_size();
}
inline void ContainerStatusResponse::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatusResponse::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatusResponse::info() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerStatusResponse.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatusResponse::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatusResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerStatusResponse.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// UpdateContainerResourcesRequest

// string container_id = 1;
inline void UpdateContainerResourcesRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateContainerResourcesRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
  return _internal_container_id();
}
inline void UpdateContainerResourcesRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}
inline std::string* UpdateContainerResourcesRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& UpdateContainerResourcesRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void UpdateContainerResourcesRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateContainerResourcesRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}
inline void UpdateContainerResourcesRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}
inline void UpdateContainerResourcesRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}
inline std::string* UpdateContainerResourcesRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateContainerResourcesRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateContainerResourcesRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}
inline std::string* UpdateContainerResourcesRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateContainerResourcesRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.UpdateContainerResourcesRequest.container_id)
}

// .runtime.v1alpha2.LinuxContainerResources linux = 2;
inline bool UpdateContainerResourcesRequest::_internal_has_linux() const {
  return this != internal_default_instance() && linux_ != nullptr;
}
inline bool UpdateContainerResourcesRequest::has_linux() const {
  return _internal_has_linux();
}
inline void UpdateContainerResourcesRequest::clear_linux() {
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
}
inline const ::runtime::v1alpha2::LinuxContainerResources& UpdateContainerResourcesRequest::_internal_linux() const {
  const ::runtime::v1alpha2::LinuxContainerResources* p = linux_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::LinuxContainerResources*>(
      &::runtime::v1alpha2::_LinuxContainerResources_default_instance_);
}
inline const ::runtime::v1alpha2::LinuxContainerResources& UpdateContainerResourcesRequest::linux() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.UpdateContainerResourcesRequest.linux)
  return _internal_linux();
}
inline void UpdateContainerResourcesRequest::unsafe_arena_set_allocated_linux(
    ::runtime::v1alpha2::LinuxContainerResources* linux) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linux_);
  }
  linux_ = linux;
  if (linux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.UpdateContainerResourcesRequest.linux)
}
inline ::runtime::v1alpha2::LinuxContainerResources* UpdateContainerResourcesRequest::release_linux() {
  auto temp = unsafe_arena_release_linux();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerResources* UpdateContainerResourcesRequest::unsafe_arena_release_linux() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.UpdateContainerResourcesRequest.linux)
  
  ::runtime::v1alpha2::LinuxContainerResources* temp = linux_;
  linux_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::LinuxContainerResources* UpdateContainerResourcesRequest::_internal_mutable_linux() {
  
  if (linux_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::LinuxContainerResources>(GetArena());
    linux_ = p;
  }
  return linux_;
}
inline ::runtime::v1alpha2::LinuxContainerResources* UpdateContainerResourcesRequest::mutable_linux() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.UpdateContainerResourcesRequest.linux)
  return _internal_mutable_linux();
}
inline void UpdateContainerResourcesRequest::set_allocated_linux(::runtime::v1alpha2::LinuxContainerResources* linux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linux_;
  }
  if (linux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linux);
    if (message_arena != submessage_arena) {
      linux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linux, submessage_arena);
    }
    
  } else {
    
  }
  linux_ = linux;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.UpdateContainerResourcesRequest.linux)
}

// -------------------------------------------------------------------

// UpdateContainerResourcesResponse

// -------------------------------------------------------------------

// ExecSyncRequest

// string container_id = 1;
inline void ExecSyncRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecSyncRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncRequest.container_id)
  return _internal_container_id();
}
inline void ExecSyncRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncRequest.container_id)
}
inline std::string* ExecSyncRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecSyncRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ExecSyncRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ExecSyncRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecSyncRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ExecSyncRequest.container_id)
}
inline void ExecSyncRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecSyncRequest.container_id)
}
inline void ExecSyncRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecSyncRequest.container_id)
}
inline std::string* ExecSyncRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecSyncRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ExecSyncRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecSyncRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ExecSyncRequest.container_id)
}
inline std::string* ExecSyncRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ExecSyncRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecSyncRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ExecSyncRequest.container_id)
}

// repeated string cmd = 2;
inline int ExecSyncRequest::_internal_cmd_size() const {
  return cmd_.size();
}
inline int ExecSyncRequest::cmd_size() const {
  return _internal_cmd_size();
}
inline void ExecSyncRequest::clear_cmd() {
  cmd_.Clear();
}
inline std::string* ExecSyncRequest::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.ExecSyncRequest.cmd)
  return _internal_add_cmd();
}
inline const std::string& ExecSyncRequest::_internal_cmd(int index) const {
  return cmd_.Get(index);
}
inline const std::string& ExecSyncRequest::cmd(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncRequest.cmd)
  return _internal_cmd(index);
}
inline std::string* ExecSyncRequest::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecSyncRequest.cmd)
  return cmd_.Mutable(index);
}
inline void ExecSyncRequest::set_cmd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncRequest.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void ExecSyncRequest::set_cmd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncRequest.cmd)
  cmd_.Mutable(index)->assign(std::move(value));
}
inline void ExecSyncRequest::set_cmd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline void ExecSyncRequest::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline std::string* ExecSyncRequest::_internal_add_cmd() {
  return cmd_.Add();
}
inline void ExecSyncRequest::add_cmd(const std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline void ExecSyncRequest::add_cmd(std::string&& value) {
  cmd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline void ExecSyncRequest::add_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline void ExecSyncRequest::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.ExecSyncRequest.cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecSyncRequest::cmd() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ExecSyncRequest.cmd)
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecSyncRequest::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ExecSyncRequest.cmd)
  return &cmd_;
}

// int64 timeout = 3;
inline void ExecSyncRequest::clear_timeout() {
  timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSyncRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSyncRequest::timeout() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncRequest.timeout)
  return _internal_timeout();
}
inline void ExecSyncRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeout_ = value;
}
inline void ExecSyncRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncRequest.timeout)
}

// -------------------------------------------------------------------

// ExecSyncResponse

// bytes stdout = 1;
inline void ExecSyncResponse::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecSyncResponse::stdout() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncResponse.stdout)
  return _internal_stdout();
}
inline void ExecSyncResponse::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncResponse.stdout)
}
inline std::string* ExecSyncResponse::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecSyncResponse.stdout)
  return _internal_mutable_stdout();
}
inline const std::string& ExecSyncResponse::_internal_stdout() const {
  return stdout_.Get();
}
inline void ExecSyncResponse::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecSyncResponse::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ExecSyncResponse.stdout)
}
inline void ExecSyncResponse::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecSyncResponse.stdout)
}
inline void ExecSyncResponse::set_stdout(const void* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecSyncResponse.stdout)
}
inline std::string* ExecSyncResponse::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecSyncResponse::release_stdout() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ExecSyncResponse.stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecSyncResponse::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ExecSyncResponse.stdout)
}
inline std::string* ExecSyncResponse::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ExecSyncResponse.stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecSyncResponse::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ExecSyncResponse.stdout)
}

// bytes stderr = 2;
inline void ExecSyncResponse::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecSyncResponse::stderr() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncResponse.stderr)
  return _internal_stderr();
}
inline void ExecSyncResponse::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncResponse.stderr)
}
inline std::string* ExecSyncResponse::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecSyncResponse.stderr)
  return _internal_mutable_stderr();
}
inline const std::string& ExecSyncResponse::_internal_stderr() const {
  return stderr_.Get();
}
inline void ExecSyncResponse::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecSyncResponse::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ExecSyncResponse.stderr)
}
inline void ExecSyncResponse::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecSyncResponse.stderr)
}
inline void ExecSyncResponse::set_stderr(const void* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecSyncResponse.stderr)
}
inline std::string* ExecSyncResponse::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecSyncResponse::release_stderr() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ExecSyncResponse.stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecSyncResponse::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ExecSyncResponse.stderr)
}
inline std::string* ExecSyncResponse::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ExecSyncResponse.stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecSyncResponse::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ExecSyncResponse.stderr)
}

// int32 exit_code = 3;
inline void ExecSyncResponse::clear_exit_code() {
  exit_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSyncResponse::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSyncResponse::exit_code() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecSyncResponse.exit_code)
  return _internal_exit_code();
}
inline void ExecSyncResponse::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exit_code_ = value;
}
inline void ExecSyncResponse::set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecSyncResponse.exit_code)
}

// -------------------------------------------------------------------

// ExecRequest

// string container_id = 1;
inline void ExecRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.container_id)
  return _internal_container_id();
}
inline void ExecRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.container_id)
}
inline std::string* ExecRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ExecRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ExecRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ExecRequest.container_id)
}
inline void ExecRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecRequest.container_id)
}
inline void ExecRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecRequest.container_id)
}
inline std::string* ExecRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ExecRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ExecRequest.container_id)
}
inline std::string* ExecRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ExecRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ExecRequest.container_id)
}

// repeated string cmd = 2;
inline int ExecRequest::_internal_cmd_size() const {
  return cmd_.size();
}
inline int ExecRequest::cmd_size() const {
  return _internal_cmd_size();
}
inline void ExecRequest::clear_cmd() {
  cmd_.Clear();
}
inline std::string* ExecRequest::add_cmd() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.ExecRequest.cmd)
  return _internal_add_cmd();
}
inline const std::string& ExecRequest::_internal_cmd(int index) const {
  return cmd_.Get(index);
}
inline const std::string& ExecRequest::cmd(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.cmd)
  return _internal_cmd(index);
}
inline std::string* ExecRequest::mutable_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecRequest.cmd)
  return cmd_.Mutable(index);
}
inline void ExecRequest::set_cmd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.cmd)
  cmd_.Mutable(index)->assign(value);
}
inline void ExecRequest::set_cmd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.cmd)
  cmd_.Mutable(index)->assign(std::move(value));
}
inline void ExecRequest::set_cmd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecRequest.cmd)
}
inline void ExecRequest::set_cmd(int index, const char* value, size_t size) {
  cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecRequest.cmd)
}
inline std::string* ExecRequest::_internal_add_cmd() {
  return cmd_.Add();
}
inline void ExecRequest::add_cmd(const std::string& value) {
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ExecRequest.cmd)
}
inline void ExecRequest::add_cmd(std::string&& value) {
  cmd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ExecRequest.cmd)
}
inline void ExecRequest::add_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.ExecRequest.cmd)
}
inline void ExecRequest::add_cmd(const char* value, size_t size) {
  cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.ExecRequest.cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecRequest::cmd() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ExecRequest.cmd)
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecRequest::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ExecRequest.cmd)
  return &cmd_;
}

// bool tty = 3;
inline void ExecRequest::clear_tty() {
  tty_ = false;
}
inline bool ExecRequest::_internal_tty() const {
  return tty_;
}
inline bool ExecRequest::tty() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.tty)
  return _internal_tty();
}
inline void ExecRequest::_internal_set_tty(bool value) {
  
  tty_ = value;
}
inline void ExecRequest::set_tty(bool value) {
  _internal_set_tty(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.tty)
}

// bool stdin = 4;
inline void ExecRequest::clear_stdin() {
  stdin_ = false;
}
inline bool ExecRequest::_internal_stdin() const {
  return stdin_;
}
inline bool ExecRequest::stdin() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.stdin)
  return _internal_stdin();
}
inline void ExecRequest::_internal_set_stdin(bool value) {
  
  stdin_ = value;
}
inline void ExecRequest::set_stdin(bool value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.stdin)
}

// bool stdout = 5;
inline void ExecRequest::clear_stdout() {
  stdout_ = false;
}
inline bool ExecRequest::_internal_stdout() const {
  return stdout_;
}
inline bool ExecRequest::stdout() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.stdout)
  return _internal_stdout();
}
inline void ExecRequest::_internal_set_stdout(bool value) {
  
  stdout_ = value;
}
inline void ExecRequest::set_stdout(bool value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.stdout)
}

// bool stderr = 6;
inline void ExecRequest::clear_stderr() {
  stderr_ = false;
}
inline bool ExecRequest::_internal_stderr() const {
  return stderr_;
}
inline bool ExecRequest::stderr() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecRequest.stderr)
  return _internal_stderr();
}
inline void ExecRequest::_internal_set_stderr(bool value) {
  
  stderr_ = value;
}
inline void ExecRequest::set_stderr(bool value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecRequest.stderr)
}

// -------------------------------------------------------------------

// ExecResponse

// string url = 1;
inline void ExecResponse::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecResponse::url() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ExecResponse.url)
  return _internal_url();
}
inline void ExecResponse::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ExecResponse.url)
}
inline std::string* ExecResponse::mutable_url() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ExecResponse.url)
  return _internal_mutable_url();
}
inline const std::string& ExecResponse::_internal_url() const {
  return url_.Get();
}
inline void ExecResponse::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecResponse::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ExecResponse.url)
}
inline void ExecResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ExecResponse.url)
}
inline void ExecResponse::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ExecResponse.url)
}
inline std::string* ExecResponse::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecResponse::release_url() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ExecResponse.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ExecResponse.url)
}
inline std::string* ExecResponse::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ExecResponse.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecResponse::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ExecResponse.url)
}

// -------------------------------------------------------------------

// AttachRequest

// string container_id = 1;
inline void AttachRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttachRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachRequest.container_id)
  return _internal_container_id();
}
inline void AttachRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachRequest.container_id)
}
inline std::string* AttachRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AttachRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& AttachRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void AttachRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttachRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AttachRequest.container_id)
}
inline void AttachRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AttachRequest.container_id)
}
inline void AttachRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AttachRequest.container_id)
}
inline std::string* AttachRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttachRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AttachRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttachRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AttachRequest.container_id)
}
inline std::string* AttachRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AttachRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AttachRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AttachRequest.container_id)
}

// bool stdin = 2;
inline void AttachRequest::clear_stdin() {
  stdin_ = false;
}
inline bool AttachRequest::_internal_stdin() const {
  return stdin_;
}
inline bool AttachRequest::stdin() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachRequest.stdin)
  return _internal_stdin();
}
inline void AttachRequest::_internal_set_stdin(bool value) {
  
  stdin_ = value;
}
inline void AttachRequest::set_stdin(bool value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachRequest.stdin)
}

// bool tty = 3;
inline void AttachRequest::clear_tty() {
  tty_ = false;
}
inline bool AttachRequest::_internal_tty() const {
  return tty_;
}
inline bool AttachRequest::tty() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachRequest.tty)
  return _internal_tty();
}
inline void AttachRequest::_internal_set_tty(bool value) {
  
  tty_ = value;
}
inline void AttachRequest::set_tty(bool value) {
  _internal_set_tty(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachRequest.tty)
}

// bool stdout = 4;
inline void AttachRequest::clear_stdout() {
  stdout_ = false;
}
inline bool AttachRequest::_internal_stdout() const {
  return stdout_;
}
inline bool AttachRequest::stdout() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachRequest.stdout)
  return _internal_stdout();
}
inline void AttachRequest::_internal_set_stdout(bool value) {
  
  stdout_ = value;
}
inline void AttachRequest::set_stdout(bool value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachRequest.stdout)
}

// bool stderr = 5;
inline void AttachRequest::clear_stderr() {
  stderr_ = false;
}
inline bool AttachRequest::_internal_stderr() const {
  return stderr_;
}
inline bool AttachRequest::stderr() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachRequest.stderr)
  return _internal_stderr();
}
inline void AttachRequest::_internal_set_stderr(bool value) {
  
  stderr_ = value;
}
inline void AttachRequest::set_stderr(bool value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachRequest.stderr)
}

// -------------------------------------------------------------------

// AttachResponse

// string url = 1;
inline void AttachResponse::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttachResponse::url() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AttachResponse.url)
  return _internal_url();
}
inline void AttachResponse::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AttachResponse.url)
}
inline std::string* AttachResponse::mutable_url() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AttachResponse.url)
  return _internal_mutable_url();
}
inline const std::string& AttachResponse::_internal_url() const {
  return url_.Get();
}
inline void AttachResponse::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttachResponse::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AttachResponse.url)
}
inline void AttachResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AttachResponse.url)
}
inline void AttachResponse::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AttachResponse.url)
}
inline std::string* AttachResponse::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttachResponse::release_url() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AttachResponse.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttachResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AttachResponse.url)
}
inline std::string* AttachResponse::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AttachResponse.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AttachResponse::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AttachResponse.url)
}

// -------------------------------------------------------------------

// PortForwardRequest

// string pod_sandbox_id = 1;
inline void PortForwardRequest::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortForwardRequest::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void PortForwardRequest::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}
inline std::string* PortForwardRequest::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& PortForwardRequest::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void PortForwardRequest::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortForwardRequest::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}
inline void PortForwardRequest::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}
inline void PortForwardRequest::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}
inline std::string* PortForwardRequest::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortForwardRequest::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortForwardRequest::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}
inline std::string* PortForwardRequest::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortForwardRequest::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PortForwardRequest.pod_sandbox_id)
}

// repeated int32 port = 2;
inline int PortForwardRequest::_internal_port_size() const {
  return port_.size();
}
inline int PortForwardRequest::port_size() const {
  return _internal_port_size();
}
inline void PortForwardRequest::clear_port() {
  port_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortForwardRequest::_internal_port(int index) const {
  return port_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortForwardRequest::port(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortForwardRequest.port)
  return _internal_port(index);
}
inline void PortForwardRequest::set_port(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortForwardRequest.port)
}
inline void PortForwardRequest::_internal_add_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_.Add(value);
}
inline void PortForwardRequest::add_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_port(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.PortForwardRequest.port)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PortForwardRequest::_internal_port() const {
  return port_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PortForwardRequest::port() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.PortForwardRequest.port)
  return _internal_port();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PortForwardRequest::_internal_mutable_port() {
  return &port_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PortForwardRequest::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.PortForwardRequest.port)
  return _internal_mutable_port();
}

// -------------------------------------------------------------------

// PortForwardResponse

// string url = 1;
inline void PortForwardResponse::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortForwardResponse::url() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PortForwardResponse.url)
  return _internal_url();
}
inline void PortForwardResponse::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PortForwardResponse.url)
}
inline std::string* PortForwardResponse::mutable_url() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PortForwardResponse.url)
  return _internal_mutable_url();
}
inline const std::string& PortForwardResponse::_internal_url() const {
  return url_.Get();
}
inline void PortForwardResponse::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortForwardResponse::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PortForwardResponse.url)
}
inline void PortForwardResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PortForwardResponse.url)
}
inline void PortForwardResponse::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PortForwardResponse.url)
}
inline std::string* PortForwardResponse::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortForwardResponse::release_url() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PortForwardResponse.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortForwardResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PortForwardResponse.url)
}
inline std::string* PortForwardResponse::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PortForwardResponse.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortForwardResponse::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PortForwardResponse.url)
}

// -------------------------------------------------------------------

// ImageFilter

// .runtime.v1alpha2.ImageSpec image = 1;
inline bool ImageFilter::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageFilter::has_image() const {
  return _internal_has_image();
}
inline void ImageFilter::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& ImageFilter::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& ImageFilter::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageFilter.image)
  return _internal_image();
}
inline void ImageFilter::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ImageFilter.image)
}
inline ::runtime::v1alpha2::ImageSpec* ImageFilter::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ImageFilter::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ImageFilter.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ImageFilter::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* ImageFilter::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ImageFilter.image)
  return _internal_mutable_image();
}
inline void ImageFilter::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ImageFilter.image)
}

// -------------------------------------------------------------------

// ListImagesRequest

// .runtime.v1alpha2.ImageFilter filter = 1;
inline bool ListImagesRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ListImagesRequest::has_filter() const {
  return _internal_has_filter();
}
inline void ListImagesRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageFilter& ListImagesRequest::_internal_filter() const {
  const ::runtime::v1alpha2::ImageFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageFilter*>(
      &::runtime::v1alpha2::_ImageFilter_default_instance_);
}
inline const ::runtime::v1alpha2::ImageFilter& ListImagesRequest::filter() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListImagesRequest.filter)
  return _internal_filter();
}
inline void ListImagesRequest::unsafe_arena_set_allocated_filter(
    ::runtime::v1alpha2::ImageFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ListImagesRequest.filter)
}
inline ::runtime::v1alpha2::ImageFilter* ListImagesRequest::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageFilter* ListImagesRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ListImagesRequest.filter)
  
  ::runtime::v1alpha2::ImageFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageFilter* ListImagesRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::runtime::v1alpha2::ImageFilter* ListImagesRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListImagesRequest.filter)
  return _internal_mutable_filter();
}
inline void ListImagesRequest::set_allocated_filter(::runtime::v1alpha2::ImageFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ListImagesRequest.filter)
}

// -------------------------------------------------------------------

// Image

// string id = 1;
inline void Image::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.id)
  return _internal_id();
}
inline void Image::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.id)
}
inline std::string* Image::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.id)
  return _internal_mutable_id();
}
inline const std::string& Image::_internal_id() const {
  return id_.Get();
}
inline void Image::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Image.id)
}
inline void Image::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Image.id)
}
inline void Image::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Image.id)
}
inline std::string* Image::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Image.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Image.id)
}
inline std::string* Image::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Image.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Image::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Image.id)
}

// repeated string repo_tags = 2;
inline int Image::_internal_repo_tags_size() const {
  return repo_tags_.size();
}
inline int Image::repo_tags_size() const {
  return _internal_repo_tags_size();
}
inline void Image::clear_repo_tags() {
  repo_tags_.Clear();
}
inline std::string* Image::add_repo_tags() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.Image.repo_tags)
  return _internal_add_repo_tags();
}
inline const std::string& Image::_internal_repo_tags(int index) const {
  return repo_tags_.Get(index);
}
inline const std::string& Image::repo_tags(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.repo_tags)
  return _internal_repo_tags(index);
}
inline std::string* Image::mutable_repo_tags(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.repo_tags)
  return repo_tags_.Mutable(index);
}
inline void Image::set_repo_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.repo_tags)
  repo_tags_.Mutable(index)->assign(value);
}
inline void Image::set_repo_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.repo_tags)
  repo_tags_.Mutable(index)->assign(std::move(value));
}
inline void Image::set_repo_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repo_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Image.repo_tags)
}
inline void Image::set_repo_tags(int index, const char* value, size_t size) {
  repo_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Image.repo_tags)
}
inline std::string* Image::_internal_add_repo_tags() {
  return repo_tags_.Add();
}
inline void Image::add_repo_tags(const std::string& value) {
  repo_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Image.repo_tags)
}
inline void Image::add_repo_tags(std::string&& value) {
  repo_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Image.repo_tags)
}
inline void Image::add_repo_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repo_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.Image.repo_tags)
}
inline void Image::add_repo_tags(const char* value, size_t size) {
  repo_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.Image.repo_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Image::repo_tags() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.Image.repo_tags)
  return repo_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Image::mutable_repo_tags() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.Image.repo_tags)
  return &repo_tags_;
}

// repeated string repo_digests = 3;
inline int Image::_internal_repo_digests_size() const {
  return repo_digests_.size();
}
inline int Image::repo_digests_size() const {
  return _internal_repo_digests_size();
}
inline void Image::clear_repo_digests() {
  repo_digests_.Clear();
}
inline std::string* Image::add_repo_digests() {
  // @@protoc_insertion_point(field_add_mutable:runtime.v1alpha2.Image.repo_digests)
  return _internal_add_repo_digests();
}
inline const std::string& Image::_internal_repo_digests(int index) const {
  return repo_digests_.Get(index);
}
inline const std::string& Image::repo_digests(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.repo_digests)
  return _internal_repo_digests(index);
}
inline std::string* Image::mutable_repo_digests(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.repo_digests)
  return repo_digests_.Mutable(index);
}
inline void Image::set_repo_digests(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.repo_digests)
  repo_digests_.Mutable(index)->assign(value);
}
inline void Image::set_repo_digests(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.repo_digests)
  repo_digests_.Mutable(index)->assign(std::move(value));
}
inline void Image::set_repo_digests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repo_digests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Image.repo_digests)
}
inline void Image::set_repo_digests(int index, const char* value, size_t size) {
  repo_digests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Image.repo_digests)
}
inline std::string* Image::_internal_add_repo_digests() {
  return repo_digests_.Add();
}
inline void Image::add_repo_digests(const std::string& value) {
  repo_digests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Image.repo_digests)
}
inline void Image::add_repo_digests(std::string&& value) {
  repo_digests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.Image.repo_digests)
}
inline void Image::add_repo_digests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repo_digests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:runtime.v1alpha2.Image.repo_digests)
}
inline void Image::add_repo_digests(const char* value, size_t size) {
  repo_digests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:runtime.v1alpha2.Image.repo_digests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Image::repo_digests() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.Image.repo_digests)
  return repo_digests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Image::mutable_repo_digests() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.Image.repo_digests)
  return &repo_digests_;
}

// uint64 size = 4;
inline void Image::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Image::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Image::size() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.size)
  return _internal_size();
}
inline void Image::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Image::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.size)
}

// .runtime.v1alpha2.Int64Value uid = 5;
inline bool Image::_internal_has_uid() const {
  return this != internal_default_instance() && uid_ != nullptr;
}
inline bool Image::has_uid() const {
  return _internal_has_uid();
}
inline void Image::clear_uid() {
  if (GetArena() == nullptr && uid_ != nullptr) {
    delete uid_;
  }
  uid_ = nullptr;
}
inline const ::runtime::v1alpha2::Int64Value& Image::_internal_uid() const {
  const ::runtime::v1alpha2::Int64Value* p = uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Int64Value*>(
      &::runtime::v1alpha2::_Int64Value_default_instance_);
}
inline const ::runtime::v1alpha2::Int64Value& Image::uid() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.uid)
  return _internal_uid();
}
inline void Image::unsafe_arena_set_allocated_uid(
    ::runtime::v1alpha2::Int64Value* uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  uid_ = uid;
  if (uid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Image.uid)
}
inline ::runtime::v1alpha2::Int64Value* Image::release_uid() {
  auto temp = unsafe_arena_release_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* Image::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Image.uid)
  
  ::runtime::v1alpha2::Int64Value* temp = uid_;
  uid_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Int64Value* Image::_internal_mutable_uid() {
  
  if (uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Int64Value>(GetArena());
    uid_ = p;
  }
  return uid_;
}
inline ::runtime::v1alpha2::Int64Value* Image::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.uid)
  return _internal_mutable_uid();
}
inline void Image::set_allocated_uid(::runtime::v1alpha2::Int64Value* uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uid_;
  }
  if (uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uid);
    if (message_arena != submessage_arena) {
      uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid, submessage_arena);
    }
    
  } else {
    
  }
  uid_ = uid;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Image.uid)
}

// string username = 6;
inline void Image::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::username() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.username)
  return _internal_username();
}
inline void Image::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.Image.username)
}
inline std::string* Image::mutable_username() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.username)
  return _internal_mutable_username();
}
inline const std::string& Image::_internal_username() const {
  return username_.Get();
}
inline void Image::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.Image.username)
}
inline void Image::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.Image.username)
}
inline void Image::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.Image.username)
}
inline std::string* Image::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_username() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Image.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Image.username)
}
inline std::string* Image::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.Image.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Image::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Image.username)
}

// .runtime.v1alpha2.ImageSpec spec = 7;
inline bool Image::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Image::has_spec() const {
  return _internal_has_spec();
}
inline void Image::clear_spec() {
  if (GetArena() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& Image::_internal_spec() const {
  const ::runtime::v1alpha2::ImageSpec* p = spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& Image::spec() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.Image.spec)
  return _internal_spec();
}
inline void Image::unsafe_arena_set_allocated_spec(
    ::runtime::v1alpha2::ImageSpec* spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.Image.spec)
}
inline ::runtime::v1alpha2::ImageSpec* Image::release_spec() {
  auto temp = unsafe_arena_release_spec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* Image::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.Image.spec)
  
  ::runtime::v1alpha2::ImageSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* Image::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    spec_ = p;
  }
  return spec_;
}
inline ::runtime::v1alpha2::ImageSpec* Image::mutable_spec() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.Image.spec)
  return _internal_mutable_spec();
}
inline void Image::set_allocated_spec(::runtime::v1alpha2::ImageSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.Image.spec)
}

// -------------------------------------------------------------------

// ListImagesResponse

// repeated .runtime.v1alpha2.Image images = 1;
inline int ListImagesResponse::_internal_images_size() const {
  return images_.size();
}
inline int ListImagesResponse::images_size() const {
  return _internal_images_size();
}
inline void ListImagesResponse::clear_images() {
  images_.Clear();
}
inline ::runtime::v1alpha2::Image* ListImagesResponse::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListImagesResponse.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Image >*
ListImagesResponse::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ListImagesResponse.images)
  return &images_;
}
inline const ::runtime::v1alpha2::Image& ListImagesResponse::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::runtime::v1alpha2::Image& ListImagesResponse::images(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListImagesResponse.images)
  return _internal_images(index);
}
inline ::runtime::v1alpha2::Image* ListImagesResponse::_internal_add_images() {
  return images_.Add();
}
inline ::runtime::v1alpha2::Image* ListImagesResponse::add_images() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ListImagesResponse.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::Image >&
ListImagesResponse::images() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ListImagesResponse.images)
  return images_;
}

// -------------------------------------------------------------------

// ImageStatusRequest

// .runtime.v1alpha2.ImageSpec image = 1;
inline bool ImageStatusRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageStatusRequest::has_image() const {
  return _internal_has_image();
}
inline void ImageStatusRequest::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& ImageStatusRequest::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& ImageStatusRequest::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageStatusRequest.image)
  return _internal_image();
}
inline void ImageStatusRequest::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ImageStatusRequest.image)
}
inline ::runtime::v1alpha2::ImageSpec* ImageStatusRequest::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ImageStatusRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ImageStatusRequest.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* ImageStatusRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* ImageStatusRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ImageStatusRequest.image)
  return _internal_mutable_image();
}
inline void ImageStatusRequest::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ImageStatusRequest.image)
}

// bool verbose = 2;
inline void ImageStatusRequest::clear_verbose() {
  verbose_ = false;
}
inline bool ImageStatusRequest::_internal_verbose() const {
  return verbose_;
}
inline bool ImageStatusRequest::verbose() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageStatusRequest.verbose)
  return _internal_verbose();
}
inline void ImageStatusRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void ImageStatusRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ImageStatusRequest.verbose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImageStatusResponse

// .runtime.v1alpha2.Image image = 1;
inline bool ImageStatusResponse::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageStatusResponse::has_image() const {
  return _internal_has_image();
}
inline void ImageStatusResponse::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::Image& ImageStatusResponse::_internal_image() const {
  const ::runtime::v1alpha2::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::Image*>(
      &::runtime::v1alpha2::_Image_default_instance_);
}
inline const ::runtime::v1alpha2::Image& ImageStatusResponse::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageStatusResponse.image)
  return _internal_image();
}
inline void ImageStatusResponse::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ImageStatusResponse.image)
}
inline ::runtime::v1alpha2::Image* ImageStatusResponse::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::Image* ImageStatusResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ImageStatusResponse.image)
  
  ::runtime::v1alpha2::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::Image* ImageStatusResponse::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::Image* ImageStatusResponse::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ImageStatusResponse.image)
  return _internal_mutable_image();
}
inline void ImageStatusResponse::set_allocated_image(::runtime::v1alpha2::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ImageStatusResponse.image)
}

// map<string, string> info = 2;
inline int ImageStatusResponse::_internal_info_size() const {
  return info_.size();
}
inline int ImageStatusResponse::info_size() const {
  return _internal_info_size();
}
inline void ImageStatusResponse::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImageStatusResponse::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImageStatusResponse::info() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ImageStatusResponse.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImageStatusResponse::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImageStatusResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ImageStatusResponse.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// AuthConfig

// string username = 1;
inline void AuthConfig::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::username() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.username)
  return _internal_username();
}
inline void AuthConfig::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.username)
}
inline std::string* AuthConfig::mutable_username() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.username)
  return _internal_mutable_username();
}
inline const std::string& AuthConfig::_internal_username() const {
  return username_.Get();
}
inline void AuthConfig::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.username)
}
inline void AuthConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.username)
}
inline void AuthConfig::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.username)
}
inline std::string* AuthConfig::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_username() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.username)
}
inline std::string* AuthConfig::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.username)
}

// string password = 2;
inline void AuthConfig::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::password() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.password)
  return _internal_password();
}
inline void AuthConfig::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.password)
}
inline std::string* AuthConfig::mutable_password() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.password)
  return _internal_mutable_password();
}
inline const std::string& AuthConfig::_internal_password() const {
  return password_.Get();
}
inline void AuthConfig::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.password)
}
inline void AuthConfig::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.password)
}
inline void AuthConfig::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.password)
}
inline std::string* AuthConfig::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_password() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.password)
}
inline std::string* AuthConfig::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.password)
}

// string auth = 3;
inline void AuthConfig::clear_auth() {
  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::auth() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.auth)
  return _internal_auth();
}
inline void AuthConfig::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.auth)
}
inline std::string* AuthConfig::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.auth)
  return _internal_mutable_auth();
}
inline const std::string& AuthConfig::_internal_auth() const {
  return auth_.Get();
}
inline void AuthConfig::_internal_set_auth(const std::string& value) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_auth(std::string&& value) {
  
  auth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.auth)
}
inline void AuthConfig::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.auth)
}
inline void AuthConfig::set_auth(const char* value,
    size_t size) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.auth)
}
inline std::string* AuthConfig::_internal_mutable_auth() {
  
  return auth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_auth() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.auth)
}
inline std::string* AuthConfig::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.auth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_auth(
    std::string* auth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.auth)
}

// string server_address = 4;
inline void AuthConfig::clear_server_address() {
  server_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::server_address() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.server_address)
  return _internal_server_address();
}
inline void AuthConfig::set_server_address(const std::string& value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.server_address)
}
inline std::string* AuthConfig::mutable_server_address() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.server_address)
  return _internal_mutable_server_address();
}
inline const std::string& AuthConfig::_internal_server_address() const {
  return server_address_.Get();
}
inline void AuthConfig::_internal_set_server_address(const std::string& value) {
  
  server_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_server_address(std::string&& value) {
  
  server_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.server_address)
}
inline void AuthConfig::set_server_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.server_address)
}
inline void AuthConfig::set_server_address(const char* value,
    size_t size) {
  
  server_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.server_address)
}
inline std::string* AuthConfig::_internal_mutable_server_address() {
  
  return server_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_server_address() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.server_address)
  return server_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  server_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.server_address)
}
inline std::string* AuthConfig::unsafe_arena_release_server_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.server_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_server_address(
    std::string* server_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_address != nullptr) {
    
  } else {
    
  }
  server_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.server_address)
}

// string identity_token = 5;
inline void AuthConfig::clear_identity_token() {
  identity_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::identity_token() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.identity_token)
  return _internal_identity_token();
}
inline void AuthConfig::set_identity_token(const std::string& value) {
  _internal_set_identity_token(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.identity_token)
}
inline std::string* AuthConfig::mutable_identity_token() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.identity_token)
  return _internal_mutable_identity_token();
}
inline const std::string& AuthConfig::_internal_identity_token() const {
  return identity_token_.Get();
}
inline void AuthConfig::_internal_set_identity_token(const std::string& value) {
  
  identity_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_identity_token(std::string&& value) {
  
  identity_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.identity_token)
}
inline void AuthConfig::set_identity_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.identity_token)
}
inline void AuthConfig::set_identity_token(const char* value,
    size_t size) {
  
  identity_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.identity_token)
}
inline std::string* AuthConfig::_internal_mutable_identity_token() {
  
  return identity_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_identity_token() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.identity_token)
  return identity_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_identity_token(std::string* identity_token) {
  if (identity_token != nullptr) {
    
  } else {
    
  }
  identity_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.identity_token)
}
inline std::string* AuthConfig::unsafe_arena_release_identity_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.identity_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return identity_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_identity_token(
    std::string* identity_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (identity_token != nullptr) {
    
  } else {
    
  }
  identity_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      identity_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.identity_token)
}

// string registry_token = 6;
inline void AuthConfig::clear_registry_token() {
  registry_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthConfig::registry_token() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.AuthConfig.registry_token)
  return _internal_registry_token();
}
inline void AuthConfig::set_registry_token(const std::string& value) {
  _internal_set_registry_token(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.AuthConfig.registry_token)
}
inline std::string* AuthConfig::mutable_registry_token() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.AuthConfig.registry_token)
  return _internal_mutable_registry_token();
}
inline const std::string& AuthConfig::_internal_registry_token() const {
  return registry_token_.Get();
}
inline void AuthConfig::_internal_set_registry_token(const std::string& value) {
  
  registry_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthConfig::set_registry_token(std::string&& value) {
  
  registry_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.AuthConfig.registry_token)
}
inline void AuthConfig::set_registry_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registry_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.AuthConfig.registry_token)
}
inline void AuthConfig::set_registry_token(const char* value,
    size_t size) {
  
  registry_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.AuthConfig.registry_token)
}
inline std::string* AuthConfig::_internal_mutable_registry_token() {
  
  return registry_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthConfig::release_registry_token() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.AuthConfig.registry_token)
  return registry_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthConfig::set_allocated_registry_token(std::string* registry_token) {
  if (registry_token != nullptr) {
    
  } else {
    
  }
  registry_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registry_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.AuthConfig.registry_token)
}
inline std::string* AuthConfig::unsafe_arena_release_registry_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.AuthConfig.registry_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return registry_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthConfig::unsafe_arena_set_allocated_registry_token(
    std::string* registry_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (registry_token != nullptr) {
    
  } else {
    
  }
  registry_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      registry_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.AuthConfig.registry_token)
}

// -------------------------------------------------------------------

// PullImageRequest

// .runtime.v1alpha2.ImageSpec image = 1;
inline bool PullImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool PullImageRequest::has_image() const {
  return _internal_has_image();
}
inline void PullImageRequest::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& PullImageRequest::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& PullImageRequest::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PullImageRequest.image)
  return _internal_image();
}
inline void PullImageRequest::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PullImageRequest.image)
}
inline ::runtime::v1alpha2::ImageSpec* PullImageRequest::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* PullImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PullImageRequest.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* PullImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* PullImageRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PullImageRequest.image)
  return _internal_mutable_image();
}
inline void PullImageRequest::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PullImageRequest.image)
}

// .runtime.v1alpha2.AuthConfig auth = 2;
inline bool PullImageRequest::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool PullImageRequest::has_auth() const {
  return _internal_has_auth();
}
inline void PullImageRequest::clear_auth() {
  if (GetArena() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::runtime::v1alpha2::AuthConfig& PullImageRequest::_internal_auth() const {
  const ::runtime::v1alpha2::AuthConfig* p = auth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::AuthConfig*>(
      &::runtime::v1alpha2::_AuthConfig_default_instance_);
}
inline const ::runtime::v1alpha2::AuthConfig& PullImageRequest::auth() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PullImageRequest.auth)
  return _internal_auth();
}
inline void PullImageRequest::unsafe_arena_set_allocated_auth(
    ::runtime::v1alpha2::AuthConfig* auth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PullImageRequest.auth)
}
inline ::runtime::v1alpha2::AuthConfig* PullImageRequest::release_auth() {
  auto temp = unsafe_arena_release_auth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::AuthConfig* PullImageRequest::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PullImageRequest.auth)
  
  ::runtime::v1alpha2::AuthConfig* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::AuthConfig* PullImageRequest::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::AuthConfig>(GetArena());
    auth_ = p;
  }
  return auth_;
}
inline ::runtime::v1alpha2::AuthConfig* PullImageRequest::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PullImageRequest.auth)
  return _internal_mutable_auth();
}
inline void PullImageRequest::set_allocated_auth(::runtime::v1alpha2::AuthConfig* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PullImageRequest.auth)
}

// .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
inline bool PullImageRequest::_internal_has_sandbox_config() const {
  return this != internal_default_instance() && sandbox_config_ != nullptr;
}
inline bool PullImageRequest::has_sandbox_config() const {
  return _internal_has_sandbox_config();
}
inline void PullImageRequest::clear_sandbox_config() {
  if (GetArena() == nullptr && sandbox_config_ != nullptr) {
    delete sandbox_config_;
  }
  sandbox_config_ = nullptr;
}
inline const ::runtime::v1alpha2::PodSandboxConfig& PullImageRequest::_internal_sandbox_config() const {
  const ::runtime::v1alpha2::PodSandboxConfig* p = sandbox_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::PodSandboxConfig*>(
      &::runtime::v1alpha2::_PodSandboxConfig_default_instance_);
}
inline const ::runtime::v1alpha2::PodSandboxConfig& PullImageRequest::sandbox_config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PullImageRequest.sandbox_config)
  return _internal_sandbox_config();
}
inline void PullImageRequest::unsafe_arena_set_allocated_sandbox_config(
    ::runtime::v1alpha2::PodSandboxConfig* sandbox_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sandbox_config_);
  }
  sandbox_config_ = sandbox_config;
  if (sandbox_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PullImageRequest.sandbox_config)
}
inline ::runtime::v1alpha2::PodSandboxConfig* PullImageRequest::release_sandbox_config() {
  auto temp = unsafe_arena_release_sandbox_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* PullImageRequest::unsafe_arena_release_sandbox_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PullImageRequest.sandbox_config)
  
  ::runtime::v1alpha2::PodSandboxConfig* temp = sandbox_config_;
  sandbox_config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::PodSandboxConfig* PullImageRequest::_internal_mutable_sandbox_config() {
  
  if (sandbox_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::PodSandboxConfig>(GetArena());
    sandbox_config_ = p;
  }
  return sandbox_config_;
}
inline ::runtime::v1alpha2::PodSandboxConfig* PullImageRequest::mutable_sandbox_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PullImageRequest.sandbox_config)
  return _internal_mutable_sandbox_config();
}
inline void PullImageRequest::set_allocated_sandbox_config(::runtime::v1alpha2::PodSandboxConfig* sandbox_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sandbox_config_;
  }
  if (sandbox_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sandbox_config);
    if (message_arena != submessage_arena) {
      sandbox_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sandbox_config, submessage_arena);
    }
    
  } else {
    
  }
  sandbox_config_ = sandbox_config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PullImageRequest.sandbox_config)
}

// -------------------------------------------------------------------

// PullImageResponse

// string image_ref = 1;
inline void PullImageResponse::clear_image_ref() {
  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PullImageResponse::image_ref() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.PullImageResponse.image_ref)
  return _internal_image_ref();
}
inline void PullImageResponse::set_image_ref(const std::string& value) {
  _internal_set_image_ref(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.PullImageResponse.image_ref)
}
inline std::string* PullImageResponse::mutable_image_ref() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.PullImageResponse.image_ref)
  return _internal_mutable_image_ref();
}
inline const std::string& PullImageResponse::_internal_image_ref() const {
  return image_ref_.Get();
}
inline void PullImageResponse::_internal_set_image_ref(const std::string& value) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PullImageResponse::set_image_ref(std::string&& value) {
  
  image_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.PullImageResponse.image_ref)
}
inline void PullImageResponse::set_image_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.PullImageResponse.image_ref)
}
inline void PullImageResponse::set_image_ref(const char* value,
    size_t size) {
  
  image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.PullImageResponse.image_ref)
}
inline std::string* PullImageResponse::_internal_mutable_image_ref() {
  
  return image_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PullImageResponse::release_image_ref() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.PullImageResponse.image_ref)
  return image_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullImageResponse::set_allocated_image_ref(std::string* image_ref) {
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.PullImageResponse.image_ref)
}
inline std::string* PullImageResponse::unsafe_arena_release_image_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.PullImageResponse.image_ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PullImageResponse::unsafe_arena_set_allocated_image_ref(
    std::string* image_ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_ref != nullptr) {
    
  } else {
    
  }
  image_ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.PullImageResponse.image_ref)
}

// -------------------------------------------------------------------

// RemoveImageRequest

// .runtime.v1alpha2.ImageSpec image = 1;
inline bool RemoveImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool RemoveImageRequest::has_image() const {
  return _internal_has_image();
}
inline void RemoveImageRequest::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::runtime::v1alpha2::ImageSpec& RemoveImageRequest::_internal_image() const {
  const ::runtime::v1alpha2::ImageSpec* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ImageSpec*>(
      &::runtime::v1alpha2::_ImageSpec_default_instance_);
}
inline const ::runtime::v1alpha2::ImageSpec& RemoveImageRequest::image() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RemoveImageRequest.image)
  return _internal_image();
}
inline void RemoveImageRequest::unsafe_arena_set_allocated_image(
    ::runtime::v1alpha2::ImageSpec* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RemoveImageRequest.image)
}
inline ::runtime::v1alpha2::ImageSpec* RemoveImageRequest::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* RemoveImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RemoveImageRequest.image)
  
  ::runtime::v1alpha2::ImageSpec* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ImageSpec* RemoveImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ImageSpec>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::runtime::v1alpha2::ImageSpec* RemoveImageRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RemoveImageRequest.image)
  return _internal_mutable_image();
}
inline void RemoveImageRequest::set_allocated_image(::runtime::v1alpha2::ImageSpec* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RemoveImageRequest.image)
}

// -------------------------------------------------------------------

// RemoveImageResponse

// -------------------------------------------------------------------

// NetworkConfig

// string pod_cidr = 1;
inline void NetworkConfig::clear_pod_cidr() {
  pod_cidr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetworkConfig::pod_cidr() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.NetworkConfig.pod_cidr)
  return _internal_pod_cidr();
}
inline void NetworkConfig::set_pod_cidr(const std::string& value) {
  _internal_set_pod_cidr(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.NetworkConfig.pod_cidr)
}
inline std::string* NetworkConfig::mutable_pod_cidr() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.NetworkConfig.pod_cidr)
  return _internal_mutable_pod_cidr();
}
inline const std::string& NetworkConfig::_internal_pod_cidr() const {
  return pod_cidr_.Get();
}
inline void NetworkConfig::_internal_set_pod_cidr(const std::string& value) {
  
  pod_cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkConfig::set_pod_cidr(std::string&& value) {
  
  pod_cidr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.NetworkConfig.pod_cidr)
}
inline void NetworkConfig::set_pod_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.NetworkConfig.pod_cidr)
}
inline void NetworkConfig::set_pod_cidr(const char* value,
    size_t size) {
  
  pod_cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.NetworkConfig.pod_cidr)
}
inline std::string* NetworkConfig::_internal_mutable_pod_cidr() {
  
  return pod_cidr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkConfig::release_pod_cidr() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.NetworkConfig.pod_cidr)
  return pod_cidr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkConfig::set_allocated_pod_cidr(std::string* pod_cidr) {
  if (pod_cidr != nullptr) {
    
  } else {
    
  }
  pod_cidr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_cidr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.NetworkConfig.pod_cidr)
}
inline std::string* NetworkConfig::unsafe_arena_release_pod_cidr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.NetworkConfig.pod_cidr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_cidr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkConfig::unsafe_arena_set_allocated_pod_cidr(
    std::string* pod_cidr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_cidr != nullptr) {
    
  } else {
    
  }
  pod_cidr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_cidr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.NetworkConfig.pod_cidr)
}

// -------------------------------------------------------------------

// RuntimeConfig

// .runtime.v1alpha2.NetworkConfig network_config = 1;
inline bool RuntimeConfig::_internal_has_network_config() const {
  return this != internal_default_instance() && network_config_ != nullptr;
}
inline bool RuntimeConfig::has_network_config() const {
  return _internal_has_network_config();
}
inline void RuntimeConfig::clear_network_config() {
  if (GetArena() == nullptr && network_config_ != nullptr) {
    delete network_config_;
  }
  network_config_ = nullptr;
}
inline const ::runtime::v1alpha2::NetworkConfig& RuntimeConfig::_internal_network_config() const {
  const ::runtime::v1alpha2::NetworkConfig* p = network_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::NetworkConfig*>(
      &::runtime::v1alpha2::_NetworkConfig_default_instance_);
}
inline const ::runtime::v1alpha2::NetworkConfig& RuntimeConfig::network_config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeConfig.network_config)
  return _internal_network_config();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_network_config(
    ::runtime::v1alpha2::NetworkConfig* network_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_config_);
  }
  network_config_ = network_config;
  if (network_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RuntimeConfig.network_config)
}
inline ::runtime::v1alpha2::NetworkConfig* RuntimeConfig::release_network_config() {
  auto temp = unsafe_arena_release_network_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::NetworkConfig* RuntimeConfig::unsafe_arena_release_network_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RuntimeConfig.network_config)
  
  ::runtime::v1alpha2::NetworkConfig* temp = network_config_;
  network_config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::NetworkConfig* RuntimeConfig::_internal_mutable_network_config() {
  
  if (network_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::NetworkConfig>(GetArena());
    network_config_ = p;
  }
  return network_config_;
}
inline ::runtime::v1alpha2::NetworkConfig* RuntimeConfig::mutable_network_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RuntimeConfig.network_config)
  return _internal_mutable_network_config();
}
inline void RuntimeConfig::set_allocated_network_config(::runtime::v1alpha2::NetworkConfig* network_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_config_;
  }
  if (network_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_config);
    if (message_arena != submessage_arena) {
      network_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_config, submessage_arena);
    }
    
  } else {
    
  }
  network_config_ = network_config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RuntimeConfig.network_config)
}

// -------------------------------------------------------------------

// UpdateRuntimeConfigRequest

// .runtime.v1alpha2.RuntimeConfig runtime_config = 1;
inline bool UpdateRuntimeConfigRequest::_internal_has_runtime_config() const {
  return this != internal_default_instance() && runtime_config_ != nullptr;
}
inline bool UpdateRuntimeConfigRequest::has_runtime_config() const {
  return _internal_has_runtime_config();
}
inline void UpdateRuntimeConfigRequest::clear_runtime_config() {
  if (GetArena() == nullptr && runtime_config_ != nullptr) {
    delete runtime_config_;
  }
  runtime_config_ = nullptr;
}
inline const ::runtime::v1alpha2::RuntimeConfig& UpdateRuntimeConfigRequest::_internal_runtime_config() const {
  const ::runtime::v1alpha2::RuntimeConfig* p = runtime_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::RuntimeConfig*>(
      &::runtime::v1alpha2::_RuntimeConfig_default_instance_);
}
inline const ::runtime::v1alpha2::RuntimeConfig& UpdateRuntimeConfigRequest::runtime_config() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.UpdateRuntimeConfigRequest.runtime_config)
  return _internal_runtime_config();
}
inline void UpdateRuntimeConfigRequest::unsafe_arena_set_allocated_runtime_config(
    ::runtime::v1alpha2::RuntimeConfig* runtime_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_config_);
  }
  runtime_config_ = runtime_config;
  if (runtime_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.UpdateRuntimeConfigRequest.runtime_config)
}
inline ::runtime::v1alpha2::RuntimeConfig* UpdateRuntimeConfigRequest::release_runtime_config() {
  auto temp = unsafe_arena_release_runtime_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::RuntimeConfig* UpdateRuntimeConfigRequest::unsafe_arena_release_runtime_config() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.UpdateRuntimeConfigRequest.runtime_config)
  
  ::runtime::v1alpha2::RuntimeConfig* temp = runtime_config_;
  runtime_config_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::RuntimeConfig* UpdateRuntimeConfigRequest::_internal_mutable_runtime_config() {
  
  if (runtime_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::RuntimeConfig>(GetArena());
    runtime_config_ = p;
  }
  return runtime_config_;
}
inline ::runtime::v1alpha2::RuntimeConfig* UpdateRuntimeConfigRequest::mutable_runtime_config() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.UpdateRuntimeConfigRequest.runtime_config)
  return _internal_mutable_runtime_config();
}
inline void UpdateRuntimeConfigRequest::set_allocated_runtime_config(::runtime::v1alpha2::RuntimeConfig* runtime_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete runtime_config_;
  }
  if (runtime_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(runtime_config);
    if (message_arena != submessage_arena) {
      runtime_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_config, submessage_arena);
    }
    
  } else {
    
  }
  runtime_config_ = runtime_config;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.UpdateRuntimeConfigRequest.runtime_config)
}

// -------------------------------------------------------------------

// UpdateRuntimeConfigResponse

// -------------------------------------------------------------------

// RuntimeCondition

// string type = 1;
inline void RuntimeCondition::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeCondition::type() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeCondition.type)
  return _internal_type();
}
inline void RuntimeCondition::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RuntimeCondition.type)
}
inline std::string* RuntimeCondition::mutable_type() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RuntimeCondition.type)
  return _internal_mutable_type();
}
inline const std::string& RuntimeCondition::_internal_type() const {
  return type_.Get();
}
inline void RuntimeCondition::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeCondition::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RuntimeCondition.type)
}
inline void RuntimeCondition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RuntimeCondition.type)
}
inline void RuntimeCondition::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RuntimeCondition.type)
}
inline std::string* RuntimeCondition::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeCondition::release_type() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RuntimeCondition.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeCondition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RuntimeCondition.type)
}
inline std::string* RuntimeCondition::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RuntimeCondition.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuntimeCondition::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RuntimeCondition.type)
}

// bool status = 2;
inline void RuntimeCondition::clear_status() {
  status_ = false;
}
inline bool RuntimeCondition::_internal_status() const {
  return status_;
}
inline bool RuntimeCondition::status() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeCondition.status)
  return _internal_status();
}
inline void RuntimeCondition::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RuntimeCondition::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RuntimeCondition.status)
}

// string reason = 3;
inline void RuntimeCondition::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeCondition::reason() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeCondition.reason)
  return _internal_reason();
}
inline void RuntimeCondition::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RuntimeCondition.reason)
}
inline std::string* RuntimeCondition::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RuntimeCondition.reason)
  return _internal_mutable_reason();
}
inline const std::string& RuntimeCondition::_internal_reason() const {
  return reason_.Get();
}
inline void RuntimeCondition::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeCondition::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RuntimeCondition.reason)
}
inline void RuntimeCondition::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RuntimeCondition.reason)
}
inline void RuntimeCondition::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RuntimeCondition.reason)
}
inline std::string* RuntimeCondition::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeCondition::release_reason() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RuntimeCondition.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeCondition::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RuntimeCondition.reason)
}
inline std::string* RuntimeCondition::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RuntimeCondition.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuntimeCondition::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RuntimeCondition.reason)
}

// string message = 4;
inline void RuntimeCondition::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeCondition::message() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeCondition.message)
  return _internal_message();
}
inline void RuntimeCondition::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.RuntimeCondition.message)
}
inline std::string* RuntimeCondition::mutable_message() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RuntimeCondition.message)
  return _internal_mutable_message();
}
inline const std::string& RuntimeCondition::_internal_message() const {
  return message_.Get();
}
inline void RuntimeCondition::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeCondition::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.RuntimeCondition.message)
}
inline void RuntimeCondition::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.RuntimeCondition.message)
}
inline void RuntimeCondition::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.RuntimeCondition.message)
}
inline std::string* RuntimeCondition::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeCondition::release_message() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.RuntimeCondition.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeCondition::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.RuntimeCondition.message)
}
inline std::string* RuntimeCondition::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.RuntimeCondition.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuntimeCondition::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.RuntimeCondition.message)
}

// -------------------------------------------------------------------

// RuntimeStatus

// repeated .runtime.v1alpha2.RuntimeCondition conditions = 1;
inline int RuntimeStatus::_internal_conditions_size() const {
  return conditions_.size();
}
inline int RuntimeStatus::conditions_size() const {
  return _internal_conditions_size();
}
inline void RuntimeStatus::clear_conditions() {
  conditions_.Clear();
}
inline ::runtime::v1alpha2::RuntimeCondition* RuntimeStatus::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.RuntimeStatus.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::RuntimeCondition >*
RuntimeStatus::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.RuntimeStatus.conditions)
  return &conditions_;
}
inline const ::runtime::v1alpha2::RuntimeCondition& RuntimeStatus::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::runtime::v1alpha2::RuntimeCondition& RuntimeStatus::conditions(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.RuntimeStatus.conditions)
  return _internal_conditions(index);
}
inline ::runtime::v1alpha2::RuntimeCondition* RuntimeStatus::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::runtime::v1alpha2::RuntimeCondition* RuntimeStatus::add_conditions() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.RuntimeStatus.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::RuntimeCondition >&
RuntimeStatus::conditions() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.RuntimeStatus.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// StatusRequest

// bool verbose = 1;
inline void StatusRequest::clear_verbose() {
  verbose_ = false;
}
inline bool StatusRequest::_internal_verbose() const {
  return verbose_;
}
inline bool StatusRequest::verbose() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StatusRequest.verbose)
  return _internal_verbose();
}
inline void StatusRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void StatusRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.StatusRequest.verbose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StatusResponse

// .runtime.v1alpha2.RuntimeStatus status = 1;
inline bool StatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StatusResponse::has_status() const {
  return _internal_has_status();
}
inline void StatusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::runtime::v1alpha2::RuntimeStatus& StatusResponse::_internal_status() const {
  const ::runtime::v1alpha2::RuntimeStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::RuntimeStatus*>(
      &::runtime::v1alpha2::_RuntimeStatus_default_instance_);
}
inline const ::runtime::v1alpha2::RuntimeStatus& StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.StatusResponse.status)
  return _internal_status();
}
inline void StatusResponse::unsafe_arena_set_allocated_status(
    ::runtime::v1alpha2::RuntimeStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.StatusResponse.status)
}
inline ::runtime::v1alpha2::RuntimeStatus* StatusResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::RuntimeStatus* StatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.StatusResponse.status)
  
  ::runtime::v1alpha2::RuntimeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::RuntimeStatus* StatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::RuntimeStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::runtime::v1alpha2::RuntimeStatus* StatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.StatusResponse.status)
  return _internal_mutable_status();
}
inline void StatusResponse::set_allocated_status(::runtime::v1alpha2::RuntimeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.StatusResponse.status)
}

// map<string, string> info = 2;
inline int StatusResponse::_internal_info_size() const {
  return info_.size();
}
inline int StatusResponse::info_size() const {
  return _internal_info_size();
}
inline void StatusResponse::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StatusResponse::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StatusResponse::info() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.StatusResponse.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StatusResponse::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StatusResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.StatusResponse.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// ImageFsInfoRequest

// -------------------------------------------------------------------

// UInt64Value

// uint64 value = 1;
inline void UInt64Value::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Value::value() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.UInt64Value.value)
  return _internal_value();
}
inline void UInt64Value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void UInt64Value::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.UInt64Value.value)
}

// -------------------------------------------------------------------

// FilesystemIdentifier

// string mountpoint = 1;
inline void FilesystemIdentifier::clear_mountpoint() {
  mountpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FilesystemIdentifier::mountpoint() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
  return _internal_mountpoint();
}
inline void FilesystemIdentifier::set_mountpoint(const std::string& value) {
  _internal_set_mountpoint(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}
inline std::string* FilesystemIdentifier::mutable_mountpoint() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
  return _internal_mutable_mountpoint();
}
inline const std::string& FilesystemIdentifier::_internal_mountpoint() const {
  return mountpoint_.Get();
}
inline void FilesystemIdentifier::_internal_set_mountpoint(const std::string& value) {
  
  mountpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FilesystemIdentifier::set_mountpoint(std::string&& value) {
  
  mountpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}
inline void FilesystemIdentifier::set_mountpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mountpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}
inline void FilesystemIdentifier::set_mountpoint(const char* value,
    size_t size) {
  
  mountpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}
inline std::string* FilesystemIdentifier::_internal_mutable_mountpoint() {
  
  return mountpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FilesystemIdentifier::release_mountpoint() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
  return mountpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilesystemIdentifier::set_allocated_mountpoint(std::string* mountpoint) {
  if (mountpoint != nullptr) {
    
  } else {
    
  }
  mountpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mountpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}
inline std::string* FilesystemIdentifier::unsafe_arena_release_mountpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mountpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FilesystemIdentifier::unsafe_arena_set_allocated_mountpoint(
    std::string* mountpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mountpoint != nullptr) {
    
  } else {
    
  }
  mountpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mountpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.FilesystemIdentifier.mountpoint)
}

// -------------------------------------------------------------------

// FilesystemUsage

// int64 timestamp = 1;
inline void FilesystemUsage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilesystemUsage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilesystemUsage::timestamp() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.FilesystemUsage.timestamp)
  return _internal_timestamp();
}
inline void FilesystemUsage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void FilesystemUsage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.FilesystemUsage.timestamp)
}

// .runtime.v1alpha2.FilesystemIdentifier fs_id = 2;
inline bool FilesystemUsage::_internal_has_fs_id() const {
  return this != internal_default_instance() && fs_id_ != nullptr;
}
inline bool FilesystemUsage::has_fs_id() const {
  return _internal_has_fs_id();
}
inline void FilesystemUsage::clear_fs_id() {
  if (GetArena() == nullptr && fs_id_ != nullptr) {
    delete fs_id_;
  }
  fs_id_ = nullptr;
}
inline const ::runtime::v1alpha2::FilesystemIdentifier& FilesystemUsage::_internal_fs_id() const {
  const ::runtime::v1alpha2::FilesystemIdentifier* p = fs_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::FilesystemIdentifier*>(
      &::runtime::v1alpha2::_FilesystemIdentifier_default_instance_);
}
inline const ::runtime::v1alpha2::FilesystemIdentifier& FilesystemUsage::fs_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.FilesystemUsage.fs_id)
  return _internal_fs_id();
}
inline void FilesystemUsage::unsafe_arena_set_allocated_fs_id(
    ::runtime::v1alpha2::FilesystemIdentifier* fs_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fs_id_);
  }
  fs_id_ = fs_id;
  if (fs_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.FilesystemUsage.fs_id)
}
inline ::runtime::v1alpha2::FilesystemIdentifier* FilesystemUsage::release_fs_id() {
  auto temp = unsafe_arena_release_fs_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::FilesystemIdentifier* FilesystemUsage::unsafe_arena_release_fs_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.FilesystemUsage.fs_id)
  
  ::runtime::v1alpha2::FilesystemIdentifier* temp = fs_id_;
  fs_id_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::FilesystemIdentifier* FilesystemUsage::_internal_mutable_fs_id() {
  
  if (fs_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::FilesystemIdentifier>(GetArena());
    fs_id_ = p;
  }
  return fs_id_;
}
inline ::runtime::v1alpha2::FilesystemIdentifier* FilesystemUsage::mutable_fs_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.FilesystemUsage.fs_id)
  return _internal_mutable_fs_id();
}
inline void FilesystemUsage::set_allocated_fs_id(::runtime::v1alpha2::FilesystemIdentifier* fs_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fs_id_;
  }
  if (fs_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fs_id);
    if (message_arena != submessage_arena) {
      fs_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fs_id, submessage_arena);
    }
    
  } else {
    
  }
  fs_id_ = fs_id;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.FilesystemUsage.fs_id)
}

// .runtime.v1alpha2.UInt64Value used_bytes = 3;
inline bool FilesystemUsage::_internal_has_used_bytes() const {
  return this != internal_default_instance() && used_bytes_ != nullptr;
}
inline bool FilesystemUsage::has_used_bytes() const {
  return _internal_has_used_bytes();
}
inline void FilesystemUsage::clear_used_bytes() {
  if (GetArena() == nullptr && used_bytes_ != nullptr) {
    delete used_bytes_;
  }
  used_bytes_ = nullptr;
}
inline const ::runtime::v1alpha2::UInt64Value& FilesystemUsage::_internal_used_bytes() const {
  const ::runtime::v1alpha2::UInt64Value* p = used_bytes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::UInt64Value*>(
      &::runtime::v1alpha2::_UInt64Value_default_instance_);
}
inline const ::runtime::v1alpha2::UInt64Value& FilesystemUsage::used_bytes() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.FilesystemUsage.used_bytes)
  return _internal_used_bytes();
}
inline void FilesystemUsage::unsafe_arena_set_allocated_used_bytes(
    ::runtime::v1alpha2::UInt64Value* used_bytes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(used_bytes_);
  }
  used_bytes_ = used_bytes;
  if (used_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.FilesystemUsage.used_bytes)
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::release_used_bytes() {
  auto temp = unsafe_arena_release_used_bytes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::unsafe_arena_release_used_bytes() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.FilesystemUsage.used_bytes)
  
  ::runtime::v1alpha2::UInt64Value* temp = used_bytes_;
  used_bytes_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::_internal_mutable_used_bytes() {
  
  if (used_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::UInt64Value>(GetArena());
    used_bytes_ = p;
  }
  return used_bytes_;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::mutable_used_bytes() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.FilesystemUsage.used_bytes)
  return _internal_mutable_used_bytes();
}
inline void FilesystemUsage::set_allocated_used_bytes(::runtime::v1alpha2::UInt64Value* used_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete used_bytes_;
  }
  if (used_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(used_bytes);
    if (message_arena != submessage_arena) {
      used_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, used_bytes, submessage_arena);
    }
    
  } else {
    
  }
  used_bytes_ = used_bytes;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.FilesystemUsage.used_bytes)
}

// .runtime.v1alpha2.UInt64Value inodes_used = 4;
inline bool FilesystemUsage::_internal_has_inodes_used() const {
  return this != internal_default_instance() && inodes_used_ != nullptr;
}
inline bool FilesystemUsage::has_inodes_used() const {
  return _internal_has_inodes_used();
}
inline void FilesystemUsage::clear_inodes_used() {
  if (GetArena() == nullptr && inodes_used_ != nullptr) {
    delete inodes_used_;
  }
  inodes_used_ = nullptr;
}
inline const ::runtime::v1alpha2::UInt64Value& FilesystemUsage::_internal_inodes_used() const {
  const ::runtime::v1alpha2::UInt64Value* p = inodes_used_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::UInt64Value*>(
      &::runtime::v1alpha2::_UInt64Value_default_instance_);
}
inline const ::runtime::v1alpha2::UInt64Value& FilesystemUsage::inodes_used() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.FilesystemUsage.inodes_used)
  return _internal_inodes_used();
}
inline void FilesystemUsage::unsafe_arena_set_allocated_inodes_used(
    ::runtime::v1alpha2::UInt64Value* inodes_used) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inodes_used_);
  }
  inodes_used_ = inodes_used;
  if (inodes_used) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.FilesystemUsage.inodes_used)
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::release_inodes_used() {
  auto temp = unsafe_arena_release_inodes_used();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::unsafe_arena_release_inodes_used() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.FilesystemUsage.inodes_used)
  
  ::runtime::v1alpha2::UInt64Value* temp = inodes_used_;
  inodes_used_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::_internal_mutable_inodes_used() {
  
  if (inodes_used_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::UInt64Value>(GetArena());
    inodes_used_ = p;
  }
  return inodes_used_;
}
inline ::runtime::v1alpha2::UInt64Value* FilesystemUsage::mutable_inodes_used() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.FilesystemUsage.inodes_used)
  return _internal_mutable_inodes_used();
}
inline void FilesystemUsage::set_allocated_inodes_used(::runtime::v1alpha2::UInt64Value* inodes_used) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inodes_used_;
  }
  if (inodes_used) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inodes_used);
    if (message_arena != submessage_arena) {
      inodes_used = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inodes_used, submessage_arena);
    }
    
  } else {
    
  }
  inodes_used_ = inodes_used;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.FilesystemUsage.inodes_used)
}

// -------------------------------------------------------------------

// ImageFsInfoResponse

// repeated .runtime.v1alpha2.FilesystemUsage image_filesystems = 1;
inline int ImageFsInfoResponse::_internal_image_filesystems_size() const {
  return image_filesystems_.size();
}
inline int ImageFsInfoResponse::image_filesystems_size() const {
  return _internal_image_filesystems_size();
}
inline void ImageFsInfoResponse::clear_image_filesystems() {
  image_filesystems_.Clear();
}
inline ::runtime::v1alpha2::FilesystemUsage* ImageFsInfoResponse::mutable_image_filesystems(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ImageFsInfoResponse.image_filesystems)
  return image_filesystems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::FilesystemUsage >*
ImageFsInfoResponse::mutable_image_filesystems() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ImageFsInfoResponse.image_filesystems)
  return &image_filesystems_;
}
inline const ::runtime::v1alpha2::FilesystemUsage& ImageFsInfoResponse::_internal_image_filesystems(int index) const {
  return image_filesystems_.Get(index);
}
inline const ::runtime::v1alpha2::FilesystemUsage& ImageFsInfoResponse::image_filesystems(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ImageFsInfoResponse.image_filesystems)
  return _internal_image_filesystems(index);
}
inline ::runtime::v1alpha2::FilesystemUsage* ImageFsInfoResponse::_internal_add_image_filesystems() {
  return image_filesystems_.Add();
}
inline ::runtime::v1alpha2::FilesystemUsage* ImageFsInfoResponse::add_image_filesystems() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ImageFsInfoResponse.image_filesystems)
  return _internal_add_image_filesystems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::FilesystemUsage >&
ImageFsInfoResponse::image_filesystems() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ImageFsInfoResponse.image_filesystems)
  return image_filesystems_;
}

// -------------------------------------------------------------------

// ContainerStatsRequest

// string container_id = 1;
inline void ContainerStatsRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatsRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatsRequest.container_id)
  return _internal_container_id();
}
inline void ContainerStatsRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatsRequest.container_id)
}
inline std::string* ContainerStatsRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatsRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ContainerStatsRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ContainerStatsRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatsRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatsRequest.container_id)
}
inline void ContainerStatsRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatsRequest.container_id)
}
inline void ContainerStatsRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatsRequest.container_id)
}
inline std::string* ContainerStatsRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatsRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatsRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatsRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatsRequest.container_id)
}
inline std::string* ContainerStatsRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatsRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatsRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatsRequest.container_id)
}

// -------------------------------------------------------------------

// ContainerStatsResponse

// .runtime.v1alpha2.ContainerStats stats = 1;
inline bool ContainerStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool ContainerStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline void ContainerStatsResponse::clear_stats() {
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerStats& ContainerStatsResponse::_internal_stats() const {
  const ::runtime::v1alpha2::ContainerStats* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerStats*>(
      &::runtime::v1alpha2::_ContainerStats_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerStats& ContainerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatsResponse.stats)
  return _internal_stats();
}
inline void ContainerStatsResponse::unsafe_arena_set_allocated_stats(
    ::runtime::v1alpha2::ContainerStats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatsResponse.stats)
}
inline ::runtime::v1alpha2::ContainerStats* ContainerStatsResponse::release_stats() {
  auto temp = unsafe_arena_release_stats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerStats* ContainerStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatsResponse.stats)
  
  ::runtime::v1alpha2::ContainerStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerStats* ContainerStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerStats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::runtime::v1alpha2::ContainerStats* ContainerStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatsResponse.stats)
  return _internal_mutable_stats();
}
inline void ContainerStatsResponse::set_allocated_stats(::runtime::v1alpha2::ContainerStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatsResponse.stats)
}

// -------------------------------------------------------------------

// ListContainerStatsRequest

// .runtime.v1alpha2.ContainerStatsFilter filter = 1;
inline bool ListContainerStatsRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ListContainerStatsRequest::has_filter() const {
  return _internal_has_filter();
}
inline void ListContainerStatsRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerStatsFilter& ListContainerStatsRequest::_internal_filter() const {
  const ::runtime::v1alpha2::ContainerStatsFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerStatsFilter*>(
      &::runtime::v1alpha2::_ContainerStatsFilter_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerStatsFilter& ListContainerStatsRequest::filter() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListContainerStatsRequest.filter)
  return _internal_filter();
}
inline void ListContainerStatsRequest::unsafe_arena_set_allocated_filter(
    ::runtime::v1alpha2::ContainerStatsFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ListContainerStatsRequest.filter)
}
inline ::runtime::v1alpha2::ContainerStatsFilter* ListContainerStatsRequest::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerStatsFilter* ListContainerStatsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ListContainerStatsRequest.filter)
  
  ::runtime::v1alpha2::ContainerStatsFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerStatsFilter* ListContainerStatsRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerStatsFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::runtime::v1alpha2::ContainerStatsFilter* ListContainerStatsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListContainerStatsRequest.filter)
  return _internal_mutable_filter();
}
inline void ListContainerStatsRequest::set_allocated_filter(::runtime::v1alpha2::ContainerStatsFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ListContainerStatsRequest.filter)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerStatsFilter

// string id = 1;
inline void ContainerStatsFilter::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatsFilter::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatsFilter.id)
  return _internal_id();
}
inline void ContainerStatsFilter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatsFilter.id)
}
inline std::string* ContainerStatsFilter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatsFilter.id)
  return _internal_mutable_id();
}
inline const std::string& ContainerStatsFilter::_internal_id() const {
  return id_.Get();
}
inline void ContainerStatsFilter::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatsFilter::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatsFilter.id)
}
inline void ContainerStatsFilter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatsFilter.id)
}
inline void ContainerStatsFilter::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatsFilter.id)
}
inline std::string* ContainerStatsFilter::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatsFilter::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatsFilter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatsFilter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatsFilter.id)
}
inline std::string* ContainerStatsFilter::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatsFilter.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatsFilter::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatsFilter.id)
}

// string pod_sandbox_id = 2;
inline void ContainerStatsFilter::clear_pod_sandbox_id() {
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerStatsFilter::pod_sandbox_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
  return _internal_pod_sandbox_id();
}
inline void ContainerStatsFilter::set_pod_sandbox_id(const std::string& value) {
  _internal_set_pod_sandbox_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}
inline std::string* ContainerStatsFilter::mutable_pod_sandbox_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
  return _internal_mutable_pod_sandbox_id();
}
inline const std::string& ContainerStatsFilter::_internal_pod_sandbox_id() const {
  return pod_sandbox_id_.Get();
}
inline void ContainerStatsFilter::_internal_set_pod_sandbox_id(const std::string& value) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerStatsFilter::set_pod_sandbox_id(std::string&& value) {
  
  pod_sandbox_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}
inline void ContainerStatsFilter::set_pod_sandbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}
inline void ContainerStatsFilter::set_pod_sandbox_id(const char* value,
    size_t size) {
  
  pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}
inline std::string* ContainerStatsFilter::_internal_mutable_pod_sandbox_id() {
  
  return pod_sandbox_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerStatsFilter::release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
  return pod_sandbox_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerStatsFilter::set_allocated_pod_sandbox_id(std::string* pod_sandbox_id) {
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_sandbox_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}
inline std::string* ContainerStatsFilter::unsafe_arena_release_pod_sandbox_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pod_sandbox_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerStatsFilter::unsafe_arena_set_allocated_pod_sandbox_id(
    std::string* pod_sandbox_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pod_sandbox_id != nullptr) {
    
  } else {
    
  }
  pod_sandbox_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pod_sandbox_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id)
}

// map<string, string> label_selector = 3;
inline int ContainerStatsFilter::_internal_label_selector_size() const {
  return label_selector_.size();
}
inline int ContainerStatsFilter::label_selector_size() const {
  return _internal_label_selector_size();
}
inline void ContainerStatsFilter::clear_label_selector() {
  label_selector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatsFilter::_internal_label_selector() const {
  return label_selector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerStatsFilter::label_selector() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerStatsFilter.label_selector)
  return _internal_label_selector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatsFilter::_internal_mutable_label_selector() {
  return label_selector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerStatsFilter::mutable_label_selector() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerStatsFilter.label_selector)
  return _internal_mutable_label_selector();
}

// -------------------------------------------------------------------

// ListContainerStatsResponse

// repeated .runtime.v1alpha2.ContainerStats stats = 1;
inline int ListContainerStatsResponse::_internal_stats_size() const {
  return stats_.size();
}
inline int ListContainerStatsResponse::stats_size() const {
  return _internal_stats_size();
}
inline void ListContainerStatsResponse::clear_stats() {
  stats_.Clear();
}
inline ::runtime::v1alpha2::ContainerStats* ListContainerStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ListContainerStatsResponse.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::ContainerStats >*
ListContainerStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:runtime.v1alpha2.ListContainerStatsResponse.stats)
  return &stats_;
}
inline const ::runtime::v1alpha2::ContainerStats& ListContainerStatsResponse::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::runtime::v1alpha2::ContainerStats& ListContainerStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ListContainerStatsResponse.stats)
  return _internal_stats(index);
}
inline ::runtime::v1alpha2::ContainerStats* ListContainerStatsResponse::_internal_add_stats() {
  return stats_.Add();
}
inline ::runtime::v1alpha2::ContainerStats* ListContainerStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:runtime.v1alpha2.ListContainerStatsResponse.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::runtime::v1alpha2::ContainerStats >&
ListContainerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:runtime.v1alpha2.ListContainerStatsResponse.stats)
  return stats_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ContainerAttributes

// string id = 1;
inline void ContainerAttributes::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerAttributes::id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerAttributes.id)
  return _internal_id();
}
inline void ContainerAttributes::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ContainerAttributes.id)
}
inline std::string* ContainerAttributes::mutable_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerAttributes.id)
  return _internal_mutable_id();
}
inline const std::string& ContainerAttributes::_internal_id() const {
  return id_.Get();
}
inline void ContainerAttributes::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerAttributes::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ContainerAttributes.id)
}
inline void ContainerAttributes::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ContainerAttributes.id)
}
inline void ContainerAttributes::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ContainerAttributes.id)
}
inline std::string* ContainerAttributes::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerAttributes::release_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerAttributes.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerAttributes::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerAttributes.id)
}
inline std::string* ContainerAttributes::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ContainerAttributes.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerAttributes::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerAttributes.id)
}

// .runtime.v1alpha2.ContainerMetadata metadata = 2;
inline bool ContainerAttributes::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ContainerAttributes::has_metadata() const {
  return _internal_has_metadata();
}
inline void ContainerAttributes::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerAttributes::_internal_metadata() const {
  const ::runtime::v1alpha2::ContainerMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerMetadata*>(
      &::runtime::v1alpha2::_ContainerMetadata_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerMetadata& ContainerAttributes::metadata() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerAttributes.metadata)
  return _internal_metadata();
}
inline void ContainerAttributes::unsafe_arena_set_allocated_metadata(
    ::runtime::v1alpha2::ContainerMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerAttributes.metadata)
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerAttributes::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerAttributes::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerAttributes.metadata)
  
  ::runtime::v1alpha2::ContainerMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerAttributes::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::runtime::v1alpha2::ContainerMetadata* ContainerAttributes::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerAttributes.metadata)
  return _internal_mutable_metadata();
}
inline void ContainerAttributes::set_allocated_metadata(::runtime::v1alpha2::ContainerMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerAttributes.metadata)
}

// map<string, string> labels = 3;
inline int ContainerAttributes::_internal_labels_size() const {
  return labels_.size();
}
inline int ContainerAttributes::labels_size() const {
  return _internal_labels_size();
}
inline void ContainerAttributes::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerAttributes::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerAttributes::labels() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerAttributes.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerAttributes::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerAttributes::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerAttributes.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 4;
inline int ContainerAttributes::_internal_annotations_size() const {
  return annotations_.size();
}
inline int ContainerAttributes::annotations_size() const {
  return _internal_annotations_size();
}
inline void ContainerAttributes::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerAttributes::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContainerAttributes::annotations() const {
  // @@protoc_insertion_point(field_map:runtime.v1alpha2.ContainerAttributes.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerAttributes::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContainerAttributes::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:runtime.v1alpha2.ContainerAttributes.annotations)
  return _internal_mutable_annotations();
}

// -------------------------------------------------------------------

// ContainerStats

// .runtime.v1alpha2.ContainerAttributes attributes = 1;
inline bool ContainerStats::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool ContainerStats::has_attributes() const {
  return _internal_has_attributes();
}
inline void ContainerStats::clear_attributes() {
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::runtime::v1alpha2::ContainerAttributes& ContainerStats::_internal_attributes() const {
  const ::runtime::v1alpha2::ContainerAttributes* p = attributes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::ContainerAttributes*>(
      &::runtime::v1alpha2::_ContainerAttributes_default_instance_);
}
inline const ::runtime::v1alpha2::ContainerAttributes& ContainerStats::attributes() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStats.attributes)
  return _internal_attributes();
}
inline void ContainerStats::unsafe_arena_set_allocated_attributes(
    ::runtime::v1alpha2::ContainerAttributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStats.attributes)
}
inline ::runtime::v1alpha2::ContainerAttributes* ContainerStats::release_attributes() {
  auto temp = unsafe_arena_release_attributes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::ContainerAttributes* ContainerStats::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStats.attributes)
  
  ::runtime::v1alpha2::ContainerAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::ContainerAttributes* ContainerStats::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::ContainerAttributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::runtime::v1alpha2::ContainerAttributes* ContainerStats::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStats.attributes)
  return _internal_mutable_attributes();
}
inline void ContainerStats::set_allocated_attributes(::runtime::v1alpha2::ContainerAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStats.attributes)
}

// .runtime.v1alpha2.CpuUsage cpu = 2;
inline bool ContainerStats::_internal_has_cpu() const {
  return this != internal_default_instance() && cpu_ != nullptr;
}
inline bool ContainerStats::has_cpu() const {
  return _internal_has_cpu();
}
inline void ContainerStats::clear_cpu() {
  if (GetArena() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
}
inline const ::runtime::v1alpha2::CpuUsage& ContainerStats::_internal_cpu() const {
  const ::runtime::v1alpha2::CpuUsage* p = cpu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::CpuUsage*>(
      &::runtime::v1alpha2::_CpuUsage_default_instance_);
}
inline const ::runtime::v1alpha2::CpuUsage& ContainerStats::cpu() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStats.cpu)
  return _internal_cpu();
}
inline void ContainerStats::unsafe_arena_set_allocated_cpu(
    ::runtime::v1alpha2::CpuUsage* cpu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_);
  }
  cpu_ = cpu;
  if (cpu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStats.cpu)
}
inline ::runtime::v1alpha2::CpuUsage* ContainerStats::release_cpu() {
  auto temp = unsafe_arena_release_cpu();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::CpuUsage* ContainerStats::unsafe_arena_release_cpu() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStats.cpu)
  
  ::runtime::v1alpha2::CpuUsage* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::CpuUsage* ContainerStats::_internal_mutable_cpu() {
  
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::CpuUsage>(GetArena());
    cpu_ = p;
  }
  return cpu_;
}
inline ::runtime::v1alpha2::CpuUsage* ContainerStats::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStats.cpu)
  return _internal_mutable_cpu();
}
inline void ContainerStats::set_allocated_cpu(::runtime::v1alpha2::CpuUsage* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpu);
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    
  } else {
    
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStats.cpu)
}

// .runtime.v1alpha2.MemoryUsage memory = 3;
inline bool ContainerStats::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool ContainerStats::has_memory() const {
  return _internal_has_memory();
}
inline void ContainerStats::clear_memory() {
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::runtime::v1alpha2::MemoryUsage& ContainerStats::_internal_memory() const {
  const ::runtime::v1alpha2::MemoryUsage* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::MemoryUsage*>(
      &::runtime::v1alpha2::_MemoryUsage_default_instance_);
}
inline const ::runtime::v1alpha2::MemoryUsage& ContainerStats::memory() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStats.memory)
  return _internal_memory();
}
inline void ContainerStats::unsafe_arena_set_allocated_memory(
    ::runtime::v1alpha2::MemoryUsage* memory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStats.memory)
}
inline ::runtime::v1alpha2::MemoryUsage* ContainerStats::release_memory() {
  auto temp = unsafe_arena_release_memory();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::MemoryUsage* ContainerStats::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStats.memory)
  
  ::runtime::v1alpha2::MemoryUsage* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::MemoryUsage* ContainerStats::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::MemoryUsage>(GetArena());
    memory_ = p;
  }
  return memory_;
}
inline ::runtime::v1alpha2::MemoryUsage* ContainerStats::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStats.memory)
  return _internal_mutable_memory();
}
inline void ContainerStats::set_allocated_memory(::runtime::v1alpha2::MemoryUsage* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStats.memory)
}

// .runtime.v1alpha2.FilesystemUsage writable_layer = 4;
inline bool ContainerStats::_internal_has_writable_layer() const {
  return this != internal_default_instance() && writable_layer_ != nullptr;
}
inline bool ContainerStats::has_writable_layer() const {
  return _internal_has_writable_layer();
}
inline void ContainerStats::clear_writable_layer() {
  if (GetArena() == nullptr && writable_layer_ != nullptr) {
    delete writable_layer_;
  }
  writable_layer_ = nullptr;
}
inline const ::runtime::v1alpha2::FilesystemUsage& ContainerStats::_internal_writable_layer() const {
  const ::runtime::v1alpha2::FilesystemUsage* p = writable_layer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::FilesystemUsage*>(
      &::runtime::v1alpha2::_FilesystemUsage_default_instance_);
}
inline const ::runtime::v1alpha2::FilesystemUsage& ContainerStats::writable_layer() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ContainerStats.writable_layer)
  return _internal_writable_layer();
}
inline void ContainerStats::unsafe_arena_set_allocated_writable_layer(
    ::runtime::v1alpha2::FilesystemUsage* writable_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(writable_layer_);
  }
  writable_layer_ = writable_layer;
  if (writable_layer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ContainerStats.writable_layer)
}
inline ::runtime::v1alpha2::FilesystemUsage* ContainerStats::release_writable_layer() {
  auto temp = unsafe_arena_release_writable_layer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::FilesystemUsage* ContainerStats::unsafe_arena_release_writable_layer() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ContainerStats.writable_layer)
  
  ::runtime::v1alpha2::FilesystemUsage* temp = writable_layer_;
  writable_layer_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::FilesystemUsage* ContainerStats::_internal_mutable_writable_layer() {
  
  if (writable_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::FilesystemUsage>(GetArena());
    writable_layer_ = p;
  }
  return writable_layer_;
}
inline ::runtime::v1alpha2::FilesystemUsage* ContainerStats::mutable_writable_layer() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ContainerStats.writable_layer)
  return _internal_mutable_writable_layer();
}
inline void ContainerStats::set_allocated_writable_layer(::runtime::v1alpha2::FilesystemUsage* writable_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete writable_layer_;
  }
  if (writable_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(writable_layer);
    if (message_arena != submessage_arena) {
      writable_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writable_layer, submessage_arena);
    }
    
  } else {
    
  }
  writable_layer_ = writable_layer;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ContainerStats.writable_layer)
}

// -------------------------------------------------------------------

// CpuUsage

// int64 timestamp = 1;
inline void CpuUsage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CpuUsage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CpuUsage::timestamp() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CpuUsage.timestamp)
  return _internal_timestamp();
}
inline void CpuUsage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void CpuUsage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.CpuUsage.timestamp)
}

// .runtime.v1alpha2.UInt64Value usage_core_nano_seconds = 2;
inline bool CpuUsage::_internal_has_usage_core_nano_seconds() const {
  return this != internal_default_instance() && usage_core_nano_seconds_ != nullptr;
}
inline bool CpuUsage::has_usage_core_nano_seconds() const {
  return _internal_has_usage_core_nano_seconds();
}
inline void CpuUsage::clear_usage_core_nano_seconds() {
  if (GetArena() == nullptr && usage_core_nano_seconds_ != nullptr) {
    delete usage_core_nano_seconds_;
  }
  usage_core_nano_seconds_ = nullptr;
}
inline const ::runtime::v1alpha2::UInt64Value& CpuUsage::_internal_usage_core_nano_seconds() const {
  const ::runtime::v1alpha2::UInt64Value* p = usage_core_nano_seconds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::UInt64Value*>(
      &::runtime::v1alpha2::_UInt64Value_default_instance_);
}
inline const ::runtime::v1alpha2::UInt64Value& CpuUsage::usage_core_nano_seconds() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.CpuUsage.usage_core_nano_seconds)
  return _internal_usage_core_nano_seconds();
}
inline void CpuUsage::unsafe_arena_set_allocated_usage_core_nano_seconds(
    ::runtime::v1alpha2::UInt64Value* usage_core_nano_seconds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usage_core_nano_seconds_);
  }
  usage_core_nano_seconds_ = usage_core_nano_seconds;
  if (usage_core_nano_seconds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.CpuUsage.usage_core_nano_seconds)
}
inline ::runtime::v1alpha2::UInt64Value* CpuUsage::release_usage_core_nano_seconds() {
  auto temp = unsafe_arena_release_usage_core_nano_seconds();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* CpuUsage::unsafe_arena_release_usage_core_nano_seconds() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.CpuUsage.usage_core_nano_seconds)
  
  ::runtime::v1alpha2::UInt64Value* temp = usage_core_nano_seconds_;
  usage_core_nano_seconds_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* CpuUsage::_internal_mutable_usage_core_nano_seconds() {
  
  if (usage_core_nano_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::UInt64Value>(GetArena());
    usage_core_nano_seconds_ = p;
  }
  return usage_core_nano_seconds_;
}
inline ::runtime::v1alpha2::UInt64Value* CpuUsage::mutable_usage_core_nano_seconds() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.CpuUsage.usage_core_nano_seconds)
  return _internal_mutable_usage_core_nano_seconds();
}
inline void CpuUsage::set_allocated_usage_core_nano_seconds(::runtime::v1alpha2::UInt64Value* usage_core_nano_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete usage_core_nano_seconds_;
  }
  if (usage_core_nano_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(usage_core_nano_seconds);
    if (message_arena != submessage_arena) {
      usage_core_nano_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usage_core_nano_seconds, submessage_arena);
    }
    
  } else {
    
  }
  usage_core_nano_seconds_ = usage_core_nano_seconds;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.CpuUsage.usage_core_nano_seconds)
}

// -------------------------------------------------------------------

// MemoryUsage

// int64 timestamp = 1;
inline void MemoryUsage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryUsage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryUsage::timestamp() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.MemoryUsage.timestamp)
  return _internal_timestamp();
}
inline void MemoryUsage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void MemoryUsage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.MemoryUsage.timestamp)
}

// .runtime.v1alpha2.UInt64Value working_set_bytes = 2;
inline bool MemoryUsage::_internal_has_working_set_bytes() const {
  return this != internal_default_instance() && working_set_bytes_ != nullptr;
}
inline bool MemoryUsage::has_working_set_bytes() const {
  return _internal_has_working_set_bytes();
}
inline void MemoryUsage::clear_working_set_bytes() {
  if (GetArena() == nullptr && working_set_bytes_ != nullptr) {
    delete working_set_bytes_;
  }
  working_set_bytes_ = nullptr;
}
inline const ::runtime::v1alpha2::UInt64Value& MemoryUsage::_internal_working_set_bytes() const {
  const ::runtime::v1alpha2::UInt64Value* p = working_set_bytes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::runtime::v1alpha2::UInt64Value*>(
      &::runtime::v1alpha2::_UInt64Value_default_instance_);
}
inline const ::runtime::v1alpha2::UInt64Value& MemoryUsage::working_set_bytes() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.MemoryUsage.working_set_bytes)
  return _internal_working_set_bytes();
}
inline void MemoryUsage::unsafe_arena_set_allocated_working_set_bytes(
    ::runtime::v1alpha2::UInt64Value* working_set_bytes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(working_set_bytes_);
  }
  working_set_bytes_ = working_set_bytes;
  if (working_set_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.MemoryUsage.working_set_bytes)
}
inline ::runtime::v1alpha2::UInt64Value* MemoryUsage::release_working_set_bytes() {
  auto temp = unsafe_arena_release_working_set_bytes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* MemoryUsage::unsafe_arena_release_working_set_bytes() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.MemoryUsage.working_set_bytes)
  
  ::runtime::v1alpha2::UInt64Value* temp = working_set_bytes_;
  working_set_bytes_ = nullptr;
  return temp;
}
inline ::runtime::v1alpha2::UInt64Value* MemoryUsage::_internal_mutable_working_set_bytes() {
  
  if (working_set_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::runtime::v1alpha2::UInt64Value>(GetArena());
    working_set_bytes_ = p;
  }
  return working_set_bytes_;
}
inline ::runtime::v1alpha2::UInt64Value* MemoryUsage::mutable_working_set_bytes() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.MemoryUsage.working_set_bytes)
  return _internal_mutable_working_set_bytes();
}
inline void MemoryUsage::set_allocated_working_set_bytes(::runtime::v1alpha2::UInt64Value* working_set_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete working_set_bytes_;
  }
  if (working_set_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(working_set_bytes);
    if (message_arena != submessage_arena) {
      working_set_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, working_set_bytes, submessage_arena);
    }
    
  } else {
    
  }
  working_set_bytes_ = working_set_bytes;
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.MemoryUsage.working_set_bytes)
}

// -------------------------------------------------------------------

// ReopenContainerLogRequest

// string container_id = 1;
inline void ReopenContainerLogRequest::clear_container_id() {
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReopenContainerLogRequest::container_id() const {
  // @@protoc_insertion_point(field_get:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
  return _internal_container_id();
}
inline void ReopenContainerLogRequest::set_container_id(const std::string& value) {
  _internal_set_container_id(value);
  // @@protoc_insertion_point(field_set:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}
inline std::string* ReopenContainerLogRequest::mutable_container_id() {
  // @@protoc_insertion_point(field_mutable:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
  return _internal_mutable_container_id();
}
inline const std::string& ReopenContainerLogRequest::_internal_container_id() const {
  return container_id_.Get();
}
inline void ReopenContainerLogRequest::_internal_set_container_id(const std::string& value) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReopenContainerLogRequest::set_container_id(std::string&& value) {
  
  container_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}
inline void ReopenContainerLogRequest::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}
inline void ReopenContainerLogRequest::set_container_id(const char* value,
    size_t size) {
  
  container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}
inline std::string* ReopenContainerLogRequest::_internal_mutable_container_id() {
  
  return container_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReopenContainerLogRequest::release_container_id() {
  // @@protoc_insertion_point(field_release:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
  return container_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReopenContainerLogRequest::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}
inline std::string* ReopenContainerLogRequest::unsafe_arena_release_container_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return container_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReopenContainerLogRequest::unsafe_arena_set_allocated_container_id(
    std::string* container_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (container_id != nullptr) {
    
  } else {
    
  }
  container_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      container_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:runtime.v1alpha2.ReopenContainerLogRequest.container_id)
}

// -------------------------------------------------------------------

// ReopenContainerLogResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha2
}  // namespace runtime

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::runtime::v1alpha2::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::runtime::v1alpha2::Protocol>() {
  return ::runtime::v1alpha2::Protocol_descriptor();
}
template <> struct is_proto_enum< ::runtime::v1alpha2::MountPropagation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::runtime::v1alpha2::MountPropagation>() {
  return ::runtime::v1alpha2::MountPropagation_descriptor();
}
template <> struct is_proto_enum< ::runtime::v1alpha2::NamespaceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::runtime::v1alpha2::NamespaceMode>() {
  return ::runtime::v1alpha2::NamespaceMode_descriptor();
}
template <> struct is_proto_enum< ::runtime::v1alpha2::PodSandboxState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::runtime::v1alpha2::PodSandboxState>() {
  return ::runtime::v1alpha2::PodSandboxState_descriptor();
}
template <> struct is_proto_enum< ::runtime::v1alpha2::ContainerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::runtime::v1alpha2::ContainerState>() {
  return ::runtime::v1alpha2::ContainerState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
