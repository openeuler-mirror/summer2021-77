// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capability_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Container_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContainerAttributes_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ContainerConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerMetadata_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStateValue_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ContainerStats_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerStatsFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ContainerStatus_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CpuUsage_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilesystemIdentifier_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FilesystemUsage_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HugepageLimit_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSpec_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinuxContainerConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinuxContainerResources_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LinuxContainerSecurityContext_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinuxPodSandboxConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinuxPodSandboxStatus_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LinuxSandboxSecurityContext_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryUsage_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mount_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Namespace_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamespaceOption_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodIP_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PodSandbox_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PodSandboxConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PodSandboxFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxMetadata_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PodSandboxNetworkStatus_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStateValue_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PodSandboxStatus_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortMapping_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuntimeCondition_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeStatus_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SELinuxOption_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Value_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WindowsContainerConfig_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowsContainerResources_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowsContainerSecurityContext_api_2eproto;
namespace runtime {
namespace v1alpha2 {
class VersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionRequest> _instance;
} _VersionRequest_default_instance_;
class VersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionResponse> _instance;
} _VersionResponse_default_instance_;
class DNSConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSConfig> _instance;
} _DNSConfig_default_instance_;
class PortMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortMapping> _instance;
} _PortMapping_default_instance_;
class MountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mount> _instance;
} _Mount_default_instance_;
class NamespaceOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamespaceOption> _instance;
} _NamespaceOption_default_instance_;
class Int64ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int64Value> _instance;
} _Int64Value_default_instance_;
class LinuxSandboxSecurityContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxSandboxSecurityContext> _instance;
} _LinuxSandboxSecurityContext_default_instance_;
class LinuxPodSandboxConfig_SysctlsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxPodSandboxConfig_SysctlsEntry_DoNotUse> _instance;
} _LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_default_instance_;
class LinuxPodSandboxConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxPodSandboxConfig> _instance;
} _LinuxPodSandboxConfig_default_instance_;
class PodSandboxMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxMetadata> _instance;
} _PodSandboxMetadata_default_instance_;
class PodSandboxConfig_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxConfig_LabelsEntry_DoNotUse> _instance;
} _PodSandboxConfig_LabelsEntry_DoNotUse_default_instance_;
class PodSandboxConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxConfig_AnnotationsEntry_DoNotUse> _instance;
} _PodSandboxConfig_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandboxConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxConfig> _instance;
} _PodSandboxConfig_default_instance_;
class RunPodSandboxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunPodSandboxRequest> _instance;
} _RunPodSandboxRequest_default_instance_;
class RunPodSandboxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunPodSandboxResponse> _instance;
} _RunPodSandboxResponse_default_instance_;
class StopPodSandboxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPodSandboxRequest> _instance;
} _StopPodSandboxRequest_default_instance_;
class StopPodSandboxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPodSandboxResponse> _instance;
} _StopPodSandboxResponse_default_instance_;
class RemovePodSandboxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePodSandboxRequest> _instance;
} _RemovePodSandboxRequest_default_instance_;
class RemovePodSandboxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePodSandboxResponse> _instance;
} _RemovePodSandboxResponse_default_instance_;
class PodSandboxStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatusRequest> _instance;
} _PodSandboxStatusRequest_default_instance_;
class PodIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodIP> _instance;
} _PodIP_default_instance_;
class PodSandboxNetworkStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxNetworkStatus> _instance;
} _PodSandboxNetworkStatus_default_instance_;
class NamespaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Namespace> _instance;
} _Namespace_default_instance_;
class LinuxPodSandboxStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxPodSandboxStatus> _instance;
} _LinuxPodSandboxStatus_default_instance_;
class PodSandboxStatus_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatus_LabelsEntry_DoNotUse> _instance;
} _PodSandboxStatus_LabelsEntry_DoNotUse_default_instance_;
class PodSandboxStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatus_AnnotationsEntry_DoNotUse> _instance;
} _PodSandboxStatus_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandboxStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatus> _instance;
} _PodSandboxStatus_default_instance_;
class PodSandboxStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatusResponse_InfoEntry_DoNotUse> _instance;
} _PodSandboxStatusResponse_InfoEntry_DoNotUse_default_instance_;
class PodSandboxStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStatusResponse> _instance;
} _PodSandboxStatusResponse_default_instance_;
class PodSandboxStateValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxStateValue> _instance;
} _PodSandboxStateValue_default_instance_;
class PodSandboxFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxFilter_LabelSelectorEntry_DoNotUse> _instance;
} _PodSandboxFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class PodSandboxFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandboxFilter> _instance;
} _PodSandboxFilter_default_instance_;
class ListPodSandboxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPodSandboxRequest> _instance;
} _ListPodSandboxRequest_default_instance_;
class PodSandbox_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandbox_LabelsEntry_DoNotUse> _instance;
} _PodSandbox_LabelsEntry_DoNotUse_default_instance_;
class PodSandbox_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandbox_AnnotationsEntry_DoNotUse> _instance;
} _PodSandbox_AnnotationsEntry_DoNotUse_default_instance_;
class PodSandboxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PodSandbox> _instance;
} _PodSandbox_default_instance_;
class ListPodSandboxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPodSandboxResponse> _instance;
} _ListPodSandboxResponse_default_instance_;
class ImageSpec_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSpec_AnnotationsEntry_DoNotUse> _instance;
} _ImageSpec_AnnotationsEntry_DoNotUse_default_instance_;
class ImageSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSpec> _instance;
} _ImageSpec_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class LinuxContainerResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxContainerResources> _instance;
} _LinuxContainerResources_default_instance_;
class HugepageLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HugepageLimit> _instance;
} _HugepageLimit_default_instance_;
class SELinuxOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SELinuxOption> _instance;
} _SELinuxOption_default_instance_;
class CapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capability> _instance;
} _Capability_default_instance_;
class LinuxContainerSecurityContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxContainerSecurityContext> _instance;
} _LinuxContainerSecurityContext_default_instance_;
class LinuxContainerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinuxContainerConfig> _instance;
} _LinuxContainerConfig_default_instance_;
class WindowsContainerSecurityContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowsContainerSecurityContext> _instance;
} _WindowsContainerSecurityContext_default_instance_;
class WindowsContainerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowsContainerConfig> _instance;
} _WindowsContainerConfig_default_instance_;
class WindowsContainerResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowsContainerResources> _instance;
} _WindowsContainerResources_default_instance_;
class ContainerMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerMetadata> _instance;
} _ContainerMetadata_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class ContainerConfig_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig_LabelsEntry_DoNotUse> _instance;
} _ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
class ContainerConfig_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig_AnnotationsEntry_DoNotUse> _instance;
} _ContainerConfig_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerConfig> _instance;
} _ContainerConfig_default_instance_;
class CreateContainerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateContainerRequest> _instance;
} _CreateContainerRequest_default_instance_;
class CreateContainerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateContainerResponse> _instance;
} _CreateContainerResponse_default_instance_;
class StartContainerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartContainerRequest> _instance;
} _StartContainerRequest_default_instance_;
class StartContainerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartContainerResponse> _instance;
} _StartContainerResponse_default_instance_;
class StopContainerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopContainerRequest> _instance;
} _StopContainerRequest_default_instance_;
class StopContainerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopContainerResponse> _instance;
} _StopContainerResponse_default_instance_;
class RemoveContainerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveContainerRequest> _instance;
} _RemoveContainerRequest_default_instance_;
class RemoveContainerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveContainerResponse> _instance;
} _RemoveContainerResponse_default_instance_;
class ContainerStateValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStateValue> _instance;
} _ContainerStateValue_default_instance_;
class ContainerFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerFilter_LabelSelectorEntry_DoNotUse> _instance;
} _ContainerFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class ContainerFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerFilter> _instance;
} _ContainerFilter_default_instance_;
class ListContainersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListContainersRequest> _instance;
} _ListContainersRequest_default_instance_;
class Container_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Container_LabelsEntry_DoNotUse> _instance;
} _Container_LabelsEntry_DoNotUse_default_instance_;
class Container_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Container_AnnotationsEntry_DoNotUse> _instance;
} _Container_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Container> _instance;
} _Container_default_instance_;
class ListContainersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListContainersResponse> _instance;
} _ListContainersResponse_default_instance_;
class ContainerStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatusRequest> _instance;
} _ContainerStatusRequest_default_instance_;
class ContainerStatus_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatus_LabelsEntry_DoNotUse> _instance;
} _ContainerStatus_LabelsEntry_DoNotUse_default_instance_;
class ContainerStatus_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatus_AnnotationsEntry_DoNotUse> _instance;
} _ContainerStatus_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatus> _instance;
} _ContainerStatus_default_instance_;
class ContainerStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatusResponse_InfoEntry_DoNotUse> _instance;
} _ContainerStatusResponse_InfoEntry_DoNotUse_default_instance_;
class ContainerStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatusResponse> _instance;
} _ContainerStatusResponse_default_instance_;
class UpdateContainerResourcesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateContainerResourcesRequest> _instance;
} _UpdateContainerResourcesRequest_default_instance_;
class UpdateContainerResourcesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateContainerResourcesResponse> _instance;
} _UpdateContainerResourcesResponse_default_instance_;
class ExecSyncRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecSyncRequest> _instance;
} _ExecSyncRequest_default_instance_;
class ExecSyncResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecSyncResponse> _instance;
} _ExecSyncResponse_default_instance_;
class ExecRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecRequest> _instance;
} _ExecRequest_default_instance_;
class ExecResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecResponse> _instance;
} _ExecResponse_default_instance_;
class AttachRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttachRequest> _instance;
} _AttachRequest_default_instance_;
class AttachResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttachResponse> _instance;
} _AttachResponse_default_instance_;
class PortForwardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortForwardRequest> _instance;
} _PortForwardRequest_default_instance_;
class PortForwardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortForwardResponse> _instance;
} _PortForwardResponse_default_instance_;
class ImageFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFilter> _instance;
} _ImageFilter_default_instance_;
class ListImagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImagesRequest> _instance;
} _ListImagesRequest_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ListImagesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImagesResponse> _instance;
} _ListImagesResponse_default_instance_;
class ImageStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageStatusRequest> _instance;
} _ImageStatusRequest_default_instance_;
class ImageStatusResponse_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageStatusResponse_InfoEntry_DoNotUse> _instance;
} _ImageStatusResponse_InfoEntry_DoNotUse_default_instance_;
class ImageStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageStatusResponse> _instance;
} _ImageStatusResponse_default_instance_;
class AuthConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthConfig> _instance;
} _AuthConfig_default_instance_;
class PullImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullImageRequest> _instance;
} _PullImageRequest_default_instance_;
class PullImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullImageResponse> _instance;
} _PullImageResponse_default_instance_;
class RemoveImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveImageRequest> _instance;
} _RemoveImageRequest_default_instance_;
class RemoveImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveImageResponse> _instance;
} _RemoveImageResponse_default_instance_;
class NetworkConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkConfig> _instance;
} _NetworkConfig_default_instance_;
class RuntimeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeConfig> _instance;
} _RuntimeConfig_default_instance_;
class UpdateRuntimeConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRuntimeConfigRequest> _instance;
} _UpdateRuntimeConfigRequest_default_instance_;
class UpdateRuntimeConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRuntimeConfigResponse> _instance;
} _UpdateRuntimeConfigResponse_default_instance_;
class RuntimeConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeCondition> _instance;
} _RuntimeCondition_default_instance_;
class RuntimeStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeStatus> _instance;
} _RuntimeStatus_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusResponse_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse_InfoEntry_DoNotUse> _instance;
} _StatusResponse_InfoEntry_DoNotUse_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class ImageFsInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFsInfoRequest> _instance;
} _ImageFsInfoRequest_default_instance_;
class UInt64ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UInt64Value> _instance;
} _UInt64Value_default_instance_;
class FilesystemIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilesystemIdentifier> _instance;
} _FilesystemIdentifier_default_instance_;
class FilesystemUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilesystemUsage> _instance;
} _FilesystemUsage_default_instance_;
class ImageFsInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFsInfoResponse> _instance;
} _ImageFsInfoResponse_default_instance_;
class ContainerStatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatsRequest> _instance;
} _ContainerStatsRequest_default_instance_;
class ContainerStatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatsResponse> _instance;
} _ContainerStatsResponse_default_instance_;
class ListContainerStatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListContainerStatsRequest> _instance;
} _ListContainerStatsRequest_default_instance_;
class ContainerStatsFilter_LabelSelectorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatsFilter_LabelSelectorEntry_DoNotUse> _instance;
} _ContainerStatsFilter_LabelSelectorEntry_DoNotUse_default_instance_;
class ContainerStatsFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStatsFilter> _instance;
} _ContainerStatsFilter_default_instance_;
class ListContainerStatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListContainerStatsResponse> _instance;
} _ListContainerStatsResponse_default_instance_;
class ContainerAttributes_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerAttributes_LabelsEntry_DoNotUse> _instance;
} _ContainerAttributes_LabelsEntry_DoNotUse_default_instance_;
class ContainerAttributes_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerAttributes_AnnotationsEntry_DoNotUse> _instance;
} _ContainerAttributes_AnnotationsEntry_DoNotUse_default_instance_;
class ContainerAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerAttributes> _instance;
} _ContainerAttributes_default_instance_;
class ContainerStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerStats> _instance;
} _ContainerStats_default_instance_;
class CpuUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUsage> _instance;
} _CpuUsage_default_instance_;
class MemoryUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryUsage> _instance;
} _MemoryUsage_default_instance_;
class ReopenContainerLogRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReopenContainerLogRequest> _instance;
} _ReopenContainerLogRequest_default_instance_;
class ReopenContainerLogResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReopenContainerLogResponse> _instance;
} _ReopenContainerLogResponse_default_instance_;
}  // namespace v1alpha2
}  // namespace runtime
static void InitDefaultsscc_info_AttachRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_AttachRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::AttachRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::AttachRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttachRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttachRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_AttachResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_AttachResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::AttachResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::AttachResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttachResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttachResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_AuthConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_AuthConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::AuthConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::AuthConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthConfig_api_2eproto}, {}};

static void InitDefaultsscc_info_Capability_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Capability_default_instance_;
    new (ptr) ::runtime::v1alpha2::Capability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Capability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capability_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Capability_api_2eproto}, {}};

static void InitDefaultsscc_info_Container_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Container_default_instance_;
    new (ptr) ::runtime::v1alpha2::Container();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Container::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Container_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Container_api_2eproto}, {
      &scc_info_ContainerMetadata_api_2eproto.base,
      &scc_info_ImageSpec_api_2eproto.base,
      &scc_info_Container_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Container_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_Container_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Container_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Container_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Container_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerAttributes_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerAttributes_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContainerAttributes_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContainerAttributes_api_2eproto}, {
      &scc_info_ContainerMetadata_api_2eproto.base,
      &scc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerAttributes_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerAttributes_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ContainerConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ContainerConfig_api_2eproto}, {
      &scc_info_ContainerMetadata_api_2eproto.base,
      &scc_info_ImageSpec_api_2eproto.base,
      &scc_info_KeyValue_api_2eproto.base,
      &scc_info_Mount_api_2eproto.base,
      &scc_info_Device_api_2eproto.base,
      &scc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto.base,
      &scc_info_LinuxContainerConfig_api_2eproto.base,
      &scc_info_WindowsContainerConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerConfig_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerConfig_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerFilter_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerFilter_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerFilter_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContainerFilter_api_2eproto}, {
      &scc_info_ContainerStateValue_api_2eproto.base,
      &scc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerFilter_LabelSelectorEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerMetadata_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerMetadata_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerMetadata_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerMetadata_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStateValue_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStateValue_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStateValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStateValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStateValue_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStateValue_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStats_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStats_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ContainerStats_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ContainerStats_api_2eproto}, {
      &scc_info_ContainerAttributes_api_2eproto.base,
      &scc_info_CpuUsage_api_2eproto.base,
      &scc_info_MemoryUsage_api_2eproto.base,
      &scc_info_FilesystemUsage_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerStatsFilter_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatsFilter_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatsFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatsFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerStatsFilter_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContainerStatsFilter_api_2eproto}, {
      &scc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStatsRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatsRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatsRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatsRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStatsResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatsResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerStatsResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContainerStatsResponse_api_2eproto}, {
      &scc_info_ContainerStats_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerStatus_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatus_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ContainerStatus_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ContainerStatus_api_2eproto}, {
      &scc_info_ContainerMetadata_api_2eproto.base,
      &scc_info_ImageSpec_api_2eproto.base,
      &scc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto.base,
      &scc_info_Mount_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatus_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatus_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStatusRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatusRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatusRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatusRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ContainerStatusResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatusResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ContainerStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerStatusResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContainerStatusResponse_api_2eproto}, {
      &scc_info_ContainerStatus_api_2eproto.base,
      &scc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ContainerStatusResponse_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_CpuUsage_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_CpuUsage_default_instance_;
    new (ptr) ::runtime::v1alpha2::CpuUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::CpuUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CpuUsage_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CpuUsage_api_2eproto}, {
      &scc_info_UInt64Value_api_2eproto.base,}};

static void InitDefaultsscc_info_CreateContainerRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_CreateContainerRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::CreateContainerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::CreateContainerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateContainerRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateContainerRequest_api_2eproto}, {
      &scc_info_ContainerConfig_api_2eproto.base,
      &scc_info_PodSandboxConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_CreateContainerResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_CreateContainerResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::CreateContainerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::CreateContainerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateContainerResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateContainerResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_DNSConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_DNSConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::DNSConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::DNSConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DNSConfig_api_2eproto}, {}};

static void InitDefaultsscc_info_Device_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Device_default_instance_;
    new (ptr) ::runtime::v1alpha2::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_api_2eproto}, {}};

static void InitDefaultsscc_info_ExecRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ExecRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ExecRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ExecRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ExecResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ExecResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ExecResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ExecResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_ExecSyncRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ExecSyncRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ExecSyncRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ExecSyncRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecSyncRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecSyncRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ExecSyncResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ExecSyncResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ExecSyncResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ExecSyncResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecSyncResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecSyncResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_FilesystemIdentifier_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_FilesystemIdentifier_default_instance_;
    new (ptr) ::runtime::v1alpha2::FilesystemIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::FilesystemIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilesystemIdentifier_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilesystemIdentifier_api_2eproto}, {}};

static void InitDefaultsscc_info_FilesystemUsage_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_FilesystemUsage_default_instance_;
    new (ptr) ::runtime::v1alpha2::FilesystemUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::FilesystemUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FilesystemUsage_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FilesystemUsage_api_2eproto}, {
      &scc_info_FilesystemIdentifier_api_2eproto.base,
      &scc_info_UInt64Value_api_2eproto.base,}};

static void InitDefaultsscc_info_HugepageLimit_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_HugepageLimit_default_instance_;
    new (ptr) ::runtime::v1alpha2::HugepageLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::HugepageLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HugepageLimit_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HugepageLimit_api_2eproto}, {}};

static void InitDefaultsscc_info_Image_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Image_default_instance_;
    new (ptr) ::runtime::v1alpha2::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Image_api_2eproto}, {
      &scc_info_Int64Value_api_2eproto.base,
      &scc_info_ImageSpec_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageFilter_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageFilter_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFilter_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFilter_api_2eproto}, {
      &scc_info_ImageSpec_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageFsInfoRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageFsInfoRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageFsInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageFsInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageFsInfoRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageFsInfoRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ImageFsInfoResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageFsInfoResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageFsInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageFsInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFsInfoResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFsInfoResponse_api_2eproto}, {
      &scc_info_FilesystemUsage_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageSpec_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageSpec_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSpec_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageSpec_api_2eproto}, {
      &scc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageSpec_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_ImageStatusRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageStatusRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageStatusRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageStatusRequest_api_2eproto}, {
      &scc_info_ImageSpec_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageStatusResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageStatusResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ImageStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageStatusResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImageStatusResponse_api_2eproto}, {
      &scc_info_Image_api_2eproto.base,
      &scc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ImageStatusResponse_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse();
  }
  ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_Int64Value_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Int64Value_default_instance_;
    new (ptr) ::runtime::v1alpha2::Int64Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Int64Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int64Value_api_2eproto}, {}};

static void InitDefaultsscc_info_KeyValue_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_KeyValue_default_instance_;
    new (ptr) ::runtime::v1alpha2::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::KeyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValue_api_2eproto}, {}};

static void InitDefaultsscc_info_LinuxContainerConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxContainerConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxContainerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxContainerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinuxContainerConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinuxContainerConfig_api_2eproto}, {
      &scc_info_LinuxContainerResources_api_2eproto.base,
      &scc_info_LinuxContainerSecurityContext_api_2eproto.base,}};

static void InitDefaultsscc_info_LinuxContainerResources_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxContainerResources_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxContainerResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxContainerResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinuxContainerResources_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LinuxContainerResources_api_2eproto}, {
      &scc_info_HugepageLimit_api_2eproto.base,}};

static void InitDefaultsscc_info_LinuxContainerSecurityContext_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxContainerSecurityContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxContainerSecurityContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LinuxContainerSecurityContext_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LinuxContainerSecurityContext_api_2eproto}, {
      &scc_info_Capability_api_2eproto.base,
      &scc_info_NamespaceOption_api_2eproto.base,
      &scc_info_SELinuxOption_api_2eproto.base,
      &scc_info_Int64Value_api_2eproto.base,}};

static void InitDefaultsscc_info_LinuxPodSandboxConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxPodSandboxConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxPodSandboxConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxPodSandboxConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinuxPodSandboxConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinuxPodSandboxConfig_api_2eproto}, {
      &scc_info_LinuxSandboxSecurityContext_api_2eproto.base,
      &scc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_LinuxPodSandboxStatus_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxPodSandboxStatus_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxPodSandboxStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxPodSandboxStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinuxPodSandboxStatus_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LinuxPodSandboxStatus_api_2eproto}, {
      &scc_info_Namespace_api_2eproto.base,}};

static void InitDefaultsscc_info_LinuxSandboxSecurityContext_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_;
    new (ptr) ::runtime::v1alpha2::LinuxSandboxSecurityContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::LinuxSandboxSecurityContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LinuxSandboxSecurityContext_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LinuxSandboxSecurityContext_api_2eproto}, {
      &scc_info_NamespaceOption_api_2eproto.base,
      &scc_info_SELinuxOption_api_2eproto.base,
      &scc_info_Int64Value_api_2eproto.base,}};

static void InitDefaultsscc_info_ListContainerStatsRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListContainerStatsRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListContainerStatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListContainerStatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListContainerStatsRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListContainerStatsRequest_api_2eproto}, {
      &scc_info_ContainerStatsFilter_api_2eproto.base,}};

static void InitDefaultsscc_info_ListContainerStatsResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListContainerStatsResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListContainerStatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListContainerStatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListContainerStatsResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListContainerStatsResponse_api_2eproto}, {
      &scc_info_ContainerStats_api_2eproto.base,}};

static void InitDefaultsscc_info_ListContainersRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListContainersRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListContainersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListContainersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListContainersRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListContainersRequest_api_2eproto}, {
      &scc_info_ContainerFilter_api_2eproto.base,}};

static void InitDefaultsscc_info_ListContainersResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListContainersResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListContainersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListContainersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListContainersResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListContainersResponse_api_2eproto}, {
      &scc_info_Container_api_2eproto.base,}};

static void InitDefaultsscc_info_ListImagesRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListImagesRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListImagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListImagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListImagesRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListImagesRequest_api_2eproto}, {
      &scc_info_ImageFilter_api_2eproto.base,}};

static void InitDefaultsscc_info_ListImagesResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListImagesResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListImagesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListImagesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListImagesResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListImagesResponse_api_2eproto}, {
      &scc_info_Image_api_2eproto.base,}};

static void InitDefaultsscc_info_ListPodSandboxRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListPodSandboxRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListPodSandboxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListPodSandboxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPodSandboxRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPodSandboxRequest_api_2eproto}, {
      &scc_info_PodSandboxFilter_api_2eproto.base,}};

static void InitDefaultsscc_info_ListPodSandboxResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ListPodSandboxResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ListPodSandboxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ListPodSandboxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPodSandboxResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPodSandboxResponse_api_2eproto}, {
      &scc_info_PodSandbox_api_2eproto.base,}};

static void InitDefaultsscc_info_MemoryUsage_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_MemoryUsage_default_instance_;
    new (ptr) ::runtime::v1alpha2::MemoryUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::MemoryUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryUsage_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemoryUsage_api_2eproto}, {
      &scc_info_UInt64Value_api_2eproto.base,}};

static void InitDefaultsscc_info_Mount_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Mount_default_instance_;
    new (ptr) ::runtime::v1alpha2::Mount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Mount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mount_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mount_api_2eproto}, {}};

static void InitDefaultsscc_info_Namespace_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_Namespace_default_instance_;
    new (ptr) ::runtime::v1alpha2::Namespace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::Namespace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Namespace_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Namespace_api_2eproto}, {
      &scc_info_NamespaceOption_api_2eproto.base,}};

static void InitDefaultsscc_info_NamespaceOption_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_NamespaceOption_default_instance_;
    new (ptr) ::runtime::v1alpha2::NamespaceOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::NamespaceOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamespaceOption_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NamespaceOption_api_2eproto}, {}};

static void InitDefaultsscc_info_NetworkConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_NetworkConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::NetworkConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::NetworkConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkConfig_api_2eproto}, {}};

static void InitDefaultsscc_info_PodIP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodIP_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodIP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodIP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodIP_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandbox_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandbox_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandbox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandbox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PodSandbox_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PodSandbox_api_2eproto}, {
      &scc_info_PodSandboxMetadata_api_2eproto.base,
      &scc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandbox_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandbox_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PodSandboxConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_PodSandboxConfig_api_2eproto}, {
      &scc_info_PodSandboxMetadata_api_2eproto.base,
      &scc_info_DNSConfig_api_2eproto.base,
      &scc_info_PortMapping_api_2eproto.base,
      &scc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto.base,
      &scc_info_LinuxPodSandboxConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxConfig_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxConfig_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxFilter_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxFilter_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PodSandboxFilter_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PodSandboxFilter_api_2eproto}, {
      &scc_info_PodSandboxStateValue_api_2eproto.base,
      &scc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxFilter_LabelSelectorEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxMetadata_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxMetadata_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxMetadata_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxMetadata_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxNetworkStatus_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxNetworkStatus_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxNetworkStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxNetworkStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PodSandboxNetworkStatus_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PodSandboxNetworkStatus_api_2eproto}, {
      &scc_info_PodIP_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandboxStateValue_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStateValue_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStateValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxStateValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStateValue_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxStateValue_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxStatus_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatus_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PodSandboxStatus_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_PodSandboxStatus_api_2eproto}, {
      &scc_info_PodSandboxMetadata_api_2eproto.base,
      &scc_info_PodSandboxNetworkStatus_api_2eproto.base,
      &scc_info_LinuxPodSandboxStatus_api_2eproto.base,
      &scc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto.base,
      &scc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatus_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatus_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxStatusRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatusRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatusRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxStatusRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_PodSandboxStatusResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatusResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PodSandboxStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PodSandboxStatusResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PodSandboxStatusResponse_api_2eproto}, {
      &scc_info_PodSandboxStatus_api_2eproto.base,
      &scc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PodSandboxStatusResponse_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse();
  }
  ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_PortForwardRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PortForwardRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::PortForwardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PortForwardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortForwardRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortForwardRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_PortForwardResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PortForwardResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PortForwardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PortForwardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortForwardResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortForwardResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_PortMapping_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PortMapping_default_instance_;
    new (ptr) ::runtime::v1alpha2::PortMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PortMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortMapping_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortMapping_api_2eproto}, {}};

static void InitDefaultsscc_info_PullImageRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PullImageRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::PullImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PullImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PullImageRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PullImageRequest_api_2eproto}, {
      &scc_info_ImageSpec_api_2eproto.base,
      &scc_info_AuthConfig_api_2eproto.base,
      &scc_info_PodSandboxConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_PullImageResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_PullImageResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::PullImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::PullImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullImageResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PullImageResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_RemoveContainerRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemoveContainerRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemoveContainerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemoveContainerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveContainerRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveContainerRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_RemoveContainerResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemoveContainerResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemoveContainerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemoveContainerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveContainerResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveContainerResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_RemoveImageRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemoveImageRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemoveImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemoveImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveImageRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveImageRequest_api_2eproto}, {
      &scc_info_ImageSpec_api_2eproto.base,}};

static void InitDefaultsscc_info_RemoveImageResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemoveImageResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemoveImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemoveImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveImageResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveImageResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_RemovePodSandboxRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemovePodSandboxRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemovePodSandboxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemovePodSandboxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePodSandboxRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePodSandboxRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_RemovePodSandboxResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RemovePodSandboxResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::RemovePodSandboxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RemovePodSandboxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePodSandboxResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePodSandboxResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_ReopenContainerLogRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ReopenContainerLogRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::ReopenContainerLogRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ReopenContainerLogRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReopenContainerLogRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReopenContainerLogRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_ReopenContainerLogResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_ReopenContainerLogResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::ReopenContainerLogResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::ReopenContainerLogResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReopenContainerLogResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReopenContainerLogResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_RunPodSandboxRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RunPodSandboxRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::RunPodSandboxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RunPodSandboxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunPodSandboxRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunPodSandboxRequest_api_2eproto}, {
      &scc_info_PodSandboxConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_RunPodSandboxResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RunPodSandboxResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::RunPodSandboxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RunPodSandboxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunPodSandboxResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunPodSandboxResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_RuntimeCondition_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RuntimeCondition_default_instance_;
    new (ptr) ::runtime::v1alpha2::RuntimeCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RuntimeCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuntimeCondition_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuntimeCondition_api_2eproto}, {}};

static void InitDefaultsscc_info_RuntimeConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RuntimeConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::RuntimeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RuntimeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuntimeConfig_api_2eproto}, {
      &scc_info_NetworkConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_RuntimeStatus_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_RuntimeStatus_default_instance_;
    new (ptr) ::runtime::v1alpha2::RuntimeStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::RuntimeStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuntimeStatus_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuntimeStatus_api_2eproto}, {
      &scc_info_RuntimeCondition_api_2eproto.base,}};

static void InitDefaultsscc_info_SELinuxOption_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_SELinuxOption_default_instance_;
    new (ptr) ::runtime::v1alpha2::SELinuxOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::SELinuxOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SELinuxOption_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SELinuxOption_api_2eproto}, {}};

static void InitDefaultsscc_info_StartContainerRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StartContainerRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::StartContainerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StartContainerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartContainerRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartContainerRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_StartContainerResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StartContainerResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::StartContainerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StartContainerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartContainerResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartContainerResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_StatusRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StatusRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::StatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StatusResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatusResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatusResponse_api_2eproto}, {
      &scc_info_RuntimeStatus_api_2eproto.base,
      &scc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto.base,}};

static void InitDefaultsscc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StatusResponse_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse();
  }
  ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto}, {}};

static void InitDefaultsscc_info_StopContainerRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StopContainerRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::StopContainerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StopContainerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopContainerRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopContainerRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_StopContainerResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StopContainerResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::StopContainerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StopContainerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopContainerResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopContainerResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_StopPodSandboxRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StopPodSandboxRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::StopPodSandboxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StopPodSandboxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPodSandboxRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPodSandboxRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_StopPodSandboxResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_StopPodSandboxResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::StopPodSandboxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::StopPodSandboxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPodSandboxResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPodSandboxResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_UInt64Value_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_UInt64Value_default_instance_;
    new (ptr) ::runtime::v1alpha2::UInt64Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::UInt64Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Value_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UInt64Value_api_2eproto}, {}};

static void InitDefaultsscc_info_UpdateContainerResourcesRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_UpdateContainerResourcesRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::UpdateContainerResourcesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::UpdateContainerResourcesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateContainerResourcesRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateContainerResourcesRequest_api_2eproto}, {
      &scc_info_LinuxContainerResources_api_2eproto.base,}};

static void InitDefaultsscc_info_UpdateContainerResourcesResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_UpdateContainerResourcesResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::UpdateContainerResourcesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::UpdateContainerResourcesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateContainerResourcesResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateContainerResourcesResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_UpdateRuntimeConfigRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_UpdateRuntimeConfigRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::UpdateRuntimeConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::UpdateRuntimeConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateRuntimeConfigRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateRuntimeConfigRequest_api_2eproto}, {
      &scc_info_RuntimeConfig_api_2eproto.base,}};

static void InitDefaultsscc_info_UpdateRuntimeConfigResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_UpdateRuntimeConfigResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::UpdateRuntimeConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::UpdateRuntimeConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateRuntimeConfigResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateRuntimeConfigResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_VersionRequest_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_VersionRequest_default_instance_;
    new (ptr) ::runtime::v1alpha2::VersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::VersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionRequest_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionRequest_api_2eproto}, {}};

static void InitDefaultsscc_info_VersionResponse_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_VersionResponse_default_instance_;
    new (ptr) ::runtime::v1alpha2::VersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::VersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionResponse_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionResponse_api_2eproto}, {}};

static void InitDefaultsscc_info_WindowsContainerConfig_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_WindowsContainerConfig_default_instance_;
    new (ptr) ::runtime::v1alpha2::WindowsContainerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::WindowsContainerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WindowsContainerConfig_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WindowsContainerConfig_api_2eproto}, {
      &scc_info_WindowsContainerResources_api_2eproto.base,
      &scc_info_WindowsContainerSecurityContext_api_2eproto.base,}};

static void InitDefaultsscc_info_WindowsContainerResources_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_WindowsContainerResources_default_instance_;
    new (ptr) ::runtime::v1alpha2::WindowsContainerResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::WindowsContainerResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowsContainerResources_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WindowsContainerResources_api_2eproto}, {}};

static void InitDefaultsscc_info_WindowsContainerSecurityContext_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::runtime::v1alpha2::_WindowsContainerSecurityContext_default_instance_;
    new (ptr) ::runtime::v1alpha2::WindowsContainerSecurityContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::runtime::v1alpha2::WindowsContainerSecurityContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowsContainerSecurityContext_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WindowsContainerSecurityContext_api_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[127];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionResponse, version_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionResponse, runtime_name_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionResponse, runtime_version_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::VersionResponse, runtime_api_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::DNSConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::DNSConfig, servers_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::DNSConfig, searches_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::DNSConfig, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortMapping, protocol_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortMapping, container_port_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortMapping, host_port_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortMapping, host_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, container_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, host_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, readonly_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, selinux_relabel_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Mount, propagation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NamespaceOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NamespaceOption, network_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NamespaceOption, pid_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NamespaceOption, ipc_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NamespaceOption, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Int64Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Int64Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, namespace_options_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, selinux_options_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, run_as_user_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, run_as_group_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, readonly_rootfs_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, supplemental_groups_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, privileged_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxSandboxSecurityContext, seccomp_profile_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig, cgroup_parent_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig, security_context_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxConfig, sysctls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxMetadata, uid_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxMetadata, namespace__),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxMetadata, attempt_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, hostname_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, log_directory_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, dns_config_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, port_mappings_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, annotations_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxConfig, linux_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RunPodSandboxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RunPodSandboxRequest, config_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RunPodSandboxRequest, runtime_handler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RunPodSandboxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RunPodSandboxResponse, pod_sandbox_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopPodSandboxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopPodSandboxRequest, pod_sandbox_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopPodSandboxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemovePodSandboxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemovePodSandboxRequest, pod_sandbox_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemovePodSandboxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusRequest, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusRequest, verbose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodIP, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxNetworkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxNetworkStatus, ip_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxNetworkStatus, additional_ips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Namespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Namespace, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxPodSandboxStatus, namespaces_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, created_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, network_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, linux_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, annotations_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatus, runtime_handler_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStatusResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStateValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxStateValue, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandboxFilter, label_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListPodSandboxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListPodSandboxRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, created_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, annotations_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PodSandbox, runtime_handler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListPodSandboxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListPodSandboxResponse, items_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageSpec, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, cpu_period_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, cpu_quota_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, cpu_shares_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, memory_limit_in_bytes_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, oom_score_adj_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, cpuset_cpus_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, cpuset_mems_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerResources, hugepage_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::HugepageLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::HugepageLimit, page_size_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::HugepageLimit, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::SELinuxOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::SELinuxOption, user_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::SELinuxOption, role_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::SELinuxOption, type_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::SELinuxOption, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Capability, add_capabilities_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Capability, drop_capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, capabilities_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, privileged_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, namespace_options_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, selinux_options_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, run_as_user_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, run_as_group_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, run_as_username_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, readonly_rootfs_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, supplemental_groups_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, apparmor_profile_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, seccomp_profile_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, no_new_privs_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, masked_paths_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerSecurityContext, readonly_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerConfig, resources_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::LinuxContainerConfig, security_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerSecurityContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerSecurityContext, run_as_username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerConfig, resources_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerConfig, security_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerResources, cpu_shares_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerResources, cpu_count_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerResources, cpu_maximum_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::WindowsContainerResources, memory_limit_in_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerMetadata, attempt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Device, container_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Device, host_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Device, permissions_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, command_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, args_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, working_dir_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, envs_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, mounts_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, devices_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, annotations_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, log_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, stdin_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, stdin_once_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, tty_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, linux_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerConfig, windows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerRequest, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerRequest, config_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerRequest, sandbox_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CreateContainerResponse, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StartContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StartContainerRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StartContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopContainerRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopContainerRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StopContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveContainerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveContainerRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveContainerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStateValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStateValue, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerFilter, label_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainersRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, image_ref_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, created_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Container, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainersResponse, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusRequest, verbose_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, state_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, created_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, started_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, finished_at_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, exit_code_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, image_ref_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, reason_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, message_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, annotations_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, mounts_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatus, log_path_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatusResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateContainerResourcesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateContainerResourcesRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateContainerResourcesRequest, linux_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateContainerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncRequest, cmd_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncResponse, stdout_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncResponse, stderr_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecSyncResponse, exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, cmd_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, tty_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, stdin_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, stdout_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecRequest, stderr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ExecResponse, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, container_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, stdin_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, tty_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, stdout_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachRequest, stderr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AttachResponse, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortForwardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortForwardRequest, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortForwardRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PortForwardResponse, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageFilter, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListImagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListImagesRequest, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, repo_tags_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, repo_digests_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, size_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, uid_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, username_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::Image, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListImagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListImagesResponse, images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusRequest, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusRequest, verbose_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageStatusResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, username_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, password_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, auth_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, server_address_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, identity_token_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::AuthConfig, registry_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageRequest, image_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageRequest, auth_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageRequest, sandbox_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::PullImageResponse, image_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveImageRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RemoveImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NetworkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::NetworkConfig, pod_cidr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeConfig, network_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateRuntimeConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateRuntimeConfigRequest, runtime_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UpdateRuntimeConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeCondition, type_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeCondition, status_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeCondition, reason_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeCondition, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::RuntimeStatus, conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusRequest, verbose_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::StatusResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageFsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UInt64Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::UInt64Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemIdentifier, mountpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemUsage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemUsage, fs_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemUsage, used_bytes_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::FilesystemUsage, inodes_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageFsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ImageFsInfoResponse, image_filesystems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainerStatsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter, pod_sandbox_id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStatsFilter, label_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ListContainerStatsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes, id_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes, metadata_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes, labels_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerAttributes, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStats, attributes_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStats, cpu_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStats, memory_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ContainerStats, writable_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CpuUsage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::CpuUsage, usage_core_nano_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::MemoryUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::MemoryUsage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::MemoryUsage, working_set_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ReopenContainerLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ReopenContainerLogRequest, container_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runtime::v1alpha2::ReopenContainerLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::runtime::v1alpha2::VersionRequest)},
  { 6, -1, sizeof(::runtime::v1alpha2::VersionResponse)},
  { 15, -1, sizeof(::runtime::v1alpha2::DNSConfig)},
  { 23, -1, sizeof(::runtime::v1alpha2::PortMapping)},
  { 32, -1, sizeof(::runtime::v1alpha2::Mount)},
  { 42, -1, sizeof(::runtime::v1alpha2::NamespaceOption)},
  { 51, -1, sizeof(::runtime::v1alpha2::Int64Value)},
  { 57, -1, sizeof(::runtime::v1alpha2::LinuxSandboxSecurityContext)},
  { 70, 77, sizeof(::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse)},
  { 79, -1, sizeof(::runtime::v1alpha2::LinuxPodSandboxConfig)},
  { 87, -1, sizeof(::runtime::v1alpha2::PodSandboxMetadata)},
  { 96, 103, sizeof(::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse)},
  { 105, 112, sizeof(::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse)},
  { 114, -1, sizeof(::runtime::v1alpha2::PodSandboxConfig)},
  { 127, -1, sizeof(::runtime::v1alpha2::RunPodSandboxRequest)},
  { 134, -1, sizeof(::runtime::v1alpha2::RunPodSandboxResponse)},
  { 140, -1, sizeof(::runtime::v1alpha2::StopPodSandboxRequest)},
  { 146, -1, sizeof(::runtime::v1alpha2::StopPodSandboxResponse)},
  { 151, -1, sizeof(::runtime::v1alpha2::RemovePodSandboxRequest)},
  { 157, -1, sizeof(::runtime::v1alpha2::RemovePodSandboxResponse)},
  { 162, -1, sizeof(::runtime::v1alpha2::PodSandboxStatusRequest)},
  { 169, -1, sizeof(::runtime::v1alpha2::PodIP)},
  { 175, -1, sizeof(::runtime::v1alpha2::PodSandboxNetworkStatus)},
  { 182, -1, sizeof(::runtime::v1alpha2::Namespace)},
  { 188, -1, sizeof(::runtime::v1alpha2::LinuxPodSandboxStatus)},
  { 194, 201, sizeof(::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse)},
  { 203, 210, sizeof(::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse)},
  { 212, -1, sizeof(::runtime::v1alpha2::PodSandboxStatus)},
  { 226, 233, sizeof(::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse)},
  { 235, -1, sizeof(::runtime::v1alpha2::PodSandboxStatusResponse)},
  { 242, -1, sizeof(::runtime::v1alpha2::PodSandboxStateValue)},
  { 248, 255, sizeof(::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse)},
  { 257, -1, sizeof(::runtime::v1alpha2::PodSandboxFilter)},
  { 265, -1, sizeof(::runtime::v1alpha2::ListPodSandboxRequest)},
  { 271, 278, sizeof(::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse)},
  { 280, 287, sizeof(::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse)},
  { 289, -1, sizeof(::runtime::v1alpha2::PodSandbox)},
  { 301, -1, sizeof(::runtime::v1alpha2::ListPodSandboxResponse)},
  { 307, 314, sizeof(::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse)},
  { 316, -1, sizeof(::runtime::v1alpha2::ImageSpec)},
  { 323, -1, sizeof(::runtime::v1alpha2::KeyValue)},
  { 330, -1, sizeof(::runtime::v1alpha2::LinuxContainerResources)},
  { 343, -1, sizeof(::runtime::v1alpha2::HugepageLimit)},
  { 350, -1, sizeof(::runtime::v1alpha2::SELinuxOption)},
  { 359, -1, sizeof(::runtime::v1alpha2::Capability)},
  { 366, -1, sizeof(::runtime::v1alpha2::LinuxContainerSecurityContext)},
  { 385, -1, sizeof(::runtime::v1alpha2::LinuxContainerConfig)},
  { 392, -1, sizeof(::runtime::v1alpha2::WindowsContainerSecurityContext)},
  { 398, -1, sizeof(::runtime::v1alpha2::WindowsContainerConfig)},
  { 405, -1, sizeof(::runtime::v1alpha2::WindowsContainerResources)},
  { 414, -1, sizeof(::runtime::v1alpha2::ContainerMetadata)},
  { 421, -1, sizeof(::runtime::v1alpha2::Device)},
  { 429, 436, sizeof(::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse)},
  { 438, 445, sizeof(::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse)},
  { 447, -1, sizeof(::runtime::v1alpha2::ContainerConfig)},
  { 468, -1, sizeof(::runtime::v1alpha2::CreateContainerRequest)},
  { 476, -1, sizeof(::runtime::v1alpha2::CreateContainerResponse)},
  { 482, -1, sizeof(::runtime::v1alpha2::StartContainerRequest)},
  { 488, -1, sizeof(::runtime::v1alpha2::StartContainerResponse)},
  { 493, -1, sizeof(::runtime::v1alpha2::StopContainerRequest)},
  { 500, -1, sizeof(::runtime::v1alpha2::StopContainerResponse)},
  { 505, -1, sizeof(::runtime::v1alpha2::RemoveContainerRequest)},
  { 511, -1, sizeof(::runtime::v1alpha2::RemoveContainerResponse)},
  { 516, -1, sizeof(::runtime::v1alpha2::ContainerStateValue)},
  { 522, 529, sizeof(::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse)},
  { 531, -1, sizeof(::runtime::v1alpha2::ContainerFilter)},
  { 540, -1, sizeof(::runtime::v1alpha2::ListContainersRequest)},
  { 546, 553, sizeof(::runtime::v1alpha2::Container_LabelsEntry_DoNotUse)},
  { 555, 562, sizeof(::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse)},
  { 564, -1, sizeof(::runtime::v1alpha2::Container)},
  { 578, -1, sizeof(::runtime::v1alpha2::ListContainersResponse)},
  { 584, -1, sizeof(::runtime::v1alpha2::ContainerStatusRequest)},
  { 591, 598, sizeof(::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse)},
  { 600, 607, sizeof(::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse)},
  { 609, -1, sizeof(::runtime::v1alpha2::ContainerStatus)},
  { 629, 636, sizeof(::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse)},
  { 638, -1, sizeof(::runtime::v1alpha2::ContainerStatusResponse)},
  { 645, -1, sizeof(::runtime::v1alpha2::UpdateContainerResourcesRequest)},
  { 652, -1, sizeof(::runtime::v1alpha2::UpdateContainerResourcesResponse)},
  { 657, -1, sizeof(::runtime::v1alpha2::ExecSyncRequest)},
  { 665, -1, sizeof(::runtime::v1alpha2::ExecSyncResponse)},
  { 673, -1, sizeof(::runtime::v1alpha2::ExecRequest)},
  { 684, -1, sizeof(::runtime::v1alpha2::ExecResponse)},
  { 690, -1, sizeof(::runtime::v1alpha2::AttachRequest)},
  { 700, -1, sizeof(::runtime::v1alpha2::AttachResponse)},
  { 706, -1, sizeof(::runtime::v1alpha2::PortForwardRequest)},
  { 713, -1, sizeof(::runtime::v1alpha2::PortForwardResponse)},
  { 719, -1, sizeof(::runtime::v1alpha2::ImageFilter)},
  { 725, -1, sizeof(::runtime::v1alpha2::ListImagesRequest)},
  { 731, -1, sizeof(::runtime::v1alpha2::Image)},
  { 743, -1, sizeof(::runtime::v1alpha2::ListImagesResponse)},
  { 749, -1, sizeof(::runtime::v1alpha2::ImageStatusRequest)},
  { 756, 763, sizeof(::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse)},
  { 765, -1, sizeof(::runtime::v1alpha2::ImageStatusResponse)},
  { 772, -1, sizeof(::runtime::v1alpha2::AuthConfig)},
  { 783, -1, sizeof(::runtime::v1alpha2::PullImageRequest)},
  { 791, -1, sizeof(::runtime::v1alpha2::PullImageResponse)},
  { 797, -1, sizeof(::runtime::v1alpha2::RemoveImageRequest)},
  { 803, -1, sizeof(::runtime::v1alpha2::RemoveImageResponse)},
  { 808, -1, sizeof(::runtime::v1alpha2::NetworkConfig)},
  { 814, -1, sizeof(::runtime::v1alpha2::RuntimeConfig)},
  { 820, -1, sizeof(::runtime::v1alpha2::UpdateRuntimeConfigRequest)},
  { 826, -1, sizeof(::runtime::v1alpha2::UpdateRuntimeConfigResponse)},
  { 831, -1, sizeof(::runtime::v1alpha2::RuntimeCondition)},
  { 840, -1, sizeof(::runtime::v1alpha2::RuntimeStatus)},
  { 846, -1, sizeof(::runtime::v1alpha2::StatusRequest)},
  { 852, 859, sizeof(::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse)},
  { 861, -1, sizeof(::runtime::v1alpha2::StatusResponse)},
  { 868, -1, sizeof(::runtime::v1alpha2::ImageFsInfoRequest)},
  { 873, -1, sizeof(::runtime::v1alpha2::UInt64Value)},
  { 879, -1, sizeof(::runtime::v1alpha2::FilesystemIdentifier)},
  { 885, -1, sizeof(::runtime::v1alpha2::FilesystemUsage)},
  { 894, -1, sizeof(::runtime::v1alpha2::ImageFsInfoResponse)},
  { 900, -1, sizeof(::runtime::v1alpha2::ContainerStatsRequest)},
  { 906, -1, sizeof(::runtime::v1alpha2::ContainerStatsResponse)},
  { 912, -1, sizeof(::runtime::v1alpha2::ListContainerStatsRequest)},
  { 918, 925, sizeof(::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse)},
  { 927, -1, sizeof(::runtime::v1alpha2::ContainerStatsFilter)},
  { 935, -1, sizeof(::runtime::v1alpha2::ListContainerStatsResponse)},
  { 941, 948, sizeof(::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse)},
  { 950, 957, sizeof(::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse)},
  { 959, -1, sizeof(::runtime::v1alpha2::ContainerAttributes)},
  { 968, -1, sizeof(::runtime::v1alpha2::ContainerStats)},
  { 977, -1, sizeof(::runtime::v1alpha2::CpuUsage)},
  { 984, -1, sizeof(::runtime::v1alpha2::MemoryUsage)},
  { 991, -1, sizeof(::runtime::v1alpha2::ReopenContainerLogRequest)},
  { 997, -1, sizeof(::runtime::v1alpha2::ReopenContainerLogResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_VersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_VersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_DNSConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PortMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Mount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_NamespaceOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Int64Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxPodSandboxConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxConfig_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxConfig_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RunPodSandboxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RunPodSandboxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StopPodSandboxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StopPodSandboxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemovePodSandboxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemovePodSandboxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxNetworkStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Namespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxPodSandboxStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatus_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatus_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatusResponse_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxStateValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxFilter_LabelSelectorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandboxFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListPodSandboxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandbox_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandbox_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PodSandbox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListPodSandboxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageSpec_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxContainerResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_HugepageLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_SELinuxOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Capability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_LinuxContainerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_WindowsContainerSecurityContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_WindowsContainerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_WindowsContainerResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerConfig_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerConfig_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_CreateContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_CreateContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StartContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StartContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StopContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StopContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemoveContainerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemoveContainerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStateValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerFilter_LabelSelectorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListContainersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Container_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Container_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Container_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListContainersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatus_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatus_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatusResponse_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_UpdateContainerResourcesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_UpdateContainerResourcesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ExecSyncRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ExecSyncResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ExecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ExecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_AttachRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_AttachResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PortForwardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PortForwardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListImagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListImagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageStatusResponse_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_AuthConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PullImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_PullImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemoveImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RemoveImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_NetworkConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RuntimeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_UpdateRuntimeConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_UpdateRuntimeConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RuntimeCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_RuntimeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StatusResponse_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageFsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_UInt64Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_FilesystemIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_FilesystemUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ImageFsInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListContainerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStatsFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ListContainerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerAttributes_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerAttributes_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ContainerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_CpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_MemoryUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ReopenContainerLogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::runtime::v1alpha2::_ReopenContainerLogResponse_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\020runtime.v1alpha2\"!\n\016Version"
  "Request\022\017\n\007version\030\001 \001(\t\"n\n\017VersionRespo"
  "nse\022\017\n\007version\030\001 \001(\t\022\024\n\014runtime_name\030\002 \001"
  "(\t\022\027\n\017runtime_version\030\003 \001(\t\022\033\n\023runtime_a"
  "pi_version\030\004 \001(\t\"\?\n\tDNSConfig\022\017\n\007servers"
  "\030\001 \003(\t\022\020\n\010searches\030\002 \003(\t\022\017\n\007options\030\003 \003("
  "\t\"w\n\013PortMapping\022,\n\010protocol\030\001 \001(\0162\032.run"
  "time.v1alpha2.Protocol\022\026\n\016container_port"
  "\030\002 \001(\005\022\021\n\thost_port\030\003 \001(\005\022\017\n\007host_ip\030\004 \001"
  "(\t\"\226\001\n\005Mount\022\026\n\016container_path\030\001 \001(\t\022\021\n\t"
  "host_path\030\002 \001(\t\022\020\n\010readonly\030\003 \001(\010\022\027\n\017sel"
  "inux_relabel\030\004 \001(\010\0227\n\013propagation\030\005 \001(\0162"
  "\".runtime.v1alpha2.MountPropagation\"\262\001\n\017"
  "NamespaceOption\0220\n\007network\030\001 \001(\0162\037.runti"
  "me.v1alpha2.NamespaceMode\022,\n\003pid\030\002 \001(\0162\037"
  ".runtime.v1alpha2.NamespaceMode\022,\n\003ipc\030\003"
  " \001(\0162\037.runtime.v1alpha2.NamespaceMode\022\021\n"
  "\ttarget_id\030\004 \001(\t\"\033\n\nInt64Value\022\r\n\005value\030"
  "\001 \001(\003\"\344\002\n\033LinuxSandboxSecurityContext\022<\n"
  "\021namespace_options\030\001 \001(\0132!.runtime.v1alp"
  "ha2.NamespaceOption\0228\n\017selinux_options\030\002"
  " \001(\0132\037.runtime.v1alpha2.SELinuxOption\0221\n"
  "\013run_as_user\030\003 \001(\0132\034.runtime.v1alpha2.In"
  "t64Value\0222\n\014run_as_group\030\010 \001(\0132\034.runtime"
  ".v1alpha2.Int64Value\022\027\n\017readonly_rootfs\030"
  "\004 \001(\010\022\033\n\023supplemental_groups\030\005 \003(\003\022\022\n\npr"
  "ivileged\030\006 \001(\010\022\034\n\024seccomp_profile_path\030\007"
  " \001(\t\"\356\001\n\025LinuxPodSandboxConfig\022\025\n\rcgroup"
  "_parent\030\001 \001(\t\022G\n\020security_context\030\002 \001(\0132"
  "-.runtime.v1alpha2.LinuxSandboxSecurityC"
  "ontext\022E\n\007sysctls\030\003 \003(\01324.runtime.v1alph"
  "a2.LinuxPodSandboxConfig.SysctlsEntry\032.\n"
  "\014SysctlsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"S\n\022PodSandboxMetadata\022\014\n\004name\030\001 \001("
  "\t\022\013\n\003uid\030\002 \001(\t\022\021\n\tnamespace\030\003 \001(\t\022\017\n\007att"
  "empt\030\004 \001(\r\"\377\003\n\020PodSandboxConfig\0226\n\010metad"
  "ata\030\001 \001(\0132$.runtime.v1alpha2.PodSandboxM"
  "etadata\022\020\n\010hostname\030\002 \001(\t\022\025\n\rlog_directo"
  "ry\030\003 \001(\t\022/\n\ndns_config\030\004 \001(\0132\033.runtime.v"
  "1alpha2.DNSConfig\0224\n\rport_mappings\030\005 \003(\013"
  "2\035.runtime.v1alpha2.PortMapping\022>\n\006label"
  "s\030\006 \003(\0132..runtime.v1alpha2.PodSandboxCon"
  "fig.LabelsEntry\022H\n\013annotations\030\007 \003(\01323.r"
  "untime.v1alpha2.PodSandboxConfig.Annotat"
  "ionsEntry\0226\n\005linux\030\010 \001(\0132\'.runtime.v1alp"
  "ha2.LinuxPodSandboxConfig\032-\n\013LabelsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Anno"
  "tationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\"c\n\024RunPodSandboxRequest\0222\n\006config\030\001"
  " \001(\0132\".runtime.v1alpha2.PodSandboxConfig"
  "\022\027\n\017runtime_handler\030\002 \001(\t\"/\n\025RunPodSandb"
  "oxResponse\022\026\n\016pod_sandbox_id\030\001 \001(\t\"/\n\025St"
  "opPodSandboxRequest\022\026\n\016pod_sandbox_id\030\001 "
  "\001(\t\"\030\n\026StopPodSandboxResponse\"1\n\027RemoveP"
  "odSandboxRequest\022\026\n\016pod_sandbox_id\030\001 \001(\t"
  "\"\032\n\030RemovePodSandboxResponse\"B\n\027PodSandb"
  "oxStatusRequest\022\026\n\016pod_sandbox_id\030\001 \001(\t\022"
  "\017\n\007verbose\030\002 \001(\010\"\023\n\005PodIP\022\n\n\002ip\030\001 \001(\t\"V\n"
  "\027PodSandboxNetworkStatus\022\n\n\002ip\030\001 \001(\t\022/\n\016"
  "additional_ips\030\002 \003(\0132\027.runtime.v1alpha2."
  "PodIP\"\?\n\tNamespace\0222\n\007options\030\002 \001(\0132!.ru"
  "ntime.v1alpha2.NamespaceOption\"H\n\025LinuxP"
  "odSandboxStatus\022/\n\nnamespaces\030\001 \001(\0132\033.ru"
  "ntime.v1alpha2.Namespace\"\226\004\n\020PodSandboxS"
  "tatus\022\n\n\002id\030\001 \001(\t\0226\n\010metadata\030\002 \001(\0132$.ru"
  "ntime.v1alpha2.PodSandboxMetadata\0220\n\005sta"
  "te\030\003 \001(\0162!.runtime.v1alpha2.PodSandboxSt"
  "ate\022\022\n\ncreated_at\030\004 \001(\003\022:\n\007network\030\005 \001(\013"
  "2).runtime.v1alpha2.PodSandboxNetworkSta"
  "tus\0226\n\005linux\030\006 \001(\0132\'.runtime.v1alpha2.Li"
  "nuxPodSandboxStatus\022>\n\006labels\030\007 \003(\0132..ru"
  "ntime.v1alpha2.PodSandboxStatus.LabelsEn"
  "try\022H\n\013annotations\030\010 \003(\01323.runtime.v1alp"
  "ha2.PodSandboxStatus.AnnotationsEntry\022\027\n"
  "\017runtime_handler\030\t \001(\t\032-\n\013LabelsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Annotat"
  "ionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"\277\001\n\030PodSandboxStatusResponse\0222\n\006status"
  "\030\001 \001(\0132\".runtime.v1alpha2.PodSandboxStat"
  "us\022B\n\004info\030\002 \003(\01324.runtime.v1alpha2.PodS"
  "andboxStatusResponse.InfoEntry\032+\n\tInfoEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"H\n\024P"
  "odSandboxStateValue\0220\n\005state\030\001 \001(\0162!.run"
  "time.v1alpha2.PodSandboxState\"\332\001\n\020PodSan"
  "dboxFilter\022\n\n\002id\030\001 \001(\t\0225\n\005state\030\002 \001(\0132&."
  "runtime.v1alpha2.PodSandboxStateValue\022M\n"
  "\016label_selector\030\003 \003(\01325.runtime.v1alpha2"
  ".PodSandboxFilter.LabelSelectorEntry\0324\n\022"
  "LabelSelectorEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"K\n\025ListPodSandboxRequest\0222\n\006f"
  "ilter\030\001 \001(\0132\".runtime.v1alpha2.PodSandbo"
  "xFilter\"\220\003\n\nPodSandbox\022\n\n\002id\030\001 \001(\t\0226\n\010me"
  "tadata\030\002 \001(\0132$.runtime.v1alpha2.PodSandb"
  "oxMetadata\0220\n\005state\030\003 \001(\0162!.runtime.v1al"
  "pha2.PodSandboxState\022\022\n\ncreated_at\030\004 \001(\003"
  "\0228\n\006labels\030\005 \003(\0132(.runtime.v1alpha2.PodS"
  "andbox.LabelsEntry\022B\n\013annotations\030\006 \003(\0132"
  "-.runtime.v1alpha2.PodSandbox.Annotation"
  "sEntry\022\027\n\017runtime_handler\030\007 \001(\t\032-\n\013Label"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322"
  "\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"E\n\026ListPodSandboxResponse\022+\n\005"
  "items\030\001 \003(\0132\034.runtime.v1alpha2.PodSandbo"
  "x\"\221\001\n\tImageSpec\022\r\n\005image\030\001 \001(\t\022A\n\013annota"
  "tions\030\002 \003(\0132,.runtime.v1alpha2.ImageSpec"
  ".AnnotationsEntry\0322\n\020AnnotationsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"&\n\010KeyValu"
  "e\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\356\001\n\027LinuxC"
  "ontainerResources\022\022\n\ncpu_period\030\001 \001(\003\022\021\n"
  "\tcpu_quota\030\002 \001(\003\022\022\n\ncpu_shares\030\003 \001(\003\022\035\n\025"
  "memory_limit_in_bytes\030\004 \001(\003\022\025\n\room_score"
  "_adj\030\005 \001(\003\022\023\n\013cpuset_cpus\030\006 \001(\t\022\023\n\013cpuse"
  "t_mems\030\007 \001(\t\0228\n\017hugepage_limits\030\010 \003(\0132\037."
  "runtime.v1alpha2.HugepageLimit\"1\n\rHugepa"
  "geLimit\022\021\n\tpage_size\030\001 \001(\t\022\r\n\005limit\030\002 \001("
  "\004\"H\n\rSELinuxOption\022\014\n\004user\030\001 \001(\t\022\014\n\004role"
  "\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\r\n\005level\030\004 \001(\t\"A\n\nC"
  "apability\022\030\n\020add_capabilities\030\001 \003(\t\022\031\n\021d"
  "rop_capabilities\030\002 \003(\t\"\221\004\n\035LinuxContaine"
  "rSecurityContext\0222\n\014capabilities\030\001 \001(\0132\034"
  ".runtime.v1alpha2.Capability\022\022\n\nprivileg"
  "ed\030\002 \001(\010\022<\n\021namespace_options\030\003 \001(\0132!.ru"
  "ntime.v1alpha2.NamespaceOption\0228\n\017selinu"
  "x_options\030\004 \001(\0132\037.runtime.v1alpha2.SELin"
  "uxOption\0221\n\013run_as_user\030\005 \001(\0132\034.runtime."
  "v1alpha2.Int64Value\0222\n\014run_as_group\030\014 \001("
  "\0132\034.runtime.v1alpha2.Int64Value\022\027\n\017run_a"
  "s_username\030\006 \001(\t\022\027\n\017readonly_rootfs\030\007 \001("
  "\010\022\033\n\023supplemental_groups\030\010 \003(\003\022\030\n\020apparm"
  "or_profile\030\t \001(\t\022\034\n\024seccomp_profile_path"
  "\030\n \001(\t\022\024\n\014no_new_privs\030\013 \001(\010\022\024\n\014masked_p"
  "aths\030\r \003(\t\022\026\n\016readonly_paths\030\016 \003(\t\"\237\001\n\024L"
  "inuxContainerConfig\022<\n\tresources\030\001 \001(\0132)"
  ".runtime.v1alpha2.LinuxContainerResource"
  "s\022I\n\020security_context\030\002 \001(\0132/.runtime.v1"
  "alpha2.LinuxContainerSecurityContext\":\n\037"
  "WindowsContainerSecurityContext\022\027\n\017run_a"
  "s_username\030\001 \001(\t\"\245\001\n\026WindowsContainerCon"
  "fig\022>\n\tresources\030\001 \001(\0132+.runtime.v1alpha"
  "2.WindowsContainerResources\022K\n\020security_"
  "context\030\002 \001(\01321.runtime.v1alpha2.Windows"
  "ContainerSecurityContext\"v\n\031WindowsConta"
  "inerResources\022\022\n\ncpu_shares\030\001 \001(\003\022\021\n\tcpu"
  "_count\030\002 \001(\003\022\023\n\013cpu_maximum\030\003 \001(\003\022\035\n\025mem"
  "ory_limit_in_bytes\030\004 \001(\003\"2\n\021ContainerMet"
  "adata\022\014\n\004name\030\001 \001(\t\022\017\n\007attempt\030\002 \001(\r\"H\n\006"
  "Device\022\026\n\016container_path\030\001 \001(\t\022\021\n\thost_p"
  "ath\030\002 \001(\t\022\023\n\013permissions\030\003 \001(\t\"\305\005\n\017Conta"
  "inerConfig\0225\n\010metadata\030\001 \001(\0132#.runtime.v"
  "1alpha2.ContainerMetadata\022*\n\005image\030\002 \001(\013"
  "2\033.runtime.v1alpha2.ImageSpec\022\017\n\007command"
  "\030\003 \003(\t\022\014\n\004args\030\004 \003(\t\022\023\n\013working_dir\030\005 \001("
  "\t\022(\n\004envs\030\006 \003(\0132\032.runtime.v1alpha2.KeyVa"
  "lue\022\'\n\006mounts\030\007 \003(\0132\027.runtime.v1alpha2.M"
  "ount\022)\n\007devices\030\010 \003(\0132\030.runtime.v1alpha2"
  ".Device\022=\n\006labels\030\t \003(\0132-.runtime.v1alph"
  "a2.ContainerConfig.LabelsEntry\022G\n\013annota"
  "tions\030\n \003(\01322.runtime.v1alpha2.Container"
  "Config.AnnotationsEntry\022\020\n\010log_path\030\013 \001("
  "\t\022\r\n\005stdin\030\014 \001(\010\022\022\n\nstdin_once\030\r \001(\010\022\013\n\003"
  "tty\030\016 \001(\010\0225\n\005linux\030\017 \001(\0132&.runtime.v1alp"
  "ha2.LinuxContainerConfig\0229\n\007windows\030\020 \001("
  "\0132(.runtime.v1alpha2.WindowsContainerCon"
  "fig\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\0322\n\020AnnotationsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\237\001\n\026CreateContain"
  "erRequest\022\026\n\016pod_sandbox_id\030\001 \001(\t\0221\n\006con"
  "fig\030\002 \001(\0132!.runtime.v1alpha2.ContainerCo"
  "nfig\022:\n\016sandbox_config\030\003 \001(\0132\".runtime.v"
  "1alpha2.PodSandboxConfig\"/\n\027CreateContai"
  "nerResponse\022\024\n\014container_id\030\001 \001(\t\"-\n\025Sta"
  "rtContainerRequest\022\024\n\014container_id\030\001 \001(\t"
  "\"\030\n\026StartContainerResponse\"=\n\024StopContai"
  "nerRequest\022\024\n\014container_id\030\001 \001(\t\022\017\n\007time"
  "out\030\002 \001(\003\"\027\n\025StopContainerResponse\".\n\026Re"
  "moveContainerRequest\022\024\n\014container_id\030\001 \001"
  "(\t\"\031\n\027RemoveContainerResponse\"F\n\023Contain"
  "erStateValue\022/\n\005state\030\001 \001(\0162 .runtime.v1"
  "alpha2.ContainerState\"\357\001\n\017ContainerFilte"
  "r\022\n\n\002id\030\001 \001(\t\0224\n\005state\030\002 \001(\0132%.runtime.v"
  "1alpha2.ContainerStateValue\022\026\n\016pod_sandb"
  "ox_id\030\003 \001(\t\022L\n\016label_selector\030\004 \003(\01324.ru"
  "ntime.v1alpha2.ContainerFilter.LabelSele"
  "ctorEntry\0324\n\022LabelSelectorEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"J\n\025ListContainer"
  "sRequest\0221\n\006filter\030\001 \001(\0132!.runtime.v1alp"
  "ha2.ContainerFilter\"\311\003\n\tContainer\022\n\n\002id\030"
  "\001 \001(\t\022\026\n\016pod_sandbox_id\030\002 \001(\t\0225\n\010metadat"
  "a\030\003 \001(\0132#.runtime.v1alpha2.ContainerMeta"
  "data\022*\n\005image\030\004 \001(\0132\033.runtime.v1alpha2.I"
  "mageSpec\022\021\n\timage_ref\030\005 \001(\t\022/\n\005state\030\006 \001"
  "(\0162 .runtime.v1alpha2.ContainerState\022\022\n\n"
  "created_at\030\007 \001(\003\0227\n\006labels\030\010 \003(\0132\'.runti"
  "me.v1alpha2.Container.LabelsEntry\022A\n\013ann"
  "otations\030\t \003(\0132,.runtime.v1alpha2.Contai"
  "ner.AnnotationsEntry\032-\n\013LabelsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Annotatio"
  "nsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "I\n\026ListContainersResponse\022/\n\ncontainers\030"
  "\001 \003(\0132\033.runtime.v1alpha2.Container\"\?\n\026Co"
  "ntainerStatusRequest\022\024\n\014container_id\030\001 \001"
  "(\t\022\017\n\007verbose\030\002 \001(\010\"\333\004\n\017ContainerStatus\022"
  "\n\n\002id\030\001 \001(\t\0225\n\010metadata\030\002 \001(\0132#.runtime."
  "v1alpha2.ContainerMetadata\022/\n\005state\030\003 \001("
  "\0162 .runtime.v1alpha2.ContainerState\022\022\n\nc"
  "reated_at\030\004 \001(\003\022\022\n\nstarted_at\030\005 \001(\003\022\023\n\013f"
  "inished_at\030\006 \001(\003\022\021\n\texit_code\030\007 \001(\005\022*\n\005i"
  "mage\030\010 \001(\0132\033.runtime.v1alpha2.ImageSpec\022"
  "\021\n\timage_ref\030\t \001(\t\022\016\n\006reason\030\n \001(\t\022\017\n\007me"
  "ssage\030\013 \001(\t\022=\n\006labels\030\014 \003(\0132-.runtime.v1"
  "alpha2.ContainerStatus.LabelsEntry\022G\n\013an"
  "notations\030\r \003(\01322.runtime.v1alpha2.Conta"
  "inerStatus.AnnotationsEntry\022\'\n\006mounts\030\016 "
  "\003(\0132\027.runtime.v1alpha2.Mount\022\020\n\010log_path"
  "\030\017 \001(\t\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\0322\n\020AnnotationsEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\274\001\n\027ContainerS"
  "tatusResponse\0221\n\006status\030\001 \001(\0132!.runtime."
  "v1alpha2.ContainerStatus\022A\n\004info\030\002 \003(\01323"
  ".runtime.v1alpha2.ContainerStatusRespons"
  "e.InfoEntry\032+\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"q\n\037UpdateContainerResou"
  "rcesRequest\022\024\n\014container_id\030\001 \001(\t\0228\n\005lin"
  "ux\030\002 \001(\0132).runtime.v1alpha2.LinuxContain"
  "erResources\"\"\n UpdateContainerResourcesR"
  "esponse\"E\n\017ExecSyncRequest\022\024\n\014container_"
  "id\030\001 \001(\t\022\013\n\003cmd\030\002 \003(\t\022\017\n\007timeout\030\003 \001(\003\"E"
  "\n\020ExecSyncResponse\022\016\n\006stdout\030\001 \001(\014\022\016\n\006st"
  "derr\030\002 \001(\014\022\021\n\texit_code\030\003 \001(\005\"l\n\013ExecReq"
  "uest\022\024\n\014container_id\030\001 \001(\t\022\013\n\003cmd\030\002 \003(\t\022"
  "\013\n\003tty\030\003 \001(\010\022\r\n\005stdin\030\004 \001(\010\022\016\n\006stdout\030\005 "
  "\001(\010\022\016\n\006stderr\030\006 \001(\010\"\033\n\014ExecResponse\022\013\n\003u"
  "rl\030\001 \001(\t\"a\n\rAttachRequest\022\024\n\014container_i"
  "d\030\001 \001(\t\022\r\n\005stdin\030\002 \001(\010\022\013\n\003tty\030\003 \001(\010\022\016\n\006s"
  "tdout\030\004 \001(\010\022\016\n\006stderr\030\005 \001(\010\"\035\n\016AttachRes"
  "ponse\022\013\n\003url\030\001 \001(\t\":\n\022PortForwardRequest"
  "\022\026\n\016pod_sandbox_id\030\001 \001(\t\022\014\n\004port\030\002 \003(\005\"\""
  "\n\023PortForwardResponse\022\013\n\003url\030\001 \001(\t\"9\n\013Im"
  "ageFilter\022*\n\005image\030\001 \001(\0132\033.runtime.v1alp"
  "ha2.ImageSpec\"B\n\021ListImagesRequest\022-\n\006fi"
  "lter\030\001 \001(\0132\035.runtime.v1alpha2.ImageFilte"
  "r\"\262\001\n\005Image\022\n\n\002id\030\001 \001(\t\022\021\n\trepo_tags\030\002 \003"
  "(\t\022\024\n\014repo_digests\030\003 \003(\t\022\014\n\004size\030\004 \001(\004\022)"
  "\n\003uid\030\005 \001(\0132\034.runtime.v1alpha2.Int64Valu"
  "e\022\020\n\010username\030\006 \001(\t\022)\n\004spec\030\007 \001(\0132\033.runt"
  "ime.v1alpha2.ImageSpec\"=\n\022ListImagesResp"
  "onse\022\'\n\006images\030\001 \003(\0132\027.runtime.v1alpha2."
  "Image\"Q\n\022ImageStatusRequest\022*\n\005image\030\001 \001"
  "(\0132\033.runtime.v1alpha2.ImageSpec\022\017\n\007verbo"
  "se\030\002 \001(\010\"\251\001\n\023ImageStatusResponse\022&\n\005imag"
  "e\030\001 \001(\0132\027.runtime.v1alpha2.Image\022=\n\004info"
  "\030\002 \003(\0132/.runtime.v1alpha2.ImageStatusRes"
  "ponse.InfoEntry\032+\n\tInfoEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\206\001\n\nAuthConfig\022\020\n\010u"
  "sername\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004auth\030"
  "\003 \001(\t\022\026\n\016server_address\030\004 \001(\t\022\026\n\016identit"
  "y_token\030\005 \001(\t\022\026\n\016registry_token\030\006 \001(\t\"\246\001"
  "\n\020PullImageRequest\022*\n\005image\030\001 \001(\0132\033.runt"
  "ime.v1alpha2.ImageSpec\022*\n\004auth\030\002 \001(\0132\034.r"
  "untime.v1alpha2.AuthConfig\022:\n\016sandbox_co"
  "nfig\030\003 \001(\0132\".runtime.v1alpha2.PodSandbox"
  "Config\"&\n\021PullImageResponse\022\021\n\timage_ref"
  "\030\001 \001(\t\"@\n\022RemoveImageRequest\022*\n\005image\030\001 "
  "\001(\0132\033.runtime.v1alpha2.ImageSpec\"\025\n\023Remo"
  "veImageResponse\"!\n\rNetworkConfig\022\020\n\010pod_"
  "cidr\030\001 \001(\t\"H\n\rRuntimeConfig\0227\n\016network_c"
  "onfig\030\001 \001(\0132\037.runtime.v1alpha2.NetworkCo"
  "nfig\"U\n\032UpdateRuntimeConfigRequest\0227\n\016ru"
  "ntime_config\030\001 \001(\0132\037.runtime.v1alpha2.Ru"
  "ntimeConfig\"\035\n\033UpdateRuntimeConfigRespon"
  "se\"Q\n\020RuntimeCondition\022\014\n\004type\030\001 \001(\t\022\016\n\006"
  "status\030\002 \001(\010\022\016\n\006reason\030\003 \001(\t\022\017\n\007message\030"
  "\004 \001(\t\"G\n\rRuntimeStatus\0226\n\nconditions\030\001 \003"
  "(\0132\".runtime.v1alpha2.RuntimeCondition\" "
  "\n\rStatusRequest\022\017\n\007verbose\030\001 \001(\010\"\250\001\n\016Sta"
  "tusResponse\022/\n\006status\030\001 \001(\0132\037.runtime.v1"
  "alpha2.RuntimeStatus\0228\n\004info\030\002 \003(\0132*.run"
  "time.v1alpha2.StatusResponse.InfoEntry\032+"
  "\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"\024\n\022ImageFsInfoRequest\"\034\n\013UInt64Value"
  "\022\r\n\005value\030\001 \001(\004\"*\n\024FilesystemIdentifier\022"
  "\022\n\nmountpoint\030\001 \001(\t\"\302\001\n\017FilesystemUsage\022"
  "\021\n\ttimestamp\030\001 \001(\003\0225\n\005fs_id\030\002 \001(\0132&.runt"
  "ime.v1alpha2.FilesystemIdentifier\0221\n\nuse"
  "d_bytes\030\003 \001(\0132\035.runtime.v1alpha2.UInt64V"
  "alue\0222\n\013inodes_used\030\004 \001(\0132\035.runtime.v1al"
  "pha2.UInt64Value\"S\n\023ImageFsInfoResponse\022"
  "<\n\021image_filesystems\030\001 \003(\0132!.runtime.v1a"
  "lpha2.FilesystemUsage\"-\n\025ContainerStatsR"
  "equest\022\024\n\014container_id\030\001 \001(\t\"I\n\026Containe"
  "rStatsResponse\022/\n\005stats\030\001 \001(\0132 .runtime."
  "v1alpha2.ContainerStats\"S\n\031ListContainer"
  "StatsRequest\0226\n\006filter\030\001 \001(\0132&.runtime.v"
  "1alpha2.ContainerStatsFilter\"\303\001\n\024Contain"
  "erStatsFilter\022\n\n\002id\030\001 \001(\t\022\026\n\016pod_sandbox"
  "_id\030\002 \001(\t\022Q\n\016label_selector\030\003 \003(\01329.runt"
  "ime.v1alpha2.ContainerStatsFilter.LabelS"
  "electorEntry\0324\n\022LabelSelectorEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"M\n\032ListContai"
  "nerStatsResponse\022/\n\005stats\030\001 \003(\0132 .runtim"
  "e.v1alpha2.ContainerStats\"\313\002\n\023ContainerA"
  "ttributes\022\n\n\002id\030\001 \001(\t\0225\n\010metadata\030\002 \001(\0132"
  "#.runtime.v1alpha2.ContainerMetadata\022A\n\006"
  "labels\030\003 \003(\01321.runtime.v1alpha2.Containe"
  "rAttributes.LabelsEntry\022K\n\013annotations\030\004"
  " \003(\01326.runtime.v1alpha2.ContainerAttribu"
  "tes.AnnotationsEntry\032-\n\013LabelsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Annotatio"
  "nsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "\336\001\n\016ContainerStats\0229\n\nattributes\030\001 \001(\0132%"
  ".runtime.v1alpha2.ContainerAttributes\022\'\n"
  "\003cpu\030\002 \001(\0132\032.runtime.v1alpha2.CpuUsage\022-"
  "\n\006memory\030\003 \001(\0132\035.runtime.v1alpha2.Memory"
  "Usage\0229\n\016writable_layer\030\004 \001(\0132!.runtime."
  "v1alpha2.FilesystemUsage\"]\n\010CpuUsage\022\021\n\t"
  "timestamp\030\001 \001(\003\022>\n\027usage_core_nano_secon"
  "ds\030\002 \001(\0132\035.runtime.v1alpha2.UInt64Value\""
  "Z\n\013MemoryUsage\022\021\n\ttimestamp\030\001 \001(\003\0228\n\021wor"
  "king_set_bytes\030\002 \001(\0132\035.runtime.v1alpha2."
  "UInt64Value\"1\n\031ReopenContainerLogRequest"
  "\022\024\n\014container_id\030\001 \001(\t\"\034\n\032ReopenContaine"
  "rLogResponse*&\n\010Protocol\022\007\n\003TCP\020\000\022\007\n\003UDP"
  "\020\001\022\010\n\004SCTP\020\002*m\n\020MountPropagation\022\027\n\023PROP"
  "AGATION_PRIVATE\020\000\022!\n\035PROPAGATION_HOST_TO"
  "_CONTAINER\020\001\022\035\n\031PROPAGATION_BIDIRECTIONA"
  "L\020\002*=\n\rNamespaceMode\022\007\n\003POD\020\000\022\r\n\tCONTAIN"
  "ER\020\001\022\010\n\004NODE\020\002\022\n\n\006TARGET\020\003*:\n\017PodSandbox"
  "State\022\021\n\rSANDBOX_READY\020\000\022\024\n\020SANDBOX_NOTR"
  "EADY\020\001*k\n\016ContainerState\022\025\n\021CONTAINER_CR"
  "EATED\020\000\022\025\n\021CONTAINER_RUNNING\020\001\022\024\n\020CONTAI"
  "NER_EXITED\020\002\022\025\n\021CONTAINER_UNKNOWN\020\0032\301\021\n\016"
  "RuntimeService\022P\n\007Version\022 .runtime.v1al"
  "pha2.VersionRequest\032!.runtime.v1alpha2.V"
  "ersionResponse\"\000\022b\n\rRunPodSandbox\022&.runt"
  "ime.v1alpha2.RunPodSandboxRequest\032\'.runt"
  "ime.v1alpha2.RunPodSandboxResponse\"\000\022e\n\016"
  "StopPodSandbox\022\'.runtime.v1alpha2.StopPo"
  "dSandboxRequest\032(.runtime.v1alpha2.StopP"
  "odSandboxResponse\"\000\022k\n\020RemovePodSandbox\022"
  ").runtime.v1alpha2.RemovePodSandboxReque"
  "st\032*.runtime.v1alpha2.RemovePodSandboxRe"
  "sponse\"\000\022k\n\020PodSandboxStatus\022).runtime.v"
  "1alpha2.PodSandboxStatusRequest\032*.runtim"
  "e.v1alpha2.PodSandboxStatusResponse\"\000\022e\n"
  "\016ListPodSandbox\022\'.runtime.v1alpha2.ListP"
  "odSandboxRequest\032(.runtime.v1alpha2.List"
  "PodSandboxResponse\"\000\022h\n\017CreateContainer\022"
  "(.runtime.v1alpha2.CreateContainerReques"
  "t\032).runtime.v1alpha2.CreateContainerResp"
  "onse\"\000\022e\n\016StartContainer\022\'.runtime.v1alp"
  "ha2.StartContainerRequest\032(.runtime.v1al"
  "pha2.StartContainerResponse\"\000\022b\n\rStopCon"
  "tainer\022&.runtime.v1alpha2.StopContainerR"
  "equest\032\'.runtime.v1alpha2.StopContainerR"
  "esponse\"\000\022h\n\017RemoveContainer\022(.runtime.v"
  "1alpha2.RemoveContainerRequest\032).runtime"
  ".v1alpha2.RemoveContainerResponse\"\000\022e\n\016L"
  "istContainers\022\'.runtime.v1alpha2.ListCon"
  "tainersRequest\032(.runtime.v1alpha2.ListCo"
  "ntainersResponse\"\000\022h\n\017ContainerStatus\022(."
  "runtime.v1alpha2.ContainerStatusRequest\032"
  ").runtime.v1alpha2.ContainerStatusRespon"
  "se\"\000\022\203\001\n\030UpdateContainerResources\0221.runt"
  "ime.v1alpha2.UpdateContainerResourcesReq"
  "uest\0322.runtime.v1alpha2.UpdateContainerR"
  "esourcesResponse\"\000\022q\n\022ReopenContainerLog"
  "\022+.runtime.v1alpha2.ReopenContainerLogRe"
  "quest\032,.runtime.v1alpha2.ReopenContainer"
  "LogResponse\"\000\022S\n\010ExecSync\022!.runtime.v1al"
  "pha2.ExecSyncRequest\032\".runtime.v1alpha2."
  "ExecSyncResponse\"\000\022G\n\004Exec\022\035.runtime.v1a"
  "lpha2.ExecRequest\032\036.runtime.v1alpha2.Exe"
  "cResponse\"\000\022M\n\006Attach\022\037.runtime.v1alpha2"
  ".AttachRequest\032 .runtime.v1alpha2.Attach"
  "Response\"\000\022\\\n\013PortForward\022$.runtime.v1al"
  "pha2.PortForwardRequest\032%.runtime.v1alph"
  "a2.PortForwardResponse\"\000\022e\n\016ContainerSta"
  "ts\022\'.runtime.v1alpha2.ContainerStatsRequ"
  "est\032(.runtime.v1alpha2.ContainerStatsRes"
  "ponse\"\000\022q\n\022ListContainerStats\022+.runtime."
  "v1alpha2.ListContainerStatsRequest\032,.run"
  "time.v1alpha2.ListContainerStatsResponse"
  "\"\000\022t\n\023UpdateRuntimeConfig\022,.runtime.v1al"
  "pha2.UpdateRuntimeConfigRequest\032-.runtim"
  "e.v1alpha2.UpdateRuntimeConfigResponse\"\000"
  "\022M\n\006Status\022\037.runtime.v1alpha2.StatusRequ"
  "est\032 .runtime.v1alpha2.StatusResponse\"\0002"
  "\333\003\n\014ImageService\022Y\n\nListImages\022#.runtime"
  ".v1alpha2.ListImagesRequest\032$.runtime.v1"
  "alpha2.ListImagesResponse\"\000\022\\\n\013ImageStat"
  "us\022$.runtime.v1alpha2.ImageStatusRequest"
  "\032%.runtime.v1alpha2.ImageStatusResponse\""
  "\000\022V\n\tPullImage\022\".runtime.v1alpha2.PullIm"
  "ageRequest\032#.runtime.v1alpha2.PullImageR"
  "esponse\"\000\022\\\n\013RemoveImage\022$.runtime.v1alp"
  "ha2.RemoveImageRequest\032%.runtime.v1alpha"
  "2.RemoveImageResponse\"\000\022\\\n\013ImageFsInfo\022$"
  ".runtime.v1alpha2.ImageFsInfoRequest\032%.r"
  "untime.v1alpha2.ImageFsInfoResponse\"\000B\nZ"
  "\010v1alpha2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2eproto_sccs[127] = {
  &scc_info_AttachRequest_api_2eproto.base,
  &scc_info_AttachResponse_api_2eproto.base,
  &scc_info_AuthConfig_api_2eproto.base,
  &scc_info_Capability_api_2eproto.base,
  &scc_info_Container_api_2eproto.base,
  &scc_info_Container_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_Container_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerAttributes_api_2eproto.base,
  &scc_info_ContainerAttributes_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerAttributes_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerConfig_api_2eproto.base,
  &scc_info_ContainerConfig_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerConfig_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerFilter_api_2eproto.base,
  &scc_info_ContainerFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerMetadata_api_2eproto.base,
  &scc_info_ContainerStateValue_api_2eproto.base,
  &scc_info_ContainerStats_api_2eproto.base,
  &scc_info_ContainerStatsFilter_api_2eproto.base,
  &scc_info_ContainerStatsFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerStatsRequest_api_2eproto.base,
  &scc_info_ContainerStatsResponse_api_2eproto.base,
  &scc_info_ContainerStatus_api_2eproto.base,
  &scc_info_ContainerStatus_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerStatus_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ContainerStatusRequest_api_2eproto.base,
  &scc_info_ContainerStatusResponse_api_2eproto.base,
  &scc_info_ContainerStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,
  &scc_info_CpuUsage_api_2eproto.base,
  &scc_info_CreateContainerRequest_api_2eproto.base,
  &scc_info_CreateContainerResponse_api_2eproto.base,
  &scc_info_DNSConfig_api_2eproto.base,
  &scc_info_Device_api_2eproto.base,
  &scc_info_ExecRequest_api_2eproto.base,
  &scc_info_ExecResponse_api_2eproto.base,
  &scc_info_ExecSyncRequest_api_2eproto.base,
  &scc_info_ExecSyncResponse_api_2eproto.base,
  &scc_info_FilesystemIdentifier_api_2eproto.base,
  &scc_info_FilesystemUsage_api_2eproto.base,
  &scc_info_HugepageLimit_api_2eproto.base,
  &scc_info_Image_api_2eproto.base,
  &scc_info_ImageFilter_api_2eproto.base,
  &scc_info_ImageFsInfoRequest_api_2eproto.base,
  &scc_info_ImageFsInfoResponse_api_2eproto.base,
  &scc_info_ImageSpec_api_2eproto.base,
  &scc_info_ImageSpec_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_ImageStatusRequest_api_2eproto.base,
  &scc_info_ImageStatusResponse_api_2eproto.base,
  &scc_info_ImageStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,
  &scc_info_Int64Value_api_2eproto.base,
  &scc_info_KeyValue_api_2eproto.base,
  &scc_info_LinuxContainerConfig_api_2eproto.base,
  &scc_info_LinuxContainerResources_api_2eproto.base,
  &scc_info_LinuxContainerSecurityContext_api_2eproto.base,
  &scc_info_LinuxPodSandboxConfig_api_2eproto.base,
  &scc_info_LinuxPodSandboxConfig_SysctlsEntry_DoNotUse_api_2eproto.base,
  &scc_info_LinuxPodSandboxStatus_api_2eproto.base,
  &scc_info_LinuxSandboxSecurityContext_api_2eproto.base,
  &scc_info_ListContainerStatsRequest_api_2eproto.base,
  &scc_info_ListContainerStatsResponse_api_2eproto.base,
  &scc_info_ListContainersRequest_api_2eproto.base,
  &scc_info_ListContainersResponse_api_2eproto.base,
  &scc_info_ListImagesRequest_api_2eproto.base,
  &scc_info_ListImagesResponse_api_2eproto.base,
  &scc_info_ListPodSandboxRequest_api_2eproto.base,
  &scc_info_ListPodSandboxResponse_api_2eproto.base,
  &scc_info_MemoryUsage_api_2eproto.base,
  &scc_info_Mount_api_2eproto.base,
  &scc_info_Namespace_api_2eproto.base,
  &scc_info_NamespaceOption_api_2eproto.base,
  &scc_info_NetworkConfig_api_2eproto.base,
  &scc_info_PodIP_api_2eproto.base,
  &scc_info_PodSandbox_api_2eproto.base,
  &scc_info_PodSandbox_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandbox_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxConfig_api_2eproto.base,
  &scc_info_PodSandboxConfig_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxConfig_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxFilter_api_2eproto.base,
  &scc_info_PodSandboxFilter_LabelSelectorEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxMetadata_api_2eproto.base,
  &scc_info_PodSandboxNetworkStatus_api_2eproto.base,
  &scc_info_PodSandboxStateValue_api_2eproto.base,
  &scc_info_PodSandboxStatus_api_2eproto.base,
  &scc_info_PodSandboxStatus_AnnotationsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxStatus_LabelsEntry_DoNotUse_api_2eproto.base,
  &scc_info_PodSandboxStatusRequest_api_2eproto.base,
  &scc_info_PodSandboxStatusResponse_api_2eproto.base,
  &scc_info_PodSandboxStatusResponse_InfoEntry_DoNotUse_api_2eproto.base,
  &scc_info_PortForwardRequest_api_2eproto.base,
  &scc_info_PortForwardResponse_api_2eproto.base,
  &scc_info_PortMapping_api_2eproto.base,
  &scc_info_PullImageRequest_api_2eproto.base,
  &scc_info_PullImageResponse_api_2eproto.base,
  &scc_info_RemoveContainerRequest_api_2eproto.base,
  &scc_info_RemoveContainerResponse_api_2eproto.base,
  &scc_info_RemoveImageRequest_api_2eproto.base,
  &scc_info_RemoveImageResponse_api_2eproto.base,
  &scc_info_RemovePodSandboxRequest_api_2eproto.base,
  &scc_info_RemovePodSandboxResponse_api_2eproto.base,
  &scc_info_ReopenContainerLogRequest_api_2eproto.base,
  &scc_info_ReopenContainerLogResponse_api_2eproto.base,
  &scc_info_RunPodSandboxRequest_api_2eproto.base,
  &scc_info_RunPodSandboxResponse_api_2eproto.base,
  &scc_info_RuntimeCondition_api_2eproto.base,
  &scc_info_RuntimeConfig_api_2eproto.base,
  &scc_info_RuntimeStatus_api_2eproto.base,
  &scc_info_SELinuxOption_api_2eproto.base,
  &scc_info_StartContainerRequest_api_2eproto.base,
  &scc_info_StartContainerResponse_api_2eproto.base,
  &scc_info_StatusRequest_api_2eproto.base,
  &scc_info_StatusResponse_api_2eproto.base,
  &scc_info_StatusResponse_InfoEntry_DoNotUse_api_2eproto.base,
  &scc_info_StopContainerRequest_api_2eproto.base,
  &scc_info_StopContainerResponse_api_2eproto.base,
  &scc_info_StopPodSandboxRequest_api_2eproto.base,
  &scc_info_StopPodSandboxResponse_api_2eproto.base,
  &scc_info_UInt64Value_api_2eproto.base,
  &scc_info_UpdateContainerResourcesRequest_api_2eproto.base,
  &scc_info_UpdateContainerResourcesResponse_api_2eproto.base,
  &scc_info_UpdateRuntimeConfigRequest_api_2eproto.base,
  &scc_info_UpdateRuntimeConfigResponse_api_2eproto.base,
  &scc_info_VersionRequest_api_2eproto.base,
  &scc_info_VersionResponse_api_2eproto.base,
  &scc_info_WindowsContainerConfig_api_2eproto.base,
  &scc_info_WindowsContainerResources_api_2eproto.base,
  &scc_info_WindowsContainerSecurityContext_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  false, false, descriptor_table_protodef_api_2eproto, "api.proto", 15977,
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_sccs, descriptor_table_api_2eproto_deps, 127, 0,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  file_level_metadata_api_2eproto, 127, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto)), true);
namespace runtime {
namespace v1alpha2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MountPropagation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[1];
}
bool MountPropagation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NamespaceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[2];
}
bool NamespaceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PodSandboxState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[3];
}
bool PodSandboxState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[4];
}
bool ContainerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VersionRequest::InitAsDefaultInstance() {
}
class VersionRequest::_Internal {
 public:
};

VersionRequest::VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.VersionRequest)
}
VersionRequest::VersionRequest(const VersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.VersionRequest)
}

void VersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionRequest_api_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionRequest::~VersionRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.VersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionRequest::ArenaDtor(void* object) {
  VersionRequest* _this = reinterpret_cast< VersionRequest* >(object);
  (void)_this;
}
void VersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionRequest& VersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionRequest_api_2eproto.base);
  return *internal_default_instance();
}


void VersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.VersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.VersionRequest.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.VersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.VersionRequest.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.VersionRequest)
  return target;
}

size_t VersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.VersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.VersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.VersionRequest)
    MergeFrom(*source);
  }
}

void VersionRequest::MergeFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void VersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionRequest::CopyFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionRequest::IsInitialized() const {
  return true;
}

void VersionRequest::InternalSwap(VersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionResponse::InitAsDefaultInstance() {
}
class VersionResponse::_Internal {
 public:
};

VersionResponse::VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.VersionResponse)
}
VersionResponse::VersionResponse(const VersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_name().empty()) {
    runtime_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_name(),
      GetArena());
  }
  runtime_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_version().empty()) {
    runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_version(),
      GetArena());
  }
  runtime_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_api_version().empty()) {
    runtime_api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_api_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.VersionResponse)
}

void VersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionResponse_api_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionResponse::~VersionResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.VersionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionResponse::ArenaDtor(void* object) {
  VersionResponse* _this = reinterpret_cast< VersionResponse* >(object);
  (void)_this;
}
void VersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionResponse& VersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionResponse_api_2eproto.base);
  return *internal_default_instance();
}


void VersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.VersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_api_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.VersionResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_runtime_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.VersionResponse.runtime_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_runtime_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.VersionResponse.runtime_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_api_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_runtime_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.VersionResponse.runtime_api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.VersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.VersionResponse.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string runtime_name = 2;
  if (this->runtime_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_name().data(), static_cast<int>(this->_internal_runtime_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.VersionResponse.runtime_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_runtime_name(), target);
  }

  // string runtime_version = 3;
  if (this->runtime_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_version().data(), static_cast<int>(this->_internal_runtime_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.VersionResponse.runtime_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_runtime_version(), target);
  }

  // string runtime_api_version = 4;
  if (this->runtime_api_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_api_version().data(), static_cast<int>(this->_internal_runtime_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.VersionResponse.runtime_api_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_runtime_api_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.VersionResponse)
  return target;
}

size_t VersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.VersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string runtime_name = 2;
  if (this->runtime_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_name());
  }

  // string runtime_version = 3;
  if (this->runtime_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_version());
  }

  // string runtime_api_version = 4;
  if (this->runtime_api_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_api_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.VersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.VersionResponse)
    MergeFrom(*source);
  }
}

void VersionResponse::MergeFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.runtime_name().size() > 0) {
    _internal_set_runtime_name(from._internal_runtime_name());
  }
  if (from.runtime_version().size() > 0) {
    _internal_set_runtime_version(from._internal_runtime_version());
  }
  if (from.runtime_api_version().size() > 0) {
    _internal_set_runtime_api_version(from._internal_runtime_api_version());
  }
}

void VersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  return true;
}

void VersionResponse::InternalSwap(VersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_name_.Swap(&other->runtime_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_version_.Swap(&other->runtime_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_api_version_.Swap(&other->runtime_api_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNSConfig::InitAsDefaultInstance() {
}
class DNSConfig::_Internal {
 public:
};

DNSConfig::DNSConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena),
  searches_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.DNSConfig)
}
DNSConfig::DNSConfig(const DNSConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_),
      searches_(from.searches_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.DNSConfig)
}

void DNSConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNSConfig_api_2eproto.base);
}

DNSConfig::~DNSConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.DNSConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DNSConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DNSConfig::ArenaDtor(void* object) {
  DNSConfig* _this = reinterpret_cast< DNSConfig* >(object);
  (void)_this;
}
void DNSConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSConfig& DNSConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSConfig_api_2eproto.base);
  return *internal_default_instance();
}


void DNSConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.DNSConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  searches_.Clear();
  options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_servers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.DNSConfig.servers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_searches();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.DNSConfig.searches"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.DNSConfig.options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.DNSConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string servers = 1;
  for (int i = 0, n = this->_internal_servers_size(); i < n; i++) {
    const auto& s = this->_internal_servers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.DNSConfig.servers");
    target = stream->WriteString(1, s, target);
  }

  // repeated string searches = 2;
  for (int i = 0, n = this->_internal_searches_size(); i < n; i++) {
    const auto& s = this->_internal_searches(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.DNSConfig.searches");
    target = stream->WriteString(2, s, target);
  }

  // repeated string options = 3;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.DNSConfig.options");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.DNSConfig)
  return target;
}

size_t DNSConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.DNSConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string servers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(servers_.size());
  for (int i = 0, n = servers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      servers_.Get(i));
  }

  // repeated string searches = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(searches_.size());
  for (int i = 0, n = searches_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      searches_.Get(i));
  }

  // repeated string options = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(options_.size());
  for (int i = 0, n = options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      options_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.DNSConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNSConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.DNSConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.DNSConfig)
    MergeFrom(*source);
  }
}

void DNSConfig::MergeFrom(const DNSConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.DNSConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  searches_.MergeFrom(from.searches_);
  options_.MergeFrom(from.options_);
}

void DNSConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.DNSConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSConfig::CopyFrom(const DNSConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.DNSConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSConfig::IsInitialized() const {
  return true;
}

void DNSConfig::InternalSwap(DNSConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  searches_.InternalSwap(&other->searches_);
  options_.InternalSwap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortMapping::InitAsDefaultInstance() {
}
class PortMapping::_Internal {
 public:
};

PortMapping::PortMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PortMapping)
}
PortMapping::PortMapping(const PortMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_ip().empty()) {
    host_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_ip(),
      GetArena());
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_port_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(host_port_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PortMapping)
}

void PortMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortMapping_api_2eproto.base);
  host_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_port_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(host_port_));
}

PortMapping::~PortMapping() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PortMapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortMapping::ArenaDtor(void* object) {
  PortMapping* _this = reinterpret_cast< PortMapping* >(object);
  (void)_this;
}
void PortMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortMapping& PortMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortMapping_api_2eproto.base);
  return *internal_default_instance();
}


void PortMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PortMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_port_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(host_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::runtime::v1alpha2::Protocol>(val));
        } else goto handle_unusual;
        continue;
      // int32 container_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          container_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 host_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          host_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_host_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PortMapping.host_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PortMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.Protocol protocol = 1;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // int32 container_port = 2;
  if (this->container_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_container_port(), target);
  }

  // int32 host_port = 3;
  if (this->host_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_host_port(), target);
  }

  // string host_ip = 4;
  if (this->host_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_ip().data(), static_cast<int>(this->_internal_host_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PortMapping.host_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PortMapping)
  return target;
}

size_t PortMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PortMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_ip = 4;
  if (this->host_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_ip());
  }

  // .runtime.v1alpha2.Protocol protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // int32 container_port = 2;
  if (this->container_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_container_port());
  }

  // int32 host_port = 3;
  if (this->host_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_host_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PortMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const PortMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PortMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PortMapping)
    MergeFrom(*source);
  }
}

void PortMapping::MergeFrom(const PortMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PortMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_ip().size() > 0) {
    _internal_set_host_ip(from._internal_host_ip());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.container_port() != 0) {
    _internal_set_container_port(from._internal_container_port());
  }
  if (from.host_port() != 0) {
    _internal_set_host_port(from._internal_host_port());
  }
}

void PortMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PortMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortMapping::CopyFrom(const PortMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PortMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortMapping::IsInitialized() const {
  return true;
}

void PortMapping::InternalSwap(PortMapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_ip_.Swap(&other->host_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortMapping, host_port_)
      + sizeof(PortMapping::host_port_)
      - PROTOBUF_FIELD_OFFSET(PortMapping, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mount::InitAsDefaultInstance() {
}
class Mount::_Internal {
 public:
};

Mount::Mount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Mount)
}
Mount::Mount(const Mount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_path().empty()) {
    container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_path(),
      GetArena());
  }
  host_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_path().empty()) {
    host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_path(),
      GetArena());
  }
  ::memcpy(&readonly_, &from.readonly_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagation_) -
    reinterpret_cast<char*>(&readonly_)) + sizeof(propagation_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Mount)
}

void Mount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mount_api_2eproto.base);
  container_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&readonly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagation_) -
      reinterpret_cast<char*>(&readonly_)) + sizeof(propagation_));
}

Mount::~Mount() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Mount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mount::ArenaDtor(void* object) {
  Mount* _this = reinterpret_cast< Mount* >(object);
  (void)_this;
}
void Mount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mount& Mount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mount_api_2eproto.base);
  return *internal_default_instance();
}


void Mount::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&readonly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagation_) -
      reinterpret_cast<char*>(&readonly_)) + sizeof(propagation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Mount.container_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Mount.host_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool selinux_relabel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          selinux_relabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.MountPropagation propagation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_propagation(static_cast<::runtime::v1alpha2::MountPropagation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_path = 1;
  if (this->container_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_path().data(), static_cast<int>(this->_internal_container_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Mount.container_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_path(), target);
  }

  // string host_path = 2;
  if (this->host_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_path().data(), static_cast<int>(this->_internal_host_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Mount.host_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_path(), target);
  }

  // bool readonly = 3;
  if (this->readonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_readonly(), target);
  }

  // bool selinux_relabel = 4;
  if (this->selinux_relabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_selinux_relabel(), target);
  }

  // .runtime.v1alpha2.MountPropagation propagation = 5;
  if (this->propagation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_propagation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Mount)
  return target;
}

size_t Mount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Mount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_path = 1;
  if (this->container_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_path());
  }

  // string host_path = 2;
  if (this->host_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_path());
  }

  // bool readonly = 3;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  // bool selinux_relabel = 4;
  if (this->selinux_relabel() != 0) {
    total_size += 1 + 1;
  }

  // .runtime.v1alpha2.MountPropagation propagation = 5;
  if (this->propagation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_propagation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Mount)
  GOOGLE_DCHECK_NE(&from, this);
  const Mount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Mount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Mount)
    MergeFrom(*source);
  }
}

void Mount::MergeFrom(const Mount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Mount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_path().size() > 0) {
    _internal_set_container_path(from._internal_container_path());
  }
  if (from.host_path().size() > 0) {
    _internal_set_host_path(from._internal_host_path());
  }
  if (from.readonly() != 0) {
    _internal_set_readonly(from._internal_readonly());
  }
  if (from.selinux_relabel() != 0) {
    _internal_set_selinux_relabel(from._internal_selinux_relabel());
  }
  if (from.propagation() != 0) {
    _internal_set_propagation(from._internal_propagation());
  }
}

void Mount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Mount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mount::CopyFrom(const Mount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Mount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mount::IsInitialized() const {
  return true;
}

void Mount::InternalSwap(Mount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_path_.Swap(&other->container_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_path_.Swap(&other->host_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mount, propagation_)
      + sizeof(Mount::propagation_)
      - PROTOBUF_FIELD_OFFSET(Mount, readonly_)>(
          reinterpret_cast<char*>(&readonly_),
          reinterpret_cast<char*>(&other->readonly_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamespaceOption::InitAsDefaultInstance() {
}
class NamespaceOption::_Internal {
 public:
};

NamespaceOption::NamespaceOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.NamespaceOption)
}
NamespaceOption::NamespaceOption(const NamespaceOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_id().empty()) {
    target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_id(),
      GetArena());
  }
  ::memcpy(&network_, &from.network_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipc_) -
    reinterpret_cast<char*>(&network_)) + sizeof(ipc_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.NamespaceOption)
}

void NamespaceOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamespaceOption_api_2eproto.base);
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipc_) -
      reinterpret_cast<char*>(&network_)) + sizeof(ipc_));
}

NamespaceOption::~NamespaceOption() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.NamespaceOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamespaceOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamespaceOption::ArenaDtor(void* object) {
  NamespaceOption* _this = reinterpret_cast< NamespaceOption* >(object);
  (void)_this;
}
void NamespaceOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamespaceOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamespaceOption& NamespaceOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamespaceOption_api_2eproto.base);
  return *internal_default_instance();
}


void NamespaceOption::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.NamespaceOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipc_) -
      reinterpret_cast<char*>(&network_)) + sizeof(ipc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamespaceOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.NamespaceMode network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network(static_cast<::runtime::v1alpha2::NamespaceMode>(val));
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.NamespaceMode pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pid(static_cast<::runtime::v1alpha2::NamespaceMode>(val));
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.NamespaceMode ipc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ipc(static_cast<::runtime::v1alpha2::NamespaceMode>(val));
        } else goto handle_unusual;
        continue;
      // string target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.NamespaceOption.target_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamespaceOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.NamespaceOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.NamespaceMode network = 1;
  if (this->network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_network(), target);
  }

  // .runtime.v1alpha2.NamespaceMode pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pid(), target);
  }

  // .runtime.v1alpha2.NamespaceMode ipc = 3;
  if (this->ipc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ipc(), target);
  }

  // string target_id = 4;
  if (this->target_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_id().data(), static_cast<int>(this->_internal_target_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.NamespaceOption.target_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.NamespaceOption)
  return target;
}

size_t NamespaceOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.NamespaceOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_id = 4;
  if (this->target_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_id());
  }

  // .runtime.v1alpha2.NamespaceMode network = 1;
  if (this->network() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network());
  }

  // .runtime.v1alpha2.NamespaceMode pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pid());
  }

  // .runtime.v1alpha2.NamespaceMode ipc = 3;
  if (this->ipc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ipc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamespaceOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.NamespaceOption)
  GOOGLE_DCHECK_NE(&from, this);
  const NamespaceOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamespaceOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.NamespaceOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.NamespaceOption)
    MergeFrom(*source);
  }
}

void NamespaceOption::MergeFrom(const NamespaceOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.NamespaceOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id().size() > 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.network() != 0) {
    _internal_set_network(from._internal_network());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.ipc() != 0) {
    _internal_set_ipc(from._internal_ipc());
  }
}

void NamespaceOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.NamespaceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamespaceOption::CopyFrom(const NamespaceOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.NamespaceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamespaceOption::IsInitialized() const {
  return true;
}

void NamespaceOption::InternalSwap(NamespaceOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_id_.Swap(&other->target_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NamespaceOption, ipc_)
      + sizeof(NamespaceOption::ipc_)
      - PROTOBUF_FIELD_OFFSET(NamespaceOption, network_)>(
          reinterpret_cast<char*>(&network_),
          reinterpret_cast<char*>(&other->network_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NamespaceOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Int64Value::InitAsDefaultInstance() {
}
class Int64Value::_Internal {
 public:
};

Int64Value::Int64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Int64Value)
}
Int64Value::Int64Value(const Int64Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Int64Value)
}

void Int64Value::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Int64Value::~Int64Value() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Int64Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Int64Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Int64Value::ArenaDtor(void* object) {
  Int64Value* _this = reinterpret_cast< Int64Value* >(object);
  (void)_this;
}
void Int64Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int64Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64Value& Int64Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int64Value_api_2eproto.base);
  return *internal_default_instance();
}


void Int64Value::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Int64Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int64Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Int64Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Int64Value)
  return target;
}

size_t Int64Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Int64Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Int64Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int64Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Int64Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Int64Value)
    MergeFrom(*source);
  }
}

void Int64Value::MergeFrom(const Int64Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Int64Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Int64Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Int64Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Value::CopyFrom(const Int64Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Int64Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Value::IsInitialized() const {
  return true;
}

void Int64Value::InternalSwap(Int64Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinuxSandboxSecurityContext::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_._instance.get_mutable()->namespace_options_ = const_cast< ::runtime::v1alpha2::NamespaceOption*>(
      ::runtime::v1alpha2::NamespaceOption::internal_default_instance());
  ::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_._instance.get_mutable()->selinux_options_ = const_cast< ::runtime::v1alpha2::SELinuxOption*>(
      ::runtime::v1alpha2::SELinuxOption::internal_default_instance());
  ::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_._instance.get_mutable()->run_as_user_ = const_cast< ::runtime::v1alpha2::Int64Value*>(
      ::runtime::v1alpha2::Int64Value::internal_default_instance());
  ::runtime::v1alpha2::_LinuxSandboxSecurityContext_default_instance_._instance.get_mutable()->run_as_group_ = const_cast< ::runtime::v1alpha2::Int64Value*>(
      ::runtime::v1alpha2::Int64Value::internal_default_instance());
}
class LinuxSandboxSecurityContext::_Internal {
 public:
  static const ::runtime::v1alpha2::NamespaceOption& namespace_options(const LinuxSandboxSecurityContext* msg);
  static const ::runtime::v1alpha2::SELinuxOption& selinux_options(const LinuxSandboxSecurityContext* msg);
  static const ::runtime::v1alpha2::Int64Value& run_as_user(const LinuxSandboxSecurityContext* msg);
  static const ::runtime::v1alpha2::Int64Value& run_as_group(const LinuxSandboxSecurityContext* msg);
};

const ::runtime::v1alpha2::NamespaceOption&
LinuxSandboxSecurityContext::_Internal::namespace_options(const LinuxSandboxSecurityContext* msg) {
  return *msg->namespace_options_;
}
const ::runtime::v1alpha2::SELinuxOption&
LinuxSandboxSecurityContext::_Internal::selinux_options(const LinuxSandboxSecurityContext* msg) {
  return *msg->selinux_options_;
}
const ::runtime::v1alpha2::Int64Value&
LinuxSandboxSecurityContext::_Internal::run_as_user(const LinuxSandboxSecurityContext* msg) {
  return *msg->run_as_user_;
}
const ::runtime::v1alpha2::Int64Value&
LinuxSandboxSecurityContext::_Internal::run_as_group(const LinuxSandboxSecurityContext* msg) {
  return *msg->run_as_group_;
}
LinuxSandboxSecurityContext::LinuxSandboxSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supplemental_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxSandboxSecurityContext)
}
LinuxSandboxSecurityContext::LinuxSandboxSecurityContext(const LinuxSandboxSecurityContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supplemental_groups_(from.supplemental_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seccomp_profile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seccomp_profile_path().empty()) {
    seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seccomp_profile_path(),
      GetArena());
  }
  if (from._internal_has_namespace_options()) {
    namespace_options_ = new ::runtime::v1alpha2::NamespaceOption(*from.namespace_options_);
  } else {
    namespace_options_ = nullptr;
  }
  if (from._internal_has_selinux_options()) {
    selinux_options_ = new ::runtime::v1alpha2::SELinuxOption(*from.selinux_options_);
  } else {
    selinux_options_ = nullptr;
  }
  if (from._internal_has_run_as_user()) {
    run_as_user_ = new ::runtime::v1alpha2::Int64Value(*from.run_as_user_);
  } else {
    run_as_user_ = nullptr;
  }
  if (from._internal_has_run_as_group()) {
    run_as_group_ = new ::runtime::v1alpha2::Int64Value(*from.run_as_group_);
  } else {
    run_as_group_ = nullptr;
  }
  ::memcpy(&readonly_rootfs_, &from.readonly_rootfs_,
    static_cast<size_t>(reinterpret_cast<char*>(&privileged_) -
    reinterpret_cast<char*>(&readonly_rootfs_)) + sizeof(privileged_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxSandboxSecurityContext)
}

void LinuxSandboxSecurityContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxSandboxSecurityContext_api_2eproto.base);
  seccomp_profile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&namespace_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileged_) -
      reinterpret_cast<char*>(&namespace_options_)) + sizeof(privileged_));
}

LinuxSandboxSecurityContext::~LinuxSandboxSecurityContext() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxSandboxSecurityContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxSandboxSecurityContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  seccomp_profile_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete namespace_options_;
  if (this != internal_default_instance()) delete selinux_options_;
  if (this != internal_default_instance()) delete run_as_user_;
  if (this != internal_default_instance()) delete run_as_group_;
}

void LinuxSandboxSecurityContext::ArenaDtor(void* object) {
  LinuxSandboxSecurityContext* _this = reinterpret_cast< LinuxSandboxSecurityContext* >(object);
  (void)_this;
}
void LinuxSandboxSecurityContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxSandboxSecurityContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxSandboxSecurityContext& LinuxSandboxSecurityContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxSandboxSecurityContext_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxSandboxSecurityContext::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplemental_groups_.Clear();
  seccomp_profile_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && namespace_options_ != nullptr) {
    delete namespace_options_;
  }
  namespace_options_ = nullptr;
  if (GetArena() == nullptr && selinux_options_ != nullptr) {
    delete selinux_options_;
  }
  selinux_options_ = nullptr;
  if (GetArena() == nullptr && run_as_user_ != nullptr) {
    delete run_as_user_;
  }
  run_as_user_ = nullptr;
  if (GetArena() == nullptr && run_as_group_ != nullptr) {
    delete run_as_group_;
  }
  run_as_group_ = nullptr;
  ::memset(&readonly_rootfs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileged_) -
      reinterpret_cast<char*>(&readonly_rootfs_)) + sizeof(privileged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxSandboxSecurityContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.NamespaceOption namespace_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.SELinuxOption selinux_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selinux_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.Int64Value run_as_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_as_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly_rootfs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          readonly_rootfs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 supplemental_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_supplemental_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool privileged = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          privileged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seccomp_profile_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_seccomp_profile_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.Int64Value run_as_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_as_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxSandboxSecurityContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.NamespaceOption namespace_options = 1;
  if (this->has_namespace_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_options(this), target, stream);
  }

  // .runtime.v1alpha2.SELinuxOption selinux_options = 2;
  if (this->has_selinux_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selinux_options(this), target, stream);
  }

  // .runtime.v1alpha2.Int64Value run_as_user = 3;
  if (this->has_run_as_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::run_as_user(this), target, stream);
  }

  // bool readonly_rootfs = 4;
  if (this->readonly_rootfs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_readonly_rootfs(), target);
  }

  // repeated int64 supplemental_groups = 5;
  {
    int byte_size = _supplemental_groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_supplemental_groups(), byte_size, target);
    }
  }

  // bool privileged = 6;
  if (this->privileged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_privileged(), target);
  }

  // string seccomp_profile_path = 7;
  if (this->seccomp_profile_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seccomp_profile_path().data(), static_cast<int>(this->_internal_seccomp_profile_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxSandboxSecurityContext.seccomp_profile_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_seccomp_profile_path(), target);
  }

  // .runtime.v1alpha2.Int64Value run_as_group = 8;
  if (this->has_run_as_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::run_as_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxSandboxSecurityContext)
  return target;
}

size_t LinuxSandboxSecurityContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 supplemental_groups = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->supplemental_groups_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supplemental_groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string seccomp_profile_path = 7;
  if (this->seccomp_profile_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seccomp_profile_path());
  }

  // .runtime.v1alpha2.NamespaceOption namespace_options = 1;
  if (this->has_namespace_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace_options_);
  }

  // .runtime.v1alpha2.SELinuxOption selinux_options = 2;
  if (this->has_selinux_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selinux_options_);
  }

  // .runtime.v1alpha2.Int64Value run_as_user = 3;
  if (this->has_run_as_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_as_user_);
  }

  // .runtime.v1alpha2.Int64Value run_as_group = 8;
  if (this->has_run_as_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_as_group_);
  }

  // bool readonly_rootfs = 4;
  if (this->readonly_rootfs() != 0) {
    total_size += 1 + 1;
  }

  // bool privileged = 6;
  if (this->privileged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxSandboxSecurityContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxSandboxSecurityContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxSandboxSecurityContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxSandboxSecurityContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxSandboxSecurityContext)
    MergeFrom(*source);
  }
}

void LinuxSandboxSecurityContext::MergeFrom(const LinuxSandboxSecurityContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplemental_groups_.MergeFrom(from.supplemental_groups_);
  if (from.seccomp_profile_path().size() > 0) {
    _internal_set_seccomp_profile_path(from._internal_seccomp_profile_path());
  }
  if (from.has_namespace_options()) {
    _internal_mutable_namespace_options()->::runtime::v1alpha2::NamespaceOption::MergeFrom(from._internal_namespace_options());
  }
  if (from.has_selinux_options()) {
    _internal_mutable_selinux_options()->::runtime::v1alpha2::SELinuxOption::MergeFrom(from._internal_selinux_options());
  }
  if (from.has_run_as_user()) {
    _internal_mutable_run_as_user()->::runtime::v1alpha2::Int64Value::MergeFrom(from._internal_run_as_user());
  }
  if (from.has_run_as_group()) {
    _internal_mutable_run_as_group()->::runtime::v1alpha2::Int64Value::MergeFrom(from._internal_run_as_group());
  }
  if (from.readonly_rootfs() != 0) {
    _internal_set_readonly_rootfs(from._internal_readonly_rootfs());
  }
  if (from.privileged() != 0) {
    _internal_set_privileged(from._internal_privileged());
  }
}

void LinuxSandboxSecurityContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxSandboxSecurityContext::CopyFrom(const LinuxSandboxSecurityContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxSandboxSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxSandboxSecurityContext::IsInitialized() const {
  return true;
}

void LinuxSandboxSecurityContext::InternalSwap(LinuxSandboxSecurityContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supplemental_groups_.InternalSwap(&other->supplemental_groups_);
  seccomp_profile_path_.Swap(&other->seccomp_profile_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinuxSandboxSecurityContext, privileged_)
      + sizeof(LinuxSandboxSecurityContext::privileged_)
      - PROTOBUF_FIELD_OFFSET(LinuxSandboxSecurityContext, namespace_options_)>(
          reinterpret_cast<char*>(&namespace_options_),
          reinterpret_cast<char*>(&other->namespace_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxSandboxSecurityContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse() {}
LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::MergeFrom(const LinuxPodSandboxConfig_SysctlsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LinuxPodSandboxConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_LinuxPodSandboxConfig_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::runtime::v1alpha2::LinuxSandboxSecurityContext*>(
      ::runtime::v1alpha2::LinuxSandboxSecurityContext::internal_default_instance());
}
class LinuxPodSandboxConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::LinuxSandboxSecurityContext& security_context(const LinuxPodSandboxConfig* msg);
};

const ::runtime::v1alpha2::LinuxSandboxSecurityContext&
LinuxPodSandboxConfig::_Internal::security_context(const LinuxPodSandboxConfig* msg) {
  return *msg->security_context_;
}
LinuxPodSandboxConfig::LinuxPodSandboxConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sysctls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxPodSandboxConfig)
}
LinuxPodSandboxConfig::LinuxPodSandboxConfig(const LinuxPodSandboxConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sysctls_.MergeFrom(from.sysctls_);
  cgroup_parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cgroup_parent().empty()) {
    cgroup_parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cgroup_parent(),
      GetArena());
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::runtime::v1alpha2::LinuxSandboxSecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxPodSandboxConfig)
}

void LinuxPodSandboxConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxPodSandboxConfig_api_2eproto.base);
  cgroup_parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_context_ = nullptr;
}

LinuxPodSandboxConfig::~LinuxPodSandboxConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxPodSandboxConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxPodSandboxConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cgroup_parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete security_context_;
}

void LinuxPodSandboxConfig::ArenaDtor(void* object) {
  LinuxPodSandboxConfig* _this = reinterpret_cast< LinuxPodSandboxConfig* >(object);
  (void)_this;
}
void LinuxPodSandboxConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxPodSandboxConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxPodSandboxConfig& LinuxPodSandboxConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxPodSandboxConfig_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxPodSandboxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sysctls_.Clear();
  cgroup_parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxPodSandboxConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cgroup_parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cgroup_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxSandboxSecurityContext security_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> sysctls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sysctls_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxPodSandboxConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgroup_parent = 1;
  if (this->cgroup_parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cgroup_parent().data(), static_cast<int>(this->_internal_cgroup_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxPodSandboxConfig.cgroup_parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cgroup_parent(), target);
  }

  // .runtime.v1alpha2.LinuxSandboxSecurityContext security_context = 2;
  if (this->has_security_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::security_context(this), target, stream);
  }

  // map<string, string> sysctls = 3;
  if (!this->_internal_sysctls().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.LinuxPodSandboxConfig.SysctlsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.LinuxPodSandboxConfig.SysctlsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sysctls().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sysctls().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sysctls().begin();
          it != this->_internal_sysctls().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sysctls().begin();
          it != this->_internal_sysctls().end(); ++it) {
        target = LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxPodSandboxConfig)
  return target;
}

size_t LinuxPodSandboxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sysctls = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sysctls_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sysctls().begin();
      it != this->_internal_sysctls().end(); ++it) {
    total_size += LinuxPodSandboxConfig_SysctlsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string cgroup_parent = 1;
  if (this->cgroup_parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cgroup_parent());
  }

  // .runtime.v1alpha2.LinuxSandboxSecurityContext security_context = 2;
  if (this->has_security_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxPodSandboxConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxPodSandboxConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxPodSandboxConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxPodSandboxConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxPodSandboxConfig)
    MergeFrom(*source);
  }
}

void LinuxPodSandboxConfig::MergeFrom(const LinuxPodSandboxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sysctls_.MergeFrom(from.sysctls_);
  if (from.cgroup_parent().size() > 0) {
    _internal_set_cgroup_parent(from._internal_cgroup_parent());
  }
  if (from.has_security_context()) {
    _internal_mutable_security_context()->::runtime::v1alpha2::LinuxSandboxSecurityContext::MergeFrom(from._internal_security_context());
  }
}

void LinuxPodSandboxConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxPodSandboxConfig::CopyFrom(const LinuxPodSandboxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxPodSandboxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxPodSandboxConfig::IsInitialized() const {
  return true;
}

void LinuxPodSandboxConfig::InternalSwap(LinuxPodSandboxConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sysctls_.Swap(&other->sysctls_);
  cgroup_parent_.Swap(&other->cgroup_parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(security_context_, other->security_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxPodSandboxConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PodSandboxMetadata::InitAsDefaultInstance() {
}
class PodSandboxMetadata::_Internal {
 public:
};

PodSandboxMetadata::PodSandboxMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxMetadata)
}
PodSandboxMetadata::PodSandboxMetadata(const PodSandboxMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uid(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  attempt_ = from.attempt_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxMetadata)
}

void PodSandboxMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxMetadata_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attempt_ = 0u;
}

PodSandboxMetadata::~PodSandboxMetadata() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PodSandboxMetadata::ArenaDtor(void* object) {
  PodSandboxMetadata* _this = reinterpret_cast< PodSandboxMetadata* >(object);
  (void)_this;
}
void PodSandboxMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxMetadata& PodSandboxMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxMetadata_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attempt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxMetadata.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxMetadata.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 attempt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxMetadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxMetadata.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxMetadata.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // uint32 attempt = 4;
  if (this->attempt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_attempt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxMetadata)
  return target;
}

size_t PodSandboxMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // uint32 attempt = 4;
  if (this->attempt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attempt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxMetadata)
    MergeFrom(*source);
  }
}

void PodSandboxMetadata::MergeFrom(const PodSandboxMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.attempt() != 0) {
    _internal_set_attempt(from._internal_attempt());
  }
}

void PodSandboxMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxMetadata::CopyFrom(const PodSandboxMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxMetadata::IsInitialized() const {
  return true;
}

void PodSandboxMetadata::InternalSwap(PodSandboxMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(attempt_, other->attempt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PodSandboxConfig_LabelsEntry_DoNotUse::PodSandboxConfig_LabelsEntry_DoNotUse() {}
PodSandboxConfig_LabelsEntry_DoNotUse::PodSandboxConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxConfig_LabelsEntry_DoNotUse::MergeFrom(const PodSandboxConfig_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxConfig_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxConfig_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PodSandboxConfig_AnnotationsEntry_DoNotUse::PodSandboxConfig_AnnotationsEntry_DoNotUse() {}
PodSandboxConfig_AnnotationsEntry_DoNotUse::PodSandboxConfig_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxConfig_AnnotationsEntry_DoNotUse::MergeFrom(const PodSandboxConfig_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxConfig_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxConfig_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PodSandboxConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PodSandboxConfig_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::PodSandboxMetadata*>(
      ::runtime::v1alpha2::PodSandboxMetadata::internal_default_instance());
  ::runtime::v1alpha2::_PodSandboxConfig_default_instance_._instance.get_mutable()->dns_config_ = const_cast< ::runtime::v1alpha2::DNSConfig*>(
      ::runtime::v1alpha2::DNSConfig::internal_default_instance());
  ::runtime::v1alpha2::_PodSandboxConfig_default_instance_._instance.get_mutable()->linux_ = const_cast< ::runtime::v1alpha2::LinuxPodSandboxConfig*>(
      ::runtime::v1alpha2::LinuxPodSandboxConfig::internal_default_instance());
}
class PodSandboxConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxMetadata& metadata(const PodSandboxConfig* msg);
  static const ::runtime::v1alpha2::DNSConfig& dns_config(const PodSandboxConfig* msg);
  static const ::runtime::v1alpha2::LinuxPodSandboxConfig& linux(const PodSandboxConfig* msg);
};

const ::runtime::v1alpha2::PodSandboxMetadata&
PodSandboxConfig::_Internal::metadata(const PodSandboxConfig* msg) {
  return *msg->metadata_;
}
const ::runtime::v1alpha2::DNSConfig&
PodSandboxConfig::_Internal::dns_config(const PodSandboxConfig* msg) {
  return *msg->dns_config_;
}
const ::runtime::v1alpha2::LinuxPodSandboxConfig&
PodSandboxConfig::_Internal::linux(const PodSandboxConfig* msg) {
  return *msg->linux_;
}
PodSandboxConfig::PodSandboxConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  port_mappings_(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxConfig)
}
PodSandboxConfig::PodSandboxConfig(const PodSandboxConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      port_mappings_(from.port_mappings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  log_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_directory().empty()) {
    log_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_directory(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::PodSandboxMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_dns_config()) {
    dns_config_ = new ::runtime::v1alpha2::DNSConfig(*from.dns_config_);
  } else {
    dns_config_ = nullptr;
  }
  if (from._internal_has_linux()) {
    linux_ = new ::runtime::v1alpha2::LinuxPodSandboxConfig(*from.linux_);
  } else {
    linux_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxConfig)
}

void PodSandboxConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxConfig_api_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linux_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(linux_));
}

PodSandboxConfig::~PodSandboxConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete dns_config_;
  if (this != internal_default_instance()) delete linux_;
}

void PodSandboxConfig::ArenaDtor(void* object) {
  PodSandboxConfig* _this = reinterpret_cast< PodSandboxConfig* >(object);
  (void)_this;
}
void PodSandboxConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxConfig& PodSandboxConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxConfig_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_mappings_.Clear();
  labels_.Clear();
  annotations_.Clear();
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && dns_config_ != nullptr) {
    delete dns_config_;
  }
  dns_config_ = nullptr;
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.PodSandboxMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxConfig.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_directory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxConfig.log_directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.DNSConfig dns_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.PortMapping port_mappings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_port_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxPodSandboxConfig linux = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_linux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxConfig.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // string log_directory = 3;
  if (this->log_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_directory().data(), static_cast<int>(this->_internal_log_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxConfig.log_directory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log_directory(), target);
  }

  // .runtime.v1alpha2.DNSConfig dns_config = 4;
  if (this->has_dns_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dns_config(this), target, stream);
  }

  // repeated .runtime.v1alpha2.PortMapping port_mappings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_port_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_port_mappings(i), target, stream);
  }

  // map<string, string> labels = 6;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxConfig.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxConfig.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = PodSandboxConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 7;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxConfig.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxConfig.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxConfig_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = PodSandboxConfig_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .runtime.v1alpha2.LinuxPodSandboxConfig linux = 8;
  if (this->has_linux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::linux(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxConfig)
  return target;
}

size_t PodSandboxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.PortMapping port_mappings = 5;
  total_size += 1UL * this->_internal_port_mappings_size();
  for (const auto& msg : this->port_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> labels = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += PodSandboxConfig_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += PodSandboxConfig_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string log_directory = 3;
  if (this->log_directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_directory());
  }

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .runtime.v1alpha2.DNSConfig dns_config = 4;
  if (this->has_dns_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dns_config_);
  }

  // .runtime.v1alpha2.LinuxPodSandboxConfig linux = 8;
  if (this->has_linux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linux_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxConfig)
    MergeFrom(*source);
  }
}

void PodSandboxConfig::MergeFrom(const PodSandboxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_mappings_.MergeFrom(from.port_mappings_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.log_directory().size() > 0) {
    _internal_set_log_directory(from._internal_log_directory());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::PodSandboxMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_dns_config()) {
    _internal_mutable_dns_config()->::runtime::v1alpha2::DNSConfig::MergeFrom(from._internal_dns_config());
  }
  if (from.has_linux()) {
    _internal_mutable_linux()->::runtime::v1alpha2::LinuxPodSandboxConfig::MergeFrom(from._internal_linux());
  }
}

void PodSandboxConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxConfig::CopyFrom(const PodSandboxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxConfig::IsInitialized() const {
  return true;
}

void PodSandboxConfig::InternalSwap(PodSandboxConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  port_mappings_.InternalSwap(&other->port_mappings_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_directory_.Swap(&other->log_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PodSandboxConfig, linux_)
      + sizeof(PodSandboxConfig::linux_)
      - PROTOBUF_FIELD_OFFSET(PodSandboxConfig, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunPodSandboxRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_RunPodSandboxRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::runtime::v1alpha2::PodSandboxConfig*>(
      ::runtime::v1alpha2::PodSandboxConfig::internal_default_instance());
}
class RunPodSandboxRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxConfig& config(const RunPodSandboxRequest* msg);
};

const ::runtime::v1alpha2::PodSandboxConfig&
RunPodSandboxRequest::_Internal::config(const RunPodSandboxRequest* msg) {
  return *msg->config_;
}
RunPodSandboxRequest::RunPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RunPodSandboxRequest)
}
RunPodSandboxRequest::RunPodSandboxRequest(const RunPodSandboxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_handler().empty()) {
    runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_handler(),
      GetArena());
  }
  if (from._internal_has_config()) {
    config_ = new ::runtime::v1alpha2::PodSandboxConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RunPodSandboxRequest)
}

void RunPodSandboxRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunPodSandboxRequest_api_2eproto.base);
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

RunPodSandboxRequest::~RunPodSandboxRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RunPodSandboxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunPodSandboxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  runtime_handler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void RunPodSandboxRequest::ArenaDtor(void* object) {
  RunPodSandboxRequest* _this = reinterpret_cast< RunPodSandboxRequest* >(object);
  (void)_this;
}
void RunPodSandboxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunPodSandboxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunPodSandboxRequest& RunPodSandboxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunPodSandboxRequest_api_2eproto.base);
  return *internal_default_instance();
}


void RunPodSandboxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RunPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunPodSandboxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.PodSandboxConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_handler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_runtime_handler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RunPodSandboxRequest.runtime_handler"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunPodSandboxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RunPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // string runtime_handler = 2;
  if (this->runtime_handler().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_handler().data(), static_cast<int>(this->_internal_runtime_handler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RunPodSandboxRequest.runtime_handler");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_runtime_handler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RunPodSandboxRequest)
  return target;
}

size_t RunPodSandboxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RunPodSandboxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_handler = 2;
  if (this->runtime_handler().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_handler());
  }

  // .runtime.v1alpha2.PodSandboxConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunPodSandboxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RunPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunPodSandboxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunPodSandboxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RunPodSandboxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RunPodSandboxRequest)
    MergeFrom(*source);
  }
}

void RunPodSandboxRequest::MergeFrom(const RunPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RunPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_handler().size() > 0) {
    _internal_set_runtime_handler(from._internal_runtime_handler());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::runtime::v1alpha2::PodSandboxConfig::MergeFrom(from._internal_config());
  }
}

void RunPodSandboxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RunPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPodSandboxRequest::CopyFrom(const RunPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RunPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPodSandboxRequest::IsInitialized() const {
  return true;
}

void RunPodSandboxRequest::InternalSwap(RunPodSandboxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  runtime_handler_.Swap(&other->runtime_handler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunPodSandboxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunPodSandboxResponse::InitAsDefaultInstance() {
}
class RunPodSandboxResponse::_Internal {
 public:
};

RunPodSandboxResponse::RunPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RunPodSandboxResponse)
}
RunPodSandboxResponse::RunPodSandboxResponse(const RunPodSandboxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RunPodSandboxResponse)
}

void RunPodSandboxResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunPodSandboxResponse_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RunPodSandboxResponse::~RunPodSandboxResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RunPodSandboxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunPodSandboxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RunPodSandboxResponse::ArenaDtor(void* object) {
  RunPodSandboxResponse* _this = reinterpret_cast< RunPodSandboxResponse* >(object);
  (void)_this;
}
void RunPodSandboxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunPodSandboxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunPodSandboxResponse& RunPodSandboxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunPodSandboxResponse_api_2eproto.base);
  return *internal_default_instance();
}


void RunPodSandboxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RunPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunPodSandboxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunPodSandboxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RunPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RunPodSandboxResponse.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RunPodSandboxResponse)
  return target;
}

size_t RunPodSandboxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RunPodSandboxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunPodSandboxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RunPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunPodSandboxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunPodSandboxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RunPodSandboxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RunPodSandboxResponse)
    MergeFrom(*source);
  }
}

void RunPodSandboxResponse::MergeFrom(const RunPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RunPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
}

void RunPodSandboxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RunPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPodSandboxResponse::CopyFrom(const RunPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RunPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPodSandboxResponse::IsInitialized() const {
  return true;
}

void RunPodSandboxResponse::InternalSwap(RunPodSandboxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RunPodSandboxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopPodSandboxRequest::InitAsDefaultInstance() {
}
class StopPodSandboxRequest::_Internal {
 public:
};

StopPodSandboxRequest::StopPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StopPodSandboxRequest)
}
StopPodSandboxRequest::StopPodSandboxRequest(const StopPodSandboxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StopPodSandboxRequest)
}

void StopPodSandboxRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopPodSandboxRequest_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopPodSandboxRequest::~StopPodSandboxRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StopPodSandboxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopPodSandboxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopPodSandboxRequest::ArenaDtor(void* object) {
  StopPodSandboxRequest* _this = reinterpret_cast< StopPodSandboxRequest* >(object);
  (void)_this;
}
void StopPodSandboxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopPodSandboxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPodSandboxRequest& StopPodSandboxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPodSandboxRequest_api_2eproto.base);
  return *internal_default_instance();
}


void StopPodSandboxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StopPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPodSandboxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPodSandboxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StopPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.StopPodSandboxRequest.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StopPodSandboxRequest)
  return target;
}

size_t StopPodSandboxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StopPodSandboxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPodSandboxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StopPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPodSandboxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopPodSandboxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StopPodSandboxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StopPodSandboxRequest)
    MergeFrom(*source);
  }
}

void StopPodSandboxRequest::MergeFrom(const StopPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StopPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
}

void StopPodSandboxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StopPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPodSandboxRequest::CopyFrom(const StopPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StopPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPodSandboxRequest::IsInitialized() const {
  return true;
}

void StopPodSandboxRequest::InternalSwap(StopPodSandboxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPodSandboxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopPodSandboxResponse::InitAsDefaultInstance() {
}
class StopPodSandboxResponse::_Internal {
 public:
};

StopPodSandboxResponse::StopPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StopPodSandboxResponse)
}
StopPodSandboxResponse::StopPodSandboxResponse(const StopPodSandboxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StopPodSandboxResponse)
}

void StopPodSandboxResponse::SharedCtor() {
}

StopPodSandboxResponse::~StopPodSandboxResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StopPodSandboxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopPodSandboxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopPodSandboxResponse::ArenaDtor(void* object) {
  StopPodSandboxResponse* _this = reinterpret_cast< StopPodSandboxResponse* >(object);
  (void)_this;
}
void StopPodSandboxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopPodSandboxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPodSandboxResponse& StopPodSandboxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPodSandboxResponse_api_2eproto.base);
  return *internal_default_instance();
}


void StopPodSandboxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StopPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPodSandboxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPodSandboxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StopPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StopPodSandboxResponse)
  return target;
}

size_t StopPodSandboxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StopPodSandboxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPodSandboxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StopPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPodSandboxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopPodSandboxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StopPodSandboxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StopPodSandboxResponse)
    MergeFrom(*source);
  }
}

void StopPodSandboxResponse::MergeFrom(const StopPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StopPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopPodSandboxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StopPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPodSandboxResponse::CopyFrom(const StopPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StopPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPodSandboxResponse::IsInitialized() const {
  return true;
}

void StopPodSandboxResponse::InternalSwap(StopPodSandboxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPodSandboxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePodSandboxRequest::InitAsDefaultInstance() {
}
class RemovePodSandboxRequest::_Internal {
 public:
};

RemovePodSandboxRequest::RemovePodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemovePodSandboxRequest)
}
RemovePodSandboxRequest::RemovePodSandboxRequest(const RemovePodSandboxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemovePodSandboxRequest)
}

void RemovePodSandboxRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemovePodSandboxRequest_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemovePodSandboxRequest::~RemovePodSandboxRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemovePodSandboxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovePodSandboxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemovePodSandboxRequest::ArenaDtor(void* object) {
  RemovePodSandboxRequest* _this = reinterpret_cast< RemovePodSandboxRequest* >(object);
  (void)_this;
}
void RemovePodSandboxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovePodSandboxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePodSandboxRequest& RemovePodSandboxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePodSandboxRequest_api_2eproto.base);
  return *internal_default_instance();
}


void RemovePodSandboxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemovePodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePodSandboxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePodSandboxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemovePodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RemovePodSandboxRequest.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemovePodSandboxRequest)
  return target;
}

size_t RemovePodSandboxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemovePodSandboxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePodSandboxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemovePodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePodSandboxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePodSandboxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemovePodSandboxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemovePodSandboxRequest)
    MergeFrom(*source);
  }
}

void RemovePodSandboxRequest::MergeFrom(const RemovePodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemovePodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
}

void RemovePodSandboxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemovePodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePodSandboxRequest::CopyFrom(const RemovePodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemovePodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePodSandboxRequest::IsInitialized() const {
  return true;
}

void RemovePodSandboxRequest::InternalSwap(RemovePodSandboxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePodSandboxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePodSandboxResponse::InitAsDefaultInstance() {
}
class RemovePodSandboxResponse::_Internal {
 public:
};

RemovePodSandboxResponse::RemovePodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemovePodSandboxResponse)
}
RemovePodSandboxResponse::RemovePodSandboxResponse(const RemovePodSandboxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemovePodSandboxResponse)
}

void RemovePodSandboxResponse::SharedCtor() {
}

RemovePodSandboxResponse::~RemovePodSandboxResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemovePodSandboxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovePodSandboxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemovePodSandboxResponse::ArenaDtor(void* object) {
  RemovePodSandboxResponse* _this = reinterpret_cast< RemovePodSandboxResponse* >(object);
  (void)_this;
}
void RemovePodSandboxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovePodSandboxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePodSandboxResponse& RemovePodSandboxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePodSandboxResponse_api_2eproto.base);
  return *internal_default_instance();
}


void RemovePodSandboxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemovePodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePodSandboxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePodSandboxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemovePodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemovePodSandboxResponse)
  return target;
}

size_t RemovePodSandboxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemovePodSandboxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePodSandboxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemovePodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePodSandboxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePodSandboxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemovePodSandboxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemovePodSandboxResponse)
    MergeFrom(*source);
  }
}

void RemovePodSandboxResponse::MergeFrom(const RemovePodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemovePodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemovePodSandboxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemovePodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePodSandboxResponse::CopyFrom(const RemovePodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemovePodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePodSandboxResponse::IsInitialized() const {
  return true;
}

void RemovePodSandboxResponse::InternalSwap(RemovePodSandboxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePodSandboxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PodSandboxStatusRequest::InitAsDefaultInstance() {
}
class PodSandboxStatusRequest::_Internal {
 public:
};

PodSandboxStatusRequest::PodSandboxStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxStatusRequest)
}
PodSandboxStatusRequest::PodSandboxStatusRequest(const PodSandboxStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  verbose_ = from.verbose_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxStatusRequest)
}

void PodSandboxStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxStatusRequest_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbose_ = false;
}

PodSandboxStatusRequest::~PodSandboxStatusRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PodSandboxStatusRequest::ArenaDtor(void* object) {
  PodSandboxStatusRequest* _this = reinterpret_cast< PodSandboxStatusRequest* >(object);
  (void)_this;
}
void PodSandboxStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxStatusRequest& PodSandboxStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxStatusRequest_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbose_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxStatusRequest.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxStatusRequest)
  return target;
}

size_t PodSandboxStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxStatusRequest)
    MergeFrom(*source);
  }
}

void PodSandboxStatusRequest::MergeFrom(const PodSandboxStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
}

void PodSandboxStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxStatusRequest::CopyFrom(const PodSandboxStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxStatusRequest::IsInitialized() const {
  return true;
}

void PodSandboxStatusRequest::InternalSwap(PodSandboxStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(verbose_, other->verbose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PodIP::InitAsDefaultInstance() {
}
class PodIP::_Internal {
 public:
};

PodIP::PodIP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodIP)
}
PodIP::PodIP(const PodIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodIP)
}

void PodIP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodIP_api_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PodIP::~PodIP() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodIP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodIP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PodIP::ArenaDtor(void* object) {
  PodIP* _this = reinterpret_cast< PodIP* >(object);
  (void)_this;
}
void PodIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodIP& PodIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodIP_api_2eproto.base);
  return *internal_default_instance();
}


void PodIP::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodIP.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodIP.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodIP)
  return target;
}

size_t PodIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodIP)
  GOOGLE_DCHECK_NE(&from, this);
  const PodIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodIP)
    MergeFrom(*source);
  }
}

void PodIP::MergeFrom(const PodIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void PodIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodIP::CopyFrom(const PodIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodIP::IsInitialized() const {
  return true;
}

void PodIP::InternalSwap(PodIP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PodIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PodSandboxNetworkStatus::InitAsDefaultInstance() {
}
class PodSandboxNetworkStatus::_Internal {
 public:
};

PodSandboxNetworkStatus::PodSandboxNetworkStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxNetworkStatus)
}
PodSandboxNetworkStatus::PodSandboxNetworkStatus(const PodSandboxNetworkStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_ips_(from.additional_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxNetworkStatus)
}

void PodSandboxNetworkStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxNetworkStatus_api_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PodSandboxNetworkStatus::~PodSandboxNetworkStatus() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxNetworkStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxNetworkStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PodSandboxNetworkStatus::ArenaDtor(void* object) {
  PodSandboxNetworkStatus* _this = reinterpret_cast< PodSandboxNetworkStatus* >(object);
  (void)_this;
}
void PodSandboxNetworkStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxNetworkStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxNetworkStatus& PodSandboxNetworkStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxNetworkStatus_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxNetworkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_ips_.Clear();
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxNetworkStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxNetworkStatus.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.PodIP additional_ips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_ips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxNetworkStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxNetworkStatus.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // repeated .runtime.v1alpha2.PodIP additional_ips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_ips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_additional_ips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxNetworkStatus)
  return target;
}

size_t PodSandboxNetworkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.PodIP additional_ips = 2;
  total_size += 1UL * this->_internal_additional_ips_size();
  for (const auto& msg : this->additional_ips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxNetworkStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxNetworkStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxNetworkStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxNetworkStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxNetworkStatus)
    MergeFrom(*source);
  }
}

void PodSandboxNetworkStatus::MergeFrom(const PodSandboxNetworkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_ips_.MergeFrom(from.additional_ips_);
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void PodSandboxNetworkStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxNetworkStatus::CopyFrom(const PodSandboxNetworkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxNetworkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxNetworkStatus::IsInitialized() const {
  return true;
}

void PodSandboxNetworkStatus::InternalSwap(PodSandboxNetworkStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_ips_.InternalSwap(&other->additional_ips_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxNetworkStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Namespace::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_Namespace_default_instance_._instance.get_mutable()->options_ = const_cast< ::runtime::v1alpha2::NamespaceOption*>(
      ::runtime::v1alpha2::NamespaceOption::internal_default_instance());
}
class Namespace::_Internal {
 public:
  static const ::runtime::v1alpha2::NamespaceOption& options(const Namespace* msg);
};

const ::runtime::v1alpha2::NamespaceOption&
Namespace::_Internal::options(const Namespace* msg) {
  return *msg->options_;
}
Namespace::Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Namespace)
}
Namespace::Namespace(const Namespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::runtime::v1alpha2::NamespaceOption(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Namespace)
}

void Namespace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Namespace_api_2eproto.base);
  options_ = nullptr;
}

Namespace::~Namespace() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Namespace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Namespace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void Namespace::ArenaDtor(void* object) {
  Namespace* _this = reinterpret_cast< Namespace* >(object);
  (void)_this;
}
void Namespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Namespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Namespace& Namespace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Namespace_api_2eproto.base);
  return *internal_default_instance();
}


void Namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Namespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.NamespaceOption options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Namespace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.NamespaceOption options = 2;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Namespace)
  return target;
}

size_t Namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Namespace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.NamespaceOption options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Namespace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  const Namespace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Namespace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Namespace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Namespace)
    MergeFrom(*source);
  }
}

void Namespace::MergeFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::runtime::v1alpha2::NamespaceOption::MergeFrom(from._internal_options());
  }
}

void Namespace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Namespace::CopyFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Namespace::IsInitialized() const {
  return true;
}

void Namespace::InternalSwap(Namespace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Namespace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinuxPodSandboxStatus::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_LinuxPodSandboxStatus_default_instance_._instance.get_mutable()->namespaces_ = const_cast< ::runtime::v1alpha2::Namespace*>(
      ::runtime::v1alpha2::Namespace::internal_default_instance());
}
class LinuxPodSandboxStatus::_Internal {
 public:
  static const ::runtime::v1alpha2::Namespace& namespaces(const LinuxPodSandboxStatus* msg);
};

const ::runtime::v1alpha2::Namespace&
LinuxPodSandboxStatus::_Internal::namespaces(const LinuxPodSandboxStatus* msg) {
  return *msg->namespaces_;
}
LinuxPodSandboxStatus::LinuxPodSandboxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxPodSandboxStatus)
}
LinuxPodSandboxStatus::LinuxPodSandboxStatus(const LinuxPodSandboxStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespaces()) {
    namespaces_ = new ::runtime::v1alpha2::Namespace(*from.namespaces_);
  } else {
    namespaces_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxPodSandboxStatus)
}

void LinuxPodSandboxStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxPodSandboxStatus_api_2eproto.base);
  namespaces_ = nullptr;
}

LinuxPodSandboxStatus::~LinuxPodSandboxStatus() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxPodSandboxStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxPodSandboxStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete namespaces_;
}

void LinuxPodSandboxStatus::ArenaDtor(void* object) {
  LinuxPodSandboxStatus* _this = reinterpret_cast< LinuxPodSandboxStatus* >(object);
  (void)_this;
}
void LinuxPodSandboxStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxPodSandboxStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxPodSandboxStatus& LinuxPodSandboxStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxPodSandboxStatus_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxPodSandboxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && namespaces_ != nullptr) {
    delete namespaces_;
  }
  namespaces_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxPodSandboxStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.Namespace namespaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespaces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxPodSandboxStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.Namespace namespaces = 1;
  if (this->has_namespaces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespaces(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxPodSandboxStatus)
  return target;
}

size_t LinuxPodSandboxStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.Namespace namespaces = 1;
  if (this->has_namespaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespaces_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxPodSandboxStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxPodSandboxStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxPodSandboxStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxPodSandboxStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxPodSandboxStatus)
    MergeFrom(*source);
  }
}

void LinuxPodSandboxStatus::MergeFrom(const LinuxPodSandboxStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_namespaces()) {
    _internal_mutable_namespaces()->::runtime::v1alpha2::Namespace::MergeFrom(from._internal_namespaces());
  }
}

void LinuxPodSandboxStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxPodSandboxStatus::CopyFrom(const LinuxPodSandboxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxPodSandboxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxPodSandboxStatus::IsInitialized() const {
  return true;
}

void LinuxPodSandboxStatus::InternalSwap(LinuxPodSandboxStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(namespaces_, other->namespaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxPodSandboxStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PodSandboxStatus_LabelsEntry_DoNotUse::PodSandboxStatus_LabelsEntry_DoNotUse() {}
PodSandboxStatus_LabelsEntry_DoNotUse::PodSandboxStatus_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxStatus_LabelsEntry_DoNotUse::MergeFrom(const PodSandboxStatus_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatus_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxStatus_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PodSandboxStatus_AnnotationsEntry_DoNotUse::PodSandboxStatus_AnnotationsEntry_DoNotUse() {}
PodSandboxStatus_AnnotationsEntry_DoNotUse::PodSandboxStatus_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxStatus_AnnotationsEntry_DoNotUse::MergeFrom(const PodSandboxStatus_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatus_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxStatus_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PodSandboxStatus::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PodSandboxStatus_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::PodSandboxMetadata*>(
      ::runtime::v1alpha2::PodSandboxMetadata::internal_default_instance());
  ::runtime::v1alpha2::_PodSandboxStatus_default_instance_._instance.get_mutable()->network_ = const_cast< ::runtime::v1alpha2::PodSandboxNetworkStatus*>(
      ::runtime::v1alpha2::PodSandboxNetworkStatus::internal_default_instance());
  ::runtime::v1alpha2::_PodSandboxStatus_default_instance_._instance.get_mutable()->linux_ = const_cast< ::runtime::v1alpha2::LinuxPodSandboxStatus*>(
      ::runtime::v1alpha2::LinuxPodSandboxStatus::internal_default_instance());
}
class PodSandboxStatus::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxMetadata& metadata(const PodSandboxStatus* msg);
  static const ::runtime::v1alpha2::PodSandboxNetworkStatus& network(const PodSandboxStatus* msg);
  static const ::runtime::v1alpha2::LinuxPodSandboxStatus& linux(const PodSandboxStatus* msg);
};

const ::runtime::v1alpha2::PodSandboxMetadata&
PodSandboxStatus::_Internal::metadata(const PodSandboxStatus* msg) {
  return *msg->metadata_;
}
const ::runtime::v1alpha2::PodSandboxNetworkStatus&
PodSandboxStatus::_Internal::network(const PodSandboxStatus* msg) {
  return *msg->network_;
}
const ::runtime::v1alpha2::LinuxPodSandboxStatus&
PodSandboxStatus::_Internal::linux(const PodSandboxStatus* msg) {
  return *msg->linux_;
}
PodSandboxStatus::PodSandboxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxStatus)
}
PodSandboxStatus::PodSandboxStatus(const PodSandboxStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_handler().empty()) {
    runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_handler(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::PodSandboxMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::runtime::v1alpha2::PodSandboxNetworkStatus(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_linux()) {
    linux_ = new ::runtime::v1alpha2::LinuxPodSandboxStatus(*from.linux_);
  } else {
    linux_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxStatus)
}

void PodSandboxStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxStatus_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(state_));
}

PodSandboxStatus::~PodSandboxStatus() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_handler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete linux_;
}

void PodSandboxStatus::ArenaDtor(void* object) {
  PodSandboxStatus* _this = reinterpret_cast< PodSandboxStatus* >(object);
  (void)_this;
}
void PodSandboxStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxStatus& PodSandboxStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxStatus_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxStatus.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::PodSandboxState>(val));
        } else goto handle_unusual;
        continue;
      // int64 created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxNetworkStatus network = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxPodSandboxStatus linux = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string runtime_handler = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_runtime_handler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxStatus.runtime_handler"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxStatus.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .runtime.v1alpha2.PodSandboxState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
  }

  // .runtime.v1alpha2.PodSandboxNetworkStatus network = 5;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::network(this), target, stream);
  }

  // .runtime.v1alpha2.LinuxPodSandboxStatus linux = 6;
  if (this->has_linux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linux(this), target, stream);
  }

  // map<string, string> labels = 7;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatus.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatus.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxStatus_LabelsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = PodSandboxStatus_LabelsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 8;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatus.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatus.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxStatus_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = PodSandboxStatus_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string runtime_handler = 9;
  if (this->runtime_handler().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_handler().data(), static_cast<int>(this->_internal_runtime_handler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxStatus.runtime_handler");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_runtime_handler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxStatus)
  return target;
}

size_t PodSandboxStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += PodSandboxStatus_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += PodSandboxStatus_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string runtime_handler = 9;
  if (this->runtime_handler().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_handler());
  }

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .runtime.v1alpha2.PodSandboxNetworkStatus network = 5;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .runtime.v1alpha2.LinuxPodSandboxStatus linux = 6;
  if (this->has_linux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linux_);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // .runtime.v1alpha2.PodSandboxState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxStatus)
    MergeFrom(*source);
  }
}

void PodSandboxStatus::MergeFrom(const PodSandboxStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.runtime_handler().size() > 0) {
    _internal_set_runtime_handler(from._internal_runtime_handler());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::PodSandboxMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::runtime::v1alpha2::PodSandboxNetworkStatus::MergeFrom(from._internal_network());
  }
  if (from.has_linux()) {
    _internal_mutable_linux()->::runtime::v1alpha2::LinuxPodSandboxStatus::MergeFrom(from._internal_linux());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void PodSandboxStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxStatus::CopyFrom(const PodSandboxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxStatus::IsInitialized() const {
  return true;
}

void PodSandboxStatus::InternalSwap(PodSandboxStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_handler_.Swap(&other->runtime_handler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PodSandboxStatus, state_)
      + sizeof(PodSandboxStatus::state_)
      - PROTOBUF_FIELD_OFFSET(PodSandboxStatus, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PodSandboxStatusResponse_InfoEntry_DoNotUse::PodSandboxStatusResponse_InfoEntry_DoNotUse() {}
PodSandboxStatusResponse_InfoEntry_DoNotUse::PodSandboxStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxStatusResponse_InfoEntry_DoNotUse::MergeFrom(const PodSandboxStatusResponse_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatusResponse_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxStatusResponse_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PodSandboxStatusResponse::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PodSandboxStatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::runtime::v1alpha2::PodSandboxStatus*>(
      ::runtime::v1alpha2::PodSandboxStatus::internal_default_instance());
}
class PodSandboxStatusResponse::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxStatus& status(const PodSandboxStatusResponse* msg);
};

const ::runtime::v1alpha2::PodSandboxStatus&
PodSandboxStatusResponse::_Internal::status(const PodSandboxStatusResponse* msg) {
  return *msg->status_;
}
PodSandboxStatusResponse::PodSandboxStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxStatusResponse)
}
PodSandboxStatusResponse::PodSandboxStatusResponse(const PodSandboxStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  if (from._internal_has_status()) {
    status_ = new ::runtime::v1alpha2::PodSandboxStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxStatusResponse)
}

void PodSandboxStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxStatusResponse_api_2eproto.base);
  status_ = nullptr;
}

PodSandboxStatusResponse::~PodSandboxStatusResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void PodSandboxStatusResponse::ArenaDtor(void* object) {
  PodSandboxStatusResponse* _this = reinterpret_cast< PodSandboxStatusResponse* >(object);
  (void)_this;
}
void PodSandboxStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxStatusResponse& PodSandboxStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxStatusResponse_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.PodSandboxStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // map<string, string> info = 2;
  if (!this->_internal_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatusResponse.InfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxStatusResponse.InfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it) {
        target = PodSandboxStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxStatusResponse)
  return target;
}

size_t PodSandboxStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_info().begin();
      it != this->_internal_info().end(); ++it) {
    total_size += PodSandboxStatusResponse_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .runtime.v1alpha2.PodSandboxStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxStatusResponse)
    MergeFrom(*source);
  }
}

void PodSandboxStatusResponse::MergeFrom(const PodSandboxStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.has_status()) {
    _internal_mutable_status()->::runtime::v1alpha2::PodSandboxStatus::MergeFrom(from._internal_status());
  }
}

void PodSandboxStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxStatusResponse::CopyFrom(const PodSandboxStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxStatusResponse::IsInitialized() const {
  return true;
}

void PodSandboxStatusResponse::InternalSwap(PodSandboxStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PodSandboxStateValue::InitAsDefaultInstance() {
}
class PodSandboxStateValue::_Internal {
 public:
};

PodSandboxStateValue::PodSandboxStateValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxStateValue)
}
PodSandboxStateValue::PodSandboxStateValue(const PodSandboxStateValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxStateValue)
}

void PodSandboxStateValue::SharedCtor() {
  state_ = 0;
}

PodSandboxStateValue::~PodSandboxStateValue() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxStateValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxStateValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PodSandboxStateValue::ArenaDtor(void* object) {
  PodSandboxStateValue* _this = reinterpret_cast< PodSandboxStateValue* >(object);
  (void)_this;
}
void PodSandboxStateValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxStateValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxStateValue& PodSandboxStateValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxStateValue_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxStateValue::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxStateValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxStateValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.PodSandboxState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::PodSandboxState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxStateValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxStateValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxStateValue)
  return target;
}

size_t PodSandboxStateValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxStateValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxStateValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxStateValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxStateValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxStateValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxStateValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxStateValue)
    MergeFrom(*source);
  }
}

void PodSandboxStateValue::MergeFrom(const PodSandboxStateValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxStateValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void PodSandboxStateValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxStateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxStateValue::CopyFrom(const PodSandboxStateValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxStateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxStateValue::IsInitialized() const {
  return true;
}

void PodSandboxStateValue::InternalSwap(PodSandboxStateValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxStateValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PodSandboxFilter_LabelSelectorEntry_DoNotUse::PodSandboxFilter_LabelSelectorEntry_DoNotUse() {}
PodSandboxFilter_LabelSelectorEntry_DoNotUse::PodSandboxFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandboxFilter_LabelSelectorEntry_DoNotUse::MergeFrom(const PodSandboxFilter_LabelSelectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxFilter_LabelSelectorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandboxFilter_LabelSelectorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PodSandboxFilter::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PodSandboxFilter_default_instance_._instance.get_mutable()->state_ = const_cast< ::runtime::v1alpha2::PodSandboxStateValue*>(
      ::runtime::v1alpha2::PodSandboxStateValue::internal_default_instance());
}
class PodSandboxFilter::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxStateValue& state(const PodSandboxFilter* msg);
};

const ::runtime::v1alpha2::PodSandboxStateValue&
PodSandboxFilter::_Internal::state(const PodSandboxFilter* msg) {
  return *msg->state_;
}
PodSandboxFilter::PodSandboxFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_selector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandboxFilter)
}
PodSandboxFilter::PodSandboxFilter(const PodSandboxFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_selector_.MergeFrom(from.label_selector_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::runtime::v1alpha2::PodSandboxStateValue(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandboxFilter)
}

void PodSandboxFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandboxFilter_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = nullptr;
}

PodSandboxFilter::~PodSandboxFilter() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandboxFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandboxFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void PodSandboxFilter::ArenaDtor(void* object) {
  PodSandboxFilter* _this = reinterpret_cast< PodSandboxFilter* >(object);
  (void)_this;
}
void PodSandboxFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandboxFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandboxFilter& PodSandboxFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandboxFilter_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandboxFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandboxFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_selector_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandboxFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandboxFilter.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxStateValue state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> label_selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&label_selector_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandboxFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandboxFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandboxFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.PodSandboxStateValue state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // map<string, string> label_selector = 3;
  if (!this->_internal_label_selector().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxFilter.LabelSelectorEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandboxFilter.LabelSelectorEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_label_selector().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_label_selector().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandboxFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it) {
        target = PodSandboxFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandboxFilter)
  return target;
}

size_t PodSandboxFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandboxFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> label_selector = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_selector_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_label_selector().begin();
      it != this->_internal_label_selector().end(); ++it) {
    total_size += PodSandboxFilter_LabelSelectorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .runtime.v1alpha2.PodSandboxStateValue state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandboxFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandboxFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandboxFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandboxFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandboxFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandboxFilter)
    MergeFrom(*source);
  }
}

void PodSandboxFilter::MergeFrom(const PodSandboxFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandboxFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_selector_.MergeFrom(from.label_selector_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::runtime::v1alpha2::PodSandboxStateValue::MergeFrom(from._internal_state());
  }
}

void PodSandboxFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandboxFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandboxFilter::CopyFrom(const PodSandboxFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandboxFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandboxFilter::IsInitialized() const {
  return true;
}

void PodSandboxFilter::InternalSwap(PodSandboxFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_selector_.Swap(&other->label_selector_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandboxFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPodSandboxRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ListPodSandboxRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::runtime::v1alpha2::PodSandboxFilter*>(
      ::runtime::v1alpha2::PodSandboxFilter::internal_default_instance());
}
class ListPodSandboxRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxFilter& filter(const ListPodSandboxRequest* msg);
};

const ::runtime::v1alpha2::PodSandboxFilter&
ListPodSandboxRequest::_Internal::filter(const ListPodSandboxRequest* msg) {
  return *msg->filter_;
}
ListPodSandboxRequest::ListPodSandboxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListPodSandboxRequest)
}
ListPodSandboxRequest::ListPodSandboxRequest(const ListPodSandboxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::runtime::v1alpha2::PodSandboxFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListPodSandboxRequest)
}

void ListPodSandboxRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPodSandboxRequest_api_2eproto.base);
  filter_ = nullptr;
}

ListPodSandboxRequest::~ListPodSandboxRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListPodSandboxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPodSandboxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListPodSandboxRequest::ArenaDtor(void* object) {
  ListPodSandboxRequest* _this = reinterpret_cast< ListPodSandboxRequest* >(object);
  (void)_this;
}
void ListPodSandboxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPodSandboxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPodSandboxRequest& ListPodSandboxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPodSandboxRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ListPodSandboxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPodSandboxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.PodSandboxFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPodSandboxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListPodSandboxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxFilter filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListPodSandboxRequest)
  return target;
}

size_t ListPodSandboxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListPodSandboxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.PodSandboxFilter filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPodSandboxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPodSandboxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPodSandboxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListPodSandboxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListPodSandboxRequest)
    MergeFrom(*source);
  }
}

void ListPodSandboxRequest::MergeFrom(const ListPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListPodSandboxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::runtime::v1alpha2::PodSandboxFilter::MergeFrom(from._internal_filter());
  }
}

void ListPodSandboxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPodSandboxRequest::CopyFrom(const ListPodSandboxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListPodSandboxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPodSandboxRequest::IsInitialized() const {
  return true;
}

void ListPodSandboxRequest::InternalSwap(ListPodSandboxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPodSandboxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PodSandbox_LabelsEntry_DoNotUse::PodSandbox_LabelsEntry_DoNotUse() {}
PodSandbox_LabelsEntry_DoNotUse::PodSandbox_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandbox_LabelsEntry_DoNotUse::MergeFrom(const PodSandbox_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandbox_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandbox_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PodSandbox_AnnotationsEntry_DoNotUse::PodSandbox_AnnotationsEntry_DoNotUse() {}
PodSandbox_AnnotationsEntry_DoNotUse::PodSandbox_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodSandbox_AnnotationsEntry_DoNotUse::MergeFrom(const PodSandbox_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodSandbox_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PodSandbox_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PodSandbox::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PodSandbox_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::PodSandboxMetadata*>(
      ::runtime::v1alpha2::PodSandboxMetadata::internal_default_instance());
}
class PodSandbox::_Internal {
 public:
  static const ::runtime::v1alpha2::PodSandboxMetadata& metadata(const PodSandbox* msg);
};

const ::runtime::v1alpha2::PodSandboxMetadata&
PodSandbox::_Internal::metadata(const PodSandbox* msg) {
  return *msg->metadata_;
}
PodSandbox::PodSandbox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PodSandbox)
}
PodSandbox::PodSandbox(const PodSandbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_handler().empty()) {
    runtime_handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtime_handler(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::PodSandboxMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PodSandbox)
}

void PodSandbox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PodSandbox_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(state_));
}

PodSandbox::~PodSandbox() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PodSandbox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PodSandbox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_handler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void PodSandbox::ArenaDtor(void* object) {
  PodSandbox* _this = reinterpret_cast< PodSandbox* >(object);
  (void)_this;
}
void PodSandbox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PodSandbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodSandbox& PodSandbox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PodSandbox_api_2eproto.base);
  return *internal_default_instance();
}


void PodSandbox::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PodSandbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodSandbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandbox.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::PodSandboxState>(val));
        } else goto handle_unusual;
        continue;
      // int64 created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string runtime_handler = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_runtime_handler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PodSandbox.runtime_handler"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodSandbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PodSandbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandbox.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .runtime.v1alpha2.PodSandboxState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
  }

  // map<string, string> labels = 5;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandbox.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandbox.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandbox_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = PodSandbox_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 6;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandbox.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.PodSandbox.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodSandbox_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = PodSandbox_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string runtime_handler = 7;
  if (this->runtime_handler().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_handler().data(), static_cast<int>(this->_internal_runtime_handler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PodSandbox.runtime_handler");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_runtime_handler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PodSandbox)
  return target;
}

size_t PodSandbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PodSandbox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += PodSandbox_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += PodSandbox_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string runtime_handler = 7;
  if (this->runtime_handler().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_handler());
  }

  // .runtime.v1alpha2.PodSandboxMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // .runtime.v1alpha2.PodSandboxState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodSandbox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PodSandbox)
  GOOGLE_DCHECK_NE(&from, this);
  const PodSandbox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PodSandbox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PodSandbox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PodSandbox)
    MergeFrom(*source);
  }
}

void PodSandbox::MergeFrom(const PodSandbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PodSandbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.runtime_handler().size() > 0) {
    _internal_set_runtime_handler(from._internal_runtime_handler());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::PodSandboxMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void PodSandbox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PodSandbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSandbox::CopyFrom(const PodSandbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PodSandbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSandbox::IsInitialized() const {
  return true;
}

void PodSandbox::InternalSwap(PodSandbox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtime_handler_.Swap(&other->runtime_handler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PodSandbox, state_)
      + sizeof(PodSandbox::state_)
      - PROTOBUF_FIELD_OFFSET(PodSandbox, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PodSandbox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPodSandboxResponse::InitAsDefaultInstance() {
}
class ListPodSandboxResponse::_Internal {
 public:
};

ListPodSandboxResponse::ListPodSandboxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListPodSandboxResponse)
}
ListPodSandboxResponse::ListPodSandboxResponse(const ListPodSandboxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListPodSandboxResponse)
}

void ListPodSandboxResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPodSandboxResponse_api_2eproto.base);
}

ListPodSandboxResponse::~ListPodSandboxResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListPodSandboxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPodSandboxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPodSandboxResponse::ArenaDtor(void* object) {
  ListPodSandboxResponse* _this = reinterpret_cast< ListPodSandboxResponse* >(object);
  (void)_this;
}
void ListPodSandboxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPodSandboxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPodSandboxResponse& ListPodSandboxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPodSandboxResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ListPodSandboxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPodSandboxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.PodSandbox items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPodSandboxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListPodSandboxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.PodSandbox items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListPodSandboxResponse)
  return target;
}

size_t ListPodSandboxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListPodSandboxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.PodSandbox items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPodSandboxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPodSandboxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPodSandboxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListPodSandboxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListPodSandboxResponse)
    MergeFrom(*source);
  }
}

void ListPodSandboxResponse::MergeFrom(const ListPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListPodSandboxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ListPodSandboxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPodSandboxResponse::CopyFrom(const ListPodSandboxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListPodSandboxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPodSandboxResponse::IsInitialized() const {
  return true;
}

void ListPodSandboxResponse::InternalSwap(ListPodSandboxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPodSandboxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ImageSpec_AnnotationsEntry_DoNotUse::ImageSpec_AnnotationsEntry_DoNotUse() {}
ImageSpec_AnnotationsEntry_DoNotUse::ImageSpec_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ImageSpec_AnnotationsEntry_DoNotUse::MergeFrom(const ImageSpec_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ImageSpec_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ImageSpec_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ImageSpec::InitAsDefaultInstance() {
}
class ImageSpec::_Internal {
 public:
};

ImageSpec::ImageSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageSpec)
}
ImageSpec::ImageSpec(const ImageSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageSpec)
}

void ImageSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageSpec_api_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImageSpec::~ImageSpec() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageSpec::ArenaDtor(void* object) {
  ImageSpec* _this = reinterpret_cast< ImageSpec* >(object);
  (void)_this;
}
void ImageSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSpec& ImageSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageSpec_api_2eproto.base);
  return *internal_default_instance();
}


void ImageSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ImageSpec.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ImageSpec.image");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image(), target);
  }

  // map<string, string> annotations = 2;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ImageSpec.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ImageSpec.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ImageSpec_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = ImageSpec_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageSpec)
  return target;
}

size_t ImageSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += ImageSpec_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageSpec)
    MergeFrom(*source);
  }
}

void ImageSpec::MergeFrom(const ImageSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
}

void ImageSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSpec::CopyFrom(const ImageSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSpec::IsInitialized() const {
  return true;
}

void ImageSpec::InternalSwap(ImageSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  annotations_.Swap(&other->annotations_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
}
class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_api_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_api_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.KeyValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.KeyValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinuxContainerResources::InitAsDefaultInstance() {
}
class LinuxContainerResources::_Internal {
 public:
};

LinuxContainerResources::LinuxContainerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hugepage_limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxContainerResources)
}
LinuxContainerResources::LinuxContainerResources(const LinuxContainerResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hugepage_limits_(from.hugepage_limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpuset_cpus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuset_cpus().empty()) {
    cpuset_cpus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpuset_cpus(),
      GetArena());
  }
  cpuset_mems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuset_mems().empty()) {
    cpuset_mems_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpuset_mems(),
      GetArena());
  }
  ::memcpy(&cpu_period_, &from.cpu_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&oom_score_adj_) -
    reinterpret_cast<char*>(&cpu_period_)) + sizeof(oom_score_adj_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxContainerResources)
}

void LinuxContainerResources::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxContainerResources_api_2eproto.base);
  cpuset_cpus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuset_mems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oom_score_adj_) -
      reinterpret_cast<char*>(&cpu_period_)) + sizeof(oom_score_adj_));
}

LinuxContainerResources::~LinuxContainerResources() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxContainerResources)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxContainerResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cpuset_cpus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuset_mems_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinuxContainerResources::ArenaDtor(void* object) {
  LinuxContainerResources* _this = reinterpret_cast< LinuxContainerResources* >(object);
  (void)_this;
}
void LinuxContainerResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxContainerResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxContainerResources& LinuxContainerResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxContainerResources_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxContainerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxContainerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hugepage_limits_.Clear();
  cpuset_cpus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpuset_mems_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cpu_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oom_score_adj_) -
      reinterpret_cast<char*>(&cpu_period_)) + sizeof(oom_score_adj_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxContainerResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 cpu_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cpu_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_quota = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cpu_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_shares = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cpu_shares_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_limit_in_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_limit_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 oom_score_adj = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          oom_score_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpuset_cpus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cpuset_cpus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerResources.cpuset_cpus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpuset_mems = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cpuset_mems();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerResources.cpuset_mems"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.HugepageLimit hugepage_limits = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hugepage_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxContainerResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxContainerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cpu_period = 1;
  if (this->cpu_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cpu_period(), target);
  }

  // int64 cpu_quota = 2;
  if (this->cpu_quota() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cpu_quota(), target);
  }

  // int64 cpu_shares = 3;
  if (this->cpu_shares() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cpu_shares(), target);
  }

  // int64 memory_limit_in_bytes = 4;
  if (this->memory_limit_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_memory_limit_in_bytes(), target);
  }

  // int64 oom_score_adj = 5;
  if (this->oom_score_adj() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_oom_score_adj(), target);
  }

  // string cpuset_cpus = 6;
  if (this->cpuset_cpus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuset_cpus().data(), static_cast<int>(this->_internal_cpuset_cpus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerResources.cpuset_cpus");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cpuset_cpus(), target);
  }

  // string cpuset_mems = 7;
  if (this->cpuset_mems().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuset_mems().data(), static_cast<int>(this->_internal_cpuset_mems().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerResources.cpuset_mems");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cpuset_mems(), target);
  }

  // repeated .runtime.v1alpha2.HugepageLimit hugepage_limits = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hugepage_limits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_hugepage_limits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxContainerResources)
  return target;
}

size_t LinuxContainerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxContainerResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.HugepageLimit hugepage_limits = 8;
  total_size += 1UL * this->_internal_hugepage_limits_size();
  for (const auto& msg : this->hugepage_limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cpuset_cpus = 6;
  if (this->cpuset_cpus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuset_cpus());
  }

  // string cpuset_mems = 7;
  if (this->cpuset_mems().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuset_mems());
  }

  // int64 cpu_period = 1;
  if (this->cpu_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_period());
  }

  // int64 cpu_quota = 2;
  if (this->cpu_quota() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_quota());
  }

  // int64 cpu_shares = 3;
  if (this->cpu_shares() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_shares());
  }

  // int64 memory_limit_in_bytes = 4;
  if (this->memory_limit_in_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_limit_in_bytes());
  }

  // int64 oom_score_adj = 5;
  if (this->oom_score_adj() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_oom_score_adj());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxContainerResources::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxContainerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxContainerResources* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxContainerResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxContainerResources)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxContainerResources)
    MergeFrom(*source);
  }
}

void LinuxContainerResources::MergeFrom(const LinuxContainerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxContainerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hugepage_limits_.MergeFrom(from.hugepage_limits_);
  if (from.cpuset_cpus().size() > 0) {
    _internal_set_cpuset_cpus(from._internal_cpuset_cpus());
  }
  if (from.cpuset_mems().size() > 0) {
    _internal_set_cpuset_mems(from._internal_cpuset_mems());
  }
  if (from.cpu_period() != 0) {
    _internal_set_cpu_period(from._internal_cpu_period());
  }
  if (from.cpu_quota() != 0) {
    _internal_set_cpu_quota(from._internal_cpu_quota());
  }
  if (from.cpu_shares() != 0) {
    _internal_set_cpu_shares(from._internal_cpu_shares());
  }
  if (from.memory_limit_in_bytes() != 0) {
    _internal_set_memory_limit_in_bytes(from._internal_memory_limit_in_bytes());
  }
  if (from.oom_score_adj() != 0) {
    _internal_set_oom_score_adj(from._internal_oom_score_adj());
  }
}

void LinuxContainerResources::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxContainerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxContainerResources::CopyFrom(const LinuxContainerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxContainerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxContainerResources::IsInitialized() const {
  return true;
}

void LinuxContainerResources::InternalSwap(LinuxContainerResources* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hugepage_limits_.InternalSwap(&other->hugepage_limits_);
  cpuset_cpus_.Swap(&other->cpuset_cpus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpuset_mems_.Swap(&other->cpuset_mems_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinuxContainerResources, oom_score_adj_)
      + sizeof(LinuxContainerResources::oom_score_adj_)
      - PROTOBUF_FIELD_OFFSET(LinuxContainerResources, cpu_period_)>(
          reinterpret_cast<char*>(&cpu_period_),
          reinterpret_cast<char*>(&other->cpu_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxContainerResources::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HugepageLimit::InitAsDefaultInstance() {
}
class HugepageLimit::_Internal {
 public:
};

HugepageLimit::HugepageLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.HugepageLimit)
}
HugepageLimit::HugepageLimit(const HugepageLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_size().empty()) {
    page_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_size(),
      GetArena());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.HugepageLimit)
}

void HugepageLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HugepageLimit_api_2eproto.base);
  page_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = PROTOBUF_ULONGLONG(0);
}

HugepageLimit::~HugepageLimit() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.HugepageLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HugepageLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HugepageLimit::ArenaDtor(void* object) {
  HugepageLimit* _this = reinterpret_cast< HugepageLimit* >(object);
  (void)_this;
}
void HugepageLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HugepageLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HugepageLimit& HugepageLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HugepageLimit_api_2eproto.base);
  return *internal_default_instance();
}


void HugepageLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.HugepageLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  limit_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HugepageLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_page_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.HugepageLimit.page_size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HugepageLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.HugepageLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string page_size = 1;
  if (this->page_size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_size().data(), static_cast<int>(this->_internal_page_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.HugepageLimit.page_size");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_page_size(), target);
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.HugepageLimit)
  return target;
}

size_t HugepageLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.HugepageLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_size = 1;
  if (this->page_size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_size());
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HugepageLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.HugepageLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const HugepageLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HugepageLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.HugepageLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.HugepageLimit)
    MergeFrom(*source);
  }
}

void HugepageLimit::MergeFrom(const HugepageLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.HugepageLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_size().size() > 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void HugepageLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.HugepageLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugepageLimit::CopyFrom(const HugepageLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.HugepageLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugepageLimit::IsInitialized() const {
  return true;
}

void HugepageLimit::InternalSwap(HugepageLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_size_.Swap(&other->page_size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HugepageLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SELinuxOption::InitAsDefaultInstance() {
}
class SELinuxOption::_Internal {
 public:
};

SELinuxOption::SELinuxOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.SELinuxOption)
}
SELinuxOption::SELinuxOption(const SELinuxOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.SELinuxOption)
}

void SELinuxOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SELinuxOption_api_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SELinuxOption::~SELinuxOption() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.SELinuxOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SELinuxOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SELinuxOption::ArenaDtor(void* object) {
  SELinuxOption* _this = reinterpret_cast< SELinuxOption* >(object);
  (void)_this;
}
void SELinuxOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SELinuxOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SELinuxOption& SELinuxOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SELinuxOption_api_2eproto.base);
  return *internal_default_instance();
}


void SELinuxOption::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.SELinuxOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SELinuxOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.SELinuxOption.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.SELinuxOption.role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.SELinuxOption.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.SELinuxOption.level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SELinuxOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.SELinuxOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.SELinuxOption.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.SELinuxOption.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.SELinuxOption.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string level = 4;
  if (this->level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.SELinuxOption.level");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.SELinuxOption)
  return target;
}

size_t SELinuxOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.SELinuxOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string level = 4;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SELinuxOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.SELinuxOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SELinuxOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SELinuxOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.SELinuxOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.SELinuxOption)
    MergeFrom(*source);
  }
}

void SELinuxOption::MergeFrom(const SELinuxOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.SELinuxOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.role().size() > 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
}

void SELinuxOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.SELinuxOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SELinuxOption::CopyFrom(const SELinuxOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.SELinuxOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SELinuxOption::IsInitialized() const {
  return true;
}

void SELinuxOption::InternalSwap(SELinuxOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SELinuxOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Capability::InitAsDefaultInstance() {
}
class Capability::_Internal {
 public:
};

Capability::Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  add_capabilities_(arena),
  drop_capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      add_capabilities_(from.add_capabilities_),
      drop_capabilities_(from.drop_capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Capability)
}

void Capability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capability_api_2eproto.base);
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Capability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Capability::ArenaDtor(void* object) {
  Capability* _this = reinterpret_cast< Capability* >(object);
  (void)_this;
}
void Capability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capability& Capability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capability_api_2eproto.base);
  return *internal_default_instance();
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  add_capabilities_.Clear();
  drop_capabilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string add_capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_add_capabilities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Capability.add_capabilities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string drop_capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_drop_capabilities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Capability.drop_capabilities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string add_capabilities = 1;
  for (int i = 0, n = this->_internal_add_capabilities_size(); i < n; i++) {
    const auto& s = this->_internal_add_capabilities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Capability.add_capabilities");
    target = stream->WriteString(1, s, target);
  }

  // repeated string drop_capabilities = 2;
  for (int i = 0, n = this->_internal_drop_capabilities_size(); i < n; i++) {
    const auto& s = this->_internal_drop_capabilities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Capability.drop_capabilities");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Capability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string add_capabilities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(add_capabilities_.size());
  for (int i = 0, n = add_capabilities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      add_capabilities_.Get(i));
  }

  // repeated string drop_capabilities = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(drop_capabilities_.size());
  for (int i = 0, n = drop_capabilities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      drop_capabilities_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Capability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  add_capabilities_.MergeFrom(from.add_capabilities_);
  drop_capabilities_.MergeFrom(from.drop_capabilities_);
}

void Capability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  add_capabilities_.InternalSwap(&other->add_capabilities_);
  drop_capabilities_.InternalSwap(&other->drop_capabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinuxContainerSecurityContext::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_._instance.get_mutable()->capabilities_ = const_cast< ::runtime::v1alpha2::Capability*>(
      ::runtime::v1alpha2::Capability::internal_default_instance());
  ::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_._instance.get_mutable()->namespace_options_ = const_cast< ::runtime::v1alpha2::NamespaceOption*>(
      ::runtime::v1alpha2::NamespaceOption::internal_default_instance());
  ::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_._instance.get_mutable()->selinux_options_ = const_cast< ::runtime::v1alpha2::SELinuxOption*>(
      ::runtime::v1alpha2::SELinuxOption::internal_default_instance());
  ::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_._instance.get_mutable()->run_as_user_ = const_cast< ::runtime::v1alpha2::Int64Value*>(
      ::runtime::v1alpha2::Int64Value::internal_default_instance());
  ::runtime::v1alpha2::_LinuxContainerSecurityContext_default_instance_._instance.get_mutable()->run_as_group_ = const_cast< ::runtime::v1alpha2::Int64Value*>(
      ::runtime::v1alpha2::Int64Value::internal_default_instance());
}
class LinuxContainerSecurityContext::_Internal {
 public:
  static const ::runtime::v1alpha2::Capability& capabilities(const LinuxContainerSecurityContext* msg);
  static const ::runtime::v1alpha2::NamespaceOption& namespace_options(const LinuxContainerSecurityContext* msg);
  static const ::runtime::v1alpha2::SELinuxOption& selinux_options(const LinuxContainerSecurityContext* msg);
  static const ::runtime::v1alpha2::Int64Value& run_as_user(const LinuxContainerSecurityContext* msg);
  static const ::runtime::v1alpha2::Int64Value& run_as_group(const LinuxContainerSecurityContext* msg);
};

const ::runtime::v1alpha2::Capability&
LinuxContainerSecurityContext::_Internal::capabilities(const LinuxContainerSecurityContext* msg) {
  return *msg->capabilities_;
}
const ::runtime::v1alpha2::NamespaceOption&
LinuxContainerSecurityContext::_Internal::namespace_options(const LinuxContainerSecurityContext* msg) {
  return *msg->namespace_options_;
}
const ::runtime::v1alpha2::SELinuxOption&
LinuxContainerSecurityContext::_Internal::selinux_options(const LinuxContainerSecurityContext* msg) {
  return *msg->selinux_options_;
}
const ::runtime::v1alpha2::Int64Value&
LinuxContainerSecurityContext::_Internal::run_as_user(const LinuxContainerSecurityContext* msg) {
  return *msg->run_as_user_;
}
const ::runtime::v1alpha2::Int64Value&
LinuxContainerSecurityContext::_Internal::run_as_group(const LinuxContainerSecurityContext* msg) {
  return *msg->run_as_group_;
}
LinuxContainerSecurityContext::LinuxContainerSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supplemental_groups_(arena),
  masked_paths_(arena),
  readonly_paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxContainerSecurityContext)
}
LinuxContainerSecurityContext::LinuxContainerSecurityContext(const LinuxContainerSecurityContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supplemental_groups_(from.supplemental_groups_),
      masked_paths_(from.masked_paths_),
      readonly_paths_(from.readonly_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_as_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_as_username().empty()) {
    run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_run_as_username(),
      GetArena());
  }
  apparmor_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apparmor_profile().empty()) {
    apparmor_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_apparmor_profile(),
      GetArena());
  }
  seccomp_profile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seccomp_profile_path().empty()) {
    seccomp_profile_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seccomp_profile_path(),
      GetArena());
  }
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::runtime::v1alpha2::Capability(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  if (from._internal_has_namespace_options()) {
    namespace_options_ = new ::runtime::v1alpha2::NamespaceOption(*from.namespace_options_);
  } else {
    namespace_options_ = nullptr;
  }
  if (from._internal_has_selinux_options()) {
    selinux_options_ = new ::runtime::v1alpha2::SELinuxOption(*from.selinux_options_);
  } else {
    selinux_options_ = nullptr;
  }
  if (from._internal_has_run_as_user()) {
    run_as_user_ = new ::runtime::v1alpha2::Int64Value(*from.run_as_user_);
  } else {
    run_as_user_ = nullptr;
  }
  if (from._internal_has_run_as_group()) {
    run_as_group_ = new ::runtime::v1alpha2::Int64Value(*from.run_as_group_);
  } else {
    run_as_group_ = nullptr;
  }
  ::memcpy(&privileged_, &from.privileged_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_new_privs_) -
    reinterpret_cast<char*>(&privileged_)) + sizeof(no_new_privs_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxContainerSecurityContext)
}

void LinuxContainerSecurityContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxContainerSecurityContext_api_2eproto.base);
  run_as_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apparmor_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seccomp_profile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capabilities_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_new_privs_) -
      reinterpret_cast<char*>(&capabilities_)) + sizeof(no_new_privs_));
}

LinuxContainerSecurityContext::~LinuxContainerSecurityContext() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxContainerSecurityContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxContainerSecurityContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  run_as_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apparmor_profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seccomp_profile_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capabilities_;
  if (this != internal_default_instance()) delete namespace_options_;
  if (this != internal_default_instance()) delete selinux_options_;
  if (this != internal_default_instance()) delete run_as_user_;
  if (this != internal_default_instance()) delete run_as_group_;
}

void LinuxContainerSecurityContext::ArenaDtor(void* object) {
  LinuxContainerSecurityContext* _this = reinterpret_cast< LinuxContainerSecurityContext* >(object);
  (void)_this;
}
void LinuxContainerSecurityContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxContainerSecurityContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxContainerSecurityContext& LinuxContainerSecurityContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxContainerSecurityContext_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxContainerSecurityContext::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplemental_groups_.Clear();
  masked_paths_.Clear();
  readonly_paths_.Clear();
  run_as_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apparmor_profile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seccomp_profile_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
  if (GetArena() == nullptr && namespace_options_ != nullptr) {
    delete namespace_options_;
  }
  namespace_options_ = nullptr;
  if (GetArena() == nullptr && selinux_options_ != nullptr) {
    delete selinux_options_;
  }
  selinux_options_ = nullptr;
  if (GetArena() == nullptr && run_as_user_ != nullptr) {
    delete run_as_user_;
  }
  run_as_user_ = nullptr;
  if (GetArena() == nullptr && run_as_group_ != nullptr) {
    delete run_as_group_;
  }
  run_as_group_ = nullptr;
  ::memset(&privileged_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_new_privs_) -
      reinterpret_cast<char*>(&privileged_)) + sizeof(no_new_privs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxContainerSecurityContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.Capability capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool privileged = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          privileged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.NamespaceOption namespace_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.SELinuxOption selinux_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selinux_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.Int64Value run_as_user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_as_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string run_as_username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_run_as_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly_rootfs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          readonly_rootfs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 supplemental_groups = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_supplemental_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_supplemental_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apparmor_profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_apparmor_profile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seccomp_profile_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_seccomp_profile_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_new_privs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          no_new_privs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.Int64Value run_as_group = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_as_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string masked_paths = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_masked_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string readonly_paths = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_readonly_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxContainerSecurityContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.Capability capabilities = 1;
  if (this->has_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capabilities(this), target, stream);
  }

  // bool privileged = 2;
  if (this->privileged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_privileged(), target);
  }

  // .runtime.v1alpha2.NamespaceOption namespace_options = 3;
  if (this->has_namespace_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::namespace_options(this), target, stream);
  }

  // .runtime.v1alpha2.SELinuxOption selinux_options = 4;
  if (this->has_selinux_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selinux_options(this), target, stream);
  }

  // .runtime.v1alpha2.Int64Value run_as_user = 5;
  if (this->has_run_as_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::run_as_user(this), target, stream);
  }

  // string run_as_username = 6;
  if (this->run_as_username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_as_username().data(), static_cast<int>(this->_internal_run_as_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerSecurityContext.run_as_username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_run_as_username(), target);
  }

  // bool readonly_rootfs = 7;
  if (this->readonly_rootfs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_readonly_rootfs(), target);
  }

  // repeated int64 supplemental_groups = 8;
  {
    int byte_size = _supplemental_groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_supplemental_groups(), byte_size, target);
    }
  }

  // string apparmor_profile = 9;
  if (this->apparmor_profile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apparmor_profile().data(), static_cast<int>(this->_internal_apparmor_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerSecurityContext.apparmor_profile");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_apparmor_profile(), target);
  }

  // string seccomp_profile_path = 10;
  if (this->seccomp_profile_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seccomp_profile_path().data(), static_cast<int>(this->_internal_seccomp_profile_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerSecurityContext.seccomp_profile_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_seccomp_profile_path(), target);
  }

  // bool no_new_privs = 11;
  if (this->no_new_privs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_no_new_privs(), target);
  }

  // .runtime.v1alpha2.Int64Value run_as_group = 12;
  if (this->has_run_as_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::run_as_group(this), target, stream);
  }

  // repeated string masked_paths = 13;
  for (int i = 0, n = this->_internal_masked_paths_size(); i < n; i++) {
    const auto& s = this->_internal_masked_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerSecurityContext.masked_paths");
    target = stream->WriteString(13, s, target);
  }

  // repeated string readonly_paths = 14;
  for (int i = 0, n = this->_internal_readonly_paths_size(); i < n; i++) {
    const auto& s = this->_internal_readonly_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.LinuxContainerSecurityContext.readonly_paths");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxContainerSecurityContext)
  return target;
}

size_t LinuxContainerSecurityContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 supplemental_groups = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->supplemental_groups_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supplemental_groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string masked_paths = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(masked_paths_.size());
  for (int i = 0, n = masked_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      masked_paths_.Get(i));
  }

  // repeated string readonly_paths = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(readonly_paths_.size());
  for (int i = 0, n = readonly_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      readonly_paths_.Get(i));
  }

  // string run_as_username = 6;
  if (this->run_as_username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_as_username());
  }

  // string apparmor_profile = 9;
  if (this->apparmor_profile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apparmor_profile());
  }

  // string seccomp_profile_path = 10;
  if (this->seccomp_profile_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seccomp_profile_path());
  }

  // .runtime.v1alpha2.Capability capabilities = 1;
  if (this->has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_);
  }

  // .runtime.v1alpha2.NamespaceOption namespace_options = 3;
  if (this->has_namespace_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace_options_);
  }

  // .runtime.v1alpha2.SELinuxOption selinux_options = 4;
  if (this->has_selinux_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selinux_options_);
  }

  // .runtime.v1alpha2.Int64Value run_as_user = 5;
  if (this->has_run_as_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_as_user_);
  }

  // .runtime.v1alpha2.Int64Value run_as_group = 12;
  if (this->has_run_as_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_as_group_);
  }

  // bool privileged = 2;
  if (this->privileged() != 0) {
    total_size += 1 + 1;
  }

  // bool readonly_rootfs = 7;
  if (this->readonly_rootfs() != 0) {
    total_size += 1 + 1;
  }

  // bool no_new_privs = 11;
  if (this->no_new_privs() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxContainerSecurityContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxContainerSecurityContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxContainerSecurityContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxContainerSecurityContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxContainerSecurityContext)
    MergeFrom(*source);
  }
}

void LinuxContainerSecurityContext::MergeFrom(const LinuxContainerSecurityContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplemental_groups_.MergeFrom(from.supplemental_groups_);
  masked_paths_.MergeFrom(from.masked_paths_);
  readonly_paths_.MergeFrom(from.readonly_paths_);
  if (from.run_as_username().size() > 0) {
    _internal_set_run_as_username(from._internal_run_as_username());
  }
  if (from.apparmor_profile().size() > 0) {
    _internal_set_apparmor_profile(from._internal_apparmor_profile());
  }
  if (from.seccomp_profile_path().size() > 0) {
    _internal_set_seccomp_profile_path(from._internal_seccomp_profile_path());
  }
  if (from.has_capabilities()) {
    _internal_mutable_capabilities()->::runtime::v1alpha2::Capability::MergeFrom(from._internal_capabilities());
  }
  if (from.has_namespace_options()) {
    _internal_mutable_namespace_options()->::runtime::v1alpha2::NamespaceOption::MergeFrom(from._internal_namespace_options());
  }
  if (from.has_selinux_options()) {
    _internal_mutable_selinux_options()->::runtime::v1alpha2::SELinuxOption::MergeFrom(from._internal_selinux_options());
  }
  if (from.has_run_as_user()) {
    _internal_mutable_run_as_user()->::runtime::v1alpha2::Int64Value::MergeFrom(from._internal_run_as_user());
  }
  if (from.has_run_as_group()) {
    _internal_mutable_run_as_group()->::runtime::v1alpha2::Int64Value::MergeFrom(from._internal_run_as_group());
  }
  if (from.privileged() != 0) {
    _internal_set_privileged(from._internal_privileged());
  }
  if (from.readonly_rootfs() != 0) {
    _internal_set_readonly_rootfs(from._internal_readonly_rootfs());
  }
  if (from.no_new_privs() != 0) {
    _internal_set_no_new_privs(from._internal_no_new_privs());
  }
}

void LinuxContainerSecurityContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxContainerSecurityContext::CopyFrom(const LinuxContainerSecurityContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxContainerSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxContainerSecurityContext::IsInitialized() const {
  return true;
}

void LinuxContainerSecurityContext::InternalSwap(LinuxContainerSecurityContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supplemental_groups_.InternalSwap(&other->supplemental_groups_);
  masked_paths_.InternalSwap(&other->masked_paths_);
  readonly_paths_.InternalSwap(&other->readonly_paths_);
  run_as_username_.Swap(&other->run_as_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apparmor_profile_.Swap(&other->apparmor_profile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seccomp_profile_path_.Swap(&other->seccomp_profile_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinuxContainerSecurityContext, no_new_privs_)
      + sizeof(LinuxContainerSecurityContext::no_new_privs_)
      - PROTOBUF_FIELD_OFFSET(LinuxContainerSecurityContext, capabilities_)>(
          reinterpret_cast<char*>(&capabilities_),
          reinterpret_cast<char*>(&other->capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxContainerSecurityContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinuxContainerConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_LinuxContainerConfig_default_instance_._instance.get_mutable()->resources_ = const_cast< ::runtime::v1alpha2::LinuxContainerResources*>(
      ::runtime::v1alpha2::LinuxContainerResources::internal_default_instance());
  ::runtime::v1alpha2::_LinuxContainerConfig_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::runtime::v1alpha2::LinuxContainerSecurityContext*>(
      ::runtime::v1alpha2::LinuxContainerSecurityContext::internal_default_instance());
}
class LinuxContainerConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::LinuxContainerResources& resources(const LinuxContainerConfig* msg);
  static const ::runtime::v1alpha2::LinuxContainerSecurityContext& security_context(const LinuxContainerConfig* msg);
};

const ::runtime::v1alpha2::LinuxContainerResources&
LinuxContainerConfig::_Internal::resources(const LinuxContainerConfig* msg) {
  return *msg->resources_;
}
const ::runtime::v1alpha2::LinuxContainerSecurityContext&
LinuxContainerConfig::_Internal::security_context(const LinuxContainerConfig* msg) {
  return *msg->security_context_;
}
LinuxContainerConfig::LinuxContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.LinuxContainerConfig)
}
LinuxContainerConfig::LinuxContainerConfig(const LinuxContainerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resources()) {
    resources_ = new ::runtime::v1alpha2::LinuxContainerResources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::runtime::v1alpha2::LinuxContainerSecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.LinuxContainerConfig)
}

void LinuxContainerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinuxContainerConfig_api_2eproto.base);
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_context_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(security_context_));
}

LinuxContainerConfig::~LinuxContainerConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.LinuxContainerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinuxContainerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete security_context_;
}

void LinuxContainerConfig::ArenaDtor(void* object) {
  LinuxContainerConfig* _this = reinterpret_cast< LinuxContainerConfig* >(object);
  (void)_this;
}
void LinuxContainerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinuxContainerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinuxContainerConfig& LinuxContainerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinuxContainerConfig_api_2eproto.base);
  return *internal_default_instance();
}


void LinuxContainerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.LinuxContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinuxContainerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.LinuxContainerResources resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxContainerSecurityContext security_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinuxContainerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.LinuxContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.LinuxContainerResources resources = 1;
  if (this->has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resources(this), target, stream);
  }

  // .runtime.v1alpha2.LinuxContainerSecurityContext security_context = 2;
  if (this->has_security_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::security_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.LinuxContainerConfig)
  return target;
}

size_t LinuxContainerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.LinuxContainerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.LinuxContainerResources resources = 1;
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .runtime.v1alpha2.LinuxContainerSecurityContext security_context = 2;
  if (this->has_security_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinuxContainerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.LinuxContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LinuxContainerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinuxContainerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.LinuxContainerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.LinuxContainerConfig)
    MergeFrom(*source);
  }
}

void LinuxContainerConfig::MergeFrom(const LinuxContainerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.LinuxContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resources()) {
    _internal_mutable_resources()->::runtime::v1alpha2::LinuxContainerResources::MergeFrom(from._internal_resources());
  }
  if (from.has_security_context()) {
    _internal_mutable_security_context()->::runtime::v1alpha2::LinuxContainerSecurityContext::MergeFrom(from._internal_security_context());
  }
}

void LinuxContainerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.LinuxContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinuxContainerConfig::CopyFrom(const LinuxContainerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.LinuxContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinuxContainerConfig::IsInitialized() const {
  return true;
}

void LinuxContainerConfig::InternalSwap(LinuxContainerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinuxContainerConfig, security_context_)
      + sizeof(LinuxContainerConfig::security_context_)
      - PROTOBUF_FIELD_OFFSET(LinuxContainerConfig, resources_)>(
          reinterpret_cast<char*>(&resources_),
          reinterpret_cast<char*>(&other->resources_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinuxContainerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowsContainerSecurityContext::InitAsDefaultInstance() {
}
class WindowsContainerSecurityContext::_Internal {
 public:
};

WindowsContainerSecurityContext::WindowsContainerSecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.WindowsContainerSecurityContext)
}
WindowsContainerSecurityContext::WindowsContainerSecurityContext(const WindowsContainerSecurityContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_as_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_as_username().empty()) {
    run_as_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_run_as_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.WindowsContainerSecurityContext)
}

void WindowsContainerSecurityContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowsContainerSecurityContext_api_2eproto.base);
  run_as_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WindowsContainerSecurityContext::~WindowsContainerSecurityContext() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.WindowsContainerSecurityContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WindowsContainerSecurityContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  run_as_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WindowsContainerSecurityContext::ArenaDtor(void* object) {
  WindowsContainerSecurityContext* _this = reinterpret_cast< WindowsContainerSecurityContext* >(object);
  (void)_this;
}
void WindowsContainerSecurityContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowsContainerSecurityContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowsContainerSecurityContext& WindowsContainerSecurityContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowsContainerSecurityContext_api_2eproto.base);
  return *internal_default_instance();
}


void WindowsContainerSecurityContext::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_as_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowsContainerSecurityContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string run_as_username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_as_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowsContainerSecurityContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_as_username = 1;
  if (this->run_as_username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_as_username().data(), static_cast<int>(this->_internal_run_as_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.WindowsContainerSecurityContext.run_as_username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_as_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.WindowsContainerSecurityContext)
  return target;
}

size_t WindowsContainerSecurityContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_as_username = 1;
  if (this->run_as_username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_as_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowsContainerSecurityContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowsContainerSecurityContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowsContainerSecurityContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.WindowsContainerSecurityContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.WindowsContainerSecurityContext)
    MergeFrom(*source);
  }
}

void WindowsContainerSecurityContext::MergeFrom(const WindowsContainerSecurityContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.run_as_username().size() > 0) {
    _internal_set_run_as_username(from._internal_run_as_username());
  }
}

void WindowsContainerSecurityContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowsContainerSecurityContext::CopyFrom(const WindowsContainerSecurityContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.WindowsContainerSecurityContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsContainerSecurityContext::IsInitialized() const {
  return true;
}

void WindowsContainerSecurityContext::InternalSwap(WindowsContainerSecurityContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  run_as_username_.Swap(&other->run_as_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowsContainerSecurityContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowsContainerConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_WindowsContainerConfig_default_instance_._instance.get_mutable()->resources_ = const_cast< ::runtime::v1alpha2::WindowsContainerResources*>(
      ::runtime::v1alpha2::WindowsContainerResources::internal_default_instance());
  ::runtime::v1alpha2::_WindowsContainerConfig_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::runtime::v1alpha2::WindowsContainerSecurityContext*>(
      ::runtime::v1alpha2::WindowsContainerSecurityContext::internal_default_instance());
}
class WindowsContainerConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::WindowsContainerResources& resources(const WindowsContainerConfig* msg);
  static const ::runtime::v1alpha2::WindowsContainerSecurityContext& security_context(const WindowsContainerConfig* msg);
};

const ::runtime::v1alpha2::WindowsContainerResources&
WindowsContainerConfig::_Internal::resources(const WindowsContainerConfig* msg) {
  return *msg->resources_;
}
const ::runtime::v1alpha2::WindowsContainerSecurityContext&
WindowsContainerConfig::_Internal::security_context(const WindowsContainerConfig* msg) {
  return *msg->security_context_;
}
WindowsContainerConfig::WindowsContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.WindowsContainerConfig)
}
WindowsContainerConfig::WindowsContainerConfig(const WindowsContainerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resources()) {
    resources_ = new ::runtime::v1alpha2::WindowsContainerResources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::runtime::v1alpha2::WindowsContainerSecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.WindowsContainerConfig)
}

void WindowsContainerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowsContainerConfig_api_2eproto.base);
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_context_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(security_context_));
}

WindowsContainerConfig::~WindowsContainerConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.WindowsContainerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WindowsContainerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete security_context_;
}

void WindowsContainerConfig::ArenaDtor(void* object) {
  WindowsContainerConfig* _this = reinterpret_cast< WindowsContainerConfig* >(object);
  (void)_this;
}
void WindowsContainerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowsContainerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowsContainerConfig& WindowsContainerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowsContainerConfig_api_2eproto.base);
  return *internal_default_instance();
}


void WindowsContainerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.WindowsContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArena() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowsContainerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.WindowsContainerResources resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.WindowsContainerSecurityContext security_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowsContainerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.WindowsContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.WindowsContainerResources resources = 1;
  if (this->has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resources(this), target, stream);
  }

  // .runtime.v1alpha2.WindowsContainerSecurityContext security_context = 2;
  if (this->has_security_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::security_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.WindowsContainerConfig)
  return target;
}

size_t WindowsContainerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.WindowsContainerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.WindowsContainerResources resources = 1;
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .runtime.v1alpha2.WindowsContainerSecurityContext security_context = 2;
  if (this->has_security_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowsContainerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.WindowsContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowsContainerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowsContainerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.WindowsContainerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.WindowsContainerConfig)
    MergeFrom(*source);
  }
}

void WindowsContainerConfig::MergeFrom(const WindowsContainerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.WindowsContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resources()) {
    _internal_mutable_resources()->::runtime::v1alpha2::WindowsContainerResources::MergeFrom(from._internal_resources());
  }
  if (from.has_security_context()) {
    _internal_mutable_security_context()->::runtime::v1alpha2::WindowsContainerSecurityContext::MergeFrom(from._internal_security_context());
  }
}

void WindowsContainerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.WindowsContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowsContainerConfig::CopyFrom(const WindowsContainerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.WindowsContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsContainerConfig::IsInitialized() const {
  return true;
}

void WindowsContainerConfig::InternalSwap(WindowsContainerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowsContainerConfig, security_context_)
      + sizeof(WindowsContainerConfig::security_context_)
      - PROTOBUF_FIELD_OFFSET(WindowsContainerConfig, resources_)>(
          reinterpret_cast<char*>(&resources_),
          reinterpret_cast<char*>(&other->resources_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowsContainerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowsContainerResources::InitAsDefaultInstance() {
}
class WindowsContainerResources::_Internal {
 public:
};

WindowsContainerResources::WindowsContainerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.WindowsContainerResources)
}
WindowsContainerResources::WindowsContainerResources(const WindowsContainerResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cpu_shares_, &from.cpu_shares_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_limit_in_bytes_) -
    reinterpret_cast<char*>(&cpu_shares_)) + sizeof(memory_limit_in_bytes_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.WindowsContainerResources)
}

void WindowsContainerResources::SharedCtor() {
  ::memset(&cpu_shares_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_limit_in_bytes_) -
      reinterpret_cast<char*>(&cpu_shares_)) + sizeof(memory_limit_in_bytes_));
}

WindowsContainerResources::~WindowsContainerResources() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.WindowsContainerResources)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WindowsContainerResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WindowsContainerResources::ArenaDtor(void* object) {
  WindowsContainerResources* _this = reinterpret_cast< WindowsContainerResources* >(object);
  (void)_this;
}
void WindowsContainerResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowsContainerResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowsContainerResources& WindowsContainerResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowsContainerResources_api_2eproto.base);
  return *internal_default_instance();
}


void WindowsContainerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.WindowsContainerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cpu_shares_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_limit_in_bytes_) -
      reinterpret_cast<char*>(&cpu_shares_)) + sizeof(memory_limit_in_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowsContainerResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 cpu_shares = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cpu_shares_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cpu_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_maximum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cpu_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_limit_in_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_limit_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowsContainerResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.WindowsContainerResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cpu_shares = 1;
  if (this->cpu_shares() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cpu_shares(), target);
  }

  // int64 cpu_count = 2;
  if (this->cpu_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cpu_count(), target);
  }

  // int64 cpu_maximum = 3;
  if (this->cpu_maximum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cpu_maximum(), target);
  }

  // int64 memory_limit_in_bytes = 4;
  if (this->memory_limit_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_memory_limit_in_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.WindowsContainerResources)
  return target;
}

size_t WindowsContainerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.WindowsContainerResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 cpu_shares = 1;
  if (this->cpu_shares() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_shares());
  }

  // int64 cpu_count = 2;
  if (this->cpu_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_count());
  }

  // int64 cpu_maximum = 3;
  if (this->cpu_maximum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_maximum());
  }

  // int64 memory_limit_in_bytes = 4;
  if (this->memory_limit_in_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_limit_in_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowsContainerResources::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.WindowsContainerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowsContainerResources* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowsContainerResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.WindowsContainerResources)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.WindowsContainerResources)
    MergeFrom(*source);
  }
}

void WindowsContainerResources::MergeFrom(const WindowsContainerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.WindowsContainerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpu_shares() != 0) {
    _internal_set_cpu_shares(from._internal_cpu_shares());
  }
  if (from.cpu_count() != 0) {
    _internal_set_cpu_count(from._internal_cpu_count());
  }
  if (from.cpu_maximum() != 0) {
    _internal_set_cpu_maximum(from._internal_cpu_maximum());
  }
  if (from.memory_limit_in_bytes() != 0) {
    _internal_set_memory_limit_in_bytes(from._internal_memory_limit_in_bytes());
  }
}

void WindowsContainerResources::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.WindowsContainerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowsContainerResources::CopyFrom(const WindowsContainerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.WindowsContainerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsContainerResources::IsInitialized() const {
  return true;
}

void WindowsContainerResources::InternalSwap(WindowsContainerResources* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowsContainerResources, memory_limit_in_bytes_)
      + sizeof(WindowsContainerResources::memory_limit_in_bytes_)
      - PROTOBUF_FIELD_OFFSET(WindowsContainerResources, cpu_shares_)>(
          reinterpret_cast<char*>(&cpu_shares_),
          reinterpret_cast<char*>(&other->cpu_shares_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowsContainerResources::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerMetadata::InitAsDefaultInstance() {
}
class ContainerMetadata::_Internal {
 public:
};

ContainerMetadata::ContainerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerMetadata)
}
ContainerMetadata::ContainerMetadata(const ContainerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  attempt_ = from.attempt_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerMetadata)
}

void ContainerMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerMetadata_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attempt_ = 0u;
}

ContainerMetadata::~ContainerMetadata() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerMetadata::ArenaDtor(void* object) {
  ContainerMetadata* _this = reinterpret_cast< ContainerMetadata* >(object);
  (void)_this;
}
void ContainerMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerMetadata& ContainerMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerMetadata_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attempt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 attempt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerMetadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 attempt = 2;
  if (this->attempt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attempt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerMetadata)
  return target;
}

size_t ContainerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 attempt = 2;
  if (this->attempt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attempt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerMetadata)
    MergeFrom(*source);
  }
}

void ContainerMetadata::MergeFrom(const ContainerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.attempt() != 0) {
    _internal_set_attempt(from._internal_attempt());
  }
}

void ContainerMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerMetadata::CopyFrom(const ContainerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerMetadata::IsInitialized() const {
  return true;
}

void ContainerMetadata::InternalSwap(ContainerMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(attempt_, other->attempt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_path().empty()) {
    container_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_path(),
      GetArena());
  }
  host_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_path().empty()) {
    host_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_path(),
      GetArena());
  }
  permissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permissions().empty()) {
    permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_permissions(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_api_2eproto.base);
  container_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_api_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  permissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Device.container_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Device.host_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_permissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Device.permissions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_path = 1;
  if (this->container_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_path().data(), static_cast<int>(this->_internal_container_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Device.container_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_path(), target);
  }

  // string host_path = 2;
  if (this->host_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_path().data(), static_cast<int>(this->_internal_host_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Device.host_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_path(), target);
  }

  // string permissions = 3;
  if (this->permissions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permissions().data(), static_cast<int>(this->_internal_permissions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Device.permissions");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permissions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_path = 1;
  if (this->container_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_path());
  }

  // string host_path = 2;
  if (this->host_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_path());
  }

  // string permissions = 3;
  if (this->permissions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permissions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_path().size() > 0) {
    _internal_set_container_path(from._internal_container_path());
  }
  if (from.host_path().size() > 0) {
    _internal_set_host_path(from._internal_host_path());
  }
  if (from.permissions().size() > 0) {
    _internal_set_permissions(from._internal_permissions());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_path_.Swap(&other->container_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_path_.Swap(&other->host_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  permissions_.Swap(&other->permissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerConfig_LabelsEntry_DoNotUse::ContainerConfig_LabelsEntry_DoNotUse() {}
ContainerConfig_LabelsEntry_DoNotUse::ContainerConfig_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerConfig_LabelsEntry_DoNotUse::MergeFrom(const ContainerConfig_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerConfig_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ContainerConfig_AnnotationsEntry_DoNotUse::ContainerConfig_AnnotationsEntry_DoNotUse() {}
ContainerConfig_AnnotationsEntry_DoNotUse::ContainerConfig_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerConfig_AnnotationsEntry_DoNotUse::MergeFrom(const ContainerConfig_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerConfig_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerConfig_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::ContainerMetadata*>(
      ::runtime::v1alpha2::ContainerMetadata::internal_default_instance());
  ::runtime::v1alpha2::_ContainerConfig_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
  ::runtime::v1alpha2::_ContainerConfig_default_instance_._instance.get_mutable()->linux_ = const_cast< ::runtime::v1alpha2::LinuxContainerConfig*>(
      ::runtime::v1alpha2::LinuxContainerConfig::internal_default_instance());
  ::runtime::v1alpha2::_ContainerConfig_default_instance_._instance.get_mutable()->windows_ = const_cast< ::runtime::v1alpha2::WindowsContainerConfig*>(
      ::runtime::v1alpha2::WindowsContainerConfig::internal_default_instance());
}
class ContainerConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerMetadata& metadata(const ContainerConfig* msg);
  static const ::runtime::v1alpha2::ImageSpec& image(const ContainerConfig* msg);
  static const ::runtime::v1alpha2::LinuxContainerConfig& linux(const ContainerConfig* msg);
  static const ::runtime::v1alpha2::WindowsContainerConfig& windows(const ContainerConfig* msg);
};

const ::runtime::v1alpha2::ContainerMetadata&
ContainerConfig::_Internal::metadata(const ContainerConfig* msg) {
  return *msg->metadata_;
}
const ::runtime::v1alpha2::ImageSpec&
ContainerConfig::_Internal::image(const ContainerConfig* msg) {
  return *msg->image_;
}
const ::runtime::v1alpha2::LinuxContainerConfig&
ContainerConfig::_Internal::linux(const ContainerConfig* msg) {
  return *msg->linux_;
}
const ::runtime::v1alpha2::WindowsContainerConfig&
ContainerConfig::_Internal::windows(const ContainerConfig* msg) {
  return *msg->windows_;
}
ContainerConfig::ContainerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_(arena),
  args_(arena),
  envs_(arena),
  mounts_(arena),
  devices_(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerConfig)
}
ContainerConfig::ContainerConfig(const ContainerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_(from.command_),
      args_(from.args_),
      envs_(from.envs_),
      mounts_(from.mounts_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  working_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_working_dir().empty()) {
    working_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_working_dir(),
      GetArena());
  }
  log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_path().empty()) {
    log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_path(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::ContainerMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_linux()) {
    linux_ = new ::runtime::v1alpha2::LinuxContainerConfig(*from.linux_);
  } else {
    linux_ = nullptr;
  }
  if (from._internal_has_windows()) {
    windows_ = new ::runtime::v1alpha2::WindowsContainerConfig(*from.windows_);
  } else {
    windows_ = nullptr;
  }
  ::memcpy(&stdin_, &from.stdin_,
    static_cast<size_t>(reinterpret_cast<char*>(&tty_) -
    reinterpret_cast<char*>(&stdin_)) + sizeof(tty_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerConfig)
}

void ContainerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerConfig_api_2eproto.base);
  working_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tty_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(tty_));
}

ContainerConfig::~ContainerConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  working_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete linux_;
  if (this != internal_default_instance()) delete windows_;
}

void ContainerConfig::ArenaDtor(void* object) {
  ContainerConfig* _this = reinterpret_cast< ContainerConfig* >(object);
  (void)_this;
}
void ContainerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerConfig& ContainerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerConfig_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  args_.Clear();
  envs_.Clear();
  mounts_.Clear();
  devices_.Clear();
  labels_.Clear();
  annotations_.Clear();
  working_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
  if (GetArena() == nullptr && windows_ != nullptr) {
    delete windows_;
  }
  windows_ = nullptr;
  ::memset(&stdin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tty_) -
      reinterpret_cast<char*>(&stdin_)) + sizeof(tty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ImageSpec image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerConfig.command"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerConfig.args"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string working_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_working_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerConfig.working_dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.KeyValue envs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_envs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.Mount mounts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.Device devices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string log_path = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_log_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerConfig.log_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdin = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stdin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdin_once = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stdin_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxContainerConfig linux = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_linux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.WindowsContainerConfig windows = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_windows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .runtime.v1alpha2.ImageSpec image = 2;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  // repeated string command = 3;
  for (int i = 0, n = this->_internal_command_size(); i < n; i++) {
    const auto& s = this->_internal_command(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerConfig.command");
    target = stream->WriteString(3, s, target);
  }

  // repeated string args = 4;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerConfig.args");
    target = stream->WriteString(4, s, target);
  }

  // string working_dir = 5;
  if (this->working_dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_working_dir().data(), static_cast<int>(this->_internal_working_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerConfig.working_dir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_working_dir(), target);
  }

  // repeated .runtime.v1alpha2.KeyValue envs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_envs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_envs(i), target, stream);
  }

  // repeated .runtime.v1alpha2.Mount mounts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_mounts(i), target, stream);
  }

  // repeated .runtime.v1alpha2.Device devices = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_devices(i), target, stream);
  }

  // map<string, string> labels = 9;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerConfig.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerConfig.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ContainerConfig_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 10;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerConfig.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerConfig.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerConfig_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = ContainerConfig_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string log_path = 11;
  if (this->log_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_path().data(), static_cast<int>(this->_internal_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerConfig.log_path");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_log_path(), target);
  }

  // bool stdin = 12;
  if (this->stdin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_stdin(), target);
  }

  // bool stdin_once = 13;
  if (this->stdin_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_stdin_once(), target);
  }

  // bool tty = 14;
  if (this->tty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tty(), target);
  }

  // .runtime.v1alpha2.LinuxContainerConfig linux = 15;
  if (this->has_linux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::linux(this), target, stream);
  }

  // .runtime.v1alpha2.WindowsContainerConfig windows = 16;
  if (this->has_windows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::windows(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerConfig)
  return target;
}

size_t ContainerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_.size());
  for (int i = 0, n = command_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_.Get(i));
  }

  // repeated string args = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      args_.Get(i));
  }

  // repeated .runtime.v1alpha2.KeyValue envs = 6;
  total_size += 1UL * this->_internal_envs_size();
  for (const auto& msg : this->envs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .runtime.v1alpha2.Mount mounts = 7;
  total_size += 1UL * this->_internal_mounts_size();
  for (const auto& msg : this->mounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .runtime.v1alpha2.Device devices = 8;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> labels = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ContainerConfig_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += ContainerConfig_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string working_dir = 5;
  if (this->working_dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_working_dir());
  }

  // string log_path = 11;
  if (this->log_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_path());
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .runtime.v1alpha2.ImageSpec image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .runtime.v1alpha2.LinuxContainerConfig linux = 15;
  if (this->has_linux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linux_);
  }

  // .runtime.v1alpha2.WindowsContainerConfig windows = 16;
  if (this->has_windows()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *windows_);
  }

  // bool stdin = 12;
  if (this->stdin() != 0) {
    total_size += 1 + 1;
  }

  // bool stdin_once = 13;
  if (this->stdin_once() != 0) {
    total_size += 1 + 1;
  }

  // bool tty = 14;
  if (this->tty() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerConfig)
    MergeFrom(*source);
  }
}

void ContainerConfig::MergeFrom(const ContainerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  args_.MergeFrom(from.args_);
  envs_.MergeFrom(from.envs_);
  mounts_.MergeFrom(from.mounts_);
  devices_.MergeFrom(from.devices_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.working_dir().size() > 0) {
    _internal_set_working_dir(from._internal_working_dir());
  }
  if (from.log_path().size() > 0) {
    _internal_set_log_path(from._internal_log_path());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::ContainerMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
  if (from.has_linux()) {
    _internal_mutable_linux()->::runtime::v1alpha2::LinuxContainerConfig::MergeFrom(from._internal_linux());
  }
  if (from.has_windows()) {
    _internal_mutable_windows()->::runtime::v1alpha2::WindowsContainerConfig::MergeFrom(from._internal_windows());
  }
  if (from.stdin() != 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (from.stdin_once() != 0) {
    _internal_set_stdin_once(from._internal_stdin_once());
  }
  if (from.tty() != 0) {
    _internal_set_tty(from._internal_tty());
  }
}

void ContainerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerConfig::CopyFrom(const ContainerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerConfig::IsInitialized() const {
  return true;
}

void ContainerConfig::InternalSwap(ContainerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_.InternalSwap(&other->command_);
  args_.InternalSwap(&other->args_);
  envs_.InternalSwap(&other->envs_);
  mounts_.InternalSwap(&other->mounts_);
  devices_.InternalSwap(&other->devices_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  working_dir_.Swap(&other->working_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_path_.Swap(&other->log_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerConfig, tty_)
      + sizeof(ContainerConfig::tty_)
      - PROTOBUF_FIELD_OFFSET(ContainerConfig, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateContainerRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_CreateContainerRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::runtime::v1alpha2::ContainerConfig*>(
      ::runtime::v1alpha2::ContainerConfig::internal_default_instance());
  ::runtime::v1alpha2::_CreateContainerRequest_default_instance_._instance.get_mutable()->sandbox_config_ = const_cast< ::runtime::v1alpha2::PodSandboxConfig*>(
      ::runtime::v1alpha2::PodSandboxConfig::internal_default_instance());
}
class CreateContainerRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerConfig& config(const CreateContainerRequest* msg);
  static const ::runtime::v1alpha2::PodSandboxConfig& sandbox_config(const CreateContainerRequest* msg);
};

const ::runtime::v1alpha2::ContainerConfig&
CreateContainerRequest::_Internal::config(const CreateContainerRequest* msg) {
  return *msg->config_;
}
const ::runtime::v1alpha2::PodSandboxConfig&
CreateContainerRequest::_Internal::sandbox_config(const CreateContainerRequest* msg) {
  return *msg->sandbox_config_;
}
CreateContainerRequest::CreateContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.CreateContainerRequest)
}
CreateContainerRequest::CreateContainerRequest(const CreateContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  if (from._internal_has_config()) {
    config_ = new ::runtime::v1alpha2::ContainerConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_sandbox_config()) {
    sandbox_config_ = new ::runtime::v1alpha2::PodSandboxConfig(*from.sandbox_config_);
  } else {
    sandbox_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.CreateContainerRequest)
}

void CreateContainerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateContainerRequest_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sandbox_config_) -
      reinterpret_cast<char*>(&config_)) + sizeof(sandbox_config_));
}

CreateContainerRequest::~CreateContainerRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.CreateContainerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete sandbox_config_;
}

void CreateContainerRequest::ArenaDtor(void* object) {
  CreateContainerRequest* _this = reinterpret_cast< CreateContainerRequest* >(object);
  (void)_this;
}
void CreateContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateContainerRequest& CreateContainerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateContainerRequest_api_2eproto.base);
  return *internal_default_instance();
}


void CreateContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.CreateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && sandbox_config_ != nullptr) {
    delete sandbox_config_;
  }
  sandbox_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sandbox_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.CreateContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.CreateContainerRequest.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  // .runtime.v1alpha2.ContainerConfig config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  if (this->has_sandbox_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sandbox_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.CreateContainerRequest)
  return target;
}

size_t CreateContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.CreateContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  // .runtime.v1alpha2.ContainerConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  if (this->has_sandbox_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sandbox_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateContainerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.CreateContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContainerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateContainerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.CreateContainerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.CreateContainerRequest)
    MergeFrom(*source);
  }
}

void CreateContainerRequest::MergeFrom(const CreateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.CreateContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::runtime::v1alpha2::ContainerConfig::MergeFrom(from._internal_config());
  }
  if (from.has_sandbox_config()) {
    _internal_mutable_sandbox_config()->::runtime::v1alpha2::PodSandboxConfig::MergeFrom(from._internal_sandbox_config());
  }
}

void CreateContainerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.CreateContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContainerRequest::CopyFrom(const CreateContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.CreateContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerRequest::IsInitialized() const {
  return true;
}

void CreateContainerRequest::InternalSwap(CreateContainerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateContainerRequest, sandbox_config_)
      + sizeof(CreateContainerRequest::sandbox_config_)
      - PROTOBUF_FIELD_OFFSET(CreateContainerRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContainerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateContainerResponse::InitAsDefaultInstance() {
}
class CreateContainerResponse::_Internal {
 public:
};

CreateContainerResponse::CreateContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.CreateContainerResponse)
}
CreateContainerResponse::CreateContainerResponse(const CreateContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.CreateContainerResponse)
}

void CreateContainerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateContainerResponse_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateContainerResponse::~CreateContainerResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.CreateContainerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateContainerResponse::ArenaDtor(void* object) {
  CreateContainerResponse* _this = reinterpret_cast< CreateContainerResponse* >(object);
  (void)_this;
}
void CreateContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateContainerResponse& CreateContainerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateContainerResponse_api_2eproto.base);
  return *internal_default_instance();
}


void CreateContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.CreateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.CreateContainerResponse.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.CreateContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.CreateContainerResponse.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.CreateContainerResponse)
  return target;
}

size_t CreateContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.CreateContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateContainerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.CreateContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContainerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateContainerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.CreateContainerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.CreateContainerResponse)
    MergeFrom(*source);
  }
}

void CreateContainerResponse::MergeFrom(const CreateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.CreateContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void CreateContainerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.CreateContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContainerResponse::CopyFrom(const CreateContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.CreateContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerResponse::IsInitialized() const {
  return true;
}

void CreateContainerResponse::InternalSwap(CreateContainerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContainerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartContainerRequest::InitAsDefaultInstance() {
}
class StartContainerRequest::_Internal {
 public:
};

StartContainerRequest::StartContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StartContainerRequest)
}
StartContainerRequest::StartContainerRequest(const StartContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StartContainerRequest)
}

void StartContainerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartContainerRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartContainerRequest::~StartContainerRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StartContainerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartContainerRequest::ArenaDtor(void* object) {
  StartContainerRequest* _this = reinterpret_cast< StartContainerRequest* >(object);
  (void)_this;
}
void StartContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartContainerRequest& StartContainerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartContainerRequest_api_2eproto.base);
  return *internal_default_instance();
}


void StartContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StartContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.StartContainerRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StartContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.StartContainerRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StartContainerRequest)
  return target;
}

size_t StartContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StartContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartContainerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StartContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartContainerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartContainerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StartContainerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StartContainerRequest)
    MergeFrom(*source);
  }
}

void StartContainerRequest::MergeFrom(const StartContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StartContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void StartContainerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StartContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartContainerRequest::CopyFrom(const StartContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StartContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartContainerRequest::IsInitialized() const {
  return true;
}

void StartContainerRequest::InternalSwap(StartContainerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StartContainerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartContainerResponse::InitAsDefaultInstance() {
}
class StartContainerResponse::_Internal {
 public:
};

StartContainerResponse::StartContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StartContainerResponse)
}
StartContainerResponse::StartContainerResponse(const StartContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StartContainerResponse)
}

void StartContainerResponse::SharedCtor() {
}

StartContainerResponse::~StartContainerResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StartContainerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartContainerResponse::ArenaDtor(void* object) {
  StartContainerResponse* _this = reinterpret_cast< StartContainerResponse* >(object);
  (void)_this;
}
void StartContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartContainerResponse& StartContainerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartContainerResponse_api_2eproto.base);
  return *internal_default_instance();
}


void StartContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StartContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StartContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StartContainerResponse)
  return target;
}

size_t StartContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StartContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartContainerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StartContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartContainerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartContainerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StartContainerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StartContainerResponse)
    MergeFrom(*source);
  }
}

void StartContainerResponse::MergeFrom(const StartContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StartContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartContainerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StartContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartContainerResponse::CopyFrom(const StartContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StartContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartContainerResponse::IsInitialized() const {
  return true;
}

void StartContainerResponse::InternalSwap(StartContainerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartContainerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopContainerRequest::InitAsDefaultInstance() {
}
class StopContainerRequest::_Internal {
 public:
};

StopContainerRequest::StopContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StopContainerRequest)
}
StopContainerRequest::StopContainerRequest(const StopContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StopContainerRequest)
}

void StopContainerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopContainerRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = PROTOBUF_LONGLONG(0);
}

StopContainerRequest::~StopContainerRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StopContainerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopContainerRequest::ArenaDtor(void* object) {
  StopContainerRequest* _this = reinterpret_cast< StopContainerRequest* >(object);
  (void)_this;
}
void StopContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopContainerRequest& StopContainerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopContainerRequest_api_2eproto.base);
  return *internal_default_instance();
}


void StopContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StopContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeout_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.StopContainerRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StopContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.StopContainerRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // int64 timeout = 2;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StopContainerRequest)
  return target;
}

size_t StopContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StopContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // int64 timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopContainerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StopContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopContainerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopContainerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StopContainerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StopContainerRequest)
    MergeFrom(*source);
  }
}

void StopContainerRequest::MergeFrom(const StopContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StopContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void StopContainerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StopContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopContainerRequest::CopyFrom(const StopContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StopContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainerRequest::IsInitialized() const {
  return true;
}

void StopContainerRequest::InternalSwap(StopContainerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopContainerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopContainerResponse::InitAsDefaultInstance() {
}
class StopContainerResponse::_Internal {
 public:
};

StopContainerResponse::StopContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StopContainerResponse)
}
StopContainerResponse::StopContainerResponse(const StopContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StopContainerResponse)
}

void StopContainerResponse::SharedCtor() {
}

StopContainerResponse::~StopContainerResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StopContainerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopContainerResponse::ArenaDtor(void* object) {
  StopContainerResponse* _this = reinterpret_cast< StopContainerResponse* >(object);
  (void)_this;
}
void StopContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopContainerResponse& StopContainerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopContainerResponse_api_2eproto.base);
  return *internal_default_instance();
}


void StopContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StopContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StopContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StopContainerResponse)
  return target;
}

size_t StopContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StopContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopContainerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StopContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopContainerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopContainerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StopContainerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StopContainerResponse)
    MergeFrom(*source);
  }
}

void StopContainerResponse::MergeFrom(const StopContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StopContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopContainerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StopContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopContainerResponse::CopyFrom(const StopContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StopContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainerResponse::IsInitialized() const {
  return true;
}

void StopContainerResponse::InternalSwap(StopContainerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopContainerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveContainerRequest::InitAsDefaultInstance() {
}
class RemoveContainerRequest::_Internal {
 public:
};

RemoveContainerRequest::RemoveContainerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemoveContainerRequest)
}
RemoveContainerRequest::RemoveContainerRequest(const RemoveContainerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemoveContainerRequest)
}

void RemoveContainerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveContainerRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveContainerRequest::~RemoveContainerRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemoveContainerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveContainerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveContainerRequest::ArenaDtor(void* object) {
  RemoveContainerRequest* _this = reinterpret_cast< RemoveContainerRequest* >(object);
  (void)_this;
}
void RemoveContainerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveContainerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveContainerRequest& RemoveContainerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveContainerRequest_api_2eproto.base);
  return *internal_default_instance();
}


void RemoveContainerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemoveContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveContainerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RemoveContainerRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveContainerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemoveContainerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RemoveContainerRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemoveContainerRequest)
  return target;
}

size_t RemoveContainerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemoveContainerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveContainerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemoveContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveContainerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveContainerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemoveContainerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemoveContainerRequest)
    MergeFrom(*source);
  }
}

void RemoveContainerRequest::MergeFrom(const RemoveContainerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemoveContainerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void RemoveContainerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemoveContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveContainerRequest::CopyFrom(const RemoveContainerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemoveContainerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveContainerRequest::IsInitialized() const {
  return true;
}

void RemoveContainerRequest::InternalSwap(RemoveContainerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveContainerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveContainerResponse::InitAsDefaultInstance() {
}
class RemoveContainerResponse::_Internal {
 public:
};

RemoveContainerResponse::RemoveContainerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemoveContainerResponse)
}
RemoveContainerResponse::RemoveContainerResponse(const RemoveContainerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemoveContainerResponse)
}

void RemoveContainerResponse::SharedCtor() {
}

RemoveContainerResponse::~RemoveContainerResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemoveContainerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveContainerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveContainerResponse::ArenaDtor(void* object) {
  RemoveContainerResponse* _this = reinterpret_cast< RemoveContainerResponse* >(object);
  (void)_this;
}
void RemoveContainerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveContainerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveContainerResponse& RemoveContainerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveContainerResponse_api_2eproto.base);
  return *internal_default_instance();
}


void RemoveContainerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemoveContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveContainerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveContainerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemoveContainerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemoveContainerResponse)
  return target;
}

size_t RemoveContainerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemoveContainerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveContainerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemoveContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveContainerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveContainerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemoveContainerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemoveContainerResponse)
    MergeFrom(*source);
  }
}

void RemoveContainerResponse::MergeFrom(const RemoveContainerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemoveContainerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveContainerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemoveContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveContainerResponse::CopyFrom(const RemoveContainerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemoveContainerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveContainerResponse::IsInitialized() const {
  return true;
}

void RemoveContainerResponse::InternalSwap(RemoveContainerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveContainerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerStateValue::InitAsDefaultInstance() {
}
class ContainerStateValue::_Internal {
 public:
};

ContainerStateValue::ContainerStateValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStateValue)
}
ContainerStateValue::ContainerStateValue(const ContainerStateValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStateValue)
}

void ContainerStateValue::SharedCtor() {
  state_ = 0;
}

ContainerStateValue::~ContainerStateValue() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStateValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStateValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainerStateValue::ArenaDtor(void* object) {
  ContainerStateValue* _this = reinterpret_cast< ContainerStateValue* >(object);
  (void)_this;
}
void ContainerStateValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStateValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStateValue& ContainerStateValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStateValue_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStateValue::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStateValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStateValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::ContainerState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStateValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStateValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStateValue)
  return target;
}

size_t ContainerStateValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStateValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStateValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStateValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStateValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStateValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStateValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStateValue)
    MergeFrom(*source);
  }
}

void ContainerStateValue::MergeFrom(const ContainerStateValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStateValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ContainerStateValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStateValue::CopyFrom(const ContainerStateValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStateValue::IsInitialized() const {
  return true;
}

void ContainerStateValue::InternalSwap(ContainerStateValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStateValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerFilter_LabelSelectorEntry_DoNotUse::ContainerFilter_LabelSelectorEntry_DoNotUse() {}
ContainerFilter_LabelSelectorEntry_DoNotUse::ContainerFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerFilter_LabelSelectorEntry_DoNotUse::MergeFrom(const ContainerFilter_LabelSelectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerFilter_LabelSelectorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerFilter_LabelSelectorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerFilter::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerFilter_default_instance_._instance.get_mutable()->state_ = const_cast< ::runtime::v1alpha2::ContainerStateValue*>(
      ::runtime::v1alpha2::ContainerStateValue::internal_default_instance());
}
class ContainerFilter::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerStateValue& state(const ContainerFilter* msg);
};

const ::runtime::v1alpha2::ContainerStateValue&
ContainerFilter::_Internal::state(const ContainerFilter* msg) {
  return *msg->state_;
}
ContainerFilter::ContainerFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_selector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerFilter)
}
ContainerFilter::ContainerFilter(const ContainerFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_selector_.MergeFrom(from.label_selector_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::runtime::v1alpha2::ContainerStateValue(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerFilter)
}

void ContainerFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerFilter_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = nullptr;
}

ContainerFilter::~ContainerFilter() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void ContainerFilter::ArenaDtor(void* object) {
  ContainerFilter* _this = reinterpret_cast< ContainerFilter* >(object);
  (void)_this;
}
void ContainerFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerFilter& ContainerFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerFilter_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_selector_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerFilter.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerStateValue state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_sandbox_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerFilter.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> label_selector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&label_selector_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.ContainerStateValue state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // string pod_sandbox_id = 3;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerFilter.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pod_sandbox_id(), target);
  }

  // map<string, string> label_selector = 4;
  if (!this->_internal_label_selector().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerFilter.LabelSelectorEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerFilter.LabelSelectorEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_label_selector().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_label_selector().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it) {
        target = ContainerFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerFilter)
  return target;
}

size_t ContainerFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> label_selector = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_selector_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_label_selector().begin();
      it != this->_internal_label_selector().end(); ++it) {
    total_size += ContainerFilter_LabelSelectorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pod_sandbox_id = 3;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  // .runtime.v1alpha2.ContainerStateValue state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerFilter)
    MergeFrom(*source);
  }
}

void ContainerFilter::MergeFrom(const ContainerFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_selector_.MergeFrom(from.label_selector_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::runtime::v1alpha2::ContainerStateValue::MergeFrom(from._internal_state());
  }
}

void ContainerFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerFilter::CopyFrom(const ContainerFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerFilter::IsInitialized() const {
  return true;
}

void ContainerFilter::InternalSwap(ContainerFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_selector_.Swap(&other->label_selector_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListContainersRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ListContainersRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::runtime::v1alpha2::ContainerFilter*>(
      ::runtime::v1alpha2::ContainerFilter::internal_default_instance());
}
class ListContainersRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerFilter& filter(const ListContainersRequest* msg);
};

const ::runtime::v1alpha2::ContainerFilter&
ListContainersRequest::_Internal::filter(const ListContainersRequest* msg) {
  return *msg->filter_;
}
ListContainersRequest::ListContainersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListContainersRequest)
}
ListContainersRequest::ListContainersRequest(const ListContainersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::runtime::v1alpha2::ContainerFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListContainersRequest)
}

void ListContainersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListContainersRequest_api_2eproto.base);
  filter_ = nullptr;
}

ListContainersRequest::~ListContainersRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListContainersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListContainersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListContainersRequest::ArenaDtor(void* object) {
  ListContainersRequest* _this = reinterpret_cast< ListContainersRequest* >(object);
  (void)_this;
}
void ListContainersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListContainersRequest& ListContainersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListContainersRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ListContainersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListContainersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerFilter filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListContainersRequest)
  return target;
}

size_t ListContainersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListContainersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerFilter filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListContainersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListContainersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListContainersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListContainersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListContainersRequest)
    MergeFrom(*source);
  }
}

void ListContainersRequest::MergeFrom(const ListContainersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListContainersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::runtime::v1alpha2::ContainerFilter::MergeFrom(from._internal_filter());
  }
}

void ListContainersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListContainersRequest::CopyFrom(const ListContainersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListContainersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainersRequest::IsInitialized() const {
  return true;
}

void ListContainersRequest::InternalSwap(ListContainersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Container_LabelsEntry_DoNotUse::Container_LabelsEntry_DoNotUse() {}
Container_LabelsEntry_DoNotUse::Container_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Container_LabelsEntry_DoNotUse::MergeFrom(const Container_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Container_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Container_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Container_AnnotationsEntry_DoNotUse::Container_AnnotationsEntry_DoNotUse() {}
Container_AnnotationsEntry_DoNotUse::Container_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Container_AnnotationsEntry_DoNotUse::MergeFrom(const Container_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Container_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Container_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Container::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_Container_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::ContainerMetadata*>(
      ::runtime::v1alpha2::ContainerMetadata::internal_default_instance());
  ::runtime::v1alpha2::_Container_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class Container::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerMetadata& metadata(const Container* msg);
  static const ::runtime::v1alpha2::ImageSpec& image(const Container* msg);
};

const ::runtime::v1alpha2::ContainerMetadata&
Container::_Internal::metadata(const Container* msg) {
  return *msg->metadata_;
}
const ::runtime::v1alpha2::ImageSpec&
Container::_Internal::image(const Container* msg) {
  return *msg->image_;
}
Container::Container(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_ref().empty()) {
    image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_ref(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::ContainerMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Container)
}

void Container::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Container_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(state_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Container)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete image_;
}

void Container::ArenaDtor(void* object) {
  Container* _this = reinterpret_cast< Container* >(object);
  (void)_this;
}
void Container::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Container& Container::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Container_api_2eproto.base);
  return *internal_default_instance();
}


void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Container::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Container.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_sandbox_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Container.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ImageSpec image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_image_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Container.image_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::ContainerState>(val));
        } else goto handle_unusual;
        continue;
      // int64 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Container::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Container)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Container.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pod_sandbox_id = 2;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Container.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pod_sandbox_id(), target);
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 3;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  // .runtime.v1alpha2.ImageSpec image = 4;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::image(this), target, stream);
  }

  // string image_ref = 5;
  if (this->image_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_ref().data(), static_cast<int>(this->_internal_image_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Container.image_ref");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_image_ref(), target);
  }

  // .runtime.v1alpha2.ContainerState state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // int64 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_created_at(), target);
  }

  // map<string, string> labels = 8;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.Container.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.Container.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Container_LabelsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Container_LabelsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 9;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.Container.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.Container.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Container_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = Container_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Container)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Container_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += Container_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pod_sandbox_id = 2;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  // string image_ref = 5;
  if (this->image_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_ref());
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .runtime.v1alpha2.ImageSpec image = 4;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int64 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // .runtime.v1alpha2.ContainerState state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Container::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const Container* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Container>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Container)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
  if (from.image_ref().size() > 0) {
    _internal_set_image_ref(from._internal_image_ref());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::ContainerMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Container::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_ref_.Swap(&other->image_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Container, state_)
      + sizeof(Container::state_)
      - PROTOBUF_FIELD_OFFSET(Container, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListContainersResponse::InitAsDefaultInstance() {
}
class ListContainersResponse::_Internal {
 public:
};

ListContainersResponse::ListContainersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListContainersResponse)
}
ListContainersResponse::ListContainersResponse(const ListContainersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListContainersResponse)
}

void ListContainersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListContainersResponse_api_2eproto.base);
}

ListContainersResponse::~ListContainersResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListContainersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListContainersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListContainersResponse::ArenaDtor(void* object) {
  ListContainersResponse* _this = reinterpret_cast< ListContainersResponse* >(object);
  (void)_this;
}
void ListContainersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListContainersResponse& ListContainersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListContainersResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ListContainersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.Container containers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListContainersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.Container containers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListContainersResponse)
  return target;
}

size_t ListContainersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListContainersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.Container containers = 1;
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListContainersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListContainersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListContainersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListContainersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListContainersResponse)
    MergeFrom(*source);
  }
}

void ListContainersResponse::MergeFrom(const ListContainersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListContainersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void ListContainersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListContainersResponse::CopyFrom(const ListContainersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListContainersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainersResponse::IsInitialized() const {
  return true;
}

void ListContainersResponse::InternalSwap(ListContainersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerStatusRequest::InitAsDefaultInstance() {
}
class ContainerStatusRequest::_Internal {
 public:
};

ContainerStatusRequest::ContainerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatusRequest)
}
ContainerStatusRequest::ContainerStatusRequest(const ContainerStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  verbose_ = from.verbose_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatusRequest)
}

void ContainerStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatusRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbose_ = false;
}

ContainerStatusRequest::~ContainerStatusRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerStatusRequest::ArenaDtor(void* object) {
  ContainerStatusRequest* _this = reinterpret_cast< ContainerStatusRequest* >(object);
  (void)_this;
}
void ContainerStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatusRequest& ContainerStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatusRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbose_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatusRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatusRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatusRequest)
  return target;
}

size_t ContainerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatusRequest)
    MergeFrom(*source);
  }
}

void ContainerStatusRequest::MergeFrom(const ContainerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
}

void ContainerStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatusRequest::CopyFrom(const ContainerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatusRequest::IsInitialized() const {
  return true;
}

void ContainerStatusRequest::InternalSwap(ContainerStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(verbose_, other->verbose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerStatus_LabelsEntry_DoNotUse::ContainerStatus_LabelsEntry_DoNotUse() {}
ContainerStatus_LabelsEntry_DoNotUse::ContainerStatus_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerStatus_LabelsEntry_DoNotUse::MergeFrom(const ContainerStatus_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatus_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerStatus_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ContainerStatus_AnnotationsEntry_DoNotUse::ContainerStatus_AnnotationsEntry_DoNotUse() {}
ContainerStatus_AnnotationsEntry_DoNotUse::ContainerStatus_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerStatus_AnnotationsEntry_DoNotUse::MergeFrom(const ContainerStatus_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatus_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerStatus_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerStatus::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerStatus_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::ContainerMetadata*>(
      ::runtime::v1alpha2::ContainerMetadata::internal_default_instance());
  ::runtime::v1alpha2::_ContainerStatus_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class ContainerStatus::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerMetadata& metadata(const ContainerStatus* msg);
  static const ::runtime::v1alpha2::ImageSpec& image(const ContainerStatus* msg);
};

const ::runtime::v1alpha2::ContainerMetadata&
ContainerStatus::_Internal::metadata(const ContainerStatus* msg) {
  return *msg->metadata_;
}
const ::runtime::v1alpha2::ImageSpec&
ContainerStatus::_Internal::image(const ContainerStatus* msg) {
  return *msg->image_;
}
ContainerStatus::ContainerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena),
  mounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatus)
}
ContainerStatus::ContainerStatus(const ContainerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mounts_(from.mounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_ref().empty()) {
    image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_ref(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_path().empty()) {
    log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_path(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::ContainerMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_at_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(finished_at_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatus)
}

void ContainerStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatus_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_at_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(finished_at_));
}

ContainerStatus::~ContainerStatus() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete image_;
}

void ContainerStatus::ArenaDtor(void* object) {
  ContainerStatus* _this = reinterpret_cast< ContainerStatus* >(object);
  (void)_this;
}
void ContainerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatus& ContainerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatus_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  mounts_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_at_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(finished_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatus.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::runtime::v1alpha2::ContainerState>(val));
        } else goto handle_unusual;
        continue;
      // int64 created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 started_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          started_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 finished_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          finished_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exit_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ImageSpec image = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_image_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatus.image_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatus.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatus.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .runtime.v1alpha2.Mount mounts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string log_path = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_log_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatus.log_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatus.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .runtime.v1alpha2.ContainerState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
  }

  // int64 started_at = 5;
  if (this->started_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_started_at(), target);
  }

  // int64 finished_at = 6;
  if (this->finished_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_finished_at(), target);
  }

  // int32 exit_code = 7;
  if (this->exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_exit_code(), target);
  }

  // .runtime.v1alpha2.ImageSpec image = 8;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::image(this), target, stream);
  }

  // string image_ref = 9;
  if (this->image_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_ref().data(), static_cast<int>(this->_internal_image_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatus.image_ref");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_image_ref(), target);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatus.reason");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reason(), target);
  }

  // string message = 11;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatus.message");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_message(), target);
  }

  // map<string, string> labels = 12;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatus.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatus.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerStatus_LabelsEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ContainerStatus_LabelsEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 13;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatus.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatus.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerStatus_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = ContainerStatus_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .runtime.v1alpha2.Mount mounts = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_mounts(i), target, stream);
  }

  // string log_path = 15;
  if (this->log_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_path().data(), static_cast<int>(this->_internal_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatus.log_path");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_log_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatus)
  return target;
}

size_t ContainerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ContainerStatus_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += ContainerStatus_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .runtime.v1alpha2.Mount mounts = 14;
  total_size += 1UL * this->_internal_mounts_size();
  for (const auto& msg : this->mounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string image_ref = 9;
  if (this->image_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_ref());
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string message = 11;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string log_path = 15;
  if (this->log_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_path());
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .runtime.v1alpha2.ImageSpec image = 8;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // int64 started_at = 5;
  if (this->started_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_started_at());
  }

  // .runtime.v1alpha2.ContainerState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 exit_code = 7;
  if (this->exit_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exit_code());
  }

  // int64 finished_at = 6;
  if (this->finished_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_finished_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatus)
    MergeFrom(*source);
  }
}

void ContainerStatus::MergeFrom(const ContainerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  mounts_.MergeFrom(from.mounts_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.image_ref().size() > 0) {
    _internal_set_image_ref(from._internal_image_ref());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.log_path().size() > 0) {
    _internal_set_log_path(from._internal_log_path());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::ContainerMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.started_at() != 0) {
    _internal_set_started_at(from._internal_started_at());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.exit_code() != 0) {
    _internal_set_exit_code(from._internal_exit_code());
  }
  if (from.finished_at() != 0) {
    _internal_set_finished_at(from._internal_finished_at());
  }
}

void ContainerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatus::CopyFrom(const ContainerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatus::IsInitialized() const {
  return true;
}

void ContainerStatus::InternalSwap(ContainerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  mounts_.InternalSwap(&other->mounts_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_ref_.Swap(&other->image_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_path_.Swap(&other->log_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerStatus, finished_at_)
      + sizeof(ContainerStatus::finished_at_)
      - PROTOBUF_FIELD_OFFSET(ContainerStatus, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerStatusResponse_InfoEntry_DoNotUse::ContainerStatusResponse_InfoEntry_DoNotUse() {}
ContainerStatusResponse_InfoEntry_DoNotUse::ContainerStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerStatusResponse_InfoEntry_DoNotUse::MergeFrom(const ContainerStatusResponse_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatusResponse_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerStatusResponse_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerStatusResponse::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerStatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::runtime::v1alpha2::ContainerStatus*>(
      ::runtime::v1alpha2::ContainerStatus::internal_default_instance());
}
class ContainerStatusResponse::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerStatus& status(const ContainerStatusResponse* msg);
};

const ::runtime::v1alpha2::ContainerStatus&
ContainerStatusResponse::_Internal::status(const ContainerStatusResponse* msg) {
  return *msg->status_;
}
ContainerStatusResponse::ContainerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatusResponse)
}
ContainerStatusResponse::ContainerStatusResponse(const ContainerStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  if (from._internal_has_status()) {
    status_ = new ::runtime::v1alpha2::ContainerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatusResponse)
}

void ContainerStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatusResponse_api_2eproto.base);
  status_ = nullptr;
}

ContainerStatusResponse::~ContainerStatusResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ContainerStatusResponse::ArenaDtor(void* object) {
  ContainerStatusResponse* _this = reinterpret_cast< ContainerStatusResponse* >(object);
  (void)_this;
}
void ContainerStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatusResponse& ContainerStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatusResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // map<string, string> info = 2;
  if (!this->_internal_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatusResponse.InfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatusResponse.InfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it) {
        target = ContainerStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatusResponse)
  return target;
}

size_t ContainerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_info().begin();
      it != this->_internal_info().end(); ++it) {
    total_size += ContainerStatusResponse_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .runtime.v1alpha2.ContainerStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatusResponse)
    MergeFrom(*source);
  }
}

void ContainerStatusResponse::MergeFrom(const ContainerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.has_status()) {
    _internal_mutable_status()->::runtime::v1alpha2::ContainerStatus::MergeFrom(from._internal_status());
  }
}

void ContainerStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatusResponse::CopyFrom(const ContainerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatusResponse::IsInitialized() const {
  return true;
}

void ContainerStatusResponse::InternalSwap(ContainerStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateContainerResourcesRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_UpdateContainerResourcesRequest_default_instance_._instance.get_mutable()->linux_ = const_cast< ::runtime::v1alpha2::LinuxContainerResources*>(
      ::runtime::v1alpha2::LinuxContainerResources::internal_default_instance());
}
class UpdateContainerResourcesRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::LinuxContainerResources& linux(const UpdateContainerResourcesRequest* msg);
};

const ::runtime::v1alpha2::LinuxContainerResources&
UpdateContainerResourcesRequest::_Internal::linux(const UpdateContainerResourcesRequest* msg) {
  return *msg->linux_;
}
UpdateContainerResourcesRequest::UpdateContainerResourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.UpdateContainerResourcesRequest)
}
UpdateContainerResourcesRequest::UpdateContainerResourcesRequest(const UpdateContainerResourcesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  if (from._internal_has_linux()) {
    linux_ = new ::runtime::v1alpha2::LinuxContainerResources(*from.linux_);
  } else {
    linux_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.UpdateContainerResourcesRequest)
}

void UpdateContainerResourcesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateContainerResourcesRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linux_ = nullptr;
}

UpdateContainerResourcesRequest::~UpdateContainerResourcesRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.UpdateContainerResourcesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateContainerResourcesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete linux_;
}

void UpdateContainerResourcesRequest::ArenaDtor(void* object) {
  UpdateContainerResourcesRequest* _this = reinterpret_cast< UpdateContainerResourcesRequest* >(object);
  (void)_this;
}
void UpdateContainerResourcesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateContainerResourcesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateContainerResourcesRequest& UpdateContainerResourcesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateContainerResourcesRequest_api_2eproto.base);
  return *internal_default_instance();
}


void UpdateContainerResourcesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && linux_ != nullptr) {
    delete linux_;
  }
  linux_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContainerResourcesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.UpdateContainerResourcesRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.LinuxContainerResources linux = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContainerResourcesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.UpdateContainerResourcesRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // .runtime.v1alpha2.LinuxContainerResources linux = 2;
  if (this->has_linux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linux(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.UpdateContainerResourcesRequest)
  return target;
}

size_t UpdateContainerResourcesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // .runtime.v1alpha2.LinuxContainerResources linux = 2;
  if (this->has_linux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linux_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateContainerResourcesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContainerResourcesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateContainerResourcesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.UpdateContainerResourcesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.UpdateContainerResourcesRequest)
    MergeFrom(*source);
  }
}

void UpdateContainerResourcesRequest::MergeFrom(const UpdateContainerResourcesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.has_linux()) {
    _internal_mutable_linux()->::runtime::v1alpha2::LinuxContainerResources::MergeFrom(from._internal_linux());
  }
}

void UpdateContainerResourcesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerResourcesRequest::CopyFrom(const UpdateContainerResourcesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.UpdateContainerResourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerResourcesRequest::IsInitialized() const {
  return true;
}

void UpdateContainerResourcesRequest::InternalSwap(UpdateContainerResourcesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(linux_, other->linux_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContainerResourcesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateContainerResourcesResponse::InitAsDefaultInstance() {
}
class UpdateContainerResourcesResponse::_Internal {
 public:
};

UpdateContainerResourcesResponse::UpdateContainerResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.UpdateContainerResourcesResponse)
}
UpdateContainerResourcesResponse::UpdateContainerResourcesResponse(const UpdateContainerResourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.UpdateContainerResourcesResponse)
}

void UpdateContainerResourcesResponse::SharedCtor() {
}

UpdateContainerResourcesResponse::~UpdateContainerResourcesResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.UpdateContainerResourcesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateContainerResourcesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateContainerResourcesResponse::ArenaDtor(void* object) {
  UpdateContainerResourcesResponse* _this = reinterpret_cast< UpdateContainerResourcesResponse* >(object);
  (void)_this;
}
void UpdateContainerResourcesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateContainerResourcesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateContainerResourcesResponse& UpdateContainerResourcesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateContainerResourcesResponse_api_2eproto.base);
  return *internal_default_instance();
}


void UpdateContainerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContainerResourcesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContainerResourcesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.UpdateContainerResourcesResponse)
  return target;
}

size_t UpdateContainerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateContainerResourcesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContainerResourcesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateContainerResourcesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.UpdateContainerResourcesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.UpdateContainerResourcesResponse)
    MergeFrom(*source);
  }
}

void UpdateContainerResourcesResponse::MergeFrom(const UpdateContainerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateContainerResourcesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerResourcesResponse::CopyFrom(const UpdateContainerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.UpdateContainerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerResourcesResponse::IsInitialized() const {
  return true;
}

void UpdateContainerResourcesResponse::InternalSwap(UpdateContainerResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContainerResourcesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecSyncRequest::InitAsDefaultInstance() {
}
class ExecSyncRequest::_Internal {
 public:
};

ExecSyncRequest::ExecSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cmd_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ExecSyncRequest)
}
ExecSyncRequest::ExecSyncRequest(const ExecSyncRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cmd_(from.cmd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ExecSyncRequest)
}

void ExecSyncRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecSyncRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = PROTOBUF_LONGLONG(0);
}

ExecSyncRequest::~ExecSyncRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ExecSyncRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecSyncRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecSyncRequest::ArenaDtor(void* object) {
  ExecSyncRequest* _this = reinterpret_cast< ExecSyncRequest* >(object);
  (void)_this;
}
void ExecSyncRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecSyncRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecSyncRequest& ExecSyncRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecSyncRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ExecSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ExecSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.Clear();
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeout_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecSyncRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ExecSyncRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmd();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ExecSyncRequest.cmd"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecSyncRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ExecSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ExecSyncRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // repeated string cmd = 2;
  for (int i = 0, n = this->_internal_cmd_size(); i < n; i++) {
    const auto& s = this->_internal_cmd(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ExecSyncRequest.cmd");
    target = stream->WriteString(2, s, target);
  }

  // int64 timeout = 3;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ExecSyncRequest)
  return target;
}

size_t ExecSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ExecSyncRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmd = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmd_.size());
  for (int i = 0, n = cmd_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmd_.Get(i));
  }

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // int64 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecSyncRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ExecSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecSyncRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecSyncRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ExecSyncRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ExecSyncRequest)
    MergeFrom(*source);
  }
}

void ExecSyncRequest::MergeFrom(const ExecSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ExecSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmd_.MergeFrom(from.cmd_);
  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void ExecSyncRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ExecSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecSyncRequest::CopyFrom(const ExecSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ExecSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecSyncRequest::IsInitialized() const {
  return true;
}

void ExecSyncRequest::InternalSwap(ExecSyncRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cmd_.InternalSwap(&other->cmd_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecSyncRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecSyncResponse::InitAsDefaultInstance() {
}
class ExecSyncResponse::_Internal {
 public:
};

ExecSyncResponse::ExecSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ExecSyncResponse)
}
ExecSyncResponse::ExecSyncResponse(const ExecSyncResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stdout(),
      GetArena());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stderr(),
      GetArena());
  }
  exit_code_ = from.exit_code_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ExecSyncResponse)
}

void ExecSyncResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecSyncResponse_api_2eproto.base);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exit_code_ = 0;
}

ExecSyncResponse::~ExecSyncResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ExecSyncResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecSyncResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecSyncResponse::ArenaDtor(void* object) {
  ExecSyncResponse* _this = reinterpret_cast< ExecSyncResponse* >(object);
  (void)_this;
}
void ExecSyncResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecSyncResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecSyncResponse& ExecSyncResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecSyncResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ExecSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ExecSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exit_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecSyncResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes stdout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes stderr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exit_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecSyncResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ExecSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes stdout = 1;
  if (this->stdout().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stdout(), target);
  }

  // bytes stderr = 2;
  if (this->stderr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stderr(), target);
  }

  // int32 exit_code = 3;
  if (this->exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exit_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ExecSyncResponse)
  return target;
}

size_t ExecSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ExecSyncResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stdout = 1;
  if (this->stdout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stdout());
  }

  // bytes stderr = 2;
  if (this->stderr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stderr());
  }

  // int32 exit_code = 3;
  if (this->exit_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exit_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecSyncResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ExecSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecSyncResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecSyncResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ExecSyncResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ExecSyncResponse)
    MergeFrom(*source);
  }
}

void ExecSyncResponse::MergeFrom(const ExecSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ExecSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stdout().size() > 0) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (from.stderr().size() > 0) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (from.exit_code() != 0) {
    _internal_set_exit_code(from._internal_exit_code());
  }
}

void ExecSyncResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ExecSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecSyncResponse::CopyFrom(const ExecSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ExecSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecSyncResponse::IsInitialized() const {
  return true;
}

void ExecSyncResponse::InternalSwap(ExecSyncResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdout_.Swap(&other->stdout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.Swap(&other->stderr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(exit_code_, other->exit_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecSyncResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecRequest::InitAsDefaultInstance() {
}
class ExecRequest::_Internal {
 public:
};

ExecRequest::ExecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cmd_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ExecRequest)
}
ExecRequest::ExecRequest(const ExecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cmd_(from.cmd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  ::memcpy(&tty_, &from.tty_,
    static_cast<size_t>(reinterpret_cast<char*>(&stderr_) -
    reinterpret_cast<char*>(&tty_)) + sizeof(stderr_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ExecRequest)
}

void ExecRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stderr_) -
      reinterpret_cast<char*>(&tty_)) + sizeof(stderr_));
}

ExecRequest::~ExecRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ExecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecRequest::ArenaDtor(void* object) {
  ExecRequest* _this = reinterpret_cast< ExecRequest* >(object);
  (void)_this;
}
void ExecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecRequest& ExecRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ExecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ExecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.Clear();
  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stderr_) -
      reinterpret_cast<char*>(&tty_)) + sizeof(stderr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ExecRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmd();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ExecRequest.cmd"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool tty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stdin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stdout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stderr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stderr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ExecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ExecRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // repeated string cmd = 2;
  for (int i = 0, n = this->_internal_cmd_size(); i < n; i++) {
    const auto& s = this->_internal_cmd(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ExecRequest.cmd");
    target = stream->WriteString(2, s, target);
  }

  // bool tty = 3;
  if (this->tty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tty(), target);
  }

  // bool stdin = 4;
  if (this->stdin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_stdin(), target);
  }

  // bool stdout = 5;
  if (this->stdout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stdout(), target);
  }

  // bool stderr = 6;
  if (this->stderr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stderr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ExecRequest)
  return target;
}

size_t ExecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ExecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmd = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmd_.size());
  for (int i = 0, n = cmd_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmd_.Get(i));
  }

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // bool tty = 3;
  if (this->tty() != 0) {
    total_size += 1 + 1;
  }

  // bool stdin = 4;
  if (this->stdin() != 0) {
    total_size += 1 + 1;
  }

  // bool stdout = 5;
  if (this->stdout() != 0) {
    total_size += 1 + 1;
  }

  // bool stderr = 6;
  if (this->stderr() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ExecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ExecRequest)
    MergeFrom(*source);
  }
}

void ExecRequest::MergeFrom(const ExecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmd_.MergeFrom(from.cmd_);
  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.tty() != 0) {
    _internal_set_tty(from._internal_tty());
  }
  if (from.stdin() != 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (from.stdout() != 0) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (from.stderr() != 0) {
    _internal_set_stderr(from._internal_stderr());
  }
}

void ExecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecRequest::CopyFrom(const ExecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecRequest::IsInitialized() const {
  return true;
}

void ExecRequest::InternalSwap(ExecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cmd_.InternalSwap(&other->cmd_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecRequest, stderr_)
      + sizeof(ExecRequest::stderr_)
      - PROTOBUF_FIELD_OFFSET(ExecRequest, tty_)>(
          reinterpret_cast<char*>(&tty_),
          reinterpret_cast<char*>(&other->tty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecResponse::InitAsDefaultInstance() {
}
class ExecResponse::_Internal {
 public:
};

ExecResponse::ExecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ExecResponse)
}
ExecResponse::ExecResponse(const ExecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ExecResponse)
}

void ExecResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecResponse_api_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecResponse::~ExecResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ExecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecResponse::ArenaDtor(void* object) {
  ExecResponse* _this = reinterpret_cast< ExecResponse* >(object);
  (void)_this;
}
void ExecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecResponse& ExecResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ExecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ExecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ExecResponse.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ExecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ExecResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ExecResponse)
  return target;
}

size_t ExecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ExecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ExecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ExecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ExecResponse)
    MergeFrom(*source);
  }
}

void ExecResponse::MergeFrom(const ExecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ExecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void ExecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ExecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecResponse::CopyFrom(const ExecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ExecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecResponse::IsInitialized() const {
  return true;
}

void ExecResponse::InternalSwap(ExecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttachRequest::InitAsDefaultInstance() {
}
class AttachRequest::_Internal {
 public:
};

AttachRequest::AttachRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.AttachRequest)
}
AttachRequest::AttachRequest(const AttachRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  ::memcpy(&stdin_, &from.stdin_,
    static_cast<size_t>(reinterpret_cast<char*>(&stderr_) -
    reinterpret_cast<char*>(&stdin_)) + sizeof(stderr_));
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.AttachRequest)
}

void AttachRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttachRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stdin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stderr_) -
      reinterpret_cast<char*>(&stdin_)) + sizeof(stderr_));
}

AttachRequest::~AttachRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.AttachRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttachRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AttachRequest::ArenaDtor(void* object) {
  AttachRequest* _this = reinterpret_cast< AttachRequest* >(object);
  (void)_this;
}
void AttachRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttachRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttachRequest& AttachRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttachRequest_api_2eproto.base);
  return *internal_default_instance();
}


void AttachRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.AttachRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&stdin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stderr_) -
      reinterpret_cast<char*>(&stdin_)) + sizeof(stderr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AttachRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stdin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stdout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stdout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stderr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stderr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttachRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.AttachRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AttachRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  // bool stdin = 2;
  if (this->stdin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stdin(), target);
  }

  // bool tty = 3;
  if (this->tty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tty(), target);
  }

  // bool stdout = 4;
  if (this->stdout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_stdout(), target);
  }

  // bool stderr = 5;
  if (this->stderr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stderr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.AttachRequest)
  return target;
}

size_t AttachRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.AttachRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // bool stdin = 2;
  if (this->stdin() != 0) {
    total_size += 1 + 1;
  }

  // bool tty = 3;
  if (this->tty() != 0) {
    total_size += 1 + 1;
  }

  // bool stdout = 4;
  if (this->stdout() != 0) {
    total_size += 1 + 1;
  }

  // bool stderr = 5;
  if (this->stderr() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttachRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.AttachRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AttachRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttachRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.AttachRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.AttachRequest)
    MergeFrom(*source);
  }
}

void AttachRequest::MergeFrom(const AttachRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.AttachRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
  if (from.stdin() != 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (from.tty() != 0) {
    _internal_set_tty(from._internal_tty());
  }
  if (from.stdout() != 0) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (from.stderr() != 0) {
    _internal_set_stderr(from._internal_stderr());
  }
}

void AttachRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.AttachRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachRequest::CopyFrom(const AttachRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.AttachRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachRequest::IsInitialized() const {
  return true;
}

void AttachRequest::InternalSwap(AttachRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachRequest, stderr_)
      + sizeof(AttachRequest::stderr_)
      - PROTOBUF_FIELD_OFFSET(AttachRequest, stdin_)>(
          reinterpret_cast<char*>(&stdin_),
          reinterpret_cast<char*>(&other->stdin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttachResponse::InitAsDefaultInstance() {
}
class AttachResponse::_Internal {
 public:
};

AttachResponse::AttachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.AttachResponse)
}
AttachResponse::AttachResponse(const AttachResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.AttachResponse)
}

void AttachResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttachResponse_api_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AttachResponse::~AttachResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.AttachResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttachResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AttachResponse::ArenaDtor(void* object) {
  AttachResponse* _this = reinterpret_cast< AttachResponse* >(object);
  (void)_this;
}
void AttachResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttachResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttachResponse& AttachResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttachResponse_api_2eproto.base);
  return *internal_default_instance();
}


void AttachResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.AttachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AttachResponse.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttachResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.AttachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AttachResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.AttachResponse)
  return target;
}

size_t AttachResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.AttachResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttachResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.AttachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttachResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttachResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.AttachResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.AttachResponse)
    MergeFrom(*source);
  }
}

void AttachResponse::MergeFrom(const AttachResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.AttachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void AttachResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.AttachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachResponse::CopyFrom(const AttachResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.AttachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachResponse::IsInitialized() const {
  return true;
}

void AttachResponse::InternalSwap(AttachResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortForwardRequest::InitAsDefaultInstance() {
}
class PortForwardRequest::_Internal {
 public:
};

PortForwardRequest::PortForwardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  port_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PortForwardRequest)
}
PortForwardRequest::PortForwardRequest(const PortForwardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      port_(from.port_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PortForwardRequest)
}

void PortForwardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortForwardRequest_api_2eproto.base);
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PortForwardRequest::~PortForwardRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PortForwardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortForwardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortForwardRequest::ArenaDtor(void* object) {
  PortForwardRequest* _this = reinterpret_cast< PortForwardRequest* >(object);
  (void)_this;
}
void PortForwardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortForwardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortForwardRequest& PortForwardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortForwardRequest_api_2eproto.base);
  return *internal_default_instance();
}


void PortForwardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PortForwardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_.Clear();
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortForwardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_sandbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PortForwardRequest.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_port(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_port(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortForwardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PortForwardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PortForwardRequest.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_sandbox_id(), target);
  }

  // repeated int32 port = 2;
  {
    int byte_size = _port_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_port(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PortForwardRequest)
  return target;
}

size_t PortForwardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PortForwardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 port = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->port_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _port_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string pod_sandbox_id = 1;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortForwardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PortForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PortForwardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortForwardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PortForwardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PortForwardRequest)
    MergeFrom(*source);
  }
}

void PortForwardRequest::MergeFrom(const PortForwardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PortForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_.MergeFrom(from.port_);
  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
}

void PortForwardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PortForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortForwardRequest::CopyFrom(const PortForwardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PortForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortForwardRequest::IsInitialized() const {
  return true;
}

void PortForwardRequest::InternalSwap(PortForwardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  port_.InternalSwap(&other->port_);
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PortForwardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortForwardResponse::InitAsDefaultInstance() {
}
class PortForwardResponse::_Internal {
 public:
};

PortForwardResponse::PortForwardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PortForwardResponse)
}
PortForwardResponse::PortForwardResponse(const PortForwardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PortForwardResponse)
}

void PortForwardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortForwardResponse_api_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PortForwardResponse::~PortForwardResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PortForwardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortForwardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortForwardResponse::ArenaDtor(void* object) {
  PortForwardResponse* _this = reinterpret_cast< PortForwardResponse* >(object);
  (void)_this;
}
void PortForwardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortForwardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortForwardResponse& PortForwardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortForwardResponse_api_2eproto.base);
  return *internal_default_instance();
}


void PortForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PortForwardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortForwardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PortForwardResponse.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortForwardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PortForwardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PortForwardResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PortForwardResponse)
  return target;
}

size_t PortForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PortForwardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortForwardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PortForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PortForwardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortForwardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PortForwardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PortForwardResponse)
    MergeFrom(*source);
  }
}

void PortForwardResponse::MergeFrom(const PortForwardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PortForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void PortForwardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PortForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortForwardResponse::CopyFrom(const PortForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PortForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortForwardResponse::IsInitialized() const {
  return true;
}

void PortForwardResponse::InternalSwap(PortForwardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PortForwardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageFilter::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ImageFilter_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class ImageFilter::_Internal {
 public:
  static const ::runtime::v1alpha2::ImageSpec& image(const ImageFilter* msg);
};

const ::runtime::v1alpha2::ImageSpec&
ImageFilter::_Internal::image(const ImageFilter* msg) {
  return *msg->image_;
}
ImageFilter::ImageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageFilter)
}
ImageFilter::ImageFilter(const ImageFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageFilter)
}

void ImageFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFilter_api_2eproto.base);
  image_ = nullptr;
}

ImageFilter::~ImageFilter() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageFilter::ArenaDtor(void* object) {
  ImageFilter* _this = reinterpret_cast< ImageFilter* >(object);
  (void)_this;
}
void ImageFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFilter& ImageFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFilter_api_2eproto.base);
  return *internal_default_instance();
}


void ImageFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ImageSpec image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageFilter)
  return target;
}

size_t ImageFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageFilter)
    MergeFrom(*source);
  }
}

void ImageFilter::MergeFrom(const ImageFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
}

void ImageFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFilter::CopyFrom(const ImageFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFilter::IsInitialized() const {
  return true;
}

void ImageFilter::InternalSwap(ImageFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImagesRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ListImagesRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::runtime::v1alpha2::ImageFilter*>(
      ::runtime::v1alpha2::ImageFilter::internal_default_instance());
}
class ListImagesRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ImageFilter& filter(const ListImagesRequest* msg);
};

const ::runtime::v1alpha2::ImageFilter&
ListImagesRequest::_Internal::filter(const ListImagesRequest* msg) {
  return *msg->filter_;
}
ListImagesRequest::ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListImagesRequest)
}
ListImagesRequest::ListImagesRequest(const ListImagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::runtime::v1alpha2::ImageFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListImagesRequest)
}

void ListImagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImagesRequest_api_2eproto.base);
  filter_ = nullptr;
}

ListImagesRequest::~ListImagesRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListImagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListImagesRequest::ArenaDtor(void* object) {
  ListImagesRequest* _this = reinterpret_cast< ListImagesRequest* >(object);
  (void)_this;
}
void ListImagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImagesRequest& ListImagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImagesRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ListImagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListImagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ImageFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListImagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageFilter filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListImagesRequest)
  return target;
}

size_t ListImagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListImagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageFilter filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListImagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListImagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListImagesRequest)
    MergeFrom(*source);
  }
}

void ListImagesRequest::MergeFrom(const ListImagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListImagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::runtime::v1alpha2::ImageFilter::MergeFrom(from._internal_filter());
  }
}

void ListImagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListImagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImagesRequest::CopyFrom(const ListImagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListImagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImagesRequest::IsInitialized() const {
  return true;
}

void ListImagesRequest::InternalSwap(ListImagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_Image_default_instance_._instance.get_mutable()->uid_ = const_cast< ::runtime::v1alpha2::Int64Value*>(
      ::runtime::v1alpha2::Int64Value::internal_default_instance());
  ::runtime::v1alpha2::_Image_default_instance_._instance.get_mutable()->spec_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::runtime::v1alpha2::Int64Value& uid(const Image* msg);
  static const ::runtime::v1alpha2::ImageSpec& spec(const Image* msg);
};

const ::runtime::v1alpha2::Int64Value&
Image::_Internal::uid(const Image* msg) {
  return *msg->uid_;
}
const ::runtime::v1alpha2::ImageSpec&
Image::_Internal::spec(const Image* msg) {
  return *msg->spec_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  repo_tags_(arena),
  repo_digests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repo_tags_(from.repo_tags_),
      repo_digests_(from.repo_digests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  if (from._internal_has_uid()) {
    uid_ = new ::runtime::v1alpha2::Int64Value(*from.uid_);
  } else {
    uid_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::runtime::v1alpha2::ImageSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(size_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uid_;
  if (this != internal_default_instance()) delete spec_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_api_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repo_tags_.Clear();
  repo_digests_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && uid_ != nullptr) {
    delete uid_;
  }
  uid_ = nullptr;
  if (GetArena() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Image.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repo_tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repo_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Image.repo_tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string repo_digests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repo_digests();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Image.repo_digests"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.Int64Value uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.Image.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ImageSpec spec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Image.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated string repo_tags = 2;
  for (int i = 0, n = this->_internal_repo_tags_size(); i < n; i++) {
    const auto& s = this->_internal_repo_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Image.repo_tags");
    target = stream->WriteString(2, s, target);
  }

  // repeated string repo_digests = 3;
  for (int i = 0, n = this->_internal_repo_digests_size(); i < n; i++) {
    const auto& s = this->_internal_repo_digests(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Image.repo_digests");
    target = stream->WriteString(3, s, target);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size(), target);
  }

  // .runtime.v1alpha2.Int64Value uid = 5;
  if (this->has_uid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uid(this), target, stream);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.Image.username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // .runtime.v1alpha2.ImageSpec spec = 7;
  if (this->has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string repo_tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repo_tags_.size());
  for (int i = 0, n = repo_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repo_tags_.Get(i));
  }

  // repeated string repo_digests = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repo_digests_.size());
  for (int i = 0, n = repo_digests_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repo_digests_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string username = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .runtime.v1alpha2.Int64Value uid = 5;
  if (this->has_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);
  }

  // .runtime.v1alpha2.ImageSpec spec = 7;
  if (this->has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repo_tags_.MergeFrom(from.repo_tags_);
  repo_digests_.MergeFrom(from.repo_digests_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_uid()) {
    _internal_mutable_uid()->::runtime::v1alpha2::Int64Value::MergeFrom(from._internal_uid());
  }
  if (from.has_spec()) {
    _internal_mutable_spec()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_spec());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  repo_tags_.InternalSwap(&other->repo_tags_);
  repo_digests_.InternalSwap(&other->repo_digests_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, size_)
      + sizeof(Image::size_)
      - PROTOBUF_FIELD_OFFSET(Image, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImagesResponse::InitAsDefaultInstance() {
}
class ListImagesResponse::_Internal {
 public:
};

ListImagesResponse::ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  images_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListImagesResponse)
}
ListImagesResponse::ListImagesResponse(const ListImagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListImagesResponse)
}

void ListImagesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImagesResponse_api_2eproto.base);
}

ListImagesResponse::~ListImagesResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListImagesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListImagesResponse::ArenaDtor(void* object) {
  ListImagesResponse* _this = reinterpret_cast< ListImagesResponse* >(object);
  (void)_this;
}
void ListImagesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImagesResponse& ListImagesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImagesResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ListImagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListImagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.Image images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImagesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListImagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.Image images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListImagesResponse)
  return target;
}

size_t ListImagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListImagesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.Image images = 1;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListImagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListImagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListImagesResponse)
    MergeFrom(*source);
  }
}

void ListImagesResponse::MergeFrom(const ListImagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListImagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
}

void ListImagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListImagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImagesResponse::CopyFrom(const ListImagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListImagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImagesResponse::IsInitialized() const {
  return true;
}

void ListImagesResponse::InternalSwap(ListImagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageStatusRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ImageStatusRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class ImageStatusRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ImageSpec& image(const ImageStatusRequest* msg);
};

const ::runtime::v1alpha2::ImageSpec&
ImageStatusRequest::_Internal::image(const ImageStatusRequest* msg) {
  return *msg->image_;
}
ImageStatusRequest::ImageStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageStatusRequest)
}
ImageStatusRequest::ImageStatusRequest(const ImageStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  verbose_ = from.verbose_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageStatusRequest)
}

void ImageStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageStatusRequest_api_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verbose_) -
      reinterpret_cast<char*>(&image_)) + sizeof(verbose_));
}

ImageStatusRequest::~ImageStatusRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageStatusRequest::ArenaDtor(void* object) {
  ImageStatusRequest* _this = reinterpret_cast< ImageStatusRequest* >(object);
  (void)_this;
}
void ImageStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageStatusRequest& ImageStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageStatusRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ImageStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  verbose_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ImageSpec image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageStatusRequest)
  return target;
}

size_t ImageStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageStatusRequest)
    MergeFrom(*source);
  }
}

void ImageStatusRequest::MergeFrom(const ImageStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
}

void ImageStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStatusRequest::CopyFrom(const ImageStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStatusRequest::IsInitialized() const {
  return true;
}

void ImageStatusRequest::InternalSwap(ImageStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageStatusRequest, verbose_)
      + sizeof(ImageStatusRequest::verbose_)
      - PROTOBUF_FIELD_OFFSET(ImageStatusRequest, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ImageStatusResponse_InfoEntry_DoNotUse::ImageStatusResponse_InfoEntry_DoNotUse() {}
ImageStatusResponse_InfoEntry_DoNotUse::ImageStatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ImageStatusResponse_InfoEntry_DoNotUse::MergeFrom(const ImageStatusResponse_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ImageStatusResponse_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ImageStatusResponse_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ImageStatusResponse::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ImageStatusResponse_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::Image*>(
      ::runtime::v1alpha2::Image::internal_default_instance());
}
class ImageStatusResponse::_Internal {
 public:
  static const ::runtime::v1alpha2::Image& image(const ImageStatusResponse* msg);
};

const ::runtime::v1alpha2::Image&
ImageStatusResponse::_Internal::image(const ImageStatusResponse* msg) {
  return *msg->image_;
}
ImageStatusResponse::ImageStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageStatusResponse)
}
ImageStatusResponse::ImageStatusResponse(const ImageStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageStatusResponse)
}

void ImageStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageStatusResponse_api_2eproto.base);
  image_ = nullptr;
}

ImageStatusResponse::~ImageStatusResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageStatusResponse::ArenaDtor(void* object) {
  ImageStatusResponse* _this = reinterpret_cast< ImageStatusResponse* >(object);
  (void)_this;
}
void ImageStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageStatusResponse& ImageStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageStatusResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ImageStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.Image image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // map<string, string> info = 2;
  if (!this->_internal_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ImageStatusResponse.InfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ImageStatusResponse.InfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ImageStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it) {
        target = ImageStatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageStatusResponse)
  return target;
}

size_t ImageStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_info().begin();
      it != this->_internal_info().end(); ++it) {
    total_size += ImageStatusResponse_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .runtime.v1alpha2.Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageStatusResponse)
    MergeFrom(*source);
  }
}

void ImageStatusResponse::MergeFrom(const ImageStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::Image::MergeFrom(from._internal_image());
  }
}

void ImageStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStatusResponse::CopyFrom(const ImageStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStatusResponse::IsInitialized() const {
  return true;
}

void ImageStatusResponse::InternalSwap(ImageStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthConfig::InitAsDefaultInstance() {
}
class AuthConfig::_Internal {
 public:
};

AuthConfig::AuthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.AuthConfig)
}
AuthConfig::AuthConfig(const AuthConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth().empty()) {
    auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth(),
      GetArena());
  }
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_address().empty()) {
    server_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_address(),
      GetArena());
  }
  identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity_token().empty()) {
    identity_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identity_token(),
      GetArena());
  }
  registry_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registry_token().empty()) {
    registry_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_registry_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.AuthConfig)
}

void AuthConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthConfig_api_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthConfig::~AuthConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.AuthConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthConfig::ArenaDtor(void* object) {
  AuthConfig* _this = reinterpret_cast< AuthConfig* >(object);
  (void)_this;
}
void AuthConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthConfig& AuthConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthConfig_api_2eproto.base);
  return *internal_default_instance();
}


void AuthConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.AuthConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registry_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.auth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_server_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.server_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identity_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_identity_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.identity_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registry_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_registry_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.AuthConfig.registry_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.AuthConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string auth = 3;
  if (this->auth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.auth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth(), target);
  }

  // string server_address = 4;
  if (this->server_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.server_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_address(), target);
  }

  // string identity_token = 5;
  if (this->identity_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity_token().data(), static_cast<int>(this->_internal_identity_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.identity_token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identity_token(), target);
  }

  // string registry_token = 6;
  if (this->registry_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registry_token().data(), static_cast<int>(this->_internal_registry_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.AuthConfig.registry_token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_registry_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.AuthConfig)
  return target;
}

size_t AuthConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.AuthConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string auth = 3;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth());
  }

  // string server_address = 4;
  if (this->server_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // string identity_token = 5;
  if (this->identity_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity_token());
  }

  // string registry_token = 6;
  if (this->registry_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registry_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.AuthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.AuthConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.AuthConfig)
    MergeFrom(*source);
  }
}

void AuthConfig::MergeFrom(const AuthConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.AuthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.auth().size() > 0) {
    _internal_set_auth(from._internal_auth());
  }
  if (from.server_address().size() > 0) {
    _internal_set_server_address(from._internal_server_address());
  }
  if (from.identity_token().size() > 0) {
    _internal_set_identity_token(from._internal_identity_token());
  }
  if (from.registry_token().size() > 0) {
    _internal_set_registry_token(from._internal_registry_token());
  }
}

void AuthConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.AuthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthConfig::CopyFrom(const AuthConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.AuthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthConfig::IsInitialized() const {
  return true;
}

void AuthConfig::InternalSwap(AuthConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_address_.Swap(&other->server_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_token_.Swap(&other->identity_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registry_token_.Swap(&other->registry_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullImageRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_PullImageRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
  ::runtime::v1alpha2::_PullImageRequest_default_instance_._instance.get_mutable()->auth_ = const_cast< ::runtime::v1alpha2::AuthConfig*>(
      ::runtime::v1alpha2::AuthConfig::internal_default_instance());
  ::runtime::v1alpha2::_PullImageRequest_default_instance_._instance.get_mutable()->sandbox_config_ = const_cast< ::runtime::v1alpha2::PodSandboxConfig*>(
      ::runtime::v1alpha2::PodSandboxConfig::internal_default_instance());
}
class PullImageRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ImageSpec& image(const PullImageRequest* msg);
  static const ::runtime::v1alpha2::AuthConfig& auth(const PullImageRequest* msg);
  static const ::runtime::v1alpha2::PodSandboxConfig& sandbox_config(const PullImageRequest* msg);
};

const ::runtime::v1alpha2::ImageSpec&
PullImageRequest::_Internal::image(const PullImageRequest* msg) {
  return *msg->image_;
}
const ::runtime::v1alpha2::AuthConfig&
PullImageRequest::_Internal::auth(const PullImageRequest* msg) {
  return *msg->auth_;
}
const ::runtime::v1alpha2::PodSandboxConfig&
PullImageRequest::_Internal::sandbox_config(const PullImageRequest* msg) {
  return *msg->sandbox_config_;
}
PullImageRequest::PullImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PullImageRequest)
}
PullImageRequest::PullImageRequest(const PullImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::runtime::v1alpha2::AuthConfig(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  if (from._internal_has_sandbox_config()) {
    sandbox_config_ = new ::runtime::v1alpha2::PodSandboxConfig(*from.sandbox_config_);
  } else {
    sandbox_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PullImageRequest)
}

void PullImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullImageRequest_api_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sandbox_config_) -
      reinterpret_cast<char*>(&image_)) + sizeof(sandbox_config_));
}

PullImageRequest::~PullImageRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PullImageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PullImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete auth_;
  if (this != internal_default_instance()) delete sandbox_config_;
}

void PullImageRequest::ArenaDtor(void* object) {
  PullImageRequest* _this = reinterpret_cast< PullImageRequest* >(object);
  (void)_this;
}
void PullImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullImageRequest& PullImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullImageRequest_api_2eproto.base);
  return *internal_default_instance();
}


void PullImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PullImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArena() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  if (GetArena() == nullptr && sandbox_config_ != nullptr) {
    delete sandbox_config_;
  }
  sandbox_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ImageSpec image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.AuthConfig auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sandbox_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PullImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // .runtime.v1alpha2.AuthConfig auth = 2;
  if (this->has_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auth(this), target, stream);
  }

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  if (this->has_sandbox_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sandbox_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PullImageRequest)
  return target;
}

size_t PullImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PullImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .runtime.v1alpha2.AuthConfig auth = 2;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // .runtime.v1alpha2.PodSandboxConfig sandbox_config = 3;
  if (this->has_sandbox_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sandbox_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PullImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PullImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PullImageRequest)
    MergeFrom(*source);
  }
}

void PullImageRequest::MergeFrom(const PullImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PullImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
  if (from.has_auth()) {
    _internal_mutable_auth()->::runtime::v1alpha2::AuthConfig::MergeFrom(from._internal_auth());
  }
  if (from.has_sandbox_config()) {
    _internal_mutable_sandbox_config()->::runtime::v1alpha2::PodSandboxConfig::MergeFrom(from._internal_sandbox_config());
  }
}

void PullImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PullImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullImageRequest::CopyFrom(const PullImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PullImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullImageRequest::IsInitialized() const {
  return true;
}

void PullImageRequest::InternalSwap(PullImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PullImageRequest, sandbox_config_)
      + sizeof(PullImageRequest::sandbox_config_)
      - PROTOBUF_FIELD_OFFSET(PullImageRequest, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PullImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullImageResponse::InitAsDefaultInstance() {
}
class PullImageResponse::_Internal {
 public:
};

PullImageResponse::PullImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.PullImageResponse)
}
PullImageResponse::PullImageResponse(const PullImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_ref().empty()) {
    image_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_ref(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.PullImageResponse)
}

void PullImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullImageResponse_api_2eproto.base);
  image_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PullImageResponse::~PullImageResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.PullImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PullImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PullImageResponse::ArenaDtor(void* object) {
  PullImageResponse* _this = reinterpret_cast< PullImageResponse* >(object);
  (void)_this;
}
void PullImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullImageResponse& PullImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullImageResponse_api_2eproto.base);
  return *internal_default_instance();
}


void PullImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.PullImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.PullImageResponse.image_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.PullImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_ref = 1;
  if (this->image_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_ref().data(), static_cast<int>(this->_internal_image_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.PullImageResponse.image_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.PullImageResponse)
  return target;
}

size_t PullImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.PullImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_ref = 1;
  if (this->image_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_ref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.PullImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PullImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.PullImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.PullImageResponse)
    MergeFrom(*source);
  }
}

void PullImageResponse::MergeFrom(const PullImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.PullImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_ref().size() > 0) {
    _internal_set_image_ref(from._internal_image_ref());
  }
}

void PullImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.PullImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullImageResponse::CopyFrom(const PullImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.PullImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullImageResponse::IsInitialized() const {
  return true;
}

void PullImageResponse::InternalSwap(PullImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_ref_.Swap(&other->image_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PullImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveImageRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_RemoveImageRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::runtime::v1alpha2::ImageSpec*>(
      ::runtime::v1alpha2::ImageSpec::internal_default_instance());
}
class RemoveImageRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ImageSpec& image(const RemoveImageRequest* msg);
};

const ::runtime::v1alpha2::ImageSpec&
RemoveImageRequest::_Internal::image(const RemoveImageRequest* msg) {
  return *msg->image_;
}
RemoveImageRequest::RemoveImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemoveImageRequest)
}
RemoveImageRequest::RemoveImageRequest(const RemoveImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::runtime::v1alpha2::ImageSpec(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemoveImageRequest)
}

void RemoveImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveImageRequest_api_2eproto.base);
  image_ = nullptr;
}

RemoveImageRequest::~RemoveImageRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemoveImageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void RemoveImageRequest::ArenaDtor(void* object) {
  RemoveImageRequest* _this = reinterpret_cast< RemoveImageRequest* >(object);
  (void)_this;
}
void RemoveImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveImageRequest& RemoveImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveImageRequest_api_2eproto.base);
  return *internal_default_instance();
}


void RemoveImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemoveImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ImageSpec image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemoveImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemoveImageRequest)
  return target;
}

size_t RemoveImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemoveImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ImageSpec image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemoveImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemoveImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemoveImageRequest)
    MergeFrom(*source);
  }
}

void RemoveImageRequest::MergeFrom(const RemoveImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemoveImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::runtime::v1alpha2::ImageSpec::MergeFrom(from._internal_image());
  }
}

void RemoveImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemoveImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveImageRequest::CopyFrom(const RemoveImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemoveImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveImageRequest::IsInitialized() const {
  return true;
}

void RemoveImageRequest::InternalSwap(RemoveImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveImageResponse::InitAsDefaultInstance() {
}
class RemoveImageResponse::_Internal {
 public:
};

RemoveImageResponse::RemoveImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RemoveImageResponse)
}
RemoveImageResponse::RemoveImageResponse(const RemoveImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RemoveImageResponse)
}

void RemoveImageResponse::SharedCtor() {
}

RemoveImageResponse::~RemoveImageResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RemoveImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveImageResponse::ArenaDtor(void* object) {
  RemoveImageResponse* _this = reinterpret_cast< RemoveImageResponse* >(object);
  (void)_this;
}
void RemoveImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveImageResponse& RemoveImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveImageResponse_api_2eproto.base);
  return *internal_default_instance();
}


void RemoveImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RemoveImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RemoveImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RemoveImageResponse)
  return target;
}

size_t RemoveImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RemoveImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RemoveImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RemoveImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RemoveImageResponse)
    MergeFrom(*source);
  }
}

void RemoveImageResponse::MergeFrom(const RemoveImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RemoveImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RemoveImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveImageResponse::CopyFrom(const RemoveImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RemoveImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveImageResponse::IsInitialized() const {
  return true;
}

void RemoveImageResponse::InternalSwap(RemoveImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkConfig::InitAsDefaultInstance() {
}
class NetworkConfig::_Internal {
 public:
};

NetworkConfig::NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.NetworkConfig)
}
NetworkConfig::NetworkConfig(const NetworkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pod_cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_cidr().empty()) {
    pod_cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_cidr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.NetworkConfig)
}

void NetworkConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkConfig_api_2eproto.base);
  pod_cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetworkConfig::~NetworkConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.NetworkConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pod_cidr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkConfig::ArenaDtor(void* object) {
  NetworkConfig* _this = reinterpret_cast< NetworkConfig* >(object);
  (void)_this;
}
void NetworkConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkConfig& NetworkConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkConfig_api_2eproto.base);
  return *internal_default_instance();
}


void NetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.NetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_cidr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pod_cidr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_cidr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.NetworkConfig.pod_cidr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.NetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_cidr = 1;
  if (this->pod_cidr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_cidr().data(), static_cast<int>(this->_internal_pod_cidr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.NetworkConfig.pod_cidr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_cidr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.NetworkConfig)
  return target;
}

size_t NetworkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.NetworkConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_cidr = 1;
  if (this->pod_cidr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_cidr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.NetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.NetworkConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.NetworkConfig)
    MergeFrom(*source);
  }
}

void NetworkConfig::MergeFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.NetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_cidr().size() > 0) {
    _internal_set_pod_cidr(from._internal_pod_cidr());
  }
}

void NetworkConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConfig::CopyFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfig::IsInitialized() const {
  return true;
}

void NetworkConfig::InternalSwap(NetworkConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pod_cidr_.Swap(&other->pod_cidr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeConfig::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_RuntimeConfig_default_instance_._instance.get_mutable()->network_config_ = const_cast< ::runtime::v1alpha2::NetworkConfig*>(
      ::runtime::v1alpha2::NetworkConfig::internal_default_instance());
}
class RuntimeConfig::_Internal {
 public:
  static const ::runtime::v1alpha2::NetworkConfig& network_config(const RuntimeConfig* msg);
};

const ::runtime::v1alpha2::NetworkConfig&
RuntimeConfig::_Internal::network_config(const RuntimeConfig* msg) {
  return *msg->network_config_;
}
RuntimeConfig::RuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RuntimeConfig)
}
RuntimeConfig::RuntimeConfig(const RuntimeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_config()) {
    network_config_ = new ::runtime::v1alpha2::NetworkConfig(*from.network_config_);
  } else {
    network_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RuntimeConfig)
}

void RuntimeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeConfig_api_2eproto.base);
  network_config_ = nullptr;
}

RuntimeConfig::~RuntimeConfig() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RuntimeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuntimeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete network_config_;
}

void RuntimeConfig::ArenaDtor(void* object) {
  RuntimeConfig* _this = reinterpret_cast< RuntimeConfig* >(object);
  (void)_this;
}
void RuntimeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeConfig& RuntimeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeConfig_api_2eproto.base);
  return *internal_default_instance();
}


void RuntimeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RuntimeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && network_config_ != nullptr) {
    delete network_config_;
  }
  network_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.NetworkConfig network_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RuntimeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.NetworkConfig network_config = 1;
  if (this->has_network_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RuntimeConfig)
  return target;
}

size_t RuntimeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RuntimeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.NetworkConfig network_config = 1;
  if (this->has_network_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RuntimeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RuntimeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RuntimeConfig)
    MergeFrom(*source);
  }
}

void RuntimeConfig::MergeFrom(const RuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RuntimeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_config()) {
    _internal_mutable_network_config()->::runtime::v1alpha2::NetworkConfig::MergeFrom(from._internal_network_config());
  }
}

void RuntimeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeConfig::CopyFrom(const RuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeConfig::IsInitialized() const {
  return true;
}

void RuntimeConfig::InternalSwap(RuntimeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(network_config_, other->network_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRuntimeConfigRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_UpdateRuntimeConfigRequest_default_instance_._instance.get_mutable()->runtime_config_ = const_cast< ::runtime::v1alpha2::RuntimeConfig*>(
      ::runtime::v1alpha2::RuntimeConfig::internal_default_instance());
}
class UpdateRuntimeConfigRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::RuntimeConfig& runtime_config(const UpdateRuntimeConfigRequest* msg);
};

const ::runtime::v1alpha2::RuntimeConfig&
UpdateRuntimeConfigRequest::_Internal::runtime_config(const UpdateRuntimeConfigRequest* msg) {
  return *msg->runtime_config_;
}
UpdateRuntimeConfigRequest::UpdateRuntimeConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.UpdateRuntimeConfigRequest)
}
UpdateRuntimeConfigRequest::UpdateRuntimeConfigRequest(const UpdateRuntimeConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runtime_config()) {
    runtime_config_ = new ::runtime::v1alpha2::RuntimeConfig(*from.runtime_config_);
  } else {
    runtime_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.UpdateRuntimeConfigRequest)
}

void UpdateRuntimeConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRuntimeConfigRequest_api_2eproto.base);
  runtime_config_ = nullptr;
}

UpdateRuntimeConfigRequest::~UpdateRuntimeConfigRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateRuntimeConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete runtime_config_;
}

void UpdateRuntimeConfigRequest::ArenaDtor(void* object) {
  UpdateRuntimeConfigRequest* _this = reinterpret_cast< UpdateRuntimeConfigRequest* >(object);
  (void)_this;
}
void UpdateRuntimeConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRuntimeConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRuntimeConfigRequest& UpdateRuntimeConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRuntimeConfigRequest_api_2eproto.base);
  return *internal_default_instance();
}


void UpdateRuntimeConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && runtime_config_ != nullptr) {
    delete runtime_config_;
  }
  runtime_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRuntimeConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.RuntimeConfig runtime_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRuntimeConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.RuntimeConfig runtime_config = 1;
  if (this->has_runtime_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runtime_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  return target;
}

size_t UpdateRuntimeConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.RuntimeConfig runtime_config = 1;
  if (this->has_runtime_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRuntimeConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRuntimeConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRuntimeConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.UpdateRuntimeConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.UpdateRuntimeConfigRequest)
    MergeFrom(*source);
  }
}

void UpdateRuntimeConfigRequest::MergeFrom(const UpdateRuntimeConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_runtime_config()) {
    _internal_mutable_runtime_config()->::runtime::v1alpha2::RuntimeConfig::MergeFrom(from._internal_runtime_config());
  }
}

void UpdateRuntimeConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRuntimeConfigRequest::CopyFrom(const UpdateRuntimeConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.UpdateRuntimeConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRuntimeConfigRequest::IsInitialized() const {
  return true;
}

void UpdateRuntimeConfigRequest::InternalSwap(UpdateRuntimeConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(runtime_config_, other->runtime_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRuntimeConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRuntimeConfigResponse::InitAsDefaultInstance() {
}
class UpdateRuntimeConfigResponse::_Internal {
 public:
};

UpdateRuntimeConfigResponse::UpdateRuntimeConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.UpdateRuntimeConfigResponse)
}
UpdateRuntimeConfigResponse::UpdateRuntimeConfigResponse(const UpdateRuntimeConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.UpdateRuntimeConfigResponse)
}

void UpdateRuntimeConfigResponse::SharedCtor() {
}

UpdateRuntimeConfigResponse::~UpdateRuntimeConfigResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateRuntimeConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateRuntimeConfigResponse::ArenaDtor(void* object) {
  UpdateRuntimeConfigResponse* _this = reinterpret_cast< UpdateRuntimeConfigResponse* >(object);
  (void)_this;
}
void UpdateRuntimeConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRuntimeConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRuntimeConfigResponse& UpdateRuntimeConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRuntimeConfigResponse_api_2eproto.base);
  return *internal_default_instance();
}


void UpdateRuntimeConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRuntimeConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRuntimeConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  return target;
}

size_t UpdateRuntimeConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRuntimeConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRuntimeConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRuntimeConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.UpdateRuntimeConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.UpdateRuntimeConfigResponse)
    MergeFrom(*source);
  }
}

void UpdateRuntimeConfigResponse::MergeFrom(const UpdateRuntimeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateRuntimeConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRuntimeConfigResponse::CopyFrom(const UpdateRuntimeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.UpdateRuntimeConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRuntimeConfigResponse::IsInitialized() const {
  return true;
}

void UpdateRuntimeConfigResponse::InternalSwap(UpdateRuntimeConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRuntimeConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeCondition::InitAsDefaultInstance() {
}
class RuntimeCondition::_Internal {
 public:
};

RuntimeCondition::RuntimeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RuntimeCondition)
}
RuntimeCondition::RuntimeCondition(const RuntimeCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RuntimeCondition)
}

void RuntimeCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeCondition_api_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

RuntimeCondition::~RuntimeCondition() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RuntimeCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuntimeCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeCondition::ArenaDtor(void* object) {
  RuntimeCondition* _this = reinterpret_cast< RuntimeCondition* >(object);
  (void)_this;
}
void RuntimeCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeCondition& RuntimeCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeCondition_api_2eproto.base);
  return *internal_default_instance();
}


void RuntimeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RuntimeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RuntimeCondition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RuntimeCondition.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.RuntimeCondition.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RuntimeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RuntimeCondition.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bool status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RuntimeCondition.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.RuntimeCondition.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RuntimeCondition)
  return target;
}

size_t RuntimeCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RuntimeCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 2;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RuntimeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RuntimeCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RuntimeCondition)
    MergeFrom(*source);
  }
}

void RuntimeCondition::MergeFrom(const RuntimeCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RuntimeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RuntimeCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RuntimeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeCondition::CopyFrom(const RuntimeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RuntimeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeCondition::IsInitialized() const {
  return true;
}

void RuntimeCondition::InternalSwap(RuntimeCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeStatus::InitAsDefaultInstance() {
}
class RuntimeStatus::_Internal {
 public:
};

RuntimeStatus::RuntimeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.RuntimeStatus)
}
RuntimeStatus::RuntimeStatus(const RuntimeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.RuntimeStatus)
}

void RuntimeStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeStatus_api_2eproto.base);
}

RuntimeStatus::~RuntimeStatus() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.RuntimeStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuntimeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuntimeStatus::ArenaDtor(void* object) {
  RuntimeStatus* _this = reinterpret_cast< RuntimeStatus* >(object);
  (void)_this;
}
void RuntimeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeStatus& RuntimeStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeStatus_api_2eproto.base);
  return *internal_default_instance();
}


void RuntimeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.RuntimeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.RuntimeCondition conditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.RuntimeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.RuntimeCondition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_conditions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.RuntimeStatus)
  return target;
}

size_t RuntimeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.RuntimeStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.RuntimeCondition conditions = 1;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.RuntimeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.RuntimeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.RuntimeStatus)
    MergeFrom(*source);
  }
}

void RuntimeStatus::MergeFrom(const RuntimeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.RuntimeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
}

void RuntimeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.RuntimeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeStatus::CopyFrom(const RuntimeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.RuntimeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeStatus::IsInitialized() const {
  return true;
}

void RuntimeStatus::InternalSwap(RuntimeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conditions_.InternalSwap(&other->conditions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusRequest::InitAsDefaultInstance() {
}
class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  verbose_ = from.verbose_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StatusRequest)
}

void StatusRequest::SharedCtor() {
  verbose_ = false;
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusRequest::ArenaDtor(void* object) {
  StatusRequest* _this = reinterpret_cast< StatusRequest* >(object);
  (void)_this;
}
void StatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRequest_api_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verbose_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool verbose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool verbose = 1;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool verbose = 1;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
}

void StatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(verbose_, other->verbose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StatusResponse_InfoEntry_DoNotUse::StatusResponse_InfoEntry_DoNotUse() {}
StatusResponse_InfoEntry_DoNotUse::StatusResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StatusResponse_InfoEntry_DoNotUse::MergeFrom(const StatusResponse_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StatusResponse_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_StatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::runtime::v1alpha2::RuntimeStatus*>(
      ::runtime::v1alpha2::RuntimeStatus::internal_default_instance());
}
class StatusResponse::_Internal {
 public:
  static const ::runtime::v1alpha2::RuntimeStatus& status(const StatusResponse* msg);
};

const ::runtime::v1alpha2::RuntimeStatus&
StatusResponse::_Internal::status(const StatusResponse* msg) {
  return *msg->status_;
}
StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  if (from._internal_has_status()) {
    status_ = new ::runtime::v1alpha2::RuntimeStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusResponse_api_2eproto.base);
  status_ = nullptr;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.StatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_api_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.RuntimeStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.RuntimeStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // map<string, string> info = 2;
  if (!this->_internal_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.StatusResponse.InfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.StatusResponse.InfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it) {
        target = StatusResponse_InfoEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_info().begin();
      it != this->_internal_info().end(); ++it) {
    total_size += StatusResponse_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .runtime.v1alpha2.RuntimeStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.has_status()) {
    _internal_mutable_status()->::runtime::v1alpha2::RuntimeStatus::MergeFrom(from._internal_status());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageFsInfoRequest::InitAsDefaultInstance() {
}
class ImageFsInfoRequest::_Internal {
 public:
};

ImageFsInfoRequest::ImageFsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageFsInfoRequest)
}
ImageFsInfoRequest::ImageFsInfoRequest(const ImageFsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageFsInfoRequest)
}

void ImageFsInfoRequest::SharedCtor() {
}

ImageFsInfoRequest::~ImageFsInfoRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageFsInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFsInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFsInfoRequest::ArenaDtor(void* object) {
  ImageFsInfoRequest* _this = reinterpret_cast< ImageFsInfoRequest* >(object);
  (void)_this;
}
void ImageFsInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFsInfoRequest& ImageFsInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFsInfoRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ImageFsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageFsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFsInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageFsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageFsInfoRequest)
  return target;
}

size_t ImageFsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageFsInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageFsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageFsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageFsInfoRequest)
    MergeFrom(*source);
  }
}

void ImageFsInfoRequest::MergeFrom(const ImageFsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageFsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ImageFsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageFsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFsInfoRequest::CopyFrom(const ImageFsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageFsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFsInfoRequest::IsInitialized() const {
  return true;
}

void ImageFsInfoRequest::InternalSwap(ImageFsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UInt64Value::InitAsDefaultInstance() {
}
class UInt64Value::_Internal {
 public:
};

UInt64Value::UInt64Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.UInt64Value)
}
UInt64Value::UInt64Value(const UInt64Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.UInt64Value)
}

void UInt64Value::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

UInt64Value::~UInt64Value() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.UInt64Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UInt64Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UInt64Value::ArenaDtor(void* object) {
  UInt64Value* _this = reinterpret_cast< UInt64Value* >(object);
  (void)_this;
}
void UInt64Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UInt64Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UInt64Value& UInt64Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UInt64Value_api_2eproto.base);
  return *internal_default_instance();
}


void UInt64Value::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.UInt64Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UInt64Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt64Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.UInt64Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.UInt64Value)
  return target;
}

size_t UInt64Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.UInt64Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt64Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.UInt64Value)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UInt64Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.UInt64Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.UInt64Value)
    MergeFrom(*source);
  }
}

void UInt64Value::MergeFrom(const UInt64Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.UInt64Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void UInt64Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.UInt64Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Value::CopyFrom(const UInt64Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.UInt64Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Value::IsInitialized() const {
  return true;
}

void UInt64Value::InternalSwap(UInt64Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UInt64Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilesystemIdentifier::InitAsDefaultInstance() {
}
class FilesystemIdentifier::_Internal {
 public:
};

FilesystemIdentifier::FilesystemIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.FilesystemIdentifier)
}
FilesystemIdentifier::FilesystemIdentifier(const FilesystemIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mountpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mountpoint().empty()) {
    mountpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mountpoint(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.FilesystemIdentifier)
}

void FilesystemIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilesystemIdentifier_api_2eproto.base);
  mountpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FilesystemIdentifier::~FilesystemIdentifier() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.FilesystemIdentifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilesystemIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mountpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilesystemIdentifier::ArenaDtor(void* object) {
  FilesystemIdentifier* _this = reinterpret_cast< FilesystemIdentifier* >(object);
  (void)_this;
}
void FilesystemIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilesystemIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilesystemIdentifier& FilesystemIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilesystemIdentifier_api_2eproto.base);
  return *internal_default_instance();
}


void FilesystemIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.FilesystemIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mountpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilesystemIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mountpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mountpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.FilesystemIdentifier.mountpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilesystemIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.FilesystemIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mountpoint = 1;
  if (this->mountpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mountpoint().data(), static_cast<int>(this->_internal_mountpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.FilesystemIdentifier.mountpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mountpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.FilesystemIdentifier)
  return target;
}

size_t FilesystemIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.FilesystemIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mountpoint = 1;
  if (this->mountpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mountpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilesystemIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.FilesystemIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const FilesystemIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilesystemIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.FilesystemIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.FilesystemIdentifier)
    MergeFrom(*source);
  }
}

void FilesystemIdentifier::MergeFrom(const FilesystemIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.FilesystemIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mountpoint().size() > 0) {
    _internal_set_mountpoint(from._internal_mountpoint());
  }
}

void FilesystemIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.FilesystemIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilesystemIdentifier::CopyFrom(const FilesystemIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.FilesystemIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesystemIdentifier::IsInitialized() const {
  return true;
}

void FilesystemIdentifier::InternalSwap(FilesystemIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mountpoint_.Swap(&other->mountpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FilesystemIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilesystemUsage::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_FilesystemUsage_default_instance_._instance.get_mutable()->fs_id_ = const_cast< ::runtime::v1alpha2::FilesystemIdentifier*>(
      ::runtime::v1alpha2::FilesystemIdentifier::internal_default_instance());
  ::runtime::v1alpha2::_FilesystemUsage_default_instance_._instance.get_mutable()->used_bytes_ = const_cast< ::runtime::v1alpha2::UInt64Value*>(
      ::runtime::v1alpha2::UInt64Value::internal_default_instance());
  ::runtime::v1alpha2::_FilesystemUsage_default_instance_._instance.get_mutable()->inodes_used_ = const_cast< ::runtime::v1alpha2::UInt64Value*>(
      ::runtime::v1alpha2::UInt64Value::internal_default_instance());
}
class FilesystemUsage::_Internal {
 public:
  static const ::runtime::v1alpha2::FilesystemIdentifier& fs_id(const FilesystemUsage* msg);
  static const ::runtime::v1alpha2::UInt64Value& used_bytes(const FilesystemUsage* msg);
  static const ::runtime::v1alpha2::UInt64Value& inodes_used(const FilesystemUsage* msg);
};

const ::runtime::v1alpha2::FilesystemIdentifier&
FilesystemUsage::_Internal::fs_id(const FilesystemUsage* msg) {
  return *msg->fs_id_;
}
const ::runtime::v1alpha2::UInt64Value&
FilesystemUsage::_Internal::used_bytes(const FilesystemUsage* msg) {
  return *msg->used_bytes_;
}
const ::runtime::v1alpha2::UInt64Value&
FilesystemUsage::_Internal::inodes_used(const FilesystemUsage* msg) {
  return *msg->inodes_used_;
}
FilesystemUsage::FilesystemUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.FilesystemUsage)
}
FilesystemUsage::FilesystemUsage(const FilesystemUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fs_id()) {
    fs_id_ = new ::runtime::v1alpha2::FilesystemIdentifier(*from.fs_id_);
  } else {
    fs_id_ = nullptr;
  }
  if (from._internal_has_used_bytes()) {
    used_bytes_ = new ::runtime::v1alpha2::UInt64Value(*from.used_bytes_);
  } else {
    used_bytes_ = nullptr;
  }
  if (from._internal_has_inodes_used()) {
    inodes_used_ = new ::runtime::v1alpha2::UInt64Value(*from.inodes_used_);
  } else {
    inodes_used_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.FilesystemUsage)
}

void FilesystemUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilesystemUsage_api_2eproto.base);
  ::memset(&fs_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&fs_id_)) + sizeof(timestamp_));
}

FilesystemUsage::~FilesystemUsage() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.FilesystemUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilesystemUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fs_id_;
  if (this != internal_default_instance()) delete used_bytes_;
  if (this != internal_default_instance()) delete inodes_used_;
}

void FilesystemUsage::ArenaDtor(void* object) {
  FilesystemUsage* _this = reinterpret_cast< FilesystemUsage* >(object);
  (void)_this;
}
void FilesystemUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilesystemUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilesystemUsage& FilesystemUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilesystemUsage_api_2eproto.base);
  return *internal_default_instance();
}


void FilesystemUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.FilesystemUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fs_id_ != nullptr) {
    delete fs_id_;
  }
  fs_id_ = nullptr;
  if (GetArena() == nullptr && used_bytes_ != nullptr) {
    delete used_bytes_;
  }
  used_bytes_ = nullptr;
  if (GetArena() == nullptr && inodes_used_ != nullptr) {
    delete inodes_used_;
  }
  inodes_used_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilesystemUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.FilesystemIdentifier fs_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fs_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.UInt64Value used_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_used_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.UInt64Value inodes_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inodes_used(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilesystemUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.FilesystemUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .runtime.v1alpha2.FilesystemIdentifier fs_id = 2;
  if (this->has_fs_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fs_id(this), target, stream);
  }

  // .runtime.v1alpha2.UInt64Value used_bytes = 3;
  if (this->has_used_bytes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::used_bytes(this), target, stream);
  }

  // .runtime.v1alpha2.UInt64Value inodes_used = 4;
  if (this->has_inodes_used()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inodes_used(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.FilesystemUsage)
  return target;
}

size_t FilesystemUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.FilesystemUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.FilesystemIdentifier fs_id = 2;
  if (this->has_fs_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fs_id_);
  }

  // .runtime.v1alpha2.UInt64Value used_bytes = 3;
  if (this->has_used_bytes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *used_bytes_);
  }

  // .runtime.v1alpha2.UInt64Value inodes_used = 4;
  if (this->has_inodes_used()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inodes_used_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilesystemUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.FilesystemUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const FilesystemUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilesystemUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.FilesystemUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.FilesystemUsage)
    MergeFrom(*source);
  }
}

void FilesystemUsage::MergeFrom(const FilesystemUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.FilesystemUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fs_id()) {
    _internal_mutable_fs_id()->::runtime::v1alpha2::FilesystemIdentifier::MergeFrom(from._internal_fs_id());
  }
  if (from.has_used_bytes()) {
    _internal_mutable_used_bytes()->::runtime::v1alpha2::UInt64Value::MergeFrom(from._internal_used_bytes());
  }
  if (from.has_inodes_used()) {
    _internal_mutable_inodes_used()->::runtime::v1alpha2::UInt64Value::MergeFrom(from._internal_inodes_used());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void FilesystemUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.FilesystemUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilesystemUsage::CopyFrom(const FilesystemUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.FilesystemUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesystemUsage::IsInitialized() const {
  return true;
}

void FilesystemUsage::InternalSwap(FilesystemUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilesystemUsage, timestamp_)
      + sizeof(FilesystemUsage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(FilesystemUsage, fs_id_)>(
          reinterpret_cast<char*>(&fs_id_),
          reinterpret_cast<char*>(&other->fs_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilesystemUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageFsInfoResponse::InitAsDefaultInstance() {
}
class ImageFsInfoResponse::_Internal {
 public:
};

ImageFsInfoResponse::ImageFsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_filesystems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ImageFsInfoResponse)
}
ImageFsInfoResponse::ImageFsInfoResponse(const ImageFsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_filesystems_(from.image_filesystems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ImageFsInfoResponse)
}

void ImageFsInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFsInfoResponse_api_2eproto.base);
}

ImageFsInfoResponse::~ImageFsInfoResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ImageFsInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFsInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFsInfoResponse::ArenaDtor(void* object) {
  ImageFsInfoResponse* _this = reinterpret_cast< ImageFsInfoResponse* >(object);
  (void)_this;
}
void ImageFsInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFsInfoResponse& ImageFsInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFsInfoResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ImageFsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ImageFsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_filesystems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.FilesystemUsage image_filesystems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_filesystems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFsInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ImageFsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.FilesystemUsage image_filesystems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_filesystems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_image_filesystems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ImageFsInfoResponse)
  return target;
}

size_t ImageFsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ImageFsInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.FilesystemUsage image_filesystems = 1;
  total_size += 1UL * this->_internal_image_filesystems_size();
  for (const auto& msg : this->image_filesystems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ImageFsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ImageFsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ImageFsInfoResponse)
    MergeFrom(*source);
  }
}

void ImageFsInfoResponse::MergeFrom(const ImageFsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ImageFsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_filesystems_.MergeFrom(from.image_filesystems_);
}

void ImageFsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ImageFsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFsInfoResponse::CopyFrom(const ImageFsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ImageFsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFsInfoResponse::IsInitialized() const {
  return true;
}

void ImageFsInfoResponse::InternalSwap(ImageFsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_filesystems_.InternalSwap(&other->image_filesystems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerStatsRequest::InitAsDefaultInstance() {
}
class ContainerStatsRequest::_Internal {
 public:
};

ContainerStatsRequest::ContainerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatsRequest)
}
ContainerStatsRequest::ContainerStatsRequest(const ContainerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatsRequest)
}

void ContainerStatsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatsRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerStatsRequest::~ContainerStatsRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerStatsRequest::ArenaDtor(void* object) {
  ContainerStatsRequest* _this = reinterpret_cast< ContainerStatsRequest* >(object);
  (void)_this;
}
void ContainerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatsRequest& ContainerStatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatsRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatsRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatsRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatsRequest)
  return target;
}

size_t ContainerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatsRequest)
    MergeFrom(*source);
  }
}

void ContainerStatsRequest::MergeFrom(const ContainerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void ContainerStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatsRequest::CopyFrom(const ContainerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatsRequest::IsInitialized() const {
  return true;
}

void ContainerStatsRequest::InternalSwap(ContainerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerStatsResponse::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerStatsResponse_default_instance_._instance.get_mutable()->stats_ = const_cast< ::runtime::v1alpha2::ContainerStats*>(
      ::runtime::v1alpha2::ContainerStats::internal_default_instance());
}
class ContainerStatsResponse::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerStats& stats(const ContainerStatsResponse* msg);
};

const ::runtime::v1alpha2::ContainerStats&
ContainerStatsResponse::_Internal::stats(const ContainerStatsResponse* msg) {
  return *msg->stats_;
}
ContainerStatsResponse::ContainerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatsResponse)
}
ContainerStatsResponse::ContainerStatsResponse(const ContainerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::runtime::v1alpha2::ContainerStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatsResponse)
}

void ContainerStatsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatsResponse_api_2eproto.base);
  stats_ = nullptr;
}

ContainerStatsResponse::~ContainerStatsResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
}

void ContainerStatsResponse::ArenaDtor(void* object) {
  ContainerStatsResponse* _this = reinterpret_cast< ContainerStatsResponse* >(object);
  (void)_this;
}
void ContainerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatsResponse& ContainerStatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatsResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerStats stats = 1;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatsResponse)
  return target;
}

size_t ContainerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatsResponse)
    MergeFrom(*source);
  }
}

void ContainerStatsResponse::MergeFrom(const ContainerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    _internal_mutable_stats()->::runtime::v1alpha2::ContainerStats::MergeFrom(from._internal_stats());
  }
}

void ContainerStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatsResponse::CopyFrom(const ContainerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatsResponse::IsInitialized() const {
  return true;
}

void ContainerStatsResponse::InternalSwap(ContainerStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListContainerStatsRequest::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ListContainerStatsRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::runtime::v1alpha2::ContainerStatsFilter*>(
      ::runtime::v1alpha2::ContainerStatsFilter::internal_default_instance());
}
class ListContainerStatsRequest::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerStatsFilter& filter(const ListContainerStatsRequest* msg);
};

const ::runtime::v1alpha2::ContainerStatsFilter&
ListContainerStatsRequest::_Internal::filter(const ListContainerStatsRequest* msg) {
  return *msg->filter_;
}
ListContainerStatsRequest::ListContainerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListContainerStatsRequest)
}
ListContainerStatsRequest::ListContainerStatsRequest(const ListContainerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::runtime::v1alpha2::ContainerStatsFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListContainerStatsRequest)
}

void ListContainerStatsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListContainerStatsRequest_api_2eproto.base);
  filter_ = nullptr;
}

ListContainerStatsRequest::~ListContainerStatsRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListContainerStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListContainerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListContainerStatsRequest::ArenaDtor(void* object) {
  ListContainerStatsRequest* _this = reinterpret_cast< ListContainerStatsRequest* >(object);
  (void)_this;
}
void ListContainerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListContainerStatsRequest& ListContainerStatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListContainerStatsRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ListContainerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListContainerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerStatsFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainerStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListContainerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerStatsFilter filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListContainerStatsRequest)
  return target;
}

size_t ListContainerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListContainerStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerStatsFilter filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListContainerStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListContainerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListContainerStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListContainerStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListContainerStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListContainerStatsRequest)
    MergeFrom(*source);
  }
}

void ListContainerStatsRequest::MergeFrom(const ListContainerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListContainerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::runtime::v1alpha2::ContainerStatsFilter::MergeFrom(from._internal_filter());
  }
}

void ListContainerStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListContainerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListContainerStatsRequest::CopyFrom(const ListContainerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListContainerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainerStatsRequest::IsInitialized() const {
  return true;
}

void ListContainerStatsRequest::InternalSwap(ListContainerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainerStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerStatsFilter_LabelSelectorEntry_DoNotUse::ContainerStatsFilter_LabelSelectorEntry_DoNotUse() {}
ContainerStatsFilter_LabelSelectorEntry_DoNotUse::ContainerStatsFilter_LabelSelectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerStatsFilter_LabelSelectorEntry_DoNotUse::MergeFrom(const ContainerStatsFilter_LabelSelectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatsFilter_LabelSelectorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerStatsFilter_LabelSelectorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerStatsFilter::InitAsDefaultInstance() {
}
class ContainerStatsFilter::_Internal {
 public:
};

ContainerStatsFilter::ContainerStatsFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_selector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStatsFilter)
}
ContainerStatsFilter::ContainerStatsFilter(const ContainerStatsFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_selector_.MergeFrom(from.label_selector_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_sandbox_id().empty()) {
    pod_sandbox_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_sandbox_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStatsFilter)
}

void ContainerStatsFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStatsFilter_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerStatsFilter::~ContainerStatsFilter() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStatsFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStatsFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_sandbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerStatsFilter::ArenaDtor(void* object) {
  ContainerStatsFilter* _this = reinterpret_cast< ContainerStatsFilter* >(object);
  (void)_this;
}
void ContainerStatsFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStatsFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStatsFilter& ContainerStatsFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStatsFilter_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStatsFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStatsFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_selector_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStatsFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatsFilter.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_sandbox_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pod_sandbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> label_selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&label_selector_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStatsFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStatsFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatsFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pod_sandbox_id = 2;
  if (this->pod_sandbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_sandbox_id().data(), static_cast<int>(this->_internal_pod_sandbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerStatsFilter.pod_sandbox_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pod_sandbox_id(), target);
  }

  // map<string, string> label_selector = 3;
  if (!this->_internal_label_selector().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatsFilter.LabelSelectorEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerStatsFilter.LabelSelectorEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_label_selector().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_label_selector().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerStatsFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_label_selector().begin();
          it != this->_internal_label_selector().end(); ++it) {
        target = ContainerStatsFilter_LabelSelectorEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStatsFilter)
  return target;
}

size_t ContainerStatsFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStatsFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> label_selector = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_selector_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_label_selector().begin();
      it != this->_internal_label_selector().end(); ++it) {
    total_size += ContainerStatsFilter_LabelSelectorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pod_sandbox_id = 2;
  if (this->pod_sandbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_sandbox_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStatsFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStatsFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStatsFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStatsFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStatsFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStatsFilter)
    MergeFrom(*source);
  }
}

void ContainerStatsFilter::MergeFrom(const ContainerStatsFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStatsFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_selector_.MergeFrom(from.label_selector_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pod_sandbox_id().size() > 0) {
    _internal_set_pod_sandbox_id(from._internal_pod_sandbox_id());
  }
}

void ContainerStatsFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStatsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatsFilter::CopyFrom(const ContainerStatsFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStatsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatsFilter::IsInitialized() const {
  return true;
}

void ContainerStatsFilter::InternalSwap(ContainerStatsFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_selector_.Swap(&other->label_selector_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pod_sandbox_id_.Swap(&other->pod_sandbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStatsFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListContainerStatsResponse::InitAsDefaultInstance() {
}
class ListContainerStatsResponse::_Internal {
 public:
};

ListContainerStatsResponse::ListContainerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ListContainerStatsResponse)
}
ListContainerStatsResponse::ListContainerStatsResponse(const ListContainerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ListContainerStatsResponse)
}

void ListContainerStatsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListContainerStatsResponse_api_2eproto.base);
}

ListContainerStatsResponse::~ListContainerStatsResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ListContainerStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListContainerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListContainerStatsResponse::ArenaDtor(void* object) {
  ListContainerStatsResponse* _this = reinterpret_cast< ListContainerStatsResponse* >(object);
  (void)_this;
}
void ListContainerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListContainerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListContainerStatsResponse& ListContainerStatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListContainerStatsResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ListContainerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ListContainerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListContainerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .runtime.v1alpha2.ContainerStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListContainerStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ListContainerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.ContainerStats stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ListContainerStatsResponse)
  return target;
}

size_t ListContainerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ListContainerStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .runtime.v1alpha2.ContainerStats stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListContainerStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ListContainerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListContainerStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListContainerStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ListContainerStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ListContainerStatsResponse)
    MergeFrom(*source);
  }
}

void ListContainerStatsResponse::MergeFrom(const ListContainerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ListContainerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void ListContainerStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ListContainerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListContainerStatsResponse::CopyFrom(const ListContainerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ListContainerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContainerStatsResponse::IsInitialized() const {
  return true;
}

void ListContainerStatsResponse::InternalSwap(ListContainerStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListContainerStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ContainerAttributes_LabelsEntry_DoNotUse::ContainerAttributes_LabelsEntry_DoNotUse() {}
ContainerAttributes_LabelsEntry_DoNotUse::ContainerAttributes_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerAttributes_LabelsEntry_DoNotUse::MergeFrom(const ContainerAttributes_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerAttributes_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerAttributes_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ContainerAttributes_AnnotationsEntry_DoNotUse::ContainerAttributes_AnnotationsEntry_DoNotUse() {}
ContainerAttributes_AnnotationsEntry_DoNotUse::ContainerAttributes_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContainerAttributes_AnnotationsEntry_DoNotUse::MergeFrom(const ContainerAttributes_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContainerAttributes_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContainerAttributes_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContainerAttributes::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerAttributes_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::runtime::v1alpha2::ContainerMetadata*>(
      ::runtime::v1alpha2::ContainerMetadata::internal_default_instance());
}
class ContainerAttributes::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerMetadata& metadata(const ContainerAttributes* msg);
};

const ::runtime::v1alpha2::ContainerMetadata&
ContainerAttributes::_Internal::metadata(const ContainerAttributes* msg) {
  return *msg->metadata_;
}
ContainerAttributes::ContainerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerAttributes)
}
ContainerAttributes::ContainerAttributes(const ContainerAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::runtime::v1alpha2::ContainerMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerAttributes)
}

void ContainerAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerAttributes_api_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

ContainerAttributes::~ContainerAttributes() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ContainerAttributes::ArenaDtor(void* object) {
  ContainerAttributes* _this = reinterpret_cast< ContainerAttributes* >(object);
  (void)_this;
}
void ContainerAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerAttributes& ContainerAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerAttributes_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ContainerAttributes.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.ContainerMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ContainerAttributes.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // map<string, string> labels = 3;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerAttributes.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerAttributes.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerAttributes_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ContainerAttributes_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 4;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerAttributes.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "runtime.v1alpha2.ContainerAttributes.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContainerAttributes_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = ContainerAttributes_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerAttributes)
  return target;
}

size_t ContainerAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ContainerAttributes_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += ContainerAttributes_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .runtime.v1alpha2.ContainerMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerAttributes)
    MergeFrom(*source);
  }
}

void ContainerAttributes::MergeFrom(const ContainerAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::runtime::v1alpha2::ContainerMetadata::MergeFrom(from._internal_metadata());
  }
}

void ContainerAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerAttributes::CopyFrom(const ContainerAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerAttributes::IsInitialized() const {
  return true;
}

void ContainerAttributes::InternalSwap(ContainerAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerStats::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_ContainerStats_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::runtime::v1alpha2::ContainerAttributes*>(
      ::runtime::v1alpha2::ContainerAttributes::internal_default_instance());
  ::runtime::v1alpha2::_ContainerStats_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::runtime::v1alpha2::CpuUsage*>(
      ::runtime::v1alpha2::CpuUsage::internal_default_instance());
  ::runtime::v1alpha2::_ContainerStats_default_instance_._instance.get_mutable()->memory_ = const_cast< ::runtime::v1alpha2::MemoryUsage*>(
      ::runtime::v1alpha2::MemoryUsage::internal_default_instance());
  ::runtime::v1alpha2::_ContainerStats_default_instance_._instance.get_mutable()->writable_layer_ = const_cast< ::runtime::v1alpha2::FilesystemUsage*>(
      ::runtime::v1alpha2::FilesystemUsage::internal_default_instance());
}
class ContainerStats::_Internal {
 public:
  static const ::runtime::v1alpha2::ContainerAttributes& attributes(const ContainerStats* msg);
  static const ::runtime::v1alpha2::CpuUsage& cpu(const ContainerStats* msg);
  static const ::runtime::v1alpha2::MemoryUsage& memory(const ContainerStats* msg);
  static const ::runtime::v1alpha2::FilesystemUsage& writable_layer(const ContainerStats* msg);
};

const ::runtime::v1alpha2::ContainerAttributes&
ContainerStats::_Internal::attributes(const ContainerStats* msg) {
  return *msg->attributes_;
}
const ::runtime::v1alpha2::CpuUsage&
ContainerStats::_Internal::cpu(const ContainerStats* msg) {
  return *msg->cpu_;
}
const ::runtime::v1alpha2::MemoryUsage&
ContainerStats::_Internal::memory(const ContainerStats* msg) {
  return *msg->memory_;
}
const ::runtime::v1alpha2::FilesystemUsage&
ContainerStats::_Internal::writable_layer(const ContainerStats* msg) {
  return *msg->writable_layer_;
}
ContainerStats::ContainerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ContainerStats)
}
ContainerStats::ContainerStats(const ContainerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    attributes_ = new ::runtime::v1alpha2::ContainerAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from._internal_has_cpu()) {
    cpu_ = new ::runtime::v1alpha2::CpuUsage(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from._internal_has_memory()) {
    memory_ = new ::runtime::v1alpha2::MemoryUsage(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  if (from._internal_has_writable_layer()) {
    writable_layer_ = new ::runtime::v1alpha2::FilesystemUsage(*from.writable_layer_);
  } else {
    writable_layer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ContainerStats)
}

void ContainerStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerStats_api_2eproto.base);
  ::memset(&attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writable_layer_) -
      reinterpret_cast<char*>(&attributes_)) + sizeof(writable_layer_));
}

ContainerStats::~ContainerStats() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ContainerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete writable_layer_;
}

void ContainerStats::ArenaDtor(void* object) {
  ContainerStats* _this = reinterpret_cast< ContainerStats* >(object);
  (void)_this;
}
void ContainerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerStats& ContainerStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerStats_api_2eproto.base);
  return *internal_default_instance();
}


void ContainerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ContainerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArena() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  if (GetArena() == nullptr && writable_layer_ != nullptr) {
    delete writable_layer_;
  }
  writable_layer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .runtime.v1alpha2.ContainerAttributes attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.CpuUsage cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.MemoryUsage memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.FilesystemUsage writable_layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_writable_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ContainerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerAttributes attributes = 1;
  if (this->has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attributes(this), target, stream);
  }

  // .runtime.v1alpha2.CpuUsage cpu = 2;
  if (this->has_cpu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cpu(this), target, stream);
  }

  // .runtime.v1alpha2.MemoryUsage memory = 3;
  if (this->has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::memory(this), target, stream);
  }

  // .runtime.v1alpha2.FilesystemUsage writable_layer = 4;
  if (this->has_writable_layer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::writable_layer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ContainerStats)
  return target;
}

size_t ContainerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ContainerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.ContainerAttributes attributes = 1;
  if (this->has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .runtime.v1alpha2.CpuUsage cpu = 2;
  if (this->has_cpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_);
  }

  // .runtime.v1alpha2.MemoryUsage memory = 3;
  if (this->has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  // .runtime.v1alpha2.FilesystemUsage writable_layer = 4;
  if (this->has_writable_layer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *writable_layer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ContainerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ContainerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ContainerStats)
    MergeFrom(*source);
  }
}

void ContainerStats::MergeFrom(const ContainerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ContainerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attributes()) {
    _internal_mutable_attributes()->::runtime::v1alpha2::ContainerAttributes::MergeFrom(from._internal_attributes());
  }
  if (from.has_cpu()) {
    _internal_mutable_cpu()->::runtime::v1alpha2::CpuUsage::MergeFrom(from._internal_cpu());
  }
  if (from.has_memory()) {
    _internal_mutable_memory()->::runtime::v1alpha2::MemoryUsage::MergeFrom(from._internal_memory());
  }
  if (from.has_writable_layer()) {
    _internal_mutable_writable_layer()->::runtime::v1alpha2::FilesystemUsage::MergeFrom(from._internal_writable_layer());
  }
}

void ContainerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ContainerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStats::CopyFrom(const ContainerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ContainerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStats::IsInitialized() const {
  return true;
}

void ContainerStats::InternalSwap(ContainerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerStats, writable_layer_)
      + sizeof(ContainerStats::writable_layer_)
      - PROTOBUF_FIELD_OFFSET(ContainerStats, attributes_)>(
          reinterpret_cast<char*>(&attributes_),
          reinterpret_cast<char*>(&other->attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuUsage::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_CpuUsage_default_instance_._instance.get_mutable()->usage_core_nano_seconds_ = const_cast< ::runtime::v1alpha2::UInt64Value*>(
      ::runtime::v1alpha2::UInt64Value::internal_default_instance());
}
class CpuUsage::_Internal {
 public:
  static const ::runtime::v1alpha2::UInt64Value& usage_core_nano_seconds(const CpuUsage* msg);
};

const ::runtime::v1alpha2::UInt64Value&
CpuUsage::_Internal::usage_core_nano_seconds(const CpuUsage* msg) {
  return *msg->usage_core_nano_seconds_;
}
CpuUsage::CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.CpuUsage)
}
CpuUsage::CpuUsage(const CpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_usage_core_nano_seconds()) {
    usage_core_nano_seconds_ = new ::runtime::v1alpha2::UInt64Value(*from.usage_core_nano_seconds_);
  } else {
    usage_core_nano_seconds_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.CpuUsage)
}

void CpuUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuUsage_api_2eproto.base);
  ::memset(&usage_core_nano_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&usage_core_nano_seconds_)) + sizeof(timestamp_));
}

CpuUsage::~CpuUsage() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.CpuUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete usage_core_nano_seconds_;
}

void CpuUsage::ArenaDtor(void* object) {
  CpuUsage* _this = reinterpret_cast< CpuUsage* >(object);
  (void)_this;
}
void CpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUsage& CpuUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUsage_api_2eproto.base);
  return *internal_default_instance();
}


void CpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && usage_core_nano_seconds_ != nullptr) {
    delete usage_core_nano_seconds_;
  }
  usage_core_nano_seconds_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.UInt64Value usage_core_nano_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage_core_nano_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .runtime.v1alpha2.UInt64Value usage_core_nano_seconds = 2;
  if (this->has_usage_core_nano_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::usage_core_nano_seconds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.CpuUsage)
  return target;
}

size_t CpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.CpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.UInt64Value usage_core_nano_seconds = 2;
  if (this->has_usage_core_nano_seconds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usage_core_nano_seconds_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.CpuUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.CpuUsage)
    MergeFrom(*source);
  }
}

void CpuUsage::MergeFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_usage_core_nano_seconds()) {
    _internal_mutable_usage_core_nano_seconds()->::runtime::v1alpha2::UInt64Value::MergeFrom(from._internal_usage_core_nano_seconds());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void CpuUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuUsage::CopyFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsage::IsInitialized() const {
  return true;
}

void CpuUsage::InternalSwap(CpuUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuUsage, timestamp_)
      + sizeof(CpuUsage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CpuUsage, usage_core_nano_seconds_)>(
          reinterpret_cast<char*>(&usage_core_nano_seconds_),
          reinterpret_cast<char*>(&other->usage_core_nano_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryUsage::InitAsDefaultInstance() {
  ::runtime::v1alpha2::_MemoryUsage_default_instance_._instance.get_mutable()->working_set_bytes_ = const_cast< ::runtime::v1alpha2::UInt64Value*>(
      ::runtime::v1alpha2::UInt64Value::internal_default_instance());
}
class MemoryUsage::_Internal {
 public:
  static const ::runtime::v1alpha2::UInt64Value& working_set_bytes(const MemoryUsage* msg);
};

const ::runtime::v1alpha2::UInt64Value&
MemoryUsage::_Internal::working_set_bytes(const MemoryUsage* msg) {
  return *msg->working_set_bytes_;
}
MemoryUsage::MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.MemoryUsage)
}
MemoryUsage::MemoryUsage(const MemoryUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_working_set_bytes()) {
    working_set_bytes_ = new ::runtime::v1alpha2::UInt64Value(*from.working_set_bytes_);
  } else {
    working_set_bytes_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.MemoryUsage)
}

void MemoryUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryUsage_api_2eproto.base);
  ::memset(&working_set_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&working_set_bytes_)) + sizeof(timestamp_));
}

MemoryUsage::~MemoryUsage() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.MemoryUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete working_set_bytes_;
}

void MemoryUsage::ArenaDtor(void* object) {
  MemoryUsage* _this = reinterpret_cast< MemoryUsage* >(object);
  (void)_this;
}
void MemoryUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryUsage& MemoryUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryUsage_api_2eproto.base);
  return *internal_default_instance();
}


void MemoryUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && working_set_bytes_ != nullptr) {
    delete working_set_bytes_;
  }
  working_set_bytes_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .runtime.v1alpha2.UInt64Value working_set_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_working_set_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .runtime.v1alpha2.UInt64Value working_set_bytes = 2;
  if (this->has_working_set_bytes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::working_set_bytes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.MemoryUsage)
  return target;
}

size_t MemoryUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.MemoryUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .runtime.v1alpha2.UInt64Value working_set_bytes = 2;
  if (this->has_working_set_bytes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *working_set_bytes_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.MemoryUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.MemoryUsage)
    MergeFrom(*source);
  }
}

void MemoryUsage::MergeFrom(const MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_working_set_bytes()) {
    _internal_mutable_working_set_bytes()->::runtime::v1alpha2::UInt64Value::MergeFrom(from._internal_working_set_bytes());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MemoryUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryUsage::CopyFrom(const MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryUsage::IsInitialized() const {
  return true;
}

void MemoryUsage::InternalSwap(MemoryUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryUsage, timestamp_)
      + sizeof(MemoryUsage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MemoryUsage, working_set_bytes_)>(
          reinterpret_cast<char*>(&working_set_bytes_),
          reinterpret_cast<char*>(&other->working_set_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReopenContainerLogRequest::InitAsDefaultInstance() {
}
class ReopenContainerLogRequest::_Internal {
 public:
};

ReopenContainerLogRequest::ReopenContainerLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ReopenContainerLogRequest)
}
ReopenContainerLogRequest::ReopenContainerLogRequest(const ReopenContainerLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_id().empty()) {
    container_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_container_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ReopenContainerLogRequest)
}

void ReopenContainerLogRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReopenContainerLogRequest_api_2eproto.base);
  container_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReopenContainerLogRequest::~ReopenContainerLogRequest() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ReopenContainerLogRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReopenContainerLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReopenContainerLogRequest::ArenaDtor(void* object) {
  ReopenContainerLogRequest* _this = reinterpret_cast< ReopenContainerLogRequest* >(object);
  (void)_this;
}
void ReopenContainerLogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReopenContainerLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReopenContainerLogRequest& ReopenContainerLogRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReopenContainerLogRequest_api_2eproto.base);
  return *internal_default_instance();
}


void ReopenContainerLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ReopenContainerLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReopenContainerLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string container_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_container_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "runtime.v1alpha2.ReopenContainerLogRequest.container_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReopenContainerLogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ReopenContainerLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runtime.v1alpha2.ReopenContainerLogRequest.container_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_container_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ReopenContainerLogRequest)
  return target;
}

size_t ReopenContainerLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ReopenContainerLogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_id = 1;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReopenContainerLogRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ReopenContainerLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReopenContainerLogRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReopenContainerLogRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ReopenContainerLogRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ReopenContainerLogRequest)
    MergeFrom(*source);
  }
}

void ReopenContainerLogRequest::MergeFrom(const ReopenContainerLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ReopenContainerLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_id().size() > 0) {
    _internal_set_container_id(from._internal_container_id());
  }
}

void ReopenContainerLogRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ReopenContainerLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReopenContainerLogRequest::CopyFrom(const ReopenContainerLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ReopenContainerLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReopenContainerLogRequest::IsInitialized() const {
  return true;
}

void ReopenContainerLogRequest::InternalSwap(ReopenContainerLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  container_id_.Swap(&other->container_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReopenContainerLogRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReopenContainerLogResponse::InitAsDefaultInstance() {
}
class ReopenContainerLogResponse::_Internal {
 public:
};

ReopenContainerLogResponse::ReopenContainerLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:runtime.v1alpha2.ReopenContainerLogResponse)
}
ReopenContainerLogResponse::ReopenContainerLogResponse(const ReopenContainerLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runtime.v1alpha2.ReopenContainerLogResponse)
}

void ReopenContainerLogResponse::SharedCtor() {
}

ReopenContainerLogResponse::~ReopenContainerLogResponse() {
  // @@protoc_insertion_point(destructor:runtime.v1alpha2.ReopenContainerLogResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReopenContainerLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReopenContainerLogResponse::ArenaDtor(void* object) {
  ReopenContainerLogResponse* _this = reinterpret_cast< ReopenContainerLogResponse* >(object);
  (void)_this;
}
void ReopenContainerLogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReopenContainerLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReopenContainerLogResponse& ReopenContainerLogResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReopenContainerLogResponse_api_2eproto.base);
  return *internal_default_instance();
}


void ReopenContainerLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:runtime.v1alpha2.ReopenContainerLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReopenContainerLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReopenContainerLogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runtime.v1alpha2.ReopenContainerLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runtime.v1alpha2.ReopenContainerLogResponse)
  return target;
}

size_t ReopenContainerLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runtime.v1alpha2.ReopenContainerLogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReopenContainerLogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:runtime.v1alpha2.ReopenContainerLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReopenContainerLogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReopenContainerLogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:runtime.v1alpha2.ReopenContainerLogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:runtime.v1alpha2.ReopenContainerLogResponse)
    MergeFrom(*source);
  }
}

void ReopenContainerLogResponse::MergeFrom(const ReopenContainerLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:runtime.v1alpha2.ReopenContainerLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReopenContainerLogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:runtime.v1alpha2.ReopenContainerLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReopenContainerLogResponse::CopyFrom(const ReopenContainerLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runtime.v1alpha2.ReopenContainerLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReopenContainerLogResponse::IsInitialized() const {
  return true;
}

void ReopenContainerLogResponse::InternalSwap(ReopenContainerLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReopenContainerLogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha2
}  // namespace runtime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::VersionRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::VersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::VersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::VersionResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::VersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::VersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::DNSConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::DNSConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::DNSConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PortMapping* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PortMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PortMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Mount* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Mount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Mount >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::NamespaceOption* Arena::CreateMaybeMessage< ::runtime::v1alpha2::NamespaceOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::NamespaceOption >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Int64Value* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Int64Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Int64Value >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxSandboxSecurityContext* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxSandboxSecurityContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxSandboxSecurityContext >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxPodSandboxConfig_SysctlsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxPodSandboxConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxPodSandboxConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxPodSandboxConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxMetadata* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxConfig_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxConfig_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RunPodSandboxRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RunPodSandboxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RunPodSandboxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RunPodSandboxResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RunPodSandboxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RunPodSandboxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StopPodSandboxRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StopPodSandboxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StopPodSandboxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StopPodSandboxResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StopPodSandboxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StopPodSandboxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemovePodSandboxRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemovePodSandboxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemovePodSandboxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemovePodSandboxResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemovePodSandboxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemovePodSandboxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatusRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodIP* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodIP >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxNetworkStatus* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxNetworkStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxNetworkStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Namespace* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Namespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Namespace >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxPodSandboxStatus* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxPodSandboxStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxPodSandboxStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatus_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatus_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatus* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatusResponse_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStatusResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxStateValue* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxStateValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxStateValue >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxFilter_LabelSelectorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandboxFilter* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandboxFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandboxFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListPodSandboxRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListPodSandboxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListPodSandboxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandbox_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandbox_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PodSandbox* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PodSandbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PodSandbox >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListPodSandboxResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListPodSandboxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListPodSandboxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageSpec_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageSpec* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::KeyValue* Arena::CreateMaybeMessage< ::runtime::v1alpha2::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxContainerResources* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxContainerResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxContainerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::HugepageLimit* Arena::CreateMaybeMessage< ::runtime::v1alpha2::HugepageLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::HugepageLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::SELinuxOption* Arena::CreateMaybeMessage< ::runtime::v1alpha2::SELinuxOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::SELinuxOption >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Capability* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Capability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxContainerSecurityContext* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxContainerSecurityContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxContainerSecurityContext >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::LinuxContainerConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::LinuxContainerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::LinuxContainerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::WindowsContainerSecurityContext* Arena::CreateMaybeMessage< ::runtime::v1alpha2::WindowsContainerSecurityContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::WindowsContainerSecurityContext >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::WindowsContainerConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::WindowsContainerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::WindowsContainerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::WindowsContainerResources* Arena::CreateMaybeMessage< ::runtime::v1alpha2::WindowsContainerResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::WindowsContainerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerMetadata* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Device* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerConfig_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerConfig_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::CreateContainerRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::CreateContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::CreateContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::CreateContainerResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::CreateContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::CreateContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StartContainerRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StartContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StartContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StartContainerResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StartContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StartContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StopContainerRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StopContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StopContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StopContainerResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StopContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StopContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemoveContainerRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemoveContainerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemoveContainerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemoveContainerResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemoveContainerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemoveContainerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStateValue* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStateValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStateValue >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerFilter_LabelSelectorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerFilter* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListContainersRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListContainersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListContainersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Container_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Container_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Container* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Container >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListContainersResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListContainersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListContainersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatusRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatus_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatus_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatus* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatusResponse_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatusResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::UpdateContainerResourcesRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::UpdateContainerResourcesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::UpdateContainerResourcesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::UpdateContainerResourcesResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::UpdateContainerResourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::UpdateContainerResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ExecSyncRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ExecSyncRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ExecSyncRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ExecSyncResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ExecSyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ExecSyncResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ExecRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ExecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ExecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ExecResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ExecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ExecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::AttachRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::AttachRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::AttachRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::AttachResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::AttachResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::AttachResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PortForwardRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PortForwardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PortForwardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PortForwardResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PortForwardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PortForwardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageFilter* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListImagesRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListImagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListImagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::Image* Arena::CreateMaybeMessage< ::runtime::v1alpha2::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListImagesResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListImagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListImagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageStatusRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageStatusResponse_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageStatusResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::AuthConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::AuthConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::AuthConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PullImageRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PullImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PullImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::PullImageResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::PullImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::PullImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemoveImageRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemoveImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemoveImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RemoveImageResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RemoveImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RemoveImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::NetworkConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::NetworkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::NetworkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RuntimeConfig* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RuntimeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RuntimeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::UpdateRuntimeConfigRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::UpdateRuntimeConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::UpdateRuntimeConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::UpdateRuntimeConfigResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::UpdateRuntimeConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::UpdateRuntimeConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RuntimeCondition* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RuntimeCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RuntimeCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::RuntimeStatus* Arena::CreateMaybeMessage< ::runtime::v1alpha2::RuntimeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::RuntimeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StatusRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StatusResponse_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::StatusResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageFsInfoRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageFsInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageFsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::UInt64Value* Arena::CreateMaybeMessage< ::runtime::v1alpha2::UInt64Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::UInt64Value >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::FilesystemIdentifier* Arena::CreateMaybeMessage< ::runtime::v1alpha2::FilesystemIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::FilesystemIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::FilesystemUsage* Arena::CreateMaybeMessage< ::runtime::v1alpha2::FilesystemUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::FilesystemUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ImageFsInfoResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ImageFsInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ImageFsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatsRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatsResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListContainerStatsRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListContainerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListContainerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatsFilter_LabelSelectorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStatsFilter* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStatsFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStatsFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ListContainerStatsResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ListContainerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ListContainerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerAttributes_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerAttributes_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerAttributes* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ContainerStats* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ContainerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ContainerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::CpuUsage* Arena::CreateMaybeMessage< ::runtime::v1alpha2::CpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::CpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::MemoryUsage* Arena::CreateMaybeMessage< ::runtime::v1alpha2::MemoryUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::MemoryUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ReopenContainerLogRequest* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ReopenContainerLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ReopenContainerLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::runtime::v1alpha2::ReopenContainerLogResponse* Arena::CreateMaybeMessage< ::runtime::v1alpha2::ReopenContainerLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runtime::v1alpha2::ReopenContainerLogResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
