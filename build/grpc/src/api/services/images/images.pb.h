// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: images.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_images_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_images_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_images_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_images_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_images_2eproto;
namespace images {
class DeleteImageRequest;
class DeleteImageRequestDefaultTypeInternal;
extern DeleteImageRequestDefaultTypeInternal _DeleteImageRequest_default_instance_;
class DeleteImageResponse;
class DeleteImageResponseDefaultTypeInternal;
extern DeleteImageResponseDefaultTypeInternal _DeleteImageResponse_default_instance_;
class Descriptor;
class DescriptorDefaultTypeInternal;
extern DescriptorDefaultTypeInternal _Descriptor_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Image_LabelsEntry_DoNotUse;
class Image_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Image_LabelsEntry_DoNotUseDefaultTypeInternal _Image_LabelsEntry_DoNotUse_default_instance_;
class ImportRequest;
class ImportRequestDefaultTypeInternal;
extern ImportRequestDefaultTypeInternal _ImportRequest_default_instance_;
class ImportResponse;
class ImportResponseDefaultTypeInternal;
extern ImportResponseDefaultTypeInternal _ImportResponse_default_instance_;
class InspectImageRequest;
class InspectImageRequestDefaultTypeInternal;
extern InspectImageRequestDefaultTypeInternal _InspectImageRequest_default_instance_;
class InspectImageResponse;
class InspectImageResponseDefaultTypeInternal;
extern InspectImageResponseDefaultTypeInternal _InspectImageResponse_default_instance_;
class ListImagesRequest;
class ListImagesRequestDefaultTypeInternal;
extern ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
class ListImagesRequest_FiltersEntry_DoNotUse;
class ListImagesRequest_FiltersEntry_DoNotUseDefaultTypeInternal;
extern ListImagesRequest_FiltersEntry_DoNotUseDefaultTypeInternal _ListImagesRequest_FiltersEntry_DoNotUse_default_instance_;
class ListImagesResponse;
class ListImagesResponseDefaultTypeInternal;
extern ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
class LoadImageRequest;
class LoadImageRequestDefaultTypeInternal;
extern LoadImageRequestDefaultTypeInternal _LoadImageRequest_default_instance_;
class LoadImageResponse;
class LoadImageResponseDefaultTypeInternal;
extern LoadImageResponseDefaultTypeInternal _LoadImageResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class TagImageRequest;
class TagImageRequestDefaultTypeInternal;
extern TagImageRequestDefaultTypeInternal _TagImageRequest_default_instance_;
class TagImageResponse;
class TagImageResponseDefaultTypeInternal;
extern TagImageResponseDefaultTypeInternal _TagImageResponse_default_instance_;
}  // namespace images
PROTOBUF_NAMESPACE_OPEN
template<> ::images::DeleteImageRequest* Arena::CreateMaybeMessage<::images::DeleteImageRequest>(Arena*);
template<> ::images::DeleteImageResponse* Arena::CreateMaybeMessage<::images::DeleteImageResponse>(Arena*);
template<> ::images::Descriptor* Arena::CreateMaybeMessage<::images::Descriptor>(Arena*);
template<> ::images::Image* Arena::CreateMaybeMessage<::images::Image>(Arena*);
template<> ::images::Image_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::images::Image_LabelsEntry_DoNotUse>(Arena*);
template<> ::images::ImportRequest* Arena::CreateMaybeMessage<::images::ImportRequest>(Arena*);
template<> ::images::ImportResponse* Arena::CreateMaybeMessage<::images::ImportResponse>(Arena*);
template<> ::images::InspectImageRequest* Arena::CreateMaybeMessage<::images::InspectImageRequest>(Arena*);
template<> ::images::InspectImageResponse* Arena::CreateMaybeMessage<::images::InspectImageResponse>(Arena*);
template<> ::images::ListImagesRequest* Arena::CreateMaybeMessage<::images::ListImagesRequest>(Arena*);
template<> ::images::ListImagesRequest_FiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::images::ListImagesRequest_FiltersEntry_DoNotUse>(Arena*);
template<> ::images::ListImagesResponse* Arena::CreateMaybeMessage<::images::ListImagesResponse>(Arena*);
template<> ::images::LoadImageRequest* Arena::CreateMaybeMessage<::images::LoadImageRequest>(Arena*);
template<> ::images::LoadImageResponse* Arena::CreateMaybeMessage<::images::LoadImageResponse>(Arena*);
template<> ::images::LoginRequest* Arena::CreateMaybeMessage<::images::LoginRequest>(Arena*);
template<> ::images::LoginResponse* Arena::CreateMaybeMessage<::images::LoginResponse>(Arena*);
template<> ::images::LogoutRequest* Arena::CreateMaybeMessage<::images::LogoutRequest>(Arena*);
template<> ::images::LogoutResponse* Arena::CreateMaybeMessage<::images::LogoutResponse>(Arena*);
template<> ::images::TagImageRequest* Arena::CreateMaybeMessage<::images::TagImageRequest>(Arena*);
template<> ::images::TagImageResponse* Arena::CreateMaybeMessage<::images::TagImageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace images {

// ===================================================================

class Descriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.Descriptor) */ {
 public:
  inline Descriptor() : Descriptor(nullptr) {};
  virtual ~Descriptor();

  Descriptor(const Descriptor& from);
  Descriptor(Descriptor&& from) noexcept
    : Descriptor() {
    *this = ::std::move(from);
  }

  inline Descriptor& operator=(const Descriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Descriptor& operator=(Descriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Descriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Descriptor* internal_default_instance() {
    return reinterpret_cast<const Descriptor*>(
               &_Descriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Descriptor& a, Descriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(Descriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Descriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Descriptor* New() const final {
    return CreateMaybeMessage<Descriptor>(nullptr);
  }

  Descriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Descriptor>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Descriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.Descriptor";
  }
  protected:
  explicit Descriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaTypeFieldNumber = 1,
    kDigestFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string media_type = 1;
  void clear_media_type();
  const std::string& media_type() const;
  void set_media_type(const std::string& value);
  void set_media_type(std::string&& value);
  void set_media_type(const char* value);
  void set_media_type(const char* value, size_t size);
  std::string* mutable_media_type();
  std::string* release_media_type();
  void set_allocated_media_type(std::string* media_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_type(
      std::string* media_type);
  private:
  const std::string& _internal_media_type() const;
  void _internal_set_media_type(const std::string& value);
  std::string* _internal_mutable_media_type();
  public:

  // string digest = 2;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_digest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_digest(
      std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:images.Descriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class Image_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Image_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Image_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Image_LabelsEntry_DoNotUse();
  Image_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Image_LabelsEntry_DoNotUse& other);
  static const Image_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Image_LabelsEntry_DoNotUse*>(&_Image_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "images.Image.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "images.Image.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.Image) */ {
 public:
  inline Image() : Image(nullptr) {};
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kNameFieldNumber = 1,
    kTargetFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
  };
  // map<string, string> labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .images.Descriptor target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::images::Descriptor& target() const;
  ::images::Descriptor* release_target();
  ::images::Descriptor* mutable_target();
  void set_allocated_target(::images::Descriptor* target);
  private:
  const ::images::Descriptor& _internal_target() const;
  ::images::Descriptor* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::images::Descriptor* target);
  ::images::Descriptor* unsafe_arena_release_target();

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // @@protoc_insertion_point(class_scope:images.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Image_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::images::Descriptor* target_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ListImagesRequest_FiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListImagesRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListImagesRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ListImagesRequest_FiltersEntry_DoNotUse();
  ListImagesRequest_FiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListImagesRequest_FiltersEntry_DoNotUse& other);
  static const ListImagesRequest_FiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListImagesRequest_FiltersEntry_DoNotUse*>(&_ListImagesRequest_FiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "images.ListImagesRequest.FiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "images.ListImagesRequest.FiltersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ListImagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.ListImagesRequest) */ {
 public:
  inline ListImagesRequest() : ListImagesRequest(nullptr) {};
  virtual ~ListImagesRequest();

  ListImagesRequest(const ListImagesRequest& from);
  ListImagesRequest(ListImagesRequest&& from) noexcept
    : ListImagesRequest() {
    *this = ::std::move(from);
  }

  inline ListImagesRequest& operator=(const ListImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesRequest& operator=(ListImagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListImagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListImagesRequest*>(
               &_ListImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListImagesRequest& a, ListImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesRequest* New() const final {
    return CreateMaybeMessage<ListImagesRequest>(nullptr);
  }

  ListImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.ListImagesRequest";
  }
  protected:
  explicit ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // map<string, string> filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_filters();

  // @@protoc_insertion_point(class_scope:images.ListImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListImagesRequest_FiltersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ListImagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.ListImagesResponse) */ {
 public:
  inline ListImagesResponse() : ListImagesResponse(nullptr) {};
  virtual ~ListImagesResponse();

  ListImagesResponse(const ListImagesResponse& from);
  ListImagesResponse(ListImagesResponse&& from) noexcept
    : ListImagesResponse() {
    *this = ::std::move(from);
  }

  inline ListImagesResponse& operator=(const ListImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesResponse& operator=(ListImagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListImagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListImagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListImagesResponse*>(
               &_ListImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListImagesResponse& a, ListImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListImagesResponse* New() const final {
    return CreateMaybeMessage<ListImagesResponse>(nullptr);
  }

  ListImagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListImagesResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.ListImagesResponse";
  }
  protected:
  explicit ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // repeated .images.Image images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::images::Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::images::Image >*
      mutable_images();
  private:
  const ::images::Image& _internal_images(int index) const;
  ::images::Image* _internal_add_images();
  public:
  const ::images::Image& images(int index) const;
  ::images::Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::images::Image >&
      images() const;

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.ListImagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::images::Image > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class DeleteImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.DeleteImageRequest) */ {
 public:
  inline DeleteImageRequest() : DeleteImageRequest(nullptr) {};
  virtual ~DeleteImageRequest();

  DeleteImageRequest(const DeleteImageRequest& from);
  DeleteImageRequest(DeleteImageRequest&& from) noexcept
    : DeleteImageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteImageRequest& operator=(const DeleteImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteImageRequest& operator=(DeleteImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteImageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteImageRequest*>(
               &_DeleteImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteImageRequest& a, DeleteImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteImageRequest* New() const final {
    return CreateMaybeMessage<DeleteImageRequest>(nullptr);
  }

  DeleteImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteImageRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.DeleteImageRequest";
  }
  protected:
  explicit DeleteImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:images.DeleteImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class DeleteImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.DeleteImageResponse) */ {
 public:
  inline DeleteImageResponse() : DeleteImageResponse(nullptr) {};
  virtual ~DeleteImageResponse();

  DeleteImageResponse(const DeleteImageResponse& from);
  DeleteImageResponse(DeleteImageResponse&& from) noexcept
    : DeleteImageResponse() {
    *this = ::std::move(from);
  }

  inline DeleteImageResponse& operator=(const DeleteImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteImageResponse& operator=(DeleteImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteImageResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteImageResponse*>(
               &_DeleteImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteImageResponse& a, DeleteImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteImageResponse* New() const final {
    return CreateMaybeMessage<DeleteImageResponse>(nullptr);
  }

  DeleteImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteImageResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.DeleteImageResponse";
  }
  protected:
  explicit DeleteImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.DeleteImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class TagImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.TagImageRequest) */ {
 public:
  inline TagImageRequest() : TagImageRequest(nullptr) {};
  virtual ~TagImageRequest();

  TagImageRequest(const TagImageRequest& from);
  TagImageRequest(TagImageRequest&& from) noexcept
    : TagImageRequest() {
    *this = ::std::move(from);
  }

  inline TagImageRequest& operator=(const TagImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagImageRequest& operator=(TagImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagImageRequest* internal_default_instance() {
    return reinterpret_cast<const TagImageRequest*>(
               &_TagImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TagImageRequest& a, TagImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TagImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagImageRequest* New() const final {
    return CreateMaybeMessage<TagImageRequest>(nullptr);
  }

  TagImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagImageRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.TagImageRequest";
  }
  protected:
  explicit TagImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcNameFieldNumber = 1,
    kDestNameFieldNumber = 2,
  };
  // string src_name = 1;
  void clear_src_name();
  const std::string& src_name() const;
  void set_src_name(const std::string& value);
  void set_src_name(std::string&& value);
  void set_src_name(const char* value);
  void set_src_name(const char* value, size_t size);
  std::string* mutable_src_name();
  std::string* release_src_name();
  void set_allocated_src_name(std::string* src_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src_name(
      std::string* src_name);
  private:
  const std::string& _internal_src_name() const;
  void _internal_set_src_name(const std::string& value);
  std::string* _internal_mutable_src_name();
  public:

  // string dest_name = 2;
  void clear_dest_name();
  const std::string& dest_name() const;
  void set_dest_name(const std::string& value);
  void set_dest_name(std::string&& value);
  void set_dest_name(const char* value);
  void set_dest_name(const char* value, size_t size);
  std::string* mutable_dest_name();
  std::string* release_dest_name();
  void set_allocated_dest_name(std::string* dest_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dest_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dest_name(
      std::string* dest_name);
  private:
  const std::string& _internal_dest_name() const;
  void _internal_set_dest_name(const std::string& value);
  std::string* _internal_mutable_dest_name();
  public:

  // @@protoc_insertion_point(class_scope:images.TagImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class TagImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.TagImageResponse) */ {
 public:
  inline TagImageResponse() : TagImageResponse(nullptr) {};
  virtual ~TagImageResponse();

  TagImageResponse(const TagImageResponse& from);
  TagImageResponse(TagImageResponse&& from) noexcept
    : TagImageResponse() {
    *this = ::std::move(from);
  }

  inline TagImageResponse& operator=(const TagImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagImageResponse& operator=(TagImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagImageResponse* internal_default_instance() {
    return reinterpret_cast<const TagImageResponse*>(
               &_TagImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TagImageResponse& a, TagImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TagImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagImageResponse* New() const final {
    return CreateMaybeMessage<TagImageResponse>(nullptr);
  }

  TagImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagImageResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.TagImageResponse";
  }
  protected:
  explicit TagImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.TagImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LoadImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LoadImageRequest) */ {
 public:
  inline LoadImageRequest() : LoadImageRequest(nullptr) {};
  virtual ~LoadImageRequest();

  LoadImageRequest(const LoadImageRequest& from);
  LoadImageRequest(LoadImageRequest&& from) noexcept
    : LoadImageRequest() {
    *this = ::std::move(from);
  }

  inline LoadImageRequest& operator=(const LoadImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadImageRequest& operator=(LoadImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadImageRequest* internal_default_instance() {
    return reinterpret_cast<const LoadImageRequest*>(
               &_LoadImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoadImageRequest& a, LoadImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadImageRequest* New() const final {
    return CreateMaybeMessage<LoadImageRequest>(nullptr);
  }

  LoadImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadImageRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LoadImageRequest";
  }
  protected:
  explicit LoadImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string tag = 3;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:images.LoadImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LoadImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LoadImageResponse) */ {
 public:
  inline LoadImageResponse() : LoadImageResponse(nullptr) {};
  virtual ~LoadImageResponse();

  LoadImageResponse(const LoadImageResponse& from);
  LoadImageResponse(LoadImageResponse&& from) noexcept
    : LoadImageResponse() {
    *this = ::std::move(from);
  }

  inline LoadImageResponse& operator=(const LoadImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadImageResponse& operator=(LoadImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadImageResponse* internal_default_instance() {
    return reinterpret_cast<const LoadImageResponse*>(
               &_LoadImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoadImageResponse& a, LoadImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadImageResponse* New() const final {
    return CreateMaybeMessage<LoadImageResponse>(nullptr);
  }

  LoadImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadImageResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LoadImageResponse";
  }
  protected:
  explicit LoadImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.LoadImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ImportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.ImportRequest) */ {
 public:
  inline ImportRequest() : ImportRequest(nullptr) {};
  virtual ~ImportRequest();

  ImportRequest(const ImportRequest& from);
  ImportRequest(ImportRequest&& from) noexcept
    : ImportRequest() {
    *this = ::std::move(from);
  }

  inline ImportRequest& operator=(const ImportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportRequest& operator=(ImportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportRequest* internal_default_instance() {
    return reinterpret_cast<const ImportRequest*>(
               &_ImportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ImportRequest& a, ImportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportRequest* New() const final {
    return CreateMaybeMessage<ImportRequest>(nullptr);
  }

  ImportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.ImportRequest";
  }
  protected:
  explicit ImportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:images.ImportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class ImportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.ImportResponse) */ {
 public:
  inline ImportResponse() : ImportResponse(nullptr) {};
  virtual ~ImportResponse();

  ImportResponse(const ImportResponse& from);
  ImportResponse(ImportResponse&& from) noexcept
    : ImportResponse() {
    *this = ::std::move(from);
  }

  inline ImportResponse& operator=(const ImportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportResponse& operator=(ImportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportResponse* internal_default_instance() {
    return reinterpret_cast<const ImportResponse*>(
               &_ImportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ImportResponse& a, ImportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportResponse* New() const final {
    return CreateMaybeMessage<ImportResponse>(nullptr);
  }

  ImportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.ImportResponse";
  }
  protected:
  explicit ImportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.ImportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class InspectImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.InspectImageRequest) */ {
 public:
  inline InspectImageRequest() : InspectImageRequest(nullptr) {};
  virtual ~InspectImageRequest();

  InspectImageRequest(const InspectImageRequest& from);
  InspectImageRequest(InspectImageRequest&& from) noexcept
    : InspectImageRequest() {
    *this = ::std::move(from);
  }

  inline InspectImageRequest& operator=(const InspectImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectImageRequest& operator=(InspectImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectImageRequest* internal_default_instance() {
    return reinterpret_cast<const InspectImageRequest*>(
               &_InspectImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InspectImageRequest& a, InspectImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectImageRequest* New() const final {
    return CreateMaybeMessage<InspectImageRequest>(nullptr);
  }

  InspectImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectImageRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.InspectImageRequest";
  }
  protected:
  explicit InspectImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBformatFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool bformat = 2;
  void clear_bformat();
  bool bformat() const;
  void set_bformat(bool value);
  private:
  bool _internal_bformat() const;
  void _internal_set_bformat(bool value);
  public:

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.InspectImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool bformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class InspectImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.InspectImageResponse) */ {
 public:
  inline InspectImageResponse() : InspectImageResponse(nullptr) {};
  virtual ~InspectImageResponse();

  InspectImageResponse(const InspectImageResponse& from);
  InspectImageResponse(InspectImageResponse&& from) noexcept
    : InspectImageResponse() {
    *this = ::std::move(from);
  }

  inline InspectImageResponse& operator=(const InspectImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectImageResponse& operator=(InspectImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectImageResponse* internal_default_instance() {
    return reinterpret_cast<const InspectImageResponse*>(
               &_InspectImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InspectImageResponse& a, InspectImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectImageResponse* New() const final {
    return CreateMaybeMessage<InspectImageResponse>(nullptr);
  }

  InspectImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectImageResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.InspectImageResponse";
  }
  protected:
  explicit InspectImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageJSONFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string ImageJSON = 1;
  void clear_imagejson();
  const std::string& imagejson() const;
  void set_imagejson(const std::string& value);
  void set_imagejson(std::string&& value);
  void set_imagejson(const char* value);
  void set_imagejson(const char* value, size_t size);
  std::string* mutable_imagejson();
  std::string* release_imagejson();
  void set_allocated_imagejson(std::string* imagejson);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagejson();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagejson(
      std::string* imagejson);
  private:
  const std::string& _internal_imagejson() const;
  void _internal_set_imagejson(const std::string& value);
  std::string* _internal_mutable_imagejson();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.InspectImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagejson_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {};
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kServerFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string server = 3;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:images.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {};
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LogoutRequest) */ {
 public:
  inline LogoutRequest() : LogoutRequest(nullptr) {};
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LogoutRequest";
  }
  protected:
  explicit LogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string server = 1;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:images.LogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:images.LogoutResponse) */ {
 public:
  inline LogoutResponse() : LogoutResponse(nullptr) {};
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const final {
    return CreateMaybeMessage<LogoutResponse>(nullptr);
  }

  LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "images.LogoutResponse";
  }
  protected:
  explicit LogoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_images_2eproto);
    return ::descriptor_table_images_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kCcFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 1;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:images.LogoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_images_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Descriptor

// string media_type = 1;
inline void Descriptor::clear_media_type() {
  media_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Descriptor::media_type() const {
  // @@protoc_insertion_point(field_get:images.Descriptor.media_type)
  return _internal_media_type();
}
inline void Descriptor::set_media_type(const std::string& value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:images.Descriptor.media_type)
}
inline std::string* Descriptor::mutable_media_type() {
  // @@protoc_insertion_point(field_mutable:images.Descriptor.media_type)
  return _internal_mutable_media_type();
}
inline const std::string& Descriptor::_internal_media_type() const {
  return media_type_.Get();
}
inline void Descriptor::_internal_set_media_type(const std::string& value) {
  
  media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Descriptor::set_media_type(std::string&& value) {
  
  media_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.Descriptor.media_type)
}
inline void Descriptor::set_media_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.Descriptor.media_type)
}
inline void Descriptor::set_media_type(const char* value,
    size_t size) {
  
  media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.Descriptor.media_type)
}
inline std::string* Descriptor::_internal_mutable_media_type() {
  
  return media_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Descriptor::release_media_type() {
  // @@protoc_insertion_point(field_release:images.Descriptor.media_type)
  return media_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Descriptor::set_allocated_media_type(std::string* media_type) {
  if (media_type != nullptr) {
    
  } else {
    
  }
  media_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.Descriptor.media_type)
}
inline std::string* Descriptor::unsafe_arena_release_media_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.Descriptor.media_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return media_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Descriptor::unsafe_arena_set_allocated_media_type(
    std::string* media_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (media_type != nullptr) {
    
  } else {
    
  }
  media_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Descriptor.media_type)
}

// string digest = 2;
inline void Descriptor::clear_digest() {
  digest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Descriptor::digest() const {
  // @@protoc_insertion_point(field_get:images.Descriptor.digest)
  return _internal_digest();
}
inline void Descriptor::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:images.Descriptor.digest)
}
inline std::string* Descriptor::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:images.Descriptor.digest)
  return _internal_mutable_digest();
}
inline const std::string& Descriptor::_internal_digest() const {
  return digest_.Get();
}
inline void Descriptor::_internal_set_digest(const std::string& value) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Descriptor::set_digest(std::string&& value) {
  
  digest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.Descriptor.digest)
}
inline void Descriptor::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.Descriptor.digest)
}
inline void Descriptor::set_digest(const char* value,
    size_t size) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.Descriptor.digest)
}
inline std::string* Descriptor::_internal_mutable_digest() {
  
  return digest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Descriptor::release_digest() {
  // @@protoc_insertion_point(field_release:images.Descriptor.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Descriptor::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.Descriptor.digest)
}
inline std::string* Descriptor::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.Descriptor.digest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return digest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Descriptor::unsafe_arena_set_allocated_digest(
    std::string* digest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      digest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Descriptor.digest)
}

// int64 size = 3;
inline void Descriptor::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Descriptor::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Descriptor::size() const {
  // @@protoc_insertion_point(field_get:images.Descriptor.size)
  return _internal_size();
}
inline void Descriptor::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Descriptor::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:images.Descriptor.size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Image

// string name = 1;
inline void Image::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:images.Image.name)
  return _internal_name();
}
inline void Image::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:images.Image.name)
}
inline std::string* Image::mutable_name() {
  // @@protoc_insertion_point(field_mutable:images.Image.name)
  return _internal_mutable_name();
}
inline const std::string& Image::_internal_name() const {
  return name_.Get();
}
inline void Image::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.Image.name)
}
inline void Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.Image.name)
}
inline void Image::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.Image.name)
}
inline std::string* Image::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_name() {
  // @@protoc_insertion_point(field_release:images.Image.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.Image.name)
}
inline std::string* Image::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.Image.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Image::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Image.name)
}

// map<string, string> labels = 2;
inline int Image::_internal_labels_size() const {
  return labels_.size();
}
inline int Image::labels_size() const {
  return _internal_labels_size();
}
inline void Image::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Image::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Image::labels() const {
  // @@protoc_insertion_point(field_map:images.Image.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Image::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Image::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:images.Image.labels)
  return _internal_mutable_labels();
}

// .images.Descriptor target = 3;
inline bool Image::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool Image::has_target() const {
  return _internal_has_target();
}
inline void Image::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::images::Descriptor& Image::_internal_target() const {
  const ::images::Descriptor* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::images::Descriptor*>(
      &::images::_Descriptor_default_instance_);
}
inline const ::images::Descriptor& Image::target() const {
  // @@protoc_insertion_point(field_get:images.Image.target)
  return _internal_target();
}
inline void Image::unsafe_arena_set_allocated_target(
    ::images::Descriptor* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Image.target)
}
inline ::images::Descriptor* Image::release_target() {
  auto temp = unsafe_arena_release_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::images::Descriptor* Image::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:images.Image.target)
  
  ::images::Descriptor* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::images::Descriptor* Image::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::images::Descriptor>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::images::Descriptor* Image::mutable_target() {
  // @@protoc_insertion_point(field_mutable:images.Image.target)
  return _internal_mutable_target();
}
inline void Image::set_allocated_target(::images::Descriptor* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:images.Image.target)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Image::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Image::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::created_at() const {
  // @@protoc_insertion_point(field_get:images.Image.created_at)
  return _internal_created_at();
}
inline void Image::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Image.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:images.Image.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:images.Image.created_at)
  return _internal_mutable_created_at();
}
inline void Image::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:images.Image.created_at)
}

// .google.protobuf.Timestamp updated_at = 5;
inline bool Image::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Image::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Image::updated_at() const {
  // @@protoc_insertion_point(field_get:images.Image.updated_at)
  return _internal_updated_at();
}
inline void Image::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.Image.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::release_updated_at() {
  auto temp = unsafe_arena_release_updated_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:images.Image.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Image::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:images.Image.updated_at)
  return _internal_mutable_updated_at();
}
inline void Image::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:images.Image.updated_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListImagesRequest

// map<string, string> filters = 1;
inline int ListImagesRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int ListImagesRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ListImagesRequest::clear_filters() {
  filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListImagesRequest::_internal_filters() const {
  return filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListImagesRequest::filters() const {
  // @@protoc_insertion_point(field_map:images.ListImagesRequest.filters)
  return _internal_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListImagesRequest::_internal_mutable_filters() {
  return filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListImagesRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:images.ListImagesRequest.filters)
  return _internal_mutable_filters();
}

// -------------------------------------------------------------------

// ListImagesResponse

// repeated .images.Image images = 1;
inline int ListImagesResponse::_internal_images_size() const {
  return images_.size();
}
inline int ListImagesResponse::images_size() const {
  return _internal_images_size();
}
inline void ListImagesResponse::clear_images() {
  images_.Clear();
}
inline ::images::Image* ListImagesResponse::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:images.ListImagesResponse.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::images::Image >*
ListImagesResponse::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:images.ListImagesResponse.images)
  return &images_;
}
inline const ::images::Image& ListImagesResponse::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::images::Image& ListImagesResponse::images(int index) const {
  // @@protoc_insertion_point(field_get:images.ListImagesResponse.images)
  return _internal_images(index);
}
inline ::images::Image* ListImagesResponse::_internal_add_images() {
  return images_.Add();
}
inline ::images::Image* ListImagesResponse::add_images() {
  // @@protoc_insertion_point(field_add:images.ListImagesResponse.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::images::Image >&
ListImagesResponse::images() const {
  // @@protoc_insertion_point(field_list:images.ListImagesResponse.images)
  return images_;
}

// uint32 cc = 2;
inline void ListImagesResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListImagesResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListImagesResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.ListImagesResponse.cc)
  return _internal_cc();
}
inline void ListImagesResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ListImagesResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.ListImagesResponse.cc)
}

// string errmsg = 3;
inline void ListImagesResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListImagesResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.ListImagesResponse.errmsg)
  return _internal_errmsg();
}
inline void ListImagesResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.ListImagesResponse.errmsg)
}
inline std::string* ListImagesResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.ListImagesResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ListImagesResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ListImagesResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListImagesResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.ListImagesResponse.errmsg)
}
inline void ListImagesResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.ListImagesResponse.errmsg)
}
inline void ListImagesResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.ListImagesResponse.errmsg)
}
inline std::string* ListImagesResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListImagesResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.ListImagesResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListImagesResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.ListImagesResponse.errmsg)
}
inline std::string* ListImagesResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.ListImagesResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListImagesResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.ListImagesResponse.errmsg)
}

// -------------------------------------------------------------------

// DeleteImageRequest

// string name = 1;
inline void DeleteImageRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteImageRequest::name() const {
  // @@protoc_insertion_point(field_get:images.DeleteImageRequest.name)
  return _internal_name();
}
inline void DeleteImageRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:images.DeleteImageRequest.name)
}
inline std::string* DeleteImageRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:images.DeleteImageRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteImageRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteImageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteImageRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.DeleteImageRequest.name)
}
inline void DeleteImageRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.DeleteImageRequest.name)
}
inline void DeleteImageRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.DeleteImageRequest.name)
}
inline std::string* DeleteImageRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteImageRequest::release_name() {
  // @@protoc_insertion_point(field_release:images.DeleteImageRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteImageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.DeleteImageRequest.name)
}
inline std::string* DeleteImageRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.DeleteImageRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteImageRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.DeleteImageRequest.name)
}

// bool force = 2;
inline void DeleteImageRequest::clear_force() {
  force_ = false;
}
inline bool DeleteImageRequest::_internal_force() const {
  return force_;
}
inline bool DeleteImageRequest::force() const {
  // @@protoc_insertion_point(field_get:images.DeleteImageRequest.force)
  return _internal_force();
}
inline void DeleteImageRequest::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void DeleteImageRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:images.DeleteImageRequest.force)
}

// -------------------------------------------------------------------

// DeleteImageResponse

// string name = 1;
inline void DeleteImageResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteImageResponse::name() const {
  // @@protoc_insertion_point(field_get:images.DeleteImageResponse.name)
  return _internal_name();
}
inline void DeleteImageResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:images.DeleteImageResponse.name)
}
inline std::string* DeleteImageResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:images.DeleteImageResponse.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteImageResponse::_internal_name() const {
  return name_.Get();
}
inline void DeleteImageResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteImageResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.DeleteImageResponse.name)
}
inline void DeleteImageResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.DeleteImageResponse.name)
}
inline void DeleteImageResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.DeleteImageResponse.name)
}
inline std::string* DeleteImageResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteImageResponse::release_name() {
  // @@protoc_insertion_point(field_release:images.DeleteImageResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteImageResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.DeleteImageResponse.name)
}
inline std::string* DeleteImageResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.DeleteImageResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteImageResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.DeleteImageResponse.name)
}

// uint32 cc = 2;
inline void DeleteImageResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteImageResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteImageResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.DeleteImageResponse.cc)
  return _internal_cc();
}
inline void DeleteImageResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void DeleteImageResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.DeleteImageResponse.cc)
}

// string errmsg = 3;
inline void DeleteImageResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteImageResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.DeleteImageResponse.errmsg)
  return _internal_errmsg();
}
inline void DeleteImageResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.DeleteImageResponse.errmsg)
}
inline std::string* DeleteImageResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.DeleteImageResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& DeleteImageResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void DeleteImageResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteImageResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.DeleteImageResponse.errmsg)
}
inline void DeleteImageResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.DeleteImageResponse.errmsg)
}
inline void DeleteImageResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.DeleteImageResponse.errmsg)
}
inline std::string* DeleteImageResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteImageResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.DeleteImageResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteImageResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.DeleteImageResponse.errmsg)
}
inline std::string* DeleteImageResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.DeleteImageResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteImageResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.DeleteImageResponse.errmsg)
}

// -------------------------------------------------------------------

// TagImageRequest

// string src_name = 1;
inline void TagImageRequest::clear_src_name() {
  src_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagImageRequest::src_name() const {
  // @@protoc_insertion_point(field_get:images.TagImageRequest.src_name)
  return _internal_src_name();
}
inline void TagImageRequest::set_src_name(const std::string& value) {
  _internal_set_src_name(value);
  // @@protoc_insertion_point(field_set:images.TagImageRequest.src_name)
}
inline std::string* TagImageRequest::mutable_src_name() {
  // @@protoc_insertion_point(field_mutable:images.TagImageRequest.src_name)
  return _internal_mutable_src_name();
}
inline const std::string& TagImageRequest::_internal_src_name() const {
  return src_name_.Get();
}
inline void TagImageRequest::_internal_set_src_name(const std::string& value) {
  
  src_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagImageRequest::set_src_name(std::string&& value) {
  
  src_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.TagImageRequest.src_name)
}
inline void TagImageRequest::set_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.TagImageRequest.src_name)
}
inline void TagImageRequest::set_src_name(const char* value,
    size_t size) {
  
  src_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.TagImageRequest.src_name)
}
inline std::string* TagImageRequest::_internal_mutable_src_name() {
  
  return src_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagImageRequest::release_src_name() {
  // @@protoc_insertion_point(field_release:images.TagImageRequest.src_name)
  return src_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagImageRequest::set_allocated_src_name(std::string* src_name) {
  if (src_name != nullptr) {
    
  } else {
    
  }
  src_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.TagImageRequest.src_name)
}
inline std::string* TagImageRequest::unsafe_arena_release_src_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.TagImageRequest.src_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return src_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TagImageRequest::unsafe_arena_set_allocated_src_name(
    std::string* src_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src_name != nullptr) {
    
  } else {
    
  }
  src_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.TagImageRequest.src_name)
}

// string dest_name = 2;
inline void TagImageRequest::clear_dest_name() {
  dest_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagImageRequest::dest_name() const {
  // @@protoc_insertion_point(field_get:images.TagImageRequest.dest_name)
  return _internal_dest_name();
}
inline void TagImageRequest::set_dest_name(const std::string& value) {
  _internal_set_dest_name(value);
  // @@protoc_insertion_point(field_set:images.TagImageRequest.dest_name)
}
inline std::string* TagImageRequest::mutable_dest_name() {
  // @@protoc_insertion_point(field_mutable:images.TagImageRequest.dest_name)
  return _internal_mutable_dest_name();
}
inline const std::string& TagImageRequest::_internal_dest_name() const {
  return dest_name_.Get();
}
inline void TagImageRequest::_internal_set_dest_name(const std::string& value) {
  
  dest_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagImageRequest::set_dest_name(std::string&& value) {
  
  dest_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.TagImageRequest.dest_name)
}
inline void TagImageRequest::set_dest_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.TagImageRequest.dest_name)
}
inline void TagImageRequest::set_dest_name(const char* value,
    size_t size) {
  
  dest_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.TagImageRequest.dest_name)
}
inline std::string* TagImageRequest::_internal_mutable_dest_name() {
  
  return dest_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagImageRequest::release_dest_name() {
  // @@protoc_insertion_point(field_release:images.TagImageRequest.dest_name)
  return dest_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagImageRequest::set_allocated_dest_name(std::string* dest_name) {
  if (dest_name != nullptr) {
    
  } else {
    
  }
  dest_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.TagImageRequest.dest_name)
}
inline std::string* TagImageRequest::unsafe_arena_release_dest_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.TagImageRequest.dest_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dest_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TagImageRequest::unsafe_arena_set_allocated_dest_name(
    std::string* dest_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dest_name != nullptr) {
    
  } else {
    
  }
  dest_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dest_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.TagImageRequest.dest_name)
}

// -------------------------------------------------------------------

// TagImageResponse

// uint32 cc = 1;
inline void TagImageResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TagImageResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TagImageResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.TagImageResponse.cc)
  return _internal_cc();
}
inline void TagImageResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void TagImageResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.TagImageResponse.cc)
}

// string errmsg = 2;
inline void TagImageResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagImageResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.TagImageResponse.errmsg)
  return _internal_errmsg();
}
inline void TagImageResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.TagImageResponse.errmsg)
}
inline std::string* TagImageResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.TagImageResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& TagImageResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void TagImageResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagImageResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.TagImageResponse.errmsg)
}
inline void TagImageResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.TagImageResponse.errmsg)
}
inline void TagImageResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.TagImageResponse.errmsg)
}
inline std::string* TagImageResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagImageResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.TagImageResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagImageResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.TagImageResponse.errmsg)
}
inline std::string* TagImageResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.TagImageResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TagImageResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.TagImageResponse.errmsg)
}

// -------------------------------------------------------------------

// LoadImageRequest

// string file = 1;
inline void LoadImageRequest::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadImageRequest::file() const {
  // @@protoc_insertion_point(field_get:images.LoadImageRequest.file)
  return _internal_file();
}
inline void LoadImageRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:images.LoadImageRequest.file)
}
inline std::string* LoadImageRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:images.LoadImageRequest.file)
  return _internal_mutable_file();
}
inline const std::string& LoadImageRequest::_internal_file() const {
  return file_.Get();
}
inline void LoadImageRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadImageRequest::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoadImageRequest.file)
}
inline void LoadImageRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoadImageRequest.file)
}
inline void LoadImageRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoadImageRequest.file)
}
inline std::string* LoadImageRequest::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadImageRequest::release_file() {
  // @@protoc_insertion_point(field_release:images.LoadImageRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadImageRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoadImageRequest.file)
}
inline std::string* LoadImageRequest::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoadImageRequest.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadImageRequest::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoadImageRequest.file)
}

// string type = 2;
inline void LoadImageRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadImageRequest::type() const {
  // @@protoc_insertion_point(field_get:images.LoadImageRequest.type)
  return _internal_type();
}
inline void LoadImageRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:images.LoadImageRequest.type)
}
inline std::string* LoadImageRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:images.LoadImageRequest.type)
  return _internal_mutable_type();
}
inline const std::string& LoadImageRequest::_internal_type() const {
  return type_.Get();
}
inline void LoadImageRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadImageRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoadImageRequest.type)
}
inline void LoadImageRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoadImageRequest.type)
}
inline void LoadImageRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoadImageRequest.type)
}
inline std::string* LoadImageRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadImageRequest::release_type() {
  // @@protoc_insertion_point(field_release:images.LoadImageRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadImageRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoadImageRequest.type)
}
inline std::string* LoadImageRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoadImageRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadImageRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoadImageRequest.type)
}

// string tag = 3;
inline void LoadImageRequest::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadImageRequest::tag() const {
  // @@protoc_insertion_point(field_get:images.LoadImageRequest.tag)
  return _internal_tag();
}
inline void LoadImageRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:images.LoadImageRequest.tag)
}
inline std::string* LoadImageRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:images.LoadImageRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& LoadImageRequest::_internal_tag() const {
  return tag_.Get();
}
inline void LoadImageRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadImageRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoadImageRequest.tag)
}
inline void LoadImageRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoadImageRequest.tag)
}
inline void LoadImageRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoadImageRequest.tag)
}
inline std::string* LoadImageRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadImageRequest::release_tag() {
  // @@protoc_insertion_point(field_release:images.LoadImageRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadImageRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoadImageRequest.tag)
}
inline std::string* LoadImageRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoadImageRequest.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadImageRequest::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoadImageRequest.tag)
}

// -------------------------------------------------------------------

// LoadImageResponse

// uint32 cc = 1;
inline void LoadImageResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadImageResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadImageResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.LoadImageResponse.cc)
  return _internal_cc();
}
inline void LoadImageResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void LoadImageResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.LoadImageResponse.cc)
}

// string errmsg = 2;
inline void LoadImageResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadImageResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.LoadImageResponse.errmsg)
  return _internal_errmsg();
}
inline void LoadImageResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.LoadImageResponse.errmsg)
}
inline std::string* LoadImageResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.LoadImageResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& LoadImageResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void LoadImageResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadImageResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoadImageResponse.errmsg)
}
inline void LoadImageResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoadImageResponse.errmsg)
}
inline void LoadImageResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoadImageResponse.errmsg)
}
inline std::string* LoadImageResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadImageResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.LoadImageResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadImageResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoadImageResponse.errmsg)
}
inline std::string* LoadImageResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoadImageResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadImageResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoadImageResponse.errmsg)
}

// -------------------------------------------------------------------

// ImportRequest

// string file = 1;
inline void ImportRequest::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImportRequest::file() const {
  // @@protoc_insertion_point(field_get:images.ImportRequest.file)
  return _internal_file();
}
inline void ImportRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:images.ImportRequest.file)
}
inline std::string* ImportRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:images.ImportRequest.file)
  return _internal_mutable_file();
}
inline const std::string& ImportRequest::_internal_file() const {
  return file_.Get();
}
inline void ImportRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImportRequest::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.ImportRequest.file)
}
inline void ImportRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.ImportRequest.file)
}
inline void ImportRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.ImportRequest.file)
}
inline std::string* ImportRequest::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImportRequest::release_file() {
  // @@protoc_insertion_point(field_release:images.ImportRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.ImportRequest.file)
}
inline std::string* ImportRequest::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.ImportRequest.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImportRequest::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.ImportRequest.file)
}

// string tag = 2;
inline void ImportRequest::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImportRequest::tag() const {
  // @@protoc_insertion_point(field_get:images.ImportRequest.tag)
  return _internal_tag();
}
inline void ImportRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:images.ImportRequest.tag)
}
inline std::string* ImportRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:images.ImportRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& ImportRequest::_internal_tag() const {
  return tag_.Get();
}
inline void ImportRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImportRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.ImportRequest.tag)
}
inline void ImportRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.ImportRequest.tag)
}
inline void ImportRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.ImportRequest.tag)
}
inline std::string* ImportRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImportRequest::release_tag() {
  // @@protoc_insertion_point(field_release:images.ImportRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.ImportRequest.tag)
}
inline std::string* ImportRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.ImportRequest.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImportRequest::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.ImportRequest.tag)
}

// -------------------------------------------------------------------

// ImportResponse

// string id = 1;
inline void ImportResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImportResponse::id() const {
  // @@protoc_insertion_point(field_get:images.ImportResponse.id)
  return _internal_id();
}
inline void ImportResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:images.ImportResponse.id)
}
inline std::string* ImportResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:images.ImportResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ImportResponse::_internal_id() const {
  return id_.Get();
}
inline void ImportResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImportResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.ImportResponse.id)
}
inline void ImportResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.ImportResponse.id)
}
inline void ImportResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.ImportResponse.id)
}
inline std::string* ImportResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImportResponse::release_id() {
  // @@protoc_insertion_point(field_release:images.ImportResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.ImportResponse.id)
}
inline std::string* ImportResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.ImportResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImportResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.ImportResponse.id)
}

// uint32 cc = 2;
inline void ImportResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImportResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImportResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.ImportResponse.cc)
  return _internal_cc();
}
inline void ImportResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void ImportResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.ImportResponse.cc)
}

// string errmsg = 3;
inline void ImportResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImportResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.ImportResponse.errmsg)
  return _internal_errmsg();
}
inline void ImportResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.ImportResponse.errmsg)
}
inline std::string* ImportResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.ImportResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ImportResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ImportResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImportResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.ImportResponse.errmsg)
}
inline void ImportResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.ImportResponse.errmsg)
}
inline void ImportResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.ImportResponse.errmsg)
}
inline std::string* ImportResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImportResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.ImportResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.ImportResponse.errmsg)
}
inline std::string* ImportResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.ImportResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImportResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.ImportResponse.errmsg)
}

// -------------------------------------------------------------------

// InspectImageRequest

// string id = 1;
inline void InspectImageRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectImageRequest::id() const {
  // @@protoc_insertion_point(field_get:images.InspectImageRequest.id)
  return _internal_id();
}
inline void InspectImageRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:images.InspectImageRequest.id)
}
inline std::string* InspectImageRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:images.InspectImageRequest.id)
  return _internal_mutable_id();
}
inline const std::string& InspectImageRequest::_internal_id() const {
  return id_.Get();
}
inline void InspectImageRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectImageRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.InspectImageRequest.id)
}
inline void InspectImageRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.InspectImageRequest.id)
}
inline void InspectImageRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.InspectImageRequest.id)
}
inline std::string* InspectImageRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectImageRequest::release_id() {
  // @@protoc_insertion_point(field_release:images.InspectImageRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectImageRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.InspectImageRequest.id)
}
inline std::string* InspectImageRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.InspectImageRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectImageRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.InspectImageRequest.id)
}

// bool bformat = 2;
inline void InspectImageRequest::clear_bformat() {
  bformat_ = false;
}
inline bool InspectImageRequest::_internal_bformat() const {
  return bformat_;
}
inline bool InspectImageRequest::bformat() const {
  // @@protoc_insertion_point(field_get:images.InspectImageRequest.bformat)
  return _internal_bformat();
}
inline void InspectImageRequest::_internal_set_bformat(bool value) {
  
  bformat_ = value;
}
inline void InspectImageRequest::set_bformat(bool value) {
  _internal_set_bformat(value);
  // @@protoc_insertion_point(field_set:images.InspectImageRequest.bformat)
}

// int32 timeout = 3;
inline void InspectImageRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InspectImageRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InspectImageRequest::timeout() const {
  // @@protoc_insertion_point(field_get:images.InspectImageRequest.timeout)
  return _internal_timeout();
}
inline void InspectImageRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void InspectImageRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:images.InspectImageRequest.timeout)
}

// -------------------------------------------------------------------

// InspectImageResponse

// string ImageJSON = 1;
inline void InspectImageResponse::clear_imagejson() {
  imagejson_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectImageResponse::imagejson() const {
  // @@protoc_insertion_point(field_get:images.InspectImageResponse.ImageJSON)
  return _internal_imagejson();
}
inline void InspectImageResponse::set_imagejson(const std::string& value) {
  _internal_set_imagejson(value);
  // @@protoc_insertion_point(field_set:images.InspectImageResponse.ImageJSON)
}
inline std::string* InspectImageResponse::mutable_imagejson() {
  // @@protoc_insertion_point(field_mutable:images.InspectImageResponse.ImageJSON)
  return _internal_mutable_imagejson();
}
inline const std::string& InspectImageResponse::_internal_imagejson() const {
  return imagejson_.Get();
}
inline void InspectImageResponse::_internal_set_imagejson(const std::string& value) {
  
  imagejson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectImageResponse::set_imagejson(std::string&& value) {
  
  imagejson_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.InspectImageResponse.ImageJSON)
}
inline void InspectImageResponse::set_imagejson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagejson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.InspectImageResponse.ImageJSON)
}
inline void InspectImageResponse::set_imagejson(const char* value,
    size_t size) {
  
  imagejson_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.InspectImageResponse.ImageJSON)
}
inline std::string* InspectImageResponse::_internal_mutable_imagejson() {
  
  return imagejson_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectImageResponse::release_imagejson() {
  // @@protoc_insertion_point(field_release:images.InspectImageResponse.ImageJSON)
  return imagejson_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectImageResponse::set_allocated_imagejson(std::string* imagejson) {
  if (imagejson != nullptr) {
    
  } else {
    
  }
  imagejson_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagejson,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.InspectImageResponse.ImageJSON)
}
inline std::string* InspectImageResponse::unsafe_arena_release_imagejson() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.InspectImageResponse.ImageJSON)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagejson_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectImageResponse::unsafe_arena_set_allocated_imagejson(
    std::string* imagejson) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagejson != nullptr) {
    
  } else {
    
  }
  imagejson_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagejson, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.InspectImageResponse.ImageJSON)
}

// uint32 cc = 2;
inline void InspectImageResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectImageResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectImageResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.InspectImageResponse.cc)
  return _internal_cc();
}
inline void InspectImageResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void InspectImageResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.InspectImageResponse.cc)
}

// string errmsg = 3;
inline void InspectImageResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InspectImageResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.InspectImageResponse.errmsg)
  return _internal_errmsg();
}
inline void InspectImageResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.InspectImageResponse.errmsg)
}
inline std::string* InspectImageResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.InspectImageResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& InspectImageResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void InspectImageResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InspectImageResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.InspectImageResponse.errmsg)
}
inline void InspectImageResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.InspectImageResponse.errmsg)
}
inline void InspectImageResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.InspectImageResponse.errmsg)
}
inline std::string* InspectImageResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InspectImageResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.InspectImageResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectImageResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.InspectImageResponse.errmsg)
}
inline std::string* InspectImageResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.InspectImageResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InspectImageResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.InspectImageResponse.errmsg)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:images.LoginRequest.username)
  return _internal_username();
}
inline void LoginRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:images.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:images.LoginRequest.username)
  return _internal_mutable_username();
}
inline const std::string& LoginRequest::_internal_username() const {
  return username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoginRequest.username)
}
inline std::string* LoginRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:images.LoginRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoginRequest.username)
}
inline std::string* LoginRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoginRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoginRequest.username)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:images.LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:images.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:images.LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:images.LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoginRequest.password)
}
inline std::string* LoginRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoginRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoginRequest.password)
}

// string server = 3;
inline void LoginRequest::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::server() const {
  // @@protoc_insertion_point(field_get:images.LoginRequest.server)
  return _internal_server();
}
inline void LoginRequest::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:images.LoginRequest.server)
}
inline std::string* LoginRequest::mutable_server() {
  // @@protoc_insertion_point(field_mutable:images.LoginRequest.server)
  return _internal_mutable_server();
}
inline const std::string& LoginRequest::_internal_server() const {
  return server_.Get();
}
inline void LoginRequest::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoginRequest.server)
}
inline void LoginRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoginRequest.server)
}
inline void LoginRequest::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoginRequest.server)
}
inline std::string* LoginRequest::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_server() {
  // @@protoc_insertion_point(field_release:images.LoginRequest.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoginRequest.server)
}
inline std::string* LoginRequest::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoginRequest.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoginRequest.server)
}

// string type = 4;
inline void LoginRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::type() const {
  // @@protoc_insertion_point(field_get:images.LoginRequest.type)
  return _internal_type();
}
inline void LoginRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:images.LoginRequest.type)
}
inline std::string* LoginRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:images.LoginRequest.type)
  return _internal_mutable_type();
}
inline const std::string& LoginRequest::_internal_type() const {
  return type_.Get();
}
inline void LoginRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoginRequest.type)
}
inline void LoginRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoginRequest.type)
}
inline void LoginRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoginRequest.type)
}
inline std::string* LoginRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_type() {
  // @@protoc_insertion_point(field_release:images.LoginRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoginRequest.type)
}
inline std::string* LoginRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoginRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoginRequest.type)
}

// -------------------------------------------------------------------

// LoginResponse

// uint32 cc = 1;
inline void LoginResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.LoginResponse.cc)
  return _internal_cc();
}
inline void LoginResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void LoginResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.LoginResponse.cc)
}

// string errmsg = 2;
inline void LoginResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.LoginResponse.errmsg)
  return _internal_errmsg();
}
inline void LoginResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.LoginResponse.errmsg)
}
inline std::string* LoginResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.LoginResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& LoginResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void LoginResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LoginResponse.errmsg)
}
inline void LoginResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LoginResponse.errmsg)
}
inline void LoginResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LoginResponse.errmsg)
}
inline std::string* LoginResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.LoginResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LoginResponse.errmsg)
}
inline std::string* LoginResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LoginResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LoginResponse.errmsg)
}

// -------------------------------------------------------------------

// LogoutRequest

// string server = 1;
inline void LogoutRequest::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoutRequest::server() const {
  // @@protoc_insertion_point(field_get:images.LogoutRequest.server)
  return _internal_server();
}
inline void LogoutRequest::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:images.LogoutRequest.server)
}
inline std::string* LogoutRequest::mutable_server() {
  // @@protoc_insertion_point(field_mutable:images.LogoutRequest.server)
  return _internal_mutable_server();
}
inline const std::string& LogoutRequest::_internal_server() const {
  return server_.Get();
}
inline void LogoutRequest::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoutRequest::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LogoutRequest.server)
}
inline void LogoutRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LogoutRequest.server)
}
inline void LogoutRequest::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LogoutRequest.server)
}
inline std::string* LogoutRequest::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoutRequest::release_server() {
  // @@protoc_insertion_point(field_release:images.LogoutRequest.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoutRequest::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LogoutRequest.server)
}
inline std::string* LogoutRequest::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LogoutRequest.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogoutRequest::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LogoutRequest.server)
}

// string type = 2;
inline void LogoutRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoutRequest::type() const {
  // @@protoc_insertion_point(field_get:images.LogoutRequest.type)
  return _internal_type();
}
inline void LogoutRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:images.LogoutRequest.type)
}
inline std::string* LogoutRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:images.LogoutRequest.type)
  return _internal_mutable_type();
}
inline const std::string& LogoutRequest::_internal_type() const {
  return type_.Get();
}
inline void LogoutRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoutRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LogoutRequest.type)
}
inline void LogoutRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LogoutRequest.type)
}
inline void LogoutRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LogoutRequest.type)
}
inline std::string* LogoutRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoutRequest::release_type() {
  // @@protoc_insertion_point(field_release:images.LogoutRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoutRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LogoutRequest.type)
}
inline std::string* LogoutRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LogoutRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogoutRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LogoutRequest.type)
}

// -------------------------------------------------------------------

// LogoutResponse

// uint32 cc = 1;
inline void LogoutResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogoutResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogoutResponse::cc() const {
  // @@protoc_insertion_point(field_get:images.LogoutResponse.cc)
  return _internal_cc();
}
inline void LogoutResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void LogoutResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:images.LogoutResponse.cc)
}

// string errmsg = 2;
inline void LogoutResponse::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoutResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:images.LogoutResponse.errmsg)
  return _internal_errmsg();
}
inline void LogoutResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:images.LogoutResponse.errmsg)
}
inline std::string* LogoutResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:images.LogoutResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& LogoutResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void LogoutResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoutResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:images.LogoutResponse.errmsg)
}
inline void LogoutResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:images.LogoutResponse.errmsg)
}
inline void LogoutResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:images.LogoutResponse.errmsg)
}
inline std::string* LogoutResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoutResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:images.LogoutResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoutResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:images.LogoutResponse.errmsg)
}
inline std::string* LogoutResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:images.LogoutResponse.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogoutResponse::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:images.LogoutResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace images

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_images_2eproto
