// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: images.proto
// Original file comments:
// #######################################################################
// ##- @Copyright (C) Huawei Technologies., Ltd. 2019-2020. All rights reserved.
// # - iSulad licensed under the Mulan PSL v2.
// # - You can use this software according to the terms and conditions of the Mulan PSL v2.
// # - You may obtain a copy of Mulan PSL v2 at:
// # -     http://license.coscl.org.cn/MulanPSL2
// # - THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
// # - IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
// # - PURPOSE.
// # - See the Mulan PSL v2 for more details.
// ##- @Description: generate grpc
// ##- @Author: lifeng
// ##- @Create: 2019-04-25
// #######################################################################
//
#ifndef GRPC_images_2eproto__INCLUDED
#define GRPC_images_2eproto__INCLUDED

#include "images.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace images {

class ImagesService final {
 public:
  static constexpr char const* service_full_name() {
    return "images.ImagesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::images::ListImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>> AsyncList(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::images::DeleteImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>> AsyncDelete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Load(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::images::LoadImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>> AsyncLoad(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>>(AsyncLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>> PrepareAsyncLoad(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>>(PrepareAsyncLoadRaw(context, request, cq));
    }
    virtual ::grpc::Status Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::images::InspectImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>> AsyncInspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>>(AsyncInspectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>> PrepareAsyncInspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>>(PrepareAsyncInspectRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::images::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::images::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status Tag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::images::TagImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>> AsyncTag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>>(AsyncTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>> PrepareAsyncTag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>>(PrepareAsyncTagRaw(context, request, cq));
    }
    virtual ::grpc::Status Import(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::images::ImportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>> AsyncImport(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>>(AsyncImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>> PrepareAsyncImport(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>>(PrepareAsyncImportRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::ListImagesResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::DeleteImageResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>* AsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LoadImageResponse>* PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>* AsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::InspectImageResponse>* PrepareAsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>* AsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::TagImageResponse>* PrepareAsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>* AsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::images::ImportResponse>* PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status List(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::images::ListImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>> AsyncList(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::images::DeleteImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>> AsyncDelete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Load(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::images::LoadImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>> AsyncLoad(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>>(AsyncLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>> PrepareAsyncLoad(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>>(PrepareAsyncLoadRaw(context, request, cq));
    }
    ::grpc::Status Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::images::InspectImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>> AsyncInspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>>(AsyncInspectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>> PrepareAsyncInspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>>(PrepareAsyncInspectRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::images::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::images::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status Tag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::images::TagImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>> AsyncTag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>>(AsyncTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>> PrepareAsyncTag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>>(PrepareAsyncTagRaw(context, request, cq));
    }
    ::grpc::Status Import(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::images::ImportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>> AsyncImport(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>>(AsyncImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>> PrepareAsyncImport(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>>(PrepareAsyncImportRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)>) override;
      void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)>) override;
      void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)>) override;
      void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)>) override;
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>* AsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>* PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>* AsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>* PrepareAsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>* AsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>* PrepareAsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>* AsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::images::ImportResponse>* PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Load_;
    const ::grpc::internal::RpcMethod rpcmethod_Inspect_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_Tag_;
    const ::grpc::internal::RpcMethod rpcmethod_Import_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response);
    virtual ::grpc::Status Load(::grpc::ServerContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response);
    virtual ::grpc::Status Inspect(::grpc::ServerContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response);
    virtual ::grpc::Status Tag(::grpc::ServerContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response);
    virtual ::grpc::Status Import(::grpc::ServerContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::images::ListImagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::ListImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::images::DeleteImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::DeleteImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Load() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad(::grpc::ServerContext* context, ::images::LoadImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::LoadImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Inspect() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInspect(::grpc::ServerContext* context, ::images::InspectImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::InspectImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::images::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::images::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tag() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTag(::grpc::ServerContext* context, ::images::TagImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::TagImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Import() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImport(::grpc::ServerContext* context, ::images::ImportRequest* request, ::grpc::ServerAsyncResponseWriter< ::images::ImportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_List<WithAsyncMethod_Delete<WithAsyncMethod_Load<WithAsyncMethod_Inspect<WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_Tag<WithAsyncMethod_Import<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::ListImagesRequest, ::images::ListImagesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::experimental::MessageAllocator< ::images::ListImagesRequest, ::images::ListImagesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::ListImagesRequest, ::images::ListImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::DeleteImageRequest, ::images::DeleteImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::images::DeleteImageRequest, ::images::DeleteImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::DeleteImageRequest, ::images::DeleteImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Load() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::LoadImageRequest, ::images::LoadImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response) { return this->Load(context, request, response); }));}
    void SetMessageAllocatorFor_Load(
        ::grpc::experimental::MessageAllocator< ::images::LoadImageRequest, ::images::LoadImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::LoadImageRequest, ::images::LoadImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Load(
      ::grpc::CallbackServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Load(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Inspect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::InspectImageRequest, ::images::InspectImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response) { return this->Inspect(context, request, response); }));}
    void SetMessageAllocatorFor_Inspect(
        ::grpc::experimental::MessageAllocator< ::images::InspectImageRequest, ::images::InspectImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::InspectImageRequest, ::images::InspectImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Inspect(
      ::grpc::CallbackServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Inspect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::LoginRequest, ::images::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::LoginRequest* request, ::images::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::images::LoginRequest, ::images::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::LoginRequest, ::images::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::LogoutRequest, ::images::LogoutResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::images::LogoutRequest, ::images::LogoutResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::LogoutRequest, ::images::LogoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::TagImageRequest, ::images::TagImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response) { return this->Tag(context, request, response); }));}
    void SetMessageAllocatorFor_Tag(
        ::grpc::experimental::MessageAllocator< ::images::TagImageRequest, ::images::TagImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::TagImageRequest, ::images::TagImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tag(
      ::grpc::CallbackServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Import() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::images::ImportRequest, ::images::ImportResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::images::ImportRequest* request, ::images::ImportResponse* response) { return this->Import(context, request, response); }));}
    void SetMessageAllocatorFor_Import(
        ::grpc::experimental::MessageAllocator< ::images::ImportRequest, ::images::ImportResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::images::ImportRequest, ::images::ImportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Import(
      ::grpc::CallbackServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Import(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Load<ExperimentalWithCallbackMethod_Inspect<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_Tag<ExperimentalWithCallbackMethod_Import<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Load<ExperimentalWithCallbackMethod_Inspect<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_Tag<ExperimentalWithCallbackMethod_Import<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Load() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Inspect() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tag() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Import() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Load() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Inspect() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInspect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tag() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Import() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Load() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Load(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Load(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Load(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Inspect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Inspect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Inspect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Inspect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Import() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Import(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Import(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Import(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::ListImagesRequest, ::images::ListImagesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::ListImagesRequest, ::images::ListImagesResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::images::ListImagesRequest* /*request*/, ::images::ListImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::ListImagesRequest,::images::ListImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::DeleteImageRequest, ::images::DeleteImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::DeleteImageRequest, ::images::DeleteImageResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::images::DeleteImageRequest* /*request*/, ::images::DeleteImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::DeleteImageRequest,::images::DeleteImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Load : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Load() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::LoadImageRequest, ::images::LoadImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::LoadImageRequest, ::images::LoadImageResponse>* streamer) {
                       return this->StreamedLoad(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Load() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Load(::grpc::ServerContext* /*context*/, const ::images::LoadImageRequest* /*request*/, ::images::LoadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoad(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::LoadImageRequest,::images::LoadImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Inspect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Inspect() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::InspectImageRequest, ::images::InspectImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::InspectImageRequest, ::images::InspectImageResponse>* streamer) {
                       return this->StreamedInspect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Inspect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Inspect(::grpc::ServerContext* /*context*/, const ::images::InspectImageRequest* /*request*/, ::images::InspectImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInspect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::InspectImageRequest,::images::InspectImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::LoginRequest, ::images::LoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::LoginRequest, ::images::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::images::LoginRequest* /*request*/, ::images::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::LoginRequest,::images::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::LogoutRequest, ::images::LogoutResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::LogoutRequest, ::images::LogoutResponse>* streamer) {
                       return this->StreamedLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::images::LogoutRequest* /*request*/, ::images::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::LogoutRequest,::images::LogoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tag() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::TagImageRequest, ::images::TagImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::TagImageRequest, ::images::TagImageResponse>* streamer) {
                       return this->StreamedTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tag(::grpc::ServerContext* /*context*/, const ::images::TagImageRequest* /*request*/, ::images::TagImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::TagImageRequest,::images::TagImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Import() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::images::ImportRequest, ::images::ImportResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::images::ImportRequest, ::images::ImportResponse>* streamer) {
                       return this->StreamedImport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::images::ImportRequest* /*request*/, ::images::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::images::ImportRequest,::images::ImportResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Load<WithStreamedUnaryMethod_Inspect<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Tag<WithStreamedUnaryMethod_Import<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Load<WithStreamedUnaryMethod_Inspect<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Tag<WithStreamedUnaryMethod_Import<Service > > > > > > > > StreamedService;
};

}  // namespace images


#endif  // GRPC_images_2eproto__INCLUDED
