// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: images.proto

#include "images.pb.h"
#include "images.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace images {

static const char* ImagesService_method_names[] = {
  "/images.ImagesService/List",
  "/images.ImagesService/Delete",
  "/images.ImagesService/Load",
  "/images.ImagesService/Inspect",
  "/images.ImagesService/Login",
  "/images.ImagesService/Logout",
  "/images.ImagesService/Tag",
  "/images.ImagesService/Import",
};

std::unique_ptr< ImagesService::Stub> ImagesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImagesService::Stub> stub(new ImagesService::Stub(channel));
  return stub;
}

ImagesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(ImagesService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(ImagesService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Load_(ImagesService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Inspect_(ImagesService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(ImagesService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(ImagesService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tag_(ImagesService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Import_(ImagesService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImagesService::Stub::List(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::images::ListImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void ImagesService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ListImagesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>* ImagesService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::ListImagesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::ListImagesResponse>* ImagesService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::images::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::ListImagesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status ImagesService::Stub::Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::images::DeleteImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void ImagesService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::DeleteImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>* ImagesService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::DeleteImageResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::DeleteImageResponse>* ImagesService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::images::DeleteImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::DeleteImageResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status ImagesService::Stub::Load(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::images::LoadImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Load_, context, request, response);
}

void ImagesService::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Load(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoadImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>* ImagesService::Stub::AsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LoadImageResponse>::Create(channel_.get(), cq, rpcmethod_Load_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::LoadImageResponse>* ImagesService::Stub::PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::images::LoadImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LoadImageResponse>::Create(channel_.get(), cq, rpcmethod_Load_, context, request, false);
}

::grpc::Status ImagesService::Stub::Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::images::InspectImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Inspect_, context, request, response);
}

void ImagesService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Inspect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::InspectImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>* ImagesService::Stub::AsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::InspectImageResponse>::Create(channel_.get(), cq, rpcmethod_Inspect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::InspectImageResponse>* ImagesService::Stub::PrepareAsyncInspectRaw(::grpc::ClientContext* context, const ::images::InspectImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::InspectImageResponse>::Create(channel_.get(), cq, rpcmethod_Inspect_, context, request, false);
}

::grpc::Status ImagesService::Stub::Login(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::images::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void ImagesService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::LoginResponse>* ImagesService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::LoginResponse>* ImagesService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::images::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status ImagesService::Stub::Logout(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::images::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void ImagesService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>* ImagesService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::LogoutResponse>* ImagesService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::images::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status ImagesService::Stub::Tag(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::images::TagImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tag_, context, request, response);
}

void ImagesService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::TagImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>* ImagesService::Stub::AsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::TagImageResponse>::Create(channel_.get(), cq, rpcmethod_Tag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::TagImageResponse>* ImagesService::Stub::PrepareAsyncTagRaw(::grpc::ClientContext* context, const ::images::TagImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::TagImageResponse>::Create(channel_.get(), cq, rpcmethod_Tag_, context, request, false);
}

::grpc::Status ImagesService::Stub::Import(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::images::ImportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Import_, context, request, response);
}

void ImagesService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, std::move(f));
}

void ImagesService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, reactor);
}

void ImagesService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::images::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::images::ImportResponse>* ImagesService::Stub::AsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::ImportResponse>::Create(channel_.get(), cq, rpcmethod_Import_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::images::ImportResponse>* ImagesService::Stub::PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::images::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::images::ImportResponse>::Create(channel_.get(), cq, rpcmethod_Import_, context, request, false);
}

ImagesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::ListImagesRequest, ::images::ListImagesResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::ListImagesRequest* req,
             ::images::ListImagesResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::DeleteImageRequest, ::images::DeleteImageResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::DeleteImageRequest* req,
             ::images::DeleteImageResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::LoadImageRequest, ::images::LoadImageResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::LoadImageRequest* req,
             ::images::LoadImageResponse* resp) {
               return service->Load(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::InspectImageRequest, ::images::InspectImageResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::InspectImageRequest* req,
             ::images::InspectImageResponse* resp) {
               return service->Inspect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::LoginRequest, ::images::LoginResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::LoginRequest* req,
             ::images::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::LogoutRequest, ::images::LogoutResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::LogoutRequest* req,
             ::images::LogoutResponse* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::TagImageRequest, ::images::TagImageResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::TagImageRequest* req,
             ::images::TagImageResponse* resp) {
               return service->Tag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImagesService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImagesService::Service, ::images::ImportRequest, ::images::ImportResponse>(
          [](ImagesService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::images::ImportRequest* req,
             ::images::ImportResponse* resp) {
               return service->Import(ctx, req, resp);
             }, this)));
}

ImagesService::Service::~Service() {
}

::grpc::Status ImagesService::Service::List(::grpc::ServerContext* context, const ::images::ListImagesRequest* request, ::images::ListImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Delete(::grpc::ServerContext* context, const ::images::DeleteImageRequest* request, ::images::DeleteImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Load(::grpc::ServerContext* context, const ::images::LoadImageRequest* request, ::images::LoadImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Inspect(::grpc::ServerContext* context, const ::images::InspectImageRequest* request, ::images::InspectImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Login(::grpc::ServerContext* context, const ::images::LoginRequest* request, ::images::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Logout(::grpc::ServerContext* context, const ::images::LogoutRequest* request, ::images::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Tag(::grpc::ServerContext* context, const ::images::TagImageRequest* request, ::images::TagImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImagesService::Service::Import(::grpc::ServerContext* context, const ::images::ImportRequest* request, ::images::ImportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace images

